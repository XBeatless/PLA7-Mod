
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

#pragma once
/// dependency: BasicType
/// dependency: AudioExtensions
/// dependency: AudioPlatformConfiguration
/// dependency: ClothingSystemRuntimeInterface
/// dependency: CoreUObject
/// dependency: InputCore
/// dependency: PacketHandler
/// dependency: PhysicsCore
/// dependency: Slate
/// dependency: SlateCore

/// Enum /Script/Engine.ETextGender
/// Size: 0x04
enum class ETextGender : uint8_t
{
	ETextGender__Masculine                                                           = 0,
	ETextGender__Feminine                                                            = 1,
	ETextGender__Neuter                                                              = 2,
	ETextGender__ETextGender_MAX                                                     = 3
};

/// Enum /Script/Engine.EFormatArgumentType
/// Size: 0x07
enum class EFormatArgumentType : uint8_t
{
	EFormatArgumentType__Int                                                         = 0,
	EFormatArgumentType__UInt                                                        = 1,
	EFormatArgumentType__Float                                                       = 2,
	EFormatArgumentType__Double                                                      = 3,
	EFormatArgumentType__Text                                                        = 4,
	EFormatArgumentType__Gender                                                      = 5,
	EFormatArgumentType__EFormatArgumentType_MAX                                     = 6
};

/// Enum /Script/Engine.EEndPlayReason
/// Size: 0x06
enum class EEndPlayReason : uint8_t
{
	EEndPlayReason__Destroyed                                                        = 0,
	EEndPlayReason__LevelTransition                                                  = 1,
	EEndPlayReason__EndPlayInEditor                                                  = 2,
	EEndPlayReason__RemovedFromWorld                                                 = 3,
	EEndPlayReason__Quit                                                             = 4,
	EEndPlayReason__EEndPlayReason_MAX                                               = 5
};

/// Enum /Script/Engine.ETickingGroup
/// Size: 0x09
enum class ETickingGroup : uint8_t
{
	TG_PrePhysics                                                                    = 0,
	TG_StartPhysics                                                                  = 1,
	TG_DuringPhysics                                                                 = 2,
	TG_EndPhysics                                                                    = 3,
	TG_PostPhysics                                                                   = 4,
	TG_PostUpdateWork                                                                = 5,
	TG_LastDemotable                                                                 = 6,
	TG_NewlySpawned                                                                  = 7,
	TG_MAX                                                                           = 8
};

/// Enum /Script/Engine.EComponentCreationMethod
/// Size: 0x05
enum class EComponentCreationMethod : uint8_t
{
	EComponentCreationMethod__Native                                                 = 0,
	EComponentCreationMethod__SimpleConstructionScript                               = 1,
	EComponentCreationMethod__UserConstructionScript                                 = 2,
	EComponentCreationMethod__Instance                                               = 3,
	EComponentCreationMethod__EComponentCreationMethod_MAX                           = 4
};

/// Enum /Script/Engine.ETemperatureSeverityType
/// Size: 0x07
enum class ETemperatureSeverityType : uint8_t
{
	ETemperatureSeverityType__Unknown                                                = 0,
	ETemperatureSeverityType__Good                                                   = 1,
	ETemperatureSeverityType__Bad                                                    = 2,
	ETemperatureSeverityType__Serious                                                = 3,
	ETemperatureSeverityType__Critical                                               = 4,
	ETemperatureSeverityType__NumSeverities                                          = 5,
	ETemperatureSeverityType__ETemperatureSeverityType_MAX                           = 6
};

/// Enum /Script/Engine.EPlaneConstraintAxisSetting
/// Size: 0x06
enum class EPlaneConstraintAxisSetting : uint8_t
{
	EPlaneConstraintAxisSetting__Custom                                              = 0,
	EPlaneConstraintAxisSetting__X                                                   = 1,
	EPlaneConstraintAxisSetting__Y                                                   = 2,
	EPlaneConstraintAxisSetting__Z                                                   = 3,
	EPlaneConstraintAxisSetting__UseGlobalPhysicsSetting                             = 4,
	EPlaneConstraintAxisSetting__EPlaneConstraintAxisSetting_MAX                     = 5
};

/// Enum /Script/Engine.EInterpToBehaviourType
/// Size: 0x05
enum class EInterpToBehaviourType : uint8_t
{
	EInterpToBehaviourType__OneShot                                                  = 0,
	EInterpToBehaviourType__OneShot_Reverse                                          = 1,
	EInterpToBehaviourType__Loop_Reset                                               = 2,
	EInterpToBehaviourType__PingPong                                                 = 3,
	EInterpToBehaviourType__EInterpToBehaviourType_MAX                               = 4
};

/// Enum /Script/Engine.ETeleportType
/// Size: 0x04
enum class ETeleportType : uint8_t
{
	ETeleportType__None                                                              = 0,
	ETeleportType__TeleportPhysics                                                   = 1,
	ETeleportType__ResetPhysics                                                      = 2,
	ETeleportType__ETeleportType_MAX                                                 = 3
};

/// Enum /Script/Engine.EPlatformInterfaceDataType
/// Size: 0x07
enum class EPlatformInterfaceDataType : uint8_t
{
	PIDT_None                                                                        = 0,
	PIDT_Int                                                                         = 1,
	PIDT_Float                                                                       = 2,
	PIDT_String                                                                      = 3,
	PIDT_Object                                                                      = 4,
	PIDT_Custom                                                                      = 5,
	PIDT_MAX                                                                         = 6
};

/// Enum /Script/Engine.EMovementMode
/// Size: 0x08
enum class EMovementMode : uint8_t
{
	MOVE_None                                                                        = 0,
	MOVE_Walking                                                                     = 1,
	MOVE_NavWalking                                                                  = 2,
	MOVE_Falling                                                                     = 3,
	MOVE_Swimming                                                                    = 4,
	MOVE_Flying                                                                      = 5,
	MOVE_Custom                                                                      = 6,
	MOVE_MAX                                                                         = 7
};

/// Enum /Script/Engine.ENetworkFailure
/// Size: 0x12
enum class ENetworkFailure : uint8_t
{
	ENetworkFailure__NetDriverAlreadyExists                                          = 0,
	ENetworkFailure__NetDriverCreateFailure                                          = 1,
	ENetworkFailure__NetDriverListenFailure                                          = 2,
	ENetworkFailure__ConnectionLost                                                  = 3,
	ENetworkFailure__ConnectionTimeout                                               = 4,
	ENetworkFailure__FailureReceived                                                 = 5,
	ENetworkFailure__OutdatedClient                                                  = 6,
	ENetworkFailure__OutdatedServer                                                  = 7,
	ENetworkFailure__PendingConnectionFailure                                        = 8,
	ENetworkFailure__NetGuidMismatch                                                 = 9,
	ENetworkFailure__NetChecksumMismatch                                             = 10,
	ENetworkFailure__ENetworkFailure_MAX                                             = 11
};

/// Enum /Script/Engine.ETravelFailure
/// Size: 0x13
enum class ETravelFailure : uint8_t
{
	ETravelFailure__NoLevel                                                          = 0,
	ETravelFailure__LoadMapFailure                                                   = 1,
	ETravelFailure__InvalidURL                                                       = 2,
	ETravelFailure__PackageMissing                                                   = 3,
	ETravelFailure__PackageVersion                                                   = 4,
	ETravelFailure__NoDownload                                                       = 5,
	ETravelFailure__TravelFailure                                                    = 6,
	ETravelFailure__CheatCommands                                                    = 7,
	ETravelFailure__PendingNetGameCreateFailure                                      = 8,
	ETravelFailure__CloudSaveFailure                                                 = 9,
	ETravelFailure__ServerTravelFailure                                              = 10,
	ETravelFailure__ClientTravelFailure                                              = 11,
	ETravelFailure__ETravelFailure_MAX                                               = 12
};

/// Enum /Script/Engine.EScreenOrientation
/// Size: 0x08
enum class EScreenOrientation : uint8_t
{
	EScreenOrientation__Unknown                                                      = 0,
	EScreenOrientation__Portrait                                                     = 1,
	EScreenOrientation__PortraitUpsideDown                                           = 2,
	EScreenOrientation__LandscapeLeft                                                = 3,
	EScreenOrientation__LandscapeRight                                               = 4,
	EScreenOrientation__FaceUp                                                       = 5,
	EScreenOrientation__FaceDown                                                     = 6,
	EScreenOrientation__EScreenOrientation_MAX                                       = 7
};

/// Enum /Script/Engine.EApplicationState
/// Size: 0x05
enum class EApplicationState : uint8_t
{
	EApplicationState__Unknown                                                       = 0,
	EApplicationState__Inactive                                                      = 1,
	EApplicationState__Background                                                    = 2,
	EApplicationState__Active                                                        = 3,
	EApplicationState__EApplicationState_MAX                                         = 4
};

/// Enum /Script/Engine.EObjectTypeQuery
/// Size: 0x34
enum class EObjectTypeQuery : uint8_t
{
	EObjectTypeQuery__ObjectTypeQuery1                                               = 0,
	EObjectTypeQuery__ObjectTypeQuery2                                               = 1,
	EObjectTypeQuery__ObjectTypeQuery3                                               = 2,
	EObjectTypeQuery__ObjectTypeQuery4                                               = 3,
	EObjectTypeQuery__ObjectTypeQuery5                                               = 4,
	EObjectTypeQuery__ObjectTypeQuery6                                               = 5,
	EObjectTypeQuery__ObjectTypeQuery7                                               = 6,
	EObjectTypeQuery__ObjectTypeQuery8                                               = 7,
	EObjectTypeQuery__ObjectTypeQuery9                                               = 8,
	EObjectTypeQuery__ObjectTypeQuery10                                              = 9,
	EObjectTypeQuery__ObjectTypeQuery11                                              = 10,
	EObjectTypeQuery__ObjectTypeQuery12                                              = 11,
	EObjectTypeQuery__ObjectTypeQuery13                                              = 12,
	EObjectTypeQuery__ObjectTypeQuery14                                              = 13,
	EObjectTypeQuery__ObjectTypeQuery15                                              = 14,
	EObjectTypeQuery__ObjectTypeQuery16                                              = 15,
	EObjectTypeQuery__ObjectTypeQuery17                                              = 16,
	EObjectTypeQuery__ObjectTypeQuery18                                              = 17,
	EObjectTypeQuery__ObjectTypeQuery19                                              = 18,
	EObjectTypeQuery__ObjectTypeQuery20                                              = 19,
	EObjectTypeQuery__ObjectTypeQuery21                                              = 20,
	EObjectTypeQuery__ObjectTypeQuery22                                              = 21,
	EObjectTypeQuery__ObjectTypeQuery23                                              = 22,
	EObjectTypeQuery__ObjectTypeQuery24                                              = 23,
	EObjectTypeQuery__ObjectTypeQuery25                                              = 24,
	EObjectTypeQuery__ObjectTypeQuery26                                              = 25,
	EObjectTypeQuery__ObjectTypeQuery27                                              = 26,
	EObjectTypeQuery__ObjectTypeQuery28                                              = 27,
	EObjectTypeQuery__ObjectTypeQuery29                                              = 28,
	EObjectTypeQuery__ObjectTypeQuery30                                              = 29,
	EObjectTypeQuery__ObjectTypeQuery31                                              = 30,
	EObjectTypeQuery__ObjectTypeQuery32                                              = 31,
	EObjectTypeQuery__ObjectTypeQuery_MAX                                            = 32,
	EObjectTypeQuery__EObjectTypeQuery_MAX                                           = 33
};

/// Enum /Script/Engine.EDrawDebugTrace
/// Size: 0x05
enum class EDrawDebugTrace : uint8_t
{
	EDrawDebugTrace__None                                                            = 0,
	EDrawDebugTrace__ForOneFrame                                                     = 1,
	EDrawDebugTrace__ForDuration                                                     = 2,
	EDrawDebugTrace__Persistent                                                      = 3,
	EDrawDebugTrace__EDrawDebugTrace_MAX                                             = 4
};

/// Enum /Script/Engine.ETraceTypeQuery
/// Size: 0x34
enum class ETraceTypeQuery : uint8_t
{
	ETraceTypeQuery__TraceTypeQuery1                                                 = 0,
	ETraceTypeQuery__TraceTypeQuery2                                                 = 1,
	ETraceTypeQuery__TraceTypeQuery3                                                 = 2,
	ETraceTypeQuery__TraceTypeQuery4                                                 = 3,
	ETraceTypeQuery__TraceTypeQuery5                                                 = 4,
	ETraceTypeQuery__TraceTypeQuery6                                                 = 5,
	ETraceTypeQuery__TraceTypeQuery7                                                 = 6,
	ETraceTypeQuery__TraceTypeQuery8                                                 = 7,
	ETraceTypeQuery__TraceTypeQuery9                                                 = 8,
	ETraceTypeQuery__TraceTypeQuery10                                                = 9,
	ETraceTypeQuery__TraceTypeQuery11                                                = 10,
	ETraceTypeQuery__TraceTypeQuery12                                                = 11,
	ETraceTypeQuery__TraceTypeQuery13                                                = 12,
	ETraceTypeQuery__TraceTypeQuery14                                                = 13,
	ETraceTypeQuery__TraceTypeQuery15                                                = 14,
	ETraceTypeQuery__TraceTypeQuery16                                                = 15,
	ETraceTypeQuery__TraceTypeQuery17                                                = 16,
	ETraceTypeQuery__TraceTypeQuery18                                                = 17,
	ETraceTypeQuery__TraceTypeQuery19                                                = 18,
	ETraceTypeQuery__TraceTypeQuery20                                                = 19,
	ETraceTypeQuery__TraceTypeQuery21                                                = 20,
	ETraceTypeQuery__TraceTypeQuery22                                                = 21,
	ETraceTypeQuery__TraceTypeQuery23                                                = 22,
	ETraceTypeQuery__TraceTypeQuery24                                                = 23,
	ETraceTypeQuery__TraceTypeQuery25                                                = 24,
	ETraceTypeQuery__TraceTypeQuery26                                                = 25,
	ETraceTypeQuery__TraceTypeQuery27                                                = 26,
	ETraceTypeQuery__TraceTypeQuery28                                                = 27,
	ETraceTypeQuery__TraceTypeQuery29                                                = 28,
	ETraceTypeQuery__TraceTypeQuery30                                                = 29,
	ETraceTypeQuery__TraceTypeQuery31                                                = 30,
	ETraceTypeQuery__TraceTypeQuery32                                                = 31,
	ETraceTypeQuery__TraceTypeQuery_MAX                                              = 32,
	ETraceTypeQuery__ETraceTypeQuery_MAX                                             = 33
};

/// Enum /Script/Engine.EMoveComponentAction
/// Size: 0x04
enum class EMoveComponentAction : uint8_t
{
	EMoveComponentAction__Move                                                       = 0,
	EMoveComponentAction__Stop                                                       = 1,
	EMoveComponentAction__Return                                                     = 2,
	EMoveComponentAction__EMoveComponentAction_MAX                                   = 3
};

/// Enum /Script/Engine.EQuitPreference
/// Size: 0x03
enum class EQuitPreference : uint8_t
{
	EQuitPreference__Quit                                                            = 0,
	EQuitPreference__Background                                                      = 1,
	EQuitPreference__EQuitPreference_MAX                                             = 2
};

/// Enum /Script/Engine.EFastArraySerializerDeltaFlags
/// Size: 0x05
enum class EFastArraySerializerDeltaFlags : uint8_t
{
	EFastArraySerializerDeltaFlags__None                                             = 0,
	EFastArraySerializerDeltaFlags__HasBeenSerialized                                = 1,
	EFastArraySerializerDeltaFlags__HasDeltaBeenRequested                            = 2,
	EFastArraySerializerDeltaFlags__IsUsingDeltaSerialization                        = 4,
	EFastArraySerializerDeltaFlags__EFastArraySerializerDeltaFlags_MAX               = 5
};

/// Enum /Script/Engine.ERelativeTransformSpace
/// Size: 0x05
enum class ERelativeTransformSpace : uint8_t
{
	RTS_World                                                                        = 0,
	RTS_Actor                                                                        = 1,
	RTS_Component                                                                    = 2,
	RTS_ParentBoneSpace                                                              = 3,
	RTS_MAX                                                                          = 4
};

/// Enum /Script/Engine.EAttachLocation
/// Size: 0x05
enum class EAttachLocation : uint8_t
{
	EAttachLocation__KeepRelativeOffset                                              = 0,
	EAttachLocation__KeepWorldPosition                                               = 1,
	EAttachLocation__SnapToTarget                                                    = 2,
	EAttachLocation__SnapToTargetIncludingScale                                      = 3,
	EAttachLocation__EAttachLocation_MAX                                             = 4
};

/// Enum /Script/Engine.EAttachmentRule
/// Size: 0x04
enum class EAttachmentRule : uint8_t
{
	EAttachmentRule__KeepRelative                                                    = 0,
	EAttachmentRule__KeepWorld                                                       = 1,
	EAttachmentRule__SnapToTarget                                                    = 2,
	EAttachmentRule__EAttachmentRule_MAX                                             = 3
};

/// Enum /Script/Engine.EDetachmentRule
/// Size: 0x03
enum class EDetachmentRule : uint8_t
{
	EDetachmentRule__KeepRelative                                                    = 0,
	EDetachmentRule__KeepWorld                                                       = 1,
	EDetachmentRule__EDetachmentRule_MAX                                             = 2
};

/// Enum /Script/Engine.EComponentMobility
/// Size: 0x04
enum class EComponentMobility : uint8_t
{
	EComponentMobility__Static                                                       = 0,
	EComponentMobility__Stationary                                                   = 1,
	EComponentMobility__Movable                                                      = 2,
	EComponentMobility__EComponentMobility_MAX                                       = 3
};

/// Enum /Script/Engine.EDetailMode
/// Size: 0x04
enum class EDetailMode : uint8_t
{
	DM_Low                                                                           = 0,
	DM_Medium                                                                        = 1,
	DM_High                                                                          = 2,
	DM_MAX                                                                           = 3
};

/// Enum /Script/Engine.ERichCurveExtrapolation
/// Size: 0x07
enum class ERichCurveExtrapolation : uint8_t
{
	RCCE_Cycle                                                                       = 0,
	RCCE_CycleWithOffset                                                             = 1,
	RCCE_Oscillate                                                                   = 2,
	RCCE_Linear                                                                      = 3,
	RCCE_Constant                                                                    = 4,
	RCCE_None                                                                        = 5,
	RCCE_MAX                                                                         = 6
};

/// Enum /Script/Engine.ERichCurveTangentWeightMode
/// Size: 0x05
enum class ERichCurveTangentWeightMode : uint8_t
{
	RCTWM_WeightedNone                                                               = 0,
	RCTWM_WeightedArrive                                                             = 1,
	RCTWM_WeightedLeave                                                              = 2,
	RCTWM_WeightedBoth                                                               = 3,
	RCTWM_MAX                                                                        = 4
};

/// Enum /Script/Engine.ERichCurveTangentMode
/// Size: 0x05
enum class ERichCurveTangentMode : uint8_t
{
	RCTM_Auto                                                                        = 0,
	RCTM_User                                                                        = 1,
	RCTM_Break                                                                       = 2,
	RCTM_None                                                                        = 3,
	RCTM_MAX                                                                         = 4
};

/// Enum /Script/Engine.ERichCurveInterpMode
/// Size: 0x05
enum class ERichCurveInterpMode : uint8_t
{
	RCIM_Linear                                                                      = 0,
	RCIM_Constant                                                                    = 1,
	RCIM_Cubic                                                                       = 2,
	RCIM_None                                                                        = 3,
	RCIM_MAX                                                                         = 4
};

/// Enum /Script/Engine.ENaturalSoundFalloffMode
/// Size: 0x04
enum class ENaturalSoundFalloffMode : uint8_t
{
	ENaturalSoundFalloffMode__Continues                                              = 0,
	ENaturalSoundFalloffMode__Silent                                                 = 1,
	ENaturalSoundFalloffMode__Hold                                                   = 2,
	ENaturalSoundFalloffMode__ENaturalSoundFalloffMode_MAX                           = 3
};

/// Enum /Script/Engine.EAttenuationShape
/// Size: 0x05
enum class EAttenuationShape : uint8_t
{
	EAttenuationShape__Sphere                                                        = 0,
	EAttenuationShape__Capsule                                                       = 1,
	EAttenuationShape__Box                                                           = 2,
	EAttenuationShape__Cone                                                          = 3,
	EAttenuationShape__EAttenuationShape_MAX                                         = 4
};

/// Enum /Script/Engine.EAttenuationDistanceModel
/// Size: 0x07
enum class EAttenuationDistanceModel : uint8_t
{
	EAttenuationDistanceModel__Linear                                                = 0,
	EAttenuationDistanceModel__Logarithmic                                           = 1,
	EAttenuationDistanceModel__Inverse                                               = 2,
	EAttenuationDistanceModel__LogReverse                                            = 3,
	EAttenuationDistanceModel__NaturalSound                                          = 4,
	EAttenuationDistanceModel__Custom                                                = 5,
	EAttenuationDistanceModel__EAttenuationDistanceModel_MAX                         = 6
};

/// Enum /Script/Engine.ESubmixSendMethod
/// Size: 0x04
enum class ESubmixSendMethod : uint8_t
{
	ESubmixSendMethod__Linear                                                        = 0,
	ESubmixSendMethod__CustomCurve                                                   = 1,
	ESubmixSendMethod__Manual                                                        = 2,
	ESubmixSendMethod__ESubmixSendMethod_MAX                                         = 3
};

/// Enum /Script/Engine.EPriorityAttenuationMethod
/// Size: 0x04
enum class EPriorityAttenuationMethod : uint8_t
{
	EPriorityAttenuationMethod__Linear                                               = 0,
	EPriorityAttenuationMethod__CustomCurve                                          = 1,
	EPriorityAttenuationMethod__Manual                                               = 2,
	EPriorityAttenuationMethod__EPriorityAttenuationMethod_MAX                       = 3
};

/// Enum /Script/Engine.EReverbSendMethod
/// Size: 0x04
enum class EReverbSendMethod : uint8_t
{
	EReverbSendMethod__Linear                                                        = 0,
	EReverbSendMethod__CustomCurve                                                   = 1,
	EReverbSendMethod__Manual                                                        = 2,
	EReverbSendMethod__EReverbSendMethod_MAX                                         = 3
};

/// Enum /Script/Engine.ECollisionChannel
/// Size: 0x34
enum class ECollisionChannel : uint8_t
{
	ECC_WorldStatic                                                                  = 0,
	ECC_WorldDynamic                                                                 = 1,
	ECC_Pawn                                                                         = 2,
	ECC_Visibility                                                                   = 3,
	ECC_Camera                                                                       = 4,
	ECC_PhysicsBody                                                                  = 5,
	ECC_Vehicle                                                                      = 6,
	ECC_Destructible                                                                 = 7,
	ECC_EngineTraceChannel1                                                          = 8,
	ECC_EngineTraceChannel2                                                          = 9,
	ECC_EngineTraceChannel3                                                          = 10,
	ECC_EngineTraceChannel4                                                          = 11,
	ECC_EngineTraceChannel5                                                          = 12,
	ECC_EngineTraceChannel6                                                          = 13,
	ECC_GameTraceChannel1                                                            = 14,
	ECC_GameTraceChannel2                                                            = 15,
	ECC_GameTraceChannel3                                                            = 16,
	ECC_GameTraceChannel4                                                            = 17,
	ECC_GameTraceChannel5                                                            = 18,
	ECC_GameTraceChannel6                                                            = 19,
	ECC_GameTraceChannel7                                                            = 20,
	ECC_GameTraceChannel8                                                            = 21,
	ECC_GameTraceChannel9                                                            = 22,
	ECC_GameTraceChannel10                                                           = 23,
	ECC_GameTraceChannel11                                                           = 24,
	ECC_GameTraceChannel12                                                           = 25,
	ECC_GameTraceChannel13                                                           = 26,
	ECC_GameTraceChannel14                                                           = 27,
	ECC_GameTraceChannel15                                                           = 28,
	ECC_GameTraceChannel16                                                           = 29,
	ECC_GameTraceChannel17                                                           = 30,
	ECC_GameTraceChannel18                                                           = 31,
	ECC_OverlapAll_Deprecated                                                        = 32,
	ECC_MAX                                                                          = 33
};

/// Enum /Script/Engine.EAirAbsorptionMethod
/// Size: 0x03
enum class EAirAbsorptionMethod : uint8_t
{
	EAirAbsorptionMethod__Linear                                                     = 0,
	EAirAbsorptionMethod__CustomCurve                                                = 1,
	EAirAbsorptionMethod__EAirAbsorptionMethod_MAX                                   = 2
};

/// Enum /Script/Engine.ESoundSpatializationAlgorithm
/// Size: 0x03
enum class ESoundSpatializationAlgorithm : uint8_t
{
	SPATIALIZATION_Default                                                           = 0,
	SPATIALIZATION_HRTF                                                              = 1,
	SPATIALIZATION_MAX                                                               = 2
};

/// Enum /Script/Engine.TextureGroup
/// Size: 0x50
enum class TextureGroup : uint8_t
{
	TEXTUREGROUP_World                                                               = 0,
	TEXTUREGROUP_WorldNormalMap                                                      = 1,
	TEXTUREGROUP_WorldSpecular                                                       = 2,
	TEXTUREGROUP_Character                                                           = 3,
	TEXTUREGROUP_CharacterNormalMap                                                  = 4,
	TEXTUREGROUP_CharacterSpecular                                                   = 5,
	TEXTUREGROUP_Weapon                                                              = 6,
	TEXTUREGROUP_WeaponNormalMap                                                     = 7,
	TEXTUREGROUP_WeaponSpecular                                                      = 8,
	TEXTUREGROUP_Vehicle                                                             = 9,
	TEXTUREGROUP_VehicleNormalMap                                                    = 10,
	TEXTUREGROUP_VehicleSpecular                                                     = 11,
	TEXTUREGROUP_Cinematic                                                           = 12,
	TEXTUREGROUP_Effects                                                             = 13,
	TEXTUREGROUP_EffectsNotFiltered                                                  = 14,
	TEXTUREGROUP_Skybox                                                              = 15,
	TEXTUREGROUP_UI                                                                  = 16,
	TEXTUREGROUP_Lightmap                                                            = 17,
	TEXTUREGROUP_RenderTarget                                                        = 18,
	TEXTUREGROUP_MobileFlattened                                                     = 19,
	TEXTUREGROUP_ProcBuilding_Face                                                   = 20,
	TEXTUREGROUP_ProcBuilding_LightMap                                               = 21,
	TEXTUREGROUP_Shadowmap                                                           = 22,
	TEXTUREGROUP_ColorLookupTable                                                    = 23,
	TEXTUREGROUP_Terrain_Heightmap                                                   = 24,
	TEXTUREGROUP_Terrain_Weightmap                                                   = 25,
	TEXTUREGROUP_Bokeh                                                               = 26,
	TEXTUREGROUP_IESLightProfile                                                     = 27,
	TEXTUREGROUP_Pixels2D                                                            = 28,
	TEXTUREGROUP_HierarchicalLOD                                                     = 29,
	TEXTUREGROUP_Impostor                                                            = 30,
	TEXTUREGROUP_ImpostorNormalDepth                                                 = 31,
	TEXTUREGROUP_8BitData                                                            = 32,
	TEXTUREGROUP_16BitData                                                           = 33,
	TEXTUREGROUP_Project01                                                           = 34,
	TEXTUREGROUP_Project02                                                           = 35,
	TEXTUREGROUP_Project03                                                           = 36,
	TEXTUREGROUP_Project04                                                           = 37,
	TEXTUREGROUP_Project05                                                           = 38,
	TEXTUREGROUP_Project06                                                           = 39,
	TEXTUREGROUP_Project07                                                           = 40,
	TEXTUREGROUP_Project08                                                           = 41,
	TEXTUREGROUP_Project09                                                           = 42,
	TEXTUREGROUP_Project10                                                           = 43,
	TEXTUREGROUP_Project11                                                           = 44,
	TEXTUREGROUP_Project12                                                           = 45,
	TEXTUREGROUP_Project13                                                           = 46,
	TEXTUREGROUP_Project14                                                           = 47,
	TEXTUREGROUP_Project15                                                           = 48,
	TEXTUREGROUP_MAX                                                                 = 49
};

/// Enum /Script/Engine.ETextureMipLoadOptions
/// Size: 0x04
enum class ETextureMipLoadOptions : uint8_t
{
	ETextureMipLoadOptions__Default                                                  = 0,
	ETextureMipLoadOptions__AllMips                                                  = 1,
	ETextureMipLoadOptions__OnlyFirstMip                                             = 2,
	ETextureMipLoadOptions__ETextureMipLoadOptions_MAX                               = 3
};

/// Enum /Script/Engine.TextureFilter
/// Size: 0x05
enum class TextureFilter : uint8_t
{
	TF_Nearest                                                                       = 0,
	TF_Bilinear                                                                      = 1,
	TF_Trilinear                                                                     = 2,
	TF_Default                                                                       = 3,
	TF_MAX                                                                           = 4
};

/// Enum /Script/Engine.TextureCompressionSettings
/// Size: 0x13
enum class TextureCompressionSettings : uint8_t
{
	TC_Default                                                                       = 0,
	TC_Normalmap                                                                     = 1,
	TC_Masks                                                                         = 2,
	TC_Grayscale                                                                     = 3,
	TC_Displacementmap                                                               = 4,
	TC_VectorDisplacementmap                                                         = 5,
	TC_HDR                                                                           = 6,
	TC_EditorIcon                                                                    = 7,
	TC_Alpha                                                                         = 8,
	TC_DistanceFieldFont                                                             = 9,
	TC_HDR_Compressed                                                                = 10,
	TC_BC7                                                                           = 11,
	TC_MAX                                                                           = 12
};

/// Enum /Script/Engine.TextureAddress
/// Size: 0x04
enum class TextureAddress : uint8_t
{
	TA_Wrap                                                                          = 0,
	TA_Clamp                                                                         = 1,
	TA_Mirror                                                                        = 2,
	TA_MAX                                                                           = 3
};

/// Enum /Script/Engine.EInputEvent
/// Size: 0x06
enum class EInputEvent : uint8_t
{
	IE_Pressed                                                                       = 0,
	IE_Released                                                                      = 1,
	IE_Repeat                                                                        = 2,
	IE_DoubleClick                                                                   = 3,
	IE_Axis                                                                          = 4,
	IE_MAX                                                                           = 5
};

/// Enum /Script/Engine.EMouseLockMode
/// Size: 0x05
enum class EMouseLockMode : uint8_t
{
	EMouseLockMode__DoNotLock                                                        = 0,
	EMouseLockMode__LockOnCapture                                                    = 1,
	EMouseLockMode__LockAlways                                                       = 2,
	EMouseLockMode__LockInFullscreen                                                 = 3,
	EMouseLockMode__EMouseLockMode_MAX                                               = 4
};

/// Enum /Script/Engine.EWindowTitleBarMode
/// Size: 0x03
enum class EWindowTitleBarMode : uint8_t
{
	EWindowTitleBarMode__Overlay                                                     = 0,
	EWindowTitleBarMode__VerticalBox                                                 = 1,
	EWindowTitleBarMode__EWindowTitleBarMode_MAX                                     = 2
};

/// Enum /Script/Engine.EActorUpdateOverlapsMethod
/// Size: 0x05
enum class EActorUpdateOverlapsMethod : uint8_t
{
	EActorUpdateOverlapsMethod__UseConfigDefault                                     = 0,
	EActorUpdateOverlapsMethod__AlwaysUpdate                                         = 1,
	EActorUpdateOverlapsMethod__OnlyUpdateMovable                                    = 2,
	EActorUpdateOverlapsMethod__NeverUpdate                                          = 3,
	EActorUpdateOverlapsMethod__EActorUpdateOverlapsMethod_MAX                       = 4
};

/// Enum /Script/Engine.EAlphaBlendOption
/// Size: 0x16
enum class EAlphaBlendOption : uint8_t
{
	EAlphaBlendOption__Linear                                                        = 0,
	EAlphaBlendOption__Cubic                                                         = 1,
	EAlphaBlendOption__HermiteCubic                                                  = 2,
	EAlphaBlendOption__Sinusoidal                                                    = 3,
	EAlphaBlendOption__QuadraticInOut                                                = 4,
	EAlphaBlendOption__CubicInOut                                                    = 5,
	EAlphaBlendOption__QuarticInOut                                                  = 6,
	EAlphaBlendOption__QuinticInOut                                                  = 7,
	EAlphaBlendOption__CircularIn                                                    = 8,
	EAlphaBlendOption__CircularOut                                                   = 9,
	EAlphaBlendOption__CircularInOut                                                 = 10,
	EAlphaBlendOption__ExpIn                                                         = 11,
	EAlphaBlendOption__ExpOut                                                        = 12,
	EAlphaBlendOption__ExpInOut                                                      = 13,
	EAlphaBlendOption__Custom                                                        = 14,
	EAlphaBlendOption__EAlphaBlendOption_MAX                                         = 15
};

/// Enum /Script/Engine.EAnimGroupRole
/// Size: 0x06
enum class EAnimGroupRole : uint8_t
{
	EAnimGroupRole__CanBeLeader                                                      = 0,
	EAnimGroupRole__AlwaysFollower                                                   = 1,
	EAnimGroupRole__AlwaysLeader                                                     = 2,
	EAnimGroupRole__TransitionLeader                                                 = 3,
	EAnimGroupRole__TransitionFollower                                               = 4,
	EAnimGroupRole__EAnimGroupRole_MAX                                               = 5
};

/// Enum /Script/Engine.EPreviewAnimationBlueprintApplicationMethod
/// Size: 0x03
enum class EPreviewAnimationBlueprintApplicationMethod : uint8_t
{
	EPreviewAnimationBlueprintApplicationMethod__LinkedLayers                        = 0,
	EPreviewAnimationBlueprintApplicationMethod__LinkedAnimGraph                     = 1,
	EPreviewAnimationBlueprintApplicationMethod__EPreviewAnimationBlueprintApplicationMethod_MAX = 2
};

/// Enum /Script/Engine.AnimationKeyFormat
/// Size: 0x04
enum class AnimationKeyFormat : uint8_t
{
	AKF_ConstantKeyLerp                                                              = 0,
	AKF_VariableKeyLerp                                                              = 1,
	AKF_PerTrackCompression                                                          = 2,
	AKF_MAX                                                                          = 3
};

/// Enum /Script/Engine.ERawCurveTrackTypes
/// Size: 0x04
enum class ERawCurveTrackTypes : uint8_t
{
	ERawCurveTrackTypes__RCT_Float                                                   = 0,
	ERawCurveTrackTypes__RCT_Vector                                                  = 1,
	ERawCurveTrackTypes__RCT_Transform                                               = 2,
	ERawCurveTrackTypes__RCT_MAX                                                     = 3
};

/// Enum /Script/Engine.EAnimAssetCurveFlags
/// Size: 0x09
enum class EAnimAssetCurveFlags : uint8_t
{
	AACF_NONE                                                                        = 0,
	AACF_DriveMorphTarget_DEPRECATED                                                 = 1,
	AACF_DriveAttribute_DEPRECATED                                                   = 2,
	AACF_Editable                                                                    = 4,
	AACF_DriveMaterial_DEPRECATED                                                    = 8,
	AACF_Metadata                                                                    = 16,
	AACF_DriveTrack                                                                  = 32,
	AACF_Disabled                                                                    = 64,
	AACF_MAX                                                                         = 65
};

/// Enum /Script/Engine.AnimationCompressionFormat
/// Size: 0x08
enum class AnimationCompressionFormat : uint8_t
{
	ACF_None                                                                         = 0,
	ACF_Float96NoW                                                                   = 1,
	ACF_Fixed48NoW                                                                   = 2,
	ACF_IntervalFixed32NoW                                                           = 3,
	ACF_Fixed32NoW                                                                   = 4,
	ACF_Float32NoW                                                                   = 5,
	ACF_Identity                                                                     = 6,
	ACF_MAX                                                                          = 7
};

/// Enum /Script/Engine.EAdditiveBasePoseType
/// Size: 0x05
enum class EAdditiveBasePoseType : uint8_t
{
	ABPT_None                                                                        = 0,
	ABPT_RefPose                                                                     = 1,
	ABPT_AnimScaled                                                                  = 2,
	ABPT_AnimFrame                                                                   = 3,
	ABPT_MAX                                                                         = 4
};

/// Enum /Script/Engine.ERootMotionMode
/// Size: 0x05
enum class ERootMotionMode : uint8_t
{
	ERootMotionMode__NoRootMotionExtraction                                          = 0,
	ERootMotionMode__IgnoreRootMotion                                                = 1,
	ERootMotionMode__RootMotionFromEverything                                        = 2,
	ERootMotionMode__RootMotionFromMontagesOnly                                      = 3,
	ERootMotionMode__ERootMotionMode_MAX                                             = 4
};

/// Enum /Script/Engine.ERootMotionRootLock
/// Size: 0x04
enum class ERootMotionRootLock : uint8_t
{
	ERootMotionRootLock__RefPose                                                     = 0,
	ERootMotionRootLock__AnimFirstFrame                                              = 1,
	ERootMotionRootLock__Zero                                                        = 2,
	ERootMotionRootLock__ERootMotionRootLock_MAX                                     = 3
};

/// Enum /Script/Engine.EMontagePlayReturnType
/// Size: 0x03
enum class EMontagePlayReturnType : uint8_t
{
	EMontagePlayReturnType__MontageLength                                            = 0,
	EMontagePlayReturnType__Duration                                                 = 1,
	EMontagePlayReturnType__EMontagePlayReturnType_MAX                               = 2
};

/// Enum /Script/Engine.EDrawDebugItemType
/// Size: 0x06
enum class EDrawDebugItemType : uint8_t
{
	EDrawDebugItemType__DirectionalArrow                                             = 0,
	EDrawDebugItemType__Sphere                                                       = 1,
	EDrawDebugItemType__Line                                                         = 2,
	EDrawDebugItemType__OnScreenMessage                                              = 3,
	EDrawDebugItemType__CoordinateSystem                                             = 4,
	EDrawDebugItemType__EDrawDebugItemType_MAX                                       = 5
};

/// Enum /Script/Engine.EAnimLinkMethod
/// Size: 0x04
enum class EAnimLinkMethod : uint8_t
{
	EAnimLinkMethod__Absolute                                                        = 0,
	EAnimLinkMethod__Relative                                                        = 1,
	EAnimLinkMethod__Proportional                                                    = 2,
	EAnimLinkMethod__EAnimLinkMethod_MAX                                             = 3
};

/// Enum /Script/Engine.EMontageSubStepResult
/// Size: 0x05
enum class EMontageSubStepResult : uint8_t
{
	EMontageSubStepResult__Moved                                                     = 0,
	EMontageSubStepResult__NotMoved                                                  = 1,
	EMontageSubStepResult__InvalidSection                                            = 2,
	EMontageSubStepResult__InvalidMontage                                            = 3,
	EMontageSubStepResult__EMontageSubStepResult_MAX                                 = 4
};

/// Enum /Script/Engine.EAnimNotifyEventType
/// Size: 0x03
enum class EAnimNotifyEventType : uint8_t
{
	EAnimNotifyEventType__Begin                                                      = 0,
	EAnimNotifyEventType__End                                                        = 1,
	EAnimNotifyEventType__EAnimNotifyEventType_MAX                                   = 2
};

/// Enum /Script/Engine.EInertializationSpace
/// Size: 0x04
enum class EInertializationSpace : uint8_t
{
	EInertializationSpace__Default                                                   = 0,
	EInertializationSpace__WorldSpace                                                = 1,
	EInertializationSpace__WorldRotation                                             = 2,
	EInertializationSpace__EInertializationSpace_MAX                                 = 3
};

/// Enum /Script/Engine.EInertializationBoneState
/// Size: 0x04
enum class EInertializationBoneState : uint8_t
{
	EInertializationBoneState__Invalid                                               = 0,
	EInertializationBoneState__Valid                                                 = 1,
	EInertializationBoneState__Excluded                                              = 2,
	EInertializationBoneState__EInertializationBoneState_MAX                         = 3
};

/// Enum /Script/Engine.EInertializationState
/// Size: 0x04
enum class EInertializationState : uint8_t
{
	EInertializationState__Inactive                                                  = 0,
	EInertializationState__Pending                                                   = 1,
	EInertializationState__Active                                                    = 2,
	EInertializationState__EInertializationState_MAX                                 = 3
};

/// Enum /Script/Engine.EEvaluatorMode
/// Size: 0x04
enum class EEvaluatorMode : uint8_t
{
	EEvaluatorMode__EM_Standard                                                      = 0,
	EEvaluatorMode__EM_Freeze                                                        = 1,
	EEvaluatorMode__EM_DelayedFreeze                                                 = 2,
	EEvaluatorMode__EM_MAX                                                           = 3
};

/// Enum /Script/Engine.EEvaluatorDataSource
/// Size: 0x03
enum class EEvaluatorDataSource : uint8_t
{
	EEvaluatorDataSource__EDS_SourcePose                                             = 0,
	EEvaluatorDataSource__EDS_DestinationPose                                        = 1,
	EEvaluatorDataSource__EDS_MAX                                                    = 2
};

/// Enum /Script/Engine.ECopyType
/// Size: 0x06
enum class ECopyType : uint8_t
{
	ECopyType__PlainProperty                                                         = 0,
	ECopyType__BoolProperty                                                          = 1,
	ECopyType__StructProperty                                                        = 2,
	ECopyType__ObjectProperty                                                        = 3,
	ECopyType__NameProperty                                                          = 4,
	ECopyType__ECopyType_MAX                                                         = 5
};

/// Enum /Script/Engine.EPostCopyOperation
/// Size: 0x03
enum class EPostCopyOperation : uint8_t
{
	EPostCopyOperation__None                                                         = 0,
	EPostCopyOperation__LogicalNegateBool                                            = 1,
	EPostCopyOperation__EPostCopyOperation_MAX                                       = 2
};

/// Enum /Script/Engine.EPinHidingMode
/// Size: 0x05
enum class EPinHidingMode : uint8_t
{
	EPinHidingMode__NeverAsPin                                                       = 0,
	EPinHidingMode__PinHiddenByDefault                                               = 1,
	EPinHidingMode__PinShownByDefault                                                = 2,
	EPinHidingMode__AlwaysAsPin                                                      = 3,
	EPinHidingMode__EPinHidingMode_MAX                                               = 4
};

/// Enum /Script/Engine.AnimPhysCollisionType
/// Size: 0x05
enum class AnimPhysCollisionType : uint8_t
{
	AnimPhysCollisionType__CoM                                                       = 0,
	AnimPhysCollisionType__CustomSphere                                              = 1,
	AnimPhysCollisionType__InnerSphere                                               = 2,
	AnimPhysCollisionType__OuterSphere                                               = 3,
	AnimPhysCollisionType__AnimPhysCollisionType_MAX                                 = 4
};

/// Enum /Script/Engine.AnimPhysTwistAxis
/// Size: 0x04
enum class AnimPhysTwistAxis : uint8_t
{
	AnimPhysTwistAxis__AxisX                                                         = 0,
	AnimPhysTwistAxis__AxisY                                                         = 1,
	AnimPhysTwistAxis__AxisZ                                                         = 2,
	AnimPhysTwistAxis__AnimPhysTwistAxis_MAX                                         = 3
};

/// Enum /Script/Engine.ETypeAdvanceAnim
/// Size: 0x04
enum class ETypeAdvanceAnim : uint8_t
{
	ETAA_Default                                                                     = 0,
	ETAA_Finished                                                                    = 1,
	ETAA_Looped                                                                      = 2,
	ETAA_MAX                                                                         = 3
};

/// Enum /Script/Engine.ETransitionLogicType
/// Size: 0x04
enum class ETransitionLogicType : uint8_t
{
	ETransitionLogicType__TLT_StandardBlend                                          = 0,
	ETransitionLogicType__TLT_Inertialization                                        = 1,
	ETransitionLogicType__TLT_Custom                                                 = 2,
	ETransitionLogicType__TLT_MAX                                                    = 3
};

/// Enum /Script/Engine.ETransitionBlendMode
/// Size: 0x03
enum class ETransitionBlendMode : uint8_t
{
	ETransitionBlendMode__TBM_Linear                                                 = 0,
	ETransitionBlendMode__TBM_Cubic                                                  = 1,
	ETransitionBlendMode__TBM_MAX                                                    = 2
};

/// Enum /Script/Engine.EComponentType
/// Size: 0x12
enum class EComponentType : uint8_t
{
	EComponentType__None                                                             = 0,
	EComponentType__TranslationX                                                     = 1,
	EComponentType__TranslationY                                                     = 2,
	EComponentType__TranslationZ                                                     = 3,
	EComponentType__RotationX                                                        = 4,
	EComponentType__RotationY                                                        = 5,
	EComponentType__RotationZ                                                        = 6,
	EComponentType__Scale                                                            = 7,
	EComponentType__ScaleX                                                           = 8,
	EComponentType__ScaleY                                                           = 9,
	EComponentType__ScaleZ                                                           = 10,
	EComponentType__EComponentType_MAX                                               = 11
};

/// Enum /Script/Engine.EAxisOption
/// Size: 0x08
enum class EAxisOption : uint8_t
{
	EAxisOption__X                                                                   = 0,
	EAxisOption__Y                                                                   = 1,
	EAxisOption__Z                                                                   = 2,
	EAxisOption__X_Neg                                                               = 3,
	EAxisOption__Y_Neg                                                               = 4,
	EAxisOption__Z_Neg                                                               = 5,
	EAxisOption__Custom                                                              = 6,
	EAxisOption__EAxisOption_MAX                                                     = 7
};

/// Enum /Script/Engine.EAnimInterpolationType
/// Size: 0x03
enum class EAnimInterpolationType : uint8_t
{
	EAnimInterpolationType__Linear                                                   = 0,
	EAnimInterpolationType__Step                                                     = 1,
	EAnimInterpolationType__EAnimInterpolationType_MAX                               = 2
};

/// Enum /Script/Engine.ECurveBlendOption
/// Size: 0x08
enum class ECurveBlendOption : uint8_t
{
	ECurveBlendOption__Override                                                      = 0,
	ECurveBlendOption__DoNotOverride                                                 = 1,
	ECurveBlendOption__NormalizeByWeight                                             = 2,
	ECurveBlendOption__BlendByWeight                                                 = 3,
	ECurveBlendOption__UseBasePose                                                   = 4,
	ECurveBlendOption__UseMaxValue                                                   = 5,
	ECurveBlendOption__UseMinValue                                                   = 6,
	ECurveBlendOption__ECurveBlendOption_MAX                                         = 7
};

/// Enum /Script/Engine.EAdditiveAnimationType
/// Size: 0x04
enum class EAdditiveAnimationType : uint8_t
{
	AAT_None                                                                         = 0,
	AAT_LocalSpaceBase                                                               = 1,
	AAT_RotationOffsetMeshSpace                                                      = 2,
	AAT_MAX                                                                          = 3
};

/// Enum /Script/Engine.ENotifyFilterType
/// Size: 0x03
enum class ENotifyFilterType : uint8_t
{
	ENotifyFilterType__NoFiltering                                                   = 0,
	ENotifyFilterType__LOD                                                           = 1,
	ENotifyFilterType__ENotifyFilterType_MAX                                         = 2
};

/// Enum /Script/Engine.EMontageNotifyTickType
/// Size: 0x03
enum class EMontageNotifyTickType : uint8_t
{
	EMontageNotifyTickType__Queued                                                   = 0,
	EMontageNotifyTickType__BranchingPoint                                           = 1,
	EMontageNotifyTickType__EMontageNotifyTickType_MAX                               = 2
};

/// Enum /Script/Engine.EBoneRotationSource
/// Size: 0x04
enum class EBoneRotationSource : uint8_t
{
	BRS_KeepComponentSpaceRotation                                                   = 0,
	BRS_KeepLocalSpaceRotation                                                       = 1,
	BRS_CopyFromTarget                                                               = 2,
	BRS_MAX                                                                          = 3
};

/// Enum /Script/Engine.EBoneControlSpace
/// Size: 0x05
enum class EBoneControlSpace : uint8_t
{
	BCS_WorldSpace                                                                   = 0,
	BCS_ComponentSpace                                                               = 1,
	BCS_ParentBoneSpace                                                              = 2,
	BCS_BoneSpace                                                                    = 3,
	BCS_MAX                                                                          = 4
};

/// Enum /Script/Engine.EBoneAxis
/// Size: 0x04
enum class EBoneAxis : uint8_t
{
	BA_X                                                                             = 0,
	BA_Y                                                                             = 1,
	BA_Z                                                                             = 2,
	BA_MAX                                                                           = 3
};

/// Enum /Script/Engine.EPrimaryAssetCookRule
/// Size: 0x06
enum class EPrimaryAssetCookRule : uint8_t
{
	EPrimaryAssetCookRule__Unknown                                                   = 0,
	EPrimaryAssetCookRule__NeverCook                                                 = 1,
	EPrimaryAssetCookRule__DevelopmentCook                                           = 2,
	EPrimaryAssetCookRule__DevelopmentAlwaysCook                                     = 3,
	EPrimaryAssetCookRule__AlwaysCook                                                = 4,
	EPrimaryAssetCookRule__EPrimaryAssetCookRule_MAX                                 = 5
};

/// Enum /Script/Engine.EAudioFaderCurve
/// Size: 0x06
enum class EAudioFaderCurve : uint8_t
{
	EAudioFaderCurve__Linear                                                         = 0,
	EAudioFaderCurve__Logarithmic                                                    = 1,
	EAudioFaderCurve__SCurve                                                         = 2,
	EAudioFaderCurve__Sin                                                            = 3,
	EAudioFaderCurve__Count                                                          = 4,
	EAudioFaderCurve__EAudioFaderCurve_MAX                                           = 5
};

/// Enum /Script/Engine.EAudioComponentPlayState
/// Size: 0x07
enum class EAudioComponentPlayState : uint8_t
{
	EAudioComponentPlayState__Playing                                                = 0,
	EAudioComponentPlayState__Stopped                                                = 1,
	EAudioComponentPlayState__Paused                                                 = 2,
	EAudioComponentPlayState__FadingIn                                               = 3,
	EAudioComponentPlayState__FadingOut                                              = 4,
	EAudioComponentPlayState__Count                                                  = 5,
	EAudioComponentPlayState__EAudioComponentPlayState_MAX                           = 6
};

/// Enum /Script/Engine.EAudioOutputTarget
/// Size: 0x04
enum class EAudioOutputTarget : uint8_t
{
	EAudioOutputTarget__Speaker                                                      = 0,
	EAudioOutputTarget__Controller                                                   = 1,
	EAudioOutputTarget__ControllerFallbackToSpeaker                                  = 2,
	EAudioOutputTarget__EAudioOutputTarget_MAX                                       = 3
};

/// Enum /Script/Engine.EMonoChannelUpmixMethod
/// Size: 0x04
enum class EMonoChannelUpmixMethod : uint8_t
{
	EMonoChannelUpmixMethod__Linear                                                  = 0,
	EMonoChannelUpmixMethod__EqualPower                                              = 1,
	EMonoChannelUpmixMethod__FullVolume                                              = 2,
	EMonoChannelUpmixMethod__EMonoChannelUpmixMethod_MAX                             = 3
};

/// Enum /Script/Engine.EPanningMethod
/// Size: 0x03
enum class EPanningMethod : uint8_t
{
	EPanningMethod__Linear                                                           = 0,
	EPanningMethod__EqualPower                                                       = 1,
	EPanningMethod__EPanningMethod_MAX                                               = 2
};

/// Enum /Script/Engine.EVoiceSampleRate
/// Size: 0x03
enum class EVoiceSampleRate : uint32_t
{
	EVoiceSampleRate__Low16000Hz                                                     = 16000,
	EVoiceSampleRate__Normal24000Hz                                                  = 24000,
	EVoiceSampleRate__EVoiceSampleRate_MAX                                           = 24001
};

/// Enum /Script/Engine.EBlendableLocation
/// Size: 0x06
enum class EBlendableLocation : uint8_t
{
	BL_AfterTonemapping                                                              = 0,
	BL_BeforeTonemapping                                                             = 1,
	BL_BeforeTranslucency                                                            = 2,
	BL_ReplacingTonemapper                                                           = 3,
	BL_SSRInput                                                                      = 4,
	BL_MAX                                                                           = 5
};

/// Enum /Script/Engine.ENotifyTriggerMode
/// Size: 0x04
enum class ENotifyTriggerMode : uint8_t
{
	ENotifyTriggerMode__AllAnimations                                                = 0,
	ENotifyTriggerMode__HighestWeightedAnimation                                     = 1,
	ENotifyTriggerMode__None                                                         = 2,
	ENotifyTriggerMode__ENotifyTriggerMode_MAX                                       = 3
};

/// Enum /Script/Engine.EBlendSpaceAxis
/// Size: 0x04
enum class EBlendSpaceAxis : uint8_t
{
	BSA_None                                                                         = 0,
	BSA_X                                                                            = 1,
	BSA_Y                                                                            = 2,
	BSA_Max                                                                          = 3
};

/// Enum /Script/Engine.EBlueprintNativizationFlag
/// Size: 0x04
enum class EBlueprintNativizationFlag : uint8_t
{
	EBlueprintNativizationFlag__Disabled                                             = 0,
	EBlueprintNativizationFlag__Dependency                                           = 1,
	EBlueprintNativizationFlag__ExplicitlyEnabled                                    = 2,
	EBlueprintNativizationFlag__EBlueprintNativizationFlag_MAX                       = 3
};

/// Enum /Script/Engine.EBlueprintCompileMode
/// Size: 0x04
enum class EBlueprintCompileMode : uint8_t
{
	EBlueprintCompileMode__Default                                                   = 0,
	EBlueprintCompileMode__Development                                               = 1,
	EBlueprintCompileMode__FinalRelease                                              = 2,
	EBlueprintCompileMode__EBlueprintCompileMode_MAX                                 = 3
};

/// Enum /Script/Engine.EBlueprintType
/// Size: 0x07
enum class EBlueprintType : uint8_t
{
	BPTYPE_Normal                                                                    = 0,
	BPTYPE_Const                                                                     = 1,
	BPTYPE_MacroLibrary                                                              = 2,
	BPTYPE_Interface                                                                 = 3,
	BPTYPE_LevelScript                                                               = 4,
	BPTYPE_FunctionLibrary                                                           = 5,
	BPTYPE_MAX                                                                       = 6
};

/// Enum /Script/Engine.EBlueprintStatus
/// Size: 0x07
enum class EBlueprintStatus : uint8_t
{
	BS_Unknown                                                                       = 0,
	BS_Dirty                                                                         = 1,
	BS_Error                                                                         = 2,
	BS_UpToDate                                                                      = 3,
	BS_BeingCreated                                                                  = 4,
	BS_UpToDateWithWarnings                                                          = 5,
	BS_MAX                                                                           = 6
};

/// Enum /Script/Engine.EDOFMode
/// Size: 0x08
enum class EDOFMode : uint8_t
{
	EDOFMode__Default                                                                = 0,
	EDOFMode__SixDOF                                                                 = 1,
	EDOFMode__YZPlane                                                                = 2,
	EDOFMode__XZPlane                                                                = 3,
	EDOFMode__XYPlane                                                                = 4,
	EDOFMode__CustomPlane                                                            = 5,
	EDOFMode__None                                                                   = 6,
	EDOFMode__EDOFMode_MAX                                                           = 7
};

/// Enum /Script/Engine.EBodyCollisionResponse
/// Size: 0x03
enum class EBodyCollisionResponse : uint8_t
{
	EBodyCollisionResponse__BodyCollision_Enabled                                    = 0,
	EBodyCollisionResponse__BodyCollision_Disabled                                   = 1,
	EBodyCollisionResponse__BodyCollision_MAX                                        = 2
};

/// Enum /Script/Engine.EPhysicsType
/// Size: 0x04
enum class EPhysicsType : uint8_t
{
	PhysType_Default                                                                 = 0,
	PhysType_Kinematic                                                               = 1,
	PhysType_Simulated                                                               = 2,
	PhysType_MAX                                                                     = 3
};

/// Enum /Script/Engine.ECollisionTraceFlag
/// Size: 0x05
enum class ECollisionTraceFlag : uint8_t
{
	CTF_UseDefault                                                                   = 0,
	CTF_UseSimpleAndComplex                                                          = 1,
	CTF_UseSimpleAsComplex                                                           = 2,
	CTF_UseComplexAsSimple                                                           = 3,
	CTF_MAX                                                                          = 4
};

/// Enum /Script/Engine.EBrushType
/// Size: 0x04
enum class EBrushType : uint8_t
{
	Brush_Default                                                                    = 0,
	Brush_Add                                                                        = 1,
	Brush_Subtract                                                                   = 2,
	Brush_MAX                                                                        = 3
};

/// Enum /Script/Engine.ECsgOper
/// Size: 0x07
enum class ECsgOper : uint8_t
{
	CSG_Active                                                                       = 0,
	CSG_Add                                                                          = 1,
	CSG_Subtract                                                                     = 2,
	CSG_Intersect                                                                    = 3,
	CSG_Deintersect                                                                  = 4,
	CSG_None                                                                         = 5,
	CSG_MAX                                                                          = 6
};

/// Enum /Script/Engine.EInitialOscillatorOffset
/// Size: 0x03
enum class EInitialOscillatorOffset : uint8_t
{
	EOO_OffsetRandom                                                                 = 0,
	EOO_OffsetZero                                                                   = 1,
	EOO_MAX                                                                          = 2
};

/// Enum /Script/Engine.EOscillatorWaveform
/// Size: 0x03
enum class EOscillatorWaveform : uint8_t
{
	EOscillatorWaveform__SineWave                                                    = 0,
	EOscillatorWaveform__PerlinNoise                                                 = 1,
	EOscillatorWaveform__EOscillatorWaveform_MAX                                     = 2
};

/// Enum /Script/Engine.ECameraShakeAttenuation
/// Size: 0x03
enum class ECameraShakeAttenuation : uint8_t
{
	ECameraShakeAttenuation__Linear                                                  = 0,
	ECameraShakeAttenuation__Quadratic                                               = 1,
	ECameraShakeAttenuation__ECameraShakeAttenuation_MAX                             = 2
};

/// Enum /Script/Engine.ECameraAlphaBlendMode
/// Size: 0x03
enum class ECameraAlphaBlendMode : uint8_t
{
	ECameraAlphaBlendMode__CABM_Linear                                               = 0,
	ECameraAlphaBlendMode__CABM_Cubic                                                = 1,
	ECameraAlphaBlendMode__CABM_MAX                                                  = 2
};

/// Enum /Script/Engine.ECameraAnimPlaySpace
/// Size: 0x05
enum class ECameraAnimPlaySpace : uint8_t
{
	ECameraAnimPlaySpace__CameraLocal                                                = 0,
	ECameraAnimPlaySpace__World                                                      = 1,
	ECameraAnimPlaySpace__UserDefined                                                = 2,
	ECameraAnimPlaySpace__ViewTargetSpace                                            = 3,
	ECameraAnimPlaySpace__ECameraAnimPlaySpace_MAX                                   = 4
};

/// Enum /Script/Engine.ECameraProjectionMode
/// Size: 0x03
enum class ECameraProjectionMode : uint8_t
{
	ECameraProjectionMode__Perspective                                               = 0,
	ECameraProjectionMode__Orthographic                                              = 1,
	ECameraProjectionMode__ECameraProjectionMode_MAX                                 = 2
};

/// Enum /Script/Engine.ECloudStorageDelegate
/// Size: 0x08
enum class ECloudStorageDelegate : uint8_t
{
	CSD_KeyValueReadComplete                                                         = 0,
	CSD_KeyValueWriteComplete                                                        = 1,
	CSD_ValueChanged                                                                 = 2,
	CSD_DocumentQueryComplete                                                        = 3,
	CSD_DocumentReadComplete                                                         = 4,
	CSD_DocumentWriteComplete                                                        = 5,
	CSD_DocumentConflictDetected                                                     = 6,
	CSD_MAX                                                                          = 7
};

/// Enum /Script/Engine.EAngularDriveMode
/// Size: 0x03
enum class EAngularDriveMode : uint8_t
{
	EAngularDriveMode__SLERP                                                         = 0,
	EAngularDriveMode__TwistAndSwing                                                 = 1,
	EAngularDriveMode__EAngularDriveMode_MAX                                         = 2
};

/// Enum /Script/Engine.ELinearConstraintMotion
/// Size: 0x04
enum class ELinearConstraintMotion : uint8_t
{
	LCM_Free                                                                         = 0,
	LCM_Limited                                                                      = 1,
	LCM_Locked                                                                       = 2,
	LCM_MAX                                                                          = 3
};

/// Enum /Script/Engine.ECurveTableMode
/// Size: 0x04
enum class ECurveTableMode : uint8_t
{
	ECurveTableMode__Empty                                                           = 0,
	ECurveTableMode__SimpleCurves                                                    = 1,
	ECurveTableMode__RichCurves                                                      = 2,
	ECurveTableMode__ECurveTableMode_MAX                                             = 3
};

/// Enum /Script/Engine.EEvaluateCurveTableResult
/// Size: 0x03
enum class EEvaluateCurveTableResult : uint8_t
{
	EEvaluateCurveTableResult__RowFound                                              = 0,
	EEvaluateCurveTableResult__RowNotFound                                           = 1,
	EEvaluateCurveTableResult__EEvaluateCurveTableResult_MAX                         = 2
};

/// Enum /Script/Engine.EGrammaticalNumber
/// Size: 0x03
enum class EGrammaticalNumber : uint8_t
{
	EGrammaticalNumber__Singular                                                     = 0,
	EGrammaticalNumber__Plural                                                       = 1,
	EGrammaticalNumber__EGrammaticalNumber_MAX                                       = 2
};

/// Enum /Script/Engine.EGrammaticalGender
/// Size: 0x05
enum class EGrammaticalGender : uint8_t
{
	EGrammaticalGender__Neuter                                                       = 0,
	EGrammaticalGender__Masculine                                                    = 1,
	EGrammaticalGender__Feminine                                                     = 2,
	EGrammaticalGender__Mixed                                                        = 3,
	EGrammaticalGender__EGrammaticalGender_MAX                                       = 4
};

/// Enum /Script/Engine.DistributionParamMode
/// Size: 0x04
enum class DistributionParamMode : uint8_t
{
	DPM_Normal                                                                       = 0,
	DPM_Abs                                                                          = 1,
	DPM_Direct                                                                       = 2,
	DPM_MAX                                                                          = 3
};

/// Enum /Script/Engine.EDistributionVectorMirrorFlags
/// Size: 0x04
enum class EDistributionVectorMirrorFlags : uint8_t
{
	EDVMF_Same                                                                       = 0,
	EDVMF_Different                                                                  = 1,
	EDVMF_Mirror                                                                     = 2,
	EDVMF_MAX                                                                        = 3
};

/// Enum /Script/Engine.EDistributionVectorLockFlags
/// Size: 0x06
enum class EDistributionVectorLockFlags : uint8_t
{
	EDVLF_None                                                                       = 0,
	EDVLF_XY                                                                         = 1,
	EDVLF_XZ                                                                         = 2,
	EDVLF_YZ                                                                         = 3,
	EDVLF_XYZ                                                                        = 4,
	EDVLF_MAX                                                                        = 5
};

/// Enum /Script/Engine.ENodeEnabledState
/// Size: 0x04
enum class ENodeEnabledState : uint8_t
{
	ENodeEnabledState__Enabled                                                       = 0,
	ENodeEnabledState__Disabled                                                      = 1,
	ENodeEnabledState__DevelopmentOnly                                               = 2,
	ENodeEnabledState__ENodeEnabledState_MAX                                         = 3
};

/// Enum /Script/Engine.ENodeAdvancedPins
/// Size: 0x04
enum class ENodeAdvancedPins : uint8_t
{
	ENodeAdvancedPins__NoPins                                                        = 0,
	ENodeAdvancedPins__Shown                                                         = 1,
	ENodeAdvancedPins__Hidden                                                        = 2,
	ENodeAdvancedPins__ENodeAdvancedPins_MAX                                         = 3
};

/// Enum /Script/Engine.ENodeTitleType
/// Size: 0x06
enum class ENodeTitleType : uint8_t
{
	ENodeTitleType__FullTitle                                                        = 0,
	ENodeTitleType__ListView                                                         = 1,
	ENodeTitleType__EditableTitle                                                    = 2,
	ENodeTitleType__MenuTitle                                                        = 3,
	ENodeTitleType__MAX_TitleTypes                                                   = 4,
	ENodeTitleType__ENodeTitleType_MAX                                               = 5
};

/// Enum /Script/Engine.EPinContainerType
/// Size: 0x05
enum class EPinContainerType : uint8_t
{
	EPinContainerType__None                                                          = 0,
	EPinContainerType__Array                                                         = 1,
	EPinContainerType__Set                                                           = 2,
	EPinContainerType__Map                                                           = 3,
	EPinContainerType__EPinContainerType_MAX                                         = 4
};

/// Enum /Script/Engine.EEdGraphPinDirection
/// Size: 0x03
enum class EEdGraphPinDirection : uint8_t
{
	EGPD_Input                                                                       = 0,
	EGPD_Output                                                                      = 1,
	EGPD_MAX                                                                         = 2
};

/// Enum /Script/Engine.EBlueprintPinStyleType
/// Size: 0x03
enum class EBlueprintPinStyleType : uint8_t
{
	BPST_Original                                                                    = 0,
	BPST_VariantA                                                                    = 1,
	BPST_MAX                                                                         = 2
};

/// Enum /Script/Engine.ECanCreateConnectionResponse
/// Size: 0x07
enum class ECanCreateConnectionResponse : uint8_t
{
	CONNECT_RESPONSE_MAKE                                                            = 0,
	CONNECT_RESPONSE_DISALLOW                                                        = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A                                                  = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B                                                  = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB                                                 = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE                                       = 5,
	CONNECT_RESPONSE_MAX                                                             = 6
};

/// Enum /Script/Engine.EGraphType
/// Size: 0x06
enum class EGraphType : uint8_t
{
	GT_Function                                                                      = 0,
	GT_Ubergraph                                                                     = 1,
	GT_Macro                                                                         = 2,
	GT_Animation                                                                     = 3,
	GT_StateMachine                                                                  = 4,
	GT_MAX                                                                           = 5
};

/// Enum /Script/Engine.ETransitionType
/// Size: 0x08
enum class ETransitionType : uint8_t
{
	ETransitionType__None                                                            = 0,
	ETransitionType__Paused                                                          = 1,
	ETransitionType__Loading                                                         = 2,
	ETransitionType__Saving                                                          = 3,
	ETransitionType__Connecting                                                      = 4,
	ETransitionType__Precaching                                                      = 5,
	ETransitionType__WaitingToConnect                                                = 6,
	ETransitionType__MAX                                                             = 7
};

/// Enum /Script/Engine.EFullyLoadPackageType
/// Size: 0x06
enum class EFullyLoadPackageType : uint8_t
{
	FULLYLOAD_Map                                                                    = 0,
	FULLYLOAD_Game_PreLoadClass                                                      = 1,
	FULLYLOAD_Game_PostLoadClass                                                     = 2,
	FULLYLOAD_Always                                                                 = 3,
	FULLYLOAD_Mutator                                                                = 4,
	FULLYLOAD_MAX                                                                    = 5
};

/// Enum /Script/Engine.EViewModeIndex
/// Size: 0x29
enum class EViewModeIndex : uint8_t
{
	VMI_BrushWireframe                                                               = 0,
	VMI_Wireframe                                                                    = 1,
	VMI_Unlit                                                                        = 2,
	VMI_Lit                                                                          = 3,
	VMI_Lit_DetailLighting                                                           = 4,
	VMI_LightingOnly                                                                 = 5,
	VMI_LightComplexity                                                              = 6,
	VMI_ShaderComplexity                                                             = 8,
	VMI_LightmapDensity                                                              = 9,
	VMI_LitLightmapDensity                                                           = 10,
	VMI_ReflectionOverride                                                           = 11,
	VMI_VisualizeBuffer                                                              = 12,
	VMI_StationaryLightOverlap                                                       = 14,
	VMI_CollisionPawn                                                                = 15,
	VMI_CollisionVisibility                                                          = 16,
	VMI_LODColoration                                                                = 18,
	VMI_QuadOverdraw                                                                 = 19,
	VMI_PrimitiveDistanceAccuracy                                                    = 20,
	VMI_MeshUVDensityAccuracy                                                        = 21,
	VMI_ShaderComplexityWithQuadOverdraw                                             = 22,
	VMI_HLODColoration                                                               = 23,
	VMI_GroupLODColoration                                                           = 24,
	VMI_MaterialTextureScaleAccuracy                                                 = 25,
	VMI_RequiredTextureResolution                                                    = 26,
	VMI_PathTracing                                                                  = 27,
	VMI_RayTracingDebug                                                              = 28,
	VMI_RayTracingCausticsDebug                                                      = 29,
	VMI_Max                                                                          = 30,
	VMI_Unknown                                                                      = 255
};

/// Enum /Script/Engine.EDemoPlayFailure
/// Size: 0x10
enum class EDemoPlayFailure : uint8_t
{
	EDemoPlayFailure__Generic                                                        = 0,
	EDemoPlayFailure__DemoNotFound                                                   = 1,
	EDemoPlayFailure__Corrupt                                                        = 2,
	EDemoPlayFailure__InvalidVersion                                                 = 3,
	EDemoPlayFailure__InitBase                                                       = 4,
	EDemoPlayFailure__GameSpecificHeader                                             = 5,
	EDemoPlayFailure__ReplayStreamerInternal                                         = 6,
	EDemoPlayFailure__LoadMap                                                        = 7,
	EDemoPlayFailure__Serialization                                                  = 8,
	EDemoPlayFailure__EDemoPlayFailure_MAX                                           = 9
};

/// Enum /Script/Engine.ETravelType
/// Size: 0x04
enum class ETravelType : uint8_t
{
	TRAVEL_Absolute                                                                  = 0,
	TRAVEL_Partial                                                                   = 1,
	TRAVEL_Relative                                                                  = 2,
	TRAVEL_MAX                                                                       = 3
};

/// Enum /Script/Engine.ENetworkLagState
/// Size: 0x03
enum class ENetworkLagState : uint8_t
{
	ENetworkLagState__NotLagging                                                     = 0,
	ENetworkLagState__Lagging                                                        = 1,
	ENetworkLagState__ENetworkLagState_MAX                                           = 2
};

/// Enum /Script/Engine.EMouseCaptureMode
/// Size: 0x06
enum class EMouseCaptureMode : uint8_t
{
	EMouseCaptureMode__NoCapture                                                     = 0,
	EMouseCaptureMode__CapturePermanently                                            = 1,
	EMouseCaptureMode__CapturePermanently_IncludingInitialMouseDown                  = 2,
	EMouseCaptureMode__CaptureDuringMouseDown                                        = 3,
	EMouseCaptureMode__CaptureDuringRightMouseDown                                   = 4,
	EMouseCaptureMode__EMouseCaptureMode_MAX                                         = 5
};

/// Enum /Script/Engine.ECustomTimeStepSynchronizationState
/// Size: 0x05
enum class ECustomTimeStepSynchronizationState : uint8_t
{
	ECustomTimeStepSynchronizationState__Closed                                      = 0,
	ECustomTimeStepSynchronizationState__Error                                       = 1,
	ECustomTimeStepSynchronizationState__Synchronized                                = 2,
	ECustomTimeStepSynchronizationState__Synchronizing                               = 3,
	ECustomTimeStepSynchronizationState__ECustomTimeStepSynchronizationState_MAX     = 4
};

/// Enum /Script/Engine.EMeshBufferAccess
/// Size: 0x03
enum class EMeshBufferAccess : uint8_t
{
	EMeshBufferAccess__Default                                                       = 0,
	EMeshBufferAccess__ForceCPUAndGPU                                                = 1,
	EMeshBufferAccess__EMeshBufferAccess_MAX                                         = 2
};

/// Enum /Script/Engine.ESpawnActorCollisionHandlingMethod
/// Size: 0x06
enum class ESpawnActorCollisionHandlingMethod : uint8_t
{
	ESpawnActorCollisionHandlingMethod__Undefined                                    = 0,
	ESpawnActorCollisionHandlingMethod__AlwaysSpawn                                  = 1,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButAlwaysSpawn               = 2,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButDontSpawnIfColliding      = 3,
	ESpawnActorCollisionHandlingMethod__DontSpawnIfColliding                         = 4,
	ESpawnActorCollisionHandlingMethod__ESpawnActorCollisionHandlingMethod_MAX       = 5
};

/// Enum /Script/Engine.EConstraintFrame
/// Size: 0x03
enum class EConstraintFrame : uint8_t
{
	EConstraintFrame__Frame1                                                         = 0,
	EConstraintFrame__Frame2                                                         = 1,
	EConstraintFrame__EConstraintFrame_MAX                                           = 2
};

/// Enum /Script/Engine.EAngularConstraintMotion
/// Size: 0x04
enum class EAngularConstraintMotion : uint8_t
{
	ACM_Free                                                                         = 0,
	ACM_Limited                                                                      = 1,
	ACM_Locked                                                                       = 2,
	ACM_MAX                                                                          = 3
};

/// Enum /Script/Engine.EComponentSocketType
/// Size: 0x04
enum class EComponentSocketType : uint8_t
{
	EComponentSocketType__Invalid                                                    = 0,
	EComponentSocketType__Bone                                                       = 1,
	EComponentSocketType__Socket                                                     = 2,
	EComponentSocketType__EComponentSocketType_MAX                                   = 3
};

/// Enum /Script/Engine.EPhysicalMaterialMaskColor
/// Size: 0x09
enum class EPhysicalMaterialMaskColor : uint8_t
{
	EPhysicalMaterialMaskColor__Red                                                  = 0,
	EPhysicalMaterialMaskColor__Green                                                = 1,
	EPhysicalMaterialMaskColor__Blue                                                 = 2,
	EPhysicalMaterialMaskColor__Cyan                                                 = 3,
	EPhysicalMaterialMaskColor__Magenta                                              = 4,
	EPhysicalMaterialMaskColor__Yellow                                               = 5,
	EPhysicalMaterialMaskColor__White                                                = 6,
	EPhysicalMaterialMaskColor__Black                                                = 7,
	EPhysicalMaterialMaskColor__MAX                                                  = 8
};

/// Enum /Script/Engine.EPhysicalSurface
/// Size: 0x65
enum class EPhysicalSurface : uint8_t
{
	EPhysicalSurface__SurfaceType_Default                                            = 0,
	EPhysicalSurface__SurfaceType1                                                   = 1,
	EPhysicalSurface__SurfaceType2                                                   = 2,
	EPhysicalSurface__SurfaceType3                                                   = 3,
	EPhysicalSurface__SurfaceType4                                                   = 4,
	EPhysicalSurface__SurfaceType5                                                   = 5,
	EPhysicalSurface__SurfaceType6                                                   = 6,
	EPhysicalSurface__SurfaceType7                                                   = 7,
	EPhysicalSurface__SurfaceType8                                                   = 8,
	EPhysicalSurface__SurfaceType9                                                   = 9,
	EPhysicalSurface__SurfaceType10                                                  = 10,
	EPhysicalSurface__SurfaceType11                                                  = 11,
	EPhysicalSurface__SurfaceType12                                                  = 12,
	EPhysicalSurface__SurfaceType13                                                  = 13,
	EPhysicalSurface__SurfaceType14                                                  = 14,
	EPhysicalSurface__SurfaceType15                                                  = 15,
	EPhysicalSurface__SurfaceType16                                                  = 16,
	EPhysicalSurface__SurfaceType17                                                  = 17,
	EPhysicalSurface__SurfaceType18                                                  = 18,
	EPhysicalSurface__SurfaceType19                                                  = 19,
	EPhysicalSurface__SurfaceType20                                                  = 20,
	EPhysicalSurface__SurfaceType21                                                  = 21,
	EPhysicalSurface__SurfaceType22                                                  = 22,
	EPhysicalSurface__SurfaceType23                                                  = 23,
	EPhysicalSurface__SurfaceType24                                                  = 24,
	EPhysicalSurface__SurfaceType25                                                  = 25,
	EPhysicalSurface__SurfaceType26                                                  = 26,
	EPhysicalSurface__SurfaceType27                                                  = 27,
	EPhysicalSurface__SurfaceType28                                                  = 28,
	EPhysicalSurface__SurfaceType29                                                  = 29,
	EPhysicalSurface__SurfaceType30                                                  = 30,
	EPhysicalSurface__SurfaceType31                                                  = 31,
	EPhysicalSurface__SurfaceType32                                                  = 32,
	EPhysicalSurface__SurfaceType33                                                  = 33,
	EPhysicalSurface__SurfaceType34                                                  = 34,
	EPhysicalSurface__SurfaceType35                                                  = 35,
	EPhysicalSurface__SurfaceType36                                                  = 36,
	EPhysicalSurface__SurfaceType37                                                  = 37,
	EPhysicalSurface__SurfaceType38                                                  = 38,
	EPhysicalSurface__SurfaceType39                                                  = 39,
	EPhysicalSurface__SurfaceType40                                                  = 40,
	EPhysicalSurface__SurfaceType41                                                  = 41,
	EPhysicalSurface__SurfaceType42                                                  = 42,
	EPhysicalSurface__SurfaceType43                                                  = 43,
	EPhysicalSurface__SurfaceType44                                                  = 44,
	EPhysicalSurface__SurfaceType45                                                  = 45,
	EPhysicalSurface__SurfaceType46                                                  = 46,
	EPhysicalSurface__SurfaceType47                                                  = 47,
	EPhysicalSurface__SurfaceType48                                                  = 48,
	EPhysicalSurface__SurfaceType49                                                  = 49,
	EPhysicalSurface__SurfaceType50                                                  = 50,
	EPhysicalSurface__SurfaceType51                                                  = 51,
	EPhysicalSurface__SurfaceType52                                                  = 52,
	EPhysicalSurface__SurfaceType53                                                  = 53,
	EPhysicalSurface__SurfaceType54                                                  = 54,
	EPhysicalSurface__SurfaceType55                                                  = 55,
	EPhysicalSurface__SurfaceType56                                                  = 56,
	EPhysicalSurface__SurfaceType57                                                  = 57,
	EPhysicalSurface__SurfaceType58                                                  = 58,
	EPhysicalSurface__SurfaceType59                                                  = 59,
	EPhysicalSurface__SurfaceType60                                                  = 60,
	EPhysicalSurface__SurfaceType61                                                  = 61,
	EPhysicalSurface__SurfaceType62                                                  = 62,
	EPhysicalSurface__SurfaceType_Max                                                = 63,
	EPhysicalSurface__EPhysicalSurface_MAX                                           = 64
};

/// Enum /Script/Engine.EWalkableSlopeBehavior
/// Size: 0x05
enum class EWalkableSlopeBehavior : uint8_t
{
	WalkableSlope_Default                                                            = 0,
	WalkableSlope_Increase                                                           = 1,
	WalkableSlope_Decrease                                                           = 2,
	WalkableSlope_Unwalkable                                                         = 3,
	WalkableSlope_Max                                                                = 4
};

/// Enum /Script/Engine.ERotatorQuantization
/// Size: 0x03
enum class ERotatorQuantization : uint8_t
{
	ERotatorQuantization__ByteComponents                                             = 0,
	ERotatorQuantization__ShortComponents                                            = 1,
	ERotatorQuantization__ERotatorQuantization_MAX                                   = 2
};

/// Enum /Script/Engine.EVectorQuantization
/// Size: 0x04
enum class EVectorQuantization : uint8_t
{
	EVectorQuantization__RoundWholeNumber                                            = 0,
	EVectorQuantization__RoundOneDecimal                                             = 1,
	EVectorQuantization__RoundTwoDecimals                                            = 2,
	EVectorQuantization__EVectorQuantization_MAX                                     = 3
};

/// Enum /Script/Engine.EAutoPossessAI
/// Size: 0x05
enum class EAutoPossessAI : uint8_t
{
	EAutoPossessAI__Disabled                                                         = 0,
	EAutoPossessAI__PlacedInWorld                                                    = 1,
	EAutoPossessAI__Spawned                                                          = 2,
	EAutoPossessAI__PlacedInWorldOrSpawned                                           = 3,
	EAutoPossessAI__EAutoPossessAI_MAX                                               = 4
};

/// Enum /Script/Engine.EAutoReceiveInput
/// Size: 0x10
enum class EAutoReceiveInput : uint8_t
{
	EAutoReceiveInput__Disabled                                                      = 0,
	EAutoReceiveInput__Player0                                                       = 1,
	EAutoReceiveInput__Player1                                                       = 2,
	EAutoReceiveInput__Player2                                                       = 3,
	EAutoReceiveInput__Player3                                                       = 4,
	EAutoReceiveInput__Player4                                                       = 5,
	EAutoReceiveInput__Player5                                                       = 6,
	EAutoReceiveInput__Player6                                                       = 7,
	EAutoReceiveInput__Player7                                                       = 8,
	EAutoReceiveInput__EAutoReceiveInput_MAX                                         = 9
};

/// Enum /Script/Engine.ENetDormancy
/// Size: 0x06
enum class ENetDormancy : uint8_t
{
	DORM_Never                                                                       = 0,
	DORM_Awake                                                                       = 1,
	DORM_DormantAll                                                                  = 2,
	DORM_DormantPartial                                                              = 3,
	DORM_Initial                                                                     = 4,
	DORM_MAX                                                                         = 5
};

/// Enum /Script/Engine.ENetRole
/// Size: 0x05
enum class ENetRole : uint8_t
{
	ROLE_None                                                                        = 0,
	ROLE_SimulatedProxy                                                              = 1,
	ROLE_AutonomousProxy                                                             = 2,
	ROLE_Authority                                                                   = 3,
	ROLE_MAX                                                                         = 4
};

/// Enum /Script/Engine.EUpdateRateShiftBucket
/// Size: 0x08
enum class EUpdateRateShiftBucket : uint8_t
{
	EUpdateRateShiftBucket__ShiftBucket0                                             = 0,
	EUpdateRateShiftBucket__ShiftBucket1                                             = 1,
	EUpdateRateShiftBucket__ShiftBucket2                                             = 2,
	EUpdateRateShiftBucket__ShiftBucket3                                             = 3,
	EUpdateRateShiftBucket__ShiftBucket4                                             = 4,
	EUpdateRateShiftBucket__ShiftBucket5                                             = 5,
	EUpdateRateShiftBucket__ShiftBucketMax                                           = 6,
	EUpdateRateShiftBucket__EUpdateRateShiftBucket_MAX                               = 7
};

/// Enum /Script/Engine.EShadowMapFlags
/// Size: 0x03
enum class EShadowMapFlags : uint8_t
{
	SMF_None                                                                         = 0,
	SMF_Streamed                                                                     = 1,
	SMF_MAX                                                                          = 2
};

/// Enum /Script/Engine.ELightMapPaddingType
/// Size: 0x04
enum class ELightMapPaddingType : uint8_t
{
	LMPT_NormalPadding                                                               = 0,
	LMPT_PrePadding                                                                  = 1,
	LMPT_NoPadding                                                                   = 2,
	LMPT_MAX                                                                         = 3
};

/// Enum /Script/Engine.ECollisionEnabled
/// Size: 0x05
enum class ECollisionEnabled : uint8_t
{
	ECollisionEnabled__NoCollision                                                   = 0,
	ECollisionEnabled__QueryOnly                                                     = 1,
	ECollisionEnabled__PhysicsOnly                                                   = 2,
	ECollisionEnabled__QueryAndPhysics                                               = 3,
	ECollisionEnabled__ECollisionEnabled_MAX                                         = 4
};

/// Enum /Script/Engine.ETimelineSigType
/// Size: 0x06
enum class ETimelineSigType : uint8_t
{
	ETS_EventSignature                                                               = 0,
	ETS_FloatSignature                                                               = 1,
	ETS_VectorSignature                                                              = 2,
	ETS_LinearColorSignature                                                         = 3,
	ETS_InvalidSignature                                                             = 4,
	ETS_MAX                                                                          = 5
};

/// Enum /Script/Engine.ESleepFamily
/// Size: 0x04
enum class ESleepFamily : uint8_t
{
	ESleepFamily__Normal                                                             = 0,
	ESleepFamily__Sensitive                                                          = 1,
	ESleepFamily__Custom                                                             = 2,
	ESleepFamily__ESleepFamily_MAX                                                   = 3
};

/// Enum /Script/Engine.ERadialImpulseFalloff
/// Size: 0x03
enum class ERadialImpulseFalloff : uint8_t
{
	ERadialImpulseFalloff__RIF_Constant                                              = 0,
	ERadialImpulseFalloff__RIF_Linear                                                = 1,
	ERadialImpulseFalloff__RIF_MAX                                                   = 2
};

/// Enum /Script/Engine.EFilterInterpolationType
/// Size: 0x04
enum class EFilterInterpolationType : uint8_t
{
	BSIT_Average                                                                     = 0,
	BSIT_Linear                                                                      = 1,
	BSIT_Cubic                                                                       = 2,
	BSIT_MAX                                                                         = 3
};

/// Enum /Script/Engine.ECollisionResponse
/// Size: 0x04
enum class ECollisionResponse : uint8_t
{
	ECR_Ignore                                                                       = 0,
	ECR_Overlap                                                                      = 1,
	ECR_Block                                                                        = 2,
	ECR_MAX                                                                          = 3
};

/// Enum /Script/Engine.EOverlapFilterOption
/// Size: 0x04
enum class EOverlapFilterOption : uint8_t
{
	OverlapFilter_All                                                                = 0,
	OverlapFilter_DynamicOnly                                                        = 1,
	OverlapFilter_StaticOnly                                                         = 2,
	OverlapFilter_MAX                                                                = 3
};

/// Enum /Script/Engine.ENetworkSmoothingMode
/// Size: 0x05
enum class ENetworkSmoothingMode : uint8_t
{
	ENetworkSmoothingMode__Disabled                                                  = 0,
	ENetworkSmoothingMode__Linear                                                    = 1,
	ENetworkSmoothingMode__Exponential                                               = 2,
	ENetworkSmoothingMode__Replay                                                    = 3,
	ENetworkSmoothingMode__ENetworkSmoothingMode_MAX                                 = 4
};

/// Enum /Script/Engine.ELightingBuildQuality
/// Size: 0x05
enum class ELightingBuildQuality : uint8_t
{
	Quality_Preview                                                                  = 0,
	Quality_Medium                                                                   = 1,
	Quality_High                                                                     = 2,
	Quality_Production                                                               = 3,
	Quality_MAX                                                                      = 4
};

/// Enum /Script/Engine.EMaterialStencilCompare
/// Size: 0x10
enum class EMaterialStencilCompare : uint8_t
{
	MSC_Less                                                                         = 0,
	MSC_LessEqual                                                                    = 1,
	MSC_Greater                                                                      = 2,
	MSC_GreaterEqual                                                                 = 3,
	MSC_Equal                                                                        = 4,
	MSC_NotEqual                                                                     = 5,
	MSC_Never                                                                        = 6,
	MSC_Always                                                                       = 7,
	MSC_Count                                                                        = 8,
	MSC_MAX                                                                          = 9
};

/// Enum /Script/Engine.EMaterialSamplerType
/// Size: 0x18
enum class EMaterialSamplerType : uint8_t
{
	SAMPLERTYPE_Color                                                                = 0,
	SAMPLERTYPE_Grayscale                                                            = 1,
	SAMPLERTYPE_Alpha                                                                = 2,
	SAMPLERTYPE_Normal                                                               = 3,
	SAMPLERTYPE_Masks                                                                = 4,
	SAMPLERTYPE_DistanceFieldFont                                                    = 5,
	SAMPLERTYPE_LinearColor                                                          = 6,
	SAMPLERTYPE_LinearGrayscale                                                      = 7,
	SAMPLERTYPE_Data                                                                 = 8,
	SAMPLERTYPE_External                                                             = 9,
	SAMPLERTYPE_VirtualColor                                                         = 10,
	SAMPLERTYPE_VirtualGrayscale                                                     = 11,
	SAMPLERTYPE_VirtualAlpha                                                         = 12,
	SAMPLERTYPE_VirtualNormal                                                        = 13,
	SAMPLERTYPE_VirtualMasks                                                         = 14,
	SAMPLERTYPE_VirtualLinearColor                                                   = 15,
	SAMPLERTYPE_VirtualLinearGrayscale                                               = 16,
	SAMPLERTYPE_MAX                                                                  = 17
};

/// Enum /Script/Engine.EMaterialTessellationMode
/// Size: 0x04
enum class EMaterialTessellationMode : uint8_t
{
	MTM_NoTessellation                                                               = 0,
	MTM_FlatTessellation                                                             = 1,
	MTM_PNTriangles                                                                  = 2,
	MTM_MAX                                                                          = 3
};

/// Enum /Script/Engine.EMaterialShadingModel
/// Size: 0x15
enum class EMaterialShadingModel : uint8_t
{
	MSM_Unlit                                                                        = 0,
	MSM_DefaultLit                                                                   = 1,
	MSM_Subsurface                                                                   = 2,
	MSM_PreintegratedSkin                                                            = 3,
	MSM_ClearCoat                                                                    = 4,
	MSM_SubsurfaceProfile                                                            = 5,
	MSM_TwoSidedFoliage                                                              = 6,
	MSM_Hair                                                                         = 7,
	MSM_Cloth                                                                        = 8,
	MSM_Eye                                                                          = 9,
	MSM_SingleLayerWater                                                             = 10,
	MSM_ThinTranslucent                                                              = 11,
	MSM_NUM                                                                          = 12,
	MSM_FromMaterialExpression                                                       = 13,
	MSM_MAX                                                                          = 14
};

/// Enum /Script/Engine.EParticleCollisionMode
/// Size: 0x03
enum class EParticleCollisionMode : uint8_t
{
	EParticleCollisionMode__SceneDepth                                               = 0,
	EParticleCollisionMode__DistanceField                                            = 1,
	EParticleCollisionMode__EParticleCollisionMode_MAX                               = 2
};

/// Enum /Script/Engine.ETrailWidthMode
/// Size: 0x04
enum class ETrailWidthMode : uint8_t
{
	ETrailWidthMode_FromCentre                                                       = 0,
	ETrailWidthMode_FromFirst                                                        = 1,
	ETrailWidthMode_FromSecond                                                       = 2,
	ETrailWidthMode_MAX                                                              = 3
};

/// Enum /Script/Engine.EGBufferFormat
/// Size: 0x05
enum class EGBufferFormat : uint8_t
{
	EGBufferFormat__Force8BitsPerChannel                                             = 0,
	EGBufferFormat__Default                                                          = 1,
	EGBufferFormat__HighPrecisionNormals                                             = 3,
	EGBufferFormat__Force16BitsPerChannel                                            = 5,
	EGBufferFormat__EGBufferFormat_MAX                                               = 6
};

/// Enum /Script/Engine.ESceneCaptureCompositeMode
/// Size: 0x04
enum class ESceneCaptureCompositeMode : uint8_t
{
	SCCM_Overwrite                                                                   = 0,
	SCCM_Additive                                                                    = 1,
	SCCM_Composite                                                                   = 2,
	SCCM_MAX                                                                         = 3
};

/// Enum /Script/Engine.ESceneCaptureSource
/// Size: 0x11
enum class ESceneCaptureSource : uint8_t
{
	SCS_SceneColorHDR                                                                = 0,
	SCS_SceneColorHDRNoAlpha                                                         = 1,
	SCS_FinalColorLDR                                                                = 2,
	SCS_SceneColorSceneDepth                                                         = 3,
	SCS_SceneDepth                                                                   = 4,
	SCS_DeviceDepth                                                                  = 5,
	SCS_Normal                                                                       = 6,
	SCS_BaseColor                                                                    = 7,
	SCS_FinalColorHDR                                                                = 8,
	SCS_FinalToneCurveHDR                                                            = 9,
	SCS_MAX                                                                          = 10
};

/// Enum /Script/Engine.ETranslucentSortPolicy
/// Size: 0x04
enum class ETranslucentSortPolicy : uint8_t
{
	ETranslucentSortPolicy__SortByDistance                                           = 0,
	ETranslucentSortPolicy__SortByProjectedZ                                         = 1,
	ETranslucentSortPolicy__SortAlongAxis                                            = 2,
	ETranslucentSortPolicy__ETranslucentSortPolicy_MAX                               = 3
};

/// Enum /Script/Engine.ERefractionMode
/// Size: 0x03
enum class ERefractionMode : uint8_t
{
	RM_IndexOfRefraction                                                             = 0,
	RM_PixelNormalOffset                                                             = 1,
	RM_MAX                                                                           = 2
};

/// Enum /Script/Engine.ETranslucencyLightingMode
/// Size: 0x07
enum class ETranslucencyLightingMode : uint8_t
{
	TLM_VolumetricNonDirectional                                                     = 0,
	TLM_VolumetricDirectional                                                        = 1,
	TLM_VolumetricPerVertexNonDirectional                                            = 2,
	TLM_VolumetricPerVertexDirectional                                               = 3,
	TLM_Surface                                                                      = 4,
	TLM_SurfacePerPixelLighting                                                      = 5,
	TLM_MAX                                                                          = 6
};

/// Enum /Script/Engine.ESamplerSourceMode
/// Size: 0x04
enum class ESamplerSourceMode : uint8_t
{
	SSM_FromTextureAsset                                                             = 0,
	SSM_Wrap_WorldGroupSettings                                                      = 1,
	SSM_Clamp_WorldGroupSettings                                                     = 2,
	SSM_MAX                                                                          = 3
};

/// Enum /Script/Engine.EBlendMode
/// Size: 0x08
enum class EBlendMode : uint8_t
{
	BLEND_Opaque                                                                     = 0,
	BLEND_Masked                                                                     = 1,
	BLEND_Translucent                                                                = 2,
	BLEND_Additive                                                                   = 3,
	BLEND_Modulate                                                                   = 4,
	BLEND_AlphaComposite                                                             = 5,
	BLEND_AlphaHoldout                                                               = 6,
	BLEND_MAX                                                                        = 7
};

/// Enum /Script/Engine.EOcclusionCombineMode
/// Size: 0x03
enum class EOcclusionCombineMode : uint8_t
{
	OCM_Minimum                                                                      = 0,
	OCM_Multiply                                                                     = 1,
	OCM_MAX                                                                          = 2
};

/// Enum /Script/Engine.ELightmapType
/// Size: 0x04
enum class ELightmapType : uint8_t
{
	ELightmapType__Default                                                           = 0,
	ELightmapType__ForceSurface                                                      = 1,
	ELightmapType__ForceVolumetric                                                   = 2,
	ELightmapType__ELightmapType_MAX                                                 = 3
};

/// Enum /Script/Engine.EIndirectLightingCacheQuality
/// Size: 0x04
enum class EIndirectLightingCacheQuality : uint8_t
{
	ILCQ_Off                                                                         = 0,
	ILCQ_Point                                                                       = 1,
	ILCQ_Volume                                                                      = 2,
	ILCQ_MAX                                                                         = 3
};

/// Enum /Script/Engine.ESceneDepthPriorityGroup
/// Size: 0x03
enum class ESceneDepthPriorityGroup : uint8_t
{
	SDPG_World                                                                       = 0,
	SDPG_Foreground                                                                  = 1,
	SDPG_MAX                                                                         = 2
};

/// Enum /Script/Engine.EAspectRatioAxisConstraint
/// Size: 0x04
enum class EAspectRatioAxisConstraint : uint8_t
{
	AspectRatio_MaintainYFOV                                                         = 0,
	AspectRatio_MaintainXFOV                                                         = 1,
	AspectRatio_MajorAxisFOV                                                         = 2,
	AspectRatio_MAX                                                                  = 3
};

/// Enum /Script/Engine.EFontCacheType
/// Size: 0x03
enum class EFontCacheType : uint8_t
{
	EFontCacheType__Offline                                                          = 0,
	EFontCacheType__Runtime                                                          = 1,
	EFontCacheType__EFontCacheType_MAX                                               = 2
};

/// Enum /Script/Engine.EFontImportCharacterSet
/// Size: 0x04
enum class EFontImportCharacterSet : uint8_t
{
	FontICS_Default                                                                  = 0,
	FontICS_Ansi                                                                     = 1,
	FontICS_Symbol                                                                   = 2,
	FontICS_MAX                                                                      = 3
};

/// Enum /Script/Engine.EStandbyType
/// Size: 0x04
enum class EStandbyType : uint8_t
{
	STDBY_Rx                                                                         = 0,
	STDBY_Tx                                                                         = 1,
	STDBY_BadPing                                                                    = 2,
	STDBY_MAX                                                                        = 3
};

/// Enum /Script/Engine.ESuggestProjVelocityTraceOption
/// Size: 0x04
enum class ESuggestProjVelocityTraceOption : uint8_t
{
	ESuggestProjVelocityTraceOption__DoNotTrace                                      = 0,
	ESuggestProjVelocityTraceOption__TraceFullPath                                   = 1,
	ESuggestProjVelocityTraceOption__OnlyTraceWhileAscending                         = 2,
	ESuggestProjVelocityTraceOption__ESuggestProjVelocityTraceOption_MAX             = 3
};

/// Enum /Script/Engine.EWindowMode
/// Size: 0x04
enum class EWindowMode : uint8_t
{
	EWindowMode__Fullscreen                                                          = 0,
	EWindowMode__WindowedFullscreen                                                  = 1,
	EWindowMode__Windowed                                                            = 2,
	EWindowMode__EWindowMode_MAX                                                     = 3
};

/// Enum /Script/Engine.EHitProxyPriority
/// Size: 0x05
enum class EHitProxyPriority : uint8_t
{
	HPP_World                                                                        = 0,
	HPP_Wireframe                                                                    = 1,
	HPP_Foreground                                                                   = 2,
	HPP_UI                                                                           = 3,
	HPP_MAX                                                                          = 4
};

/// Enum /Script/Engine.EImportanceWeight
/// Size: 0x06
enum class EImportanceWeight : uint8_t
{
	EImportanceWeight__Luminance                                                     = 0,
	EImportanceWeight__Red                                                           = 1,
	EImportanceWeight__Green                                                         = 2,
	EImportanceWeight__Blue                                                          = 3,
	EImportanceWeight__Alpha                                                         = 4,
	EImportanceWeight__EImportanceWeight_MAX                                         = 5
};

/// Enum /Script/Engine.EAdManagerDelegate
/// Size: 0x03
enum class EAdManagerDelegate : uint8_t
{
	AMD_ClickedBanner                                                                = 0,
	AMD_UserClosedAd                                                                 = 1,
	AMD_MAX                                                                          = 2
};

/// Enum /Script/Engine.EControllerAnalogStick
/// Size: 0x03
enum class EControllerAnalogStick : uint8_t
{
	EControllerAnalogStick__CAS_LeftStick                                            = 0,
	EControllerAnalogStick__CAS_RightStick                                           = 1,
	EControllerAnalogStick__CAS_MAX                                                  = 2
};

/// Enum /Script/Engine.EAnimAlphaInputType
/// Size: 0x04
enum class EAnimAlphaInputType : uint8_t
{
	EAnimAlphaInputType__Float                                                       = 0,
	EAnimAlphaInputType__Bool                                                        = 1,
	EAnimAlphaInputType__Curve                                                       = 2,
	EAnimAlphaInputType__EAnimAlphaInputType_MAX                                     = 3
};

/// Enum /Script/Engine.ETrackActiveCondition
/// Size: 0x04
enum class ETrackActiveCondition : uint8_t
{
	ETAC_Always                                                                      = 0,
	ETAC_GoreEnabled                                                                 = 1,
	ETAC_GoreDisabled                                                                = 2,
	ETAC_MAX                                                                         = 3
};

/// Enum /Script/Engine.EInterpTrackMoveRotMode
/// Size: 0x04
enum class EInterpTrackMoveRotMode : uint8_t
{
	IMR_Keyframed                                                                    = 0,
	IMR_LookAtGroup                                                                  = 1,
	IMR_Ignore                                                                       = 2,
	IMR_MAX                                                                          = 3
};

/// Enum /Script/Engine.EInterpMoveAxis
/// Size: 0x07
enum class EInterpMoveAxis : uint8_t
{
	AXIS_TranslationX                                                                = 0,
	AXIS_TranslationY                                                                = 1,
	AXIS_TranslationZ                                                                = 2,
	AXIS_RotationX                                                                   = 3,
	AXIS_RotationY                                                                   = 4,
	AXIS_RotationZ                                                                   = 5,
	AXIS_MAX                                                                         = 6
};

/// Enum /Script/Engine.ETrackToggleAction
/// Size: 0x05
enum class ETrackToggleAction : uint8_t
{
	ETTA_Off                                                                         = 0,
	ETTA_On                                                                          = 1,
	ETTA_Toggle                                                                      = 2,
	ETTA_Trigger                                                                     = 3,
	ETTA_MAX                                                                         = 4
};

/// Enum /Script/Engine.EVisibilityTrackCondition
/// Size: 0x04
enum class EVisibilityTrackCondition : uint8_t
{
	EVTC_Always                                                                      = 0,
	EVTC_GoreEnabled                                                                 = 1,
	EVTC_GoreDisabled                                                                = 2,
	EVTC_MAX                                                                         = 3
};

/// Enum /Script/Engine.EVisibilityTrackAction
/// Size: 0x04
enum class EVisibilityTrackAction : uint8_t
{
	EVTA_Hide                                                                        = 0,
	EVTA_Show                                                                        = 1,
	EVTA_Toggle                                                                      = 2,
	EVTA_MAX                                                                         = 3
};

/// Enum /Script/Engine.ESlateGesture
/// Size: 0x07
enum class ESlateGesture : uint8_t
{
	ESlateGesture__None                                                              = 0,
	ESlateGesture__Scroll                                                            = 1,
	ESlateGesture__Magnify                                                           = 2,
	ESlateGesture__Swipe                                                             = 3,
	ESlateGesture__Rotate                                                            = 4,
	ESlateGesture__LongPress                                                         = 5,
	ESlateGesture__ESlateGesture_MAX                                                 = 6
};

/// Enum /Script/Engine.EMatrixColumns
/// Size: 0x05
enum class EMatrixColumns : uint8_t
{
	EMatrixColumns__First                                                            = 0,
	EMatrixColumns__Second                                                           = 1,
	EMatrixColumns__Third                                                            = 2,
	EMatrixColumns__Fourth                                                           = 3,
	EMatrixColumns__EMatrixColumns_MAX                                               = 4
};

/// Enum /Script/Engine.ELerpInterpolationMode
/// Size: 0x04
enum class ELerpInterpolationMode : uint8_t
{
	ELerpInterpolationMode__QuatInterp                                               = 0,
	ELerpInterpolationMode__EulerInterp                                              = 1,
	ELerpInterpolationMode__DualQuatInterp                                           = 2,
	ELerpInterpolationMode__ELerpInterpolationMode_MAX                               = 3
};

/// Enum /Script/Engine.EEasingFunc
/// Size: 0x15
enum class EEasingFunc : uint8_t
{
	EEasingFunc__Linear                                                              = 0,
	EEasingFunc__Step                                                                = 1,
	EEasingFunc__SinusoidalIn                                                        = 2,
	EEasingFunc__SinusoidalOut                                                       = 3,
	EEasingFunc__SinusoidalInOut                                                     = 4,
	EEasingFunc__EaseIn                                                              = 5,
	EEasingFunc__EaseOut                                                             = 6,
	EEasingFunc__EaseInOut                                                           = 7,
	EEasingFunc__ExpoIn                                                              = 8,
	EEasingFunc__ExpoOut                                                             = 9,
	EEasingFunc__ExpoInOut                                                           = 10,
	EEasingFunc__CircularIn                                                          = 11,
	EEasingFunc__CircularOut                                                         = 12,
	EEasingFunc__CircularInOut                                                       = 13,
	EEasingFunc__EEasingFunc_MAX                                                     = 14
};

/// Enum /Script/Engine.ERoundingMode
/// Size: 0x08
enum class ERoundingMode : uint8_t
{
	HalfToEven                                                                       = 0,
	HalfFromZero                                                                     = 1,
	HalfToZero                                                                       = 2,
	FromZero                                                                         = 3,
	ToZero                                                                           = 4,
	ToNegativeInfinity                                                               = 5,
	ToPositiveInfinity                                                               = 6,
	ERoundingMode_MAX                                                                = 7
};

/// Enum /Script/Engine.EStreamingVolumeUsage
/// Size: 0x06
enum class EStreamingVolumeUsage : uint8_t
{
	SVB_Loading                                                                      = 0,
	SVB_LoadingAndVisibility                                                         = 1,
	SVB_VisibilityBlockingOnLoad                                                     = 2,
	SVB_BlockingOnLoad                                                               = 3,
	SVB_LoadingNotVisible                                                            = 4,
	SVB_MAX                                                                          = 5
};

/// Enum /Script/Engine.EMaterialDecalResponse
/// Size: 0x09
enum class EMaterialDecalResponse : uint8_t
{
	MDR_None                                                                         = 0,
	MDR_ColorNormalRoughness                                                         = 1,
	MDR_Color                                                                        = 2,
	MDR_ColorNormal                                                                  = 3,
	MDR_ColorRoughness                                                               = 4,
	MDR_Normal                                                                       = 5,
	MDR_NormalRoughness                                                              = 6,
	MDR_Roughness                                                                    = 7,
	MDR_MAX                                                                          = 8
};

/// Enum /Script/Engine.EDecalBlendMode
/// Size: 0x18
enum class EDecalBlendMode : uint8_t
{
	DBM_Translucent                                                                  = 0,
	DBM_Stain                                                                        = 1,
	DBM_Normal                                                                       = 2,
	DBM_Emissive                                                                     = 3,
	DBM_DBuffer_ColorNormalRoughness                                                 = 4,
	DBM_DBuffer_Color                                                                = 5,
	DBM_DBuffer_ColorNormal                                                          = 6,
	DBM_DBuffer_ColorRoughness                                                       = 7,
	DBM_DBuffer_Normal                                                               = 8,
	DBM_DBuffer_NormalRoughness                                                      = 9,
	DBM_DBuffer_Roughness                                                            = 10,
	DBM_DBuffer_Emissive                                                             = 11,
	DBM_DBuffer_AlphaComposite                                                       = 12,
	DBM_DBuffer_EmissiveAlphaComposite                                               = 13,
	DBM_Volumetric_DistanceFunction                                                  = 14,
	DBM_AlphaComposite                                                               = 15,
	DBM_AmbientOcclusion                                                             = 16,
	DBM_MAX                                                                          = 17
};

/// Enum /Script/Engine.ETextureColorChannel
/// Size: 0x05
enum class ETextureColorChannel : uint8_t
{
	TCC_Red                                                                          = 0,
	TCC_Green                                                                        = 1,
	TCC_Blue                                                                         = 2,
	TCC_Alpha                                                                        = 3,
	TCC_MAX                                                                          = 4
};

/// Enum /Script/Engine.EMaterialAttributeBlend
/// Size: 0x04
enum class EMaterialAttributeBlend : uint8_t
{
	EMaterialAttributeBlend__Blend                                                   = 0,
	EMaterialAttributeBlend__UseA                                                    = 1,
	EMaterialAttributeBlend__UseB                                                    = 2,
	EMaterialAttributeBlend__EMaterialAttributeBlend_MAX                             = 3
};

/// Enum /Script/Engine.EChannelMaskParameterColor
/// Size: 0x05
enum class EChannelMaskParameterColor : uint8_t
{
	EChannelMaskParameterColor__Red                                                  = 0,
	EChannelMaskParameterColor__Green                                                = 1,
	EChannelMaskParameterColor__Blue                                                 = 2,
	EChannelMaskParameterColor__Alpha                                                = 3,
	EChannelMaskParameterColor__EChannelMaskParameterColor_MAX                       = 4
};

/// Enum /Script/Engine.EClampMode
/// Size: 0x04
enum class EClampMode : uint8_t
{
	CMODE_Clamp                                                                      = 0,
	CMODE_ClampMin                                                                   = 1,
	CMODE_ClampMax                                                                   = 2,
	CMODE_MAX                                                                        = 3
};

/// Enum /Script/Engine.ECustomMaterialOutputType
/// Size: 0x05
enum class ECustomMaterialOutputType : uint8_t
{
	CMOT_Float1                                                                      = 0,
	CMOT_Float2                                                                      = 1,
	CMOT_Float3                                                                      = 2,
	CMOT_Float4                                                                      = 3,
	CMOT_MAX                                                                         = 4
};

/// Enum /Script/Engine.EDepthOfFieldFunctionValue
/// Size: 0x05
enum class EDepthOfFieldFunctionValue : uint8_t
{
	TDOF_NearAndFarMask                                                              = 0,
	TDOF_NearMask                                                                    = 1,
	TDOF_FarMask                                                                     = 2,
	TDOF_CircleOfConfusionRadius                                                     = 3,
	TDOF_MAX                                                                         = 4
};

/// Enum /Script/Engine.EFunctionInputType
/// Size: 0x12
enum class EFunctionInputType : uint8_t
{
	FunctionInput_Scalar                                                             = 0,
	FunctionInput_Vector2                                                            = 1,
	FunctionInput_Vector3                                                            = 2,
	FunctionInput_Vector4                                                            = 3,
	FunctionInput_Texture2D                                                          = 4,
	FunctionInput_TextureCube                                                        = 5,
	FunctionInput_Texture2DArray                                                     = 6,
	FunctionInput_VolumeTexture                                                      = 7,
	FunctionInput_StaticBool                                                         = 8,
	FunctionInput_MaterialAttributes                                                 = 9,
	FunctionInput_TextureExternal                                                    = 10,
	FunctionInput_MAX                                                                = 11
};

/// Enum /Script/Engine.ENoiseFunction
/// Size: 0x07
enum class ENoiseFunction : uint8_t
{
	NOISEFUNCTION_SimplexTex                                                         = 0,
	NOISEFUNCTION_GradientTex                                                        = 1,
	NOISEFUNCTION_GradientTex3D                                                      = 2,
	NOISEFUNCTION_GradientALU                                                        = 3,
	NOISEFUNCTION_ValueALU                                                           = 4,
	NOISEFUNCTION_VoronoiALU                                                         = 5,
	NOISEFUNCTION_MAX                                                                = 6
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMipValueMode
/// Size: 0x04
enum class ERuntimeVirtualTextureMipValueMode : uint8_t
{
	RVTMVM_None                                                                      = 0,
	RVTMVM_MipLevel                                                                  = 1,
	RVTMVM_MipBias                                                                   = 2,
	RVTMVM_MAX                                                                       = 3
};

/// Enum /Script/Engine.EMaterialSceneAttributeInputMode
/// Size: 0x03
enum class EMaterialSceneAttributeInputMode : uint8_t
{
	EMaterialSceneAttributeInputMode__Coordinates                                    = 0,
	EMaterialSceneAttributeInputMode__OffsetFraction                                 = 1,
	EMaterialSceneAttributeInputMode__EMaterialSceneAttributeInputMode_MAX           = 2
};

/// Enum /Script/Engine.ESpeedTreeLODType
/// Size: 0x03
enum class ESpeedTreeLODType : uint8_t
{
	STLOD_Pop                                                                        = 0,
	STLOD_Smooth                                                                     = 1,
	STLOD_MAX                                                                        = 2
};

/// Enum /Script/Engine.ESpeedTreeWindType
/// Size: 0x08
enum class ESpeedTreeWindType : uint8_t
{
	STW_None                                                                         = 0,
	STW_Fastest                                                                      = 1,
	STW_Fast                                                                         = 2,
	STW_Better                                                                       = 3,
	STW_Best                                                                         = 4,
	STW_Palm                                                                         = 5,
	STW_BestPlus                                                                     = 6,
	STW_MAX                                                                          = 7
};

/// Enum /Script/Engine.ESpeedTreeGeometryType
/// Size: 0x06
enum class ESpeedTreeGeometryType : uint8_t
{
	STG_Branch                                                                       = 0,
	STG_Frond                                                                        = 1,
	STG_Leaf                                                                         = 2,
	STG_FacingLeaf                                                                   = 3,
	STG_Billboard                                                                    = 4,
	STG_MAX                                                                          = 5
};

/// Enum /Script/Engine.EMaterialExposedTextureProperty
/// Size: 0x03
enum class EMaterialExposedTextureProperty : uint8_t
{
	TMTM_TextureSize                                                                 = 0,
	TMTM_TexelSize                                                                   = 1,
	TMTM_MAX                                                                         = 2
};

/// Enum /Script/Engine.ETextureMipValueMode
/// Size: 0x05
enum class ETextureMipValueMode : uint8_t
{
	TMVM_None                                                                        = 0,
	TMVM_MipLevel                                                                    = 1,
	TMVM_MipBias                                                                     = 2,
	TMVM_Derivative                                                                  = 3,
	TMVM_MAX                                                                         = 4
};

/// Enum /Script/Engine.EMaterialVectorCoordTransform
/// Size: 0x07
enum class EMaterialVectorCoordTransform : uint8_t
{
	TRANSFORM_Tangent                                                                = 0,
	TRANSFORM_Local                                                                  = 1,
	TRANSFORM_World                                                                  = 2,
	TRANSFORM_View                                                                   = 3,
	TRANSFORM_Camera                                                                 = 4,
	TRANSFORM_ParticleWorld                                                          = 5,
	TRANSFORM_MAX                                                                    = 6
};

/// Enum /Script/Engine.EMaterialVectorCoordTransformSource
/// Size: 0x07
enum class EMaterialVectorCoordTransformSource : uint8_t
{
	TRANSFORMSOURCE_Tangent                                                          = 0,
	TRANSFORMSOURCE_Local                                                            = 1,
	TRANSFORMSOURCE_World                                                            = 2,
	TRANSFORMSOURCE_View                                                             = 3,
	TRANSFORMSOURCE_Camera                                                           = 4,
	TRANSFORMSOURCE_ParticleWorld                                                    = 5,
	TRANSFORMSOURCE_MAX                                                              = 6
};

/// Enum /Script/Engine.EMaterialPositionTransformSource
/// Size: 0x07
enum class EMaterialPositionTransformSource : uint8_t
{
	TRANSFORMPOSSOURCE_Local                                                         = 0,
	TRANSFORMPOSSOURCE_World                                                         = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld                                               = 2,
	TRANSFORMPOSSOURCE_View                                                          = 3,
	TRANSFORMPOSSOURCE_Camera                                                        = 4,
	TRANSFORMPOSSOURCE_Particle                                                      = 5,
	TRANSFORMPOSSOURCE_MAX                                                           = 6
};

/// Enum /Script/Engine.EVectorNoiseFunction
/// Size: 0x06
enum class EVectorNoiseFunction : uint8_t
{
	VNF_CellnoiseALU                                                                 = 0,
	VNF_VectorALU                                                                    = 1,
	VNF_GradientALU                                                                  = 2,
	VNF_CurlALU                                                                      = 3,
	VNF_VoronoiALU                                                                   = 4,
	VNF_MAX                                                                          = 5
};

/// Enum /Script/Engine.EMaterialExposedViewProperty
/// Size: 0x14
enum class EMaterialExposedViewProperty : uint8_t
{
	MEVP_BufferSize                                                                  = 0,
	MEVP_FieldOfView                                                                 = 1,
	MEVP_TanHalfFieldOfView                                                          = 2,
	MEVP_ViewSize                                                                    = 3,
	MEVP_WorldSpaceViewPosition                                                      = 4,
	MEVP_WorldSpaceCameraPosition                                                    = 5,
	MEVP_ViewportOffset                                                              = 6,
	MEVP_TemporalSampleCount                                                         = 7,
	MEVP_TemporalSampleIndex                                                         = 8,
	MEVP_TemporalSampleOffset                                                        = 9,
	MEVP_RuntimeVirtualTextureOutputLevel                                            = 10,
	MEVP_RuntimeVirtualTextureOutputDerivative                                       = 11,
	MEVP_PreExposure                                                                 = 12,
	MEVP_MAX                                                                         = 13
};

/// Enum /Script/Engine.EWorldPositionIncludedOffsets
/// Size: 0x05
enum class EWorldPositionIncludedOffsets : uint8_t
{
	WPT_Default                                                                      = 0,
	WPT_ExcludeAllShaderOffsets                                                      = 1,
	WPT_CameraRelative                                                               = 2,
	WPT_CameraRelativeNoOffsets                                                      = 3,
	WPT_MAX                                                                          = 4
};

/// Enum /Script/Engine.EMaterialFunctionUsage
/// Size: 0x04
enum class EMaterialFunctionUsage : uint8_t
{
	EMaterialFunctionUsage__Default                                                  = 0,
	EMaterialFunctionUsage__MaterialLayer                                            = 1,
	EMaterialFunctionUsage__MaterialLayerBlend                                       = 2,
	EMaterialFunctionUsage__EMaterialFunctionUsage_MAX                               = 3
};

/// Enum /Script/Engine.EMaterialUsage
/// Size: 0x18
enum class EMaterialUsage : uint8_t
{
	MATUSAGE_SkeletalMesh                                                            = 0,
	MATUSAGE_ParticleSprites                                                         = 1,
	MATUSAGE_BeamTrails                                                              = 2,
	MATUSAGE_MeshParticles                                                           = 3,
	MATUSAGE_StaticLighting                                                          = 4,
	MATUSAGE_MorphTargets                                                            = 5,
	MATUSAGE_SplineMesh                                                              = 6,
	MATUSAGE_InstancedStaticMeshes                                                   = 7,
	MATUSAGE_GeometryCollections                                                     = 8,
	MATUSAGE_Clothing                                                                = 9,
	MATUSAGE_NiagaraSprites                                                          = 10,
	MATUSAGE_NiagaraRibbons                                                          = 11,
	MATUSAGE_NiagaraMeshParticles                                                    = 12,
	MATUSAGE_GeometryCache                                                           = 13,
	MATUSAGE_Water                                                                   = 14,
	MATUSAGE_HairStrands                                                             = 15,
	MATUSAGE_LidarPointCloud                                                         = 16,
	MATUSAGE_MAX                                                                     = 17
};

/// Enum /Script/Engine.EMaterialParameterAssociation
/// Size: 0x04
enum class EMaterialParameterAssociation : uint8_t
{
	LayerParameter                                                                   = 0,
	BlendParameter                                                                   = 1,
	GlobalParameter                                                                  = 2,
	EMaterialParameterAssociation_MAX                                                = 3
};

/// Enum /Script/Engine.EMaterialMergeType
/// Size: 0x03
enum class EMaterialMergeType : uint8_t
{
	MaterialMergeType_Default                                                        = 0,
	MaterialMergeType_Simplygon                                                      = 1,
	MaterialMergeType_MAX                                                            = 2
};

/// Enum /Script/Engine.ETextureSizingType
/// Size: 0x05
enum class ETextureSizingType : uint8_t
{
	TextureSizingType_UseSingleTextureSize                                           = 0,
	TextureSizingType_UseAutomaticBiasedSizes                                        = 1,
	TextureSizingType_UseManualOverrideTextureSize                                   = 2,
	TextureSizingType_UseSimplygonAutomaticSizing                                    = 3,
	TextureSizingType_MAX                                                            = 4
};

/// Enum /Script/Engine.ESceneTextureId
/// Size: 0x32
enum class ESceneTextureId : uint8_t
{
	PPI_SceneColor                                                                   = 0,
	PPI_SceneDepth                                                                   = 1,
	PPI_DiffuseColor                                                                 = 2,
	PPI_SpecularColor                                                                = 3,
	PPI_SubsurfaceColor                                                              = 4,
	PPI_BaseColor                                                                    = 5,
	PPI_Specular                                                                     = 6,
	PPI_Metallic                                                                     = 7,
	PPI_WorldNormal                                                                  = 8,
	PPI_SeparateTranslucency                                                         = 9,
	PPI_Opacity                                                                      = 10,
	PPI_Roughness                                                                    = 11,
	PPI_MaterialAO                                                                   = 12,
	PPI_CustomDepth                                                                  = 13,
	PPI_PostProcessInput0                                                            = 14,
	PPI_PostProcessInput1                                                            = 15,
	PPI_PostProcessInput2                                                            = 16,
	PPI_PostProcessInput3                                                            = 17,
	PPI_PostProcessInput4                                                            = 18,
	PPI_PostProcessInput5                                                            = 19,
	PPI_PostProcessInput6                                                            = 20,
	PPI_DecalMask                                                                    = 21,
	PPI_ShadingModelColor                                                            = 22,
	PPI_ShadingModelID                                                               = 23,
	PPI_AmbientOcclusion                                                             = 24,
	PPI_CustomStencil                                                                = 25,
	PPI_StoredBaseColor                                                              = 26,
	PPI_StoredSpecular                                                               = 27,
	PPI_Velocity                                                                     = 28,
	PPI_WorldTangent                                                                 = 29,
	PPI_Anisotropy                                                                   = 30,
	PPI_MAX                                                                          = 31
};

/// Enum /Script/Engine.EMaterialDomain
/// Size: 0x08
enum class EMaterialDomain : uint8_t
{
	MD_Surface                                                                       = 0,
	MD_DeferredDecal                                                                 = 1,
	MD_LightFunction                                                                 = 2,
	MD_Volume                                                                        = 3,
	MD_PostProcess                                                                   = 4,
	MD_UI                                                                            = 5,
	MD_RuntimeVirtualTexture                                                         = 6,
	MD_MAX                                                                           = 7
};

/// Enum /Script/Engine.EMeshInstancingReplacementMethod
/// Size: 0x03
enum class EMeshInstancingReplacementMethod : uint8_t
{
	EMeshInstancingReplacementMethod__RemoveOriginalActors                           = 0,
	EMeshInstancingReplacementMethod__KeepOriginalActorsAsEditorOnly                 = 1,
	EMeshInstancingReplacementMethod__EMeshInstancingReplacementMethod_MAX           = 2
};

/// Enum /Script/Engine.EUVOutput
/// Size: 0x03
enum class EUVOutput : uint64_t
{
	EUVOutput__DoNotOutputChannel                                                    = 0,
	EUVOutput__OutputChannel                                                         = 1,
	EUVOutput__EUVOutput_MAX                                                         = 2
};

/// Enum /Script/Engine.EMeshMergeType
/// Size: 0x03
enum class EMeshMergeType : uint8_t
{
	EMeshMergeType__MeshMergeType_Default                                            = 0,
	EMeshMergeType__MeshMergeType_MergeActor                                         = 1,
	EMeshMergeType__MeshMergeType_MAX                                                = 2
};

/// Enum /Script/Engine.EMeshLODSelectionType
/// Size: 0x05
enum class EMeshLODSelectionType : uint8_t
{
	EMeshLODSelectionType__AllLODs                                                   = 0,
	EMeshLODSelectionType__SpecificLOD                                               = 1,
	EMeshLODSelectionType__CalculateLOD                                              = 2,
	EMeshLODSelectionType__LowestDetailLOD                                           = 3,
	EMeshLODSelectionType__EMeshLODSelectionType_MAX                                 = 4
};

/// Enum /Script/Engine.EProxyNormalComputationMethod
/// Size: 0x04
enum class EProxyNormalComputationMethod : uint8_t
{
	EProxyNormalComputationMethod__AngleWeighted                                     = 0,
	EProxyNormalComputationMethod__AreaWeighted                                      = 1,
	EProxyNormalComputationMethod__EqualWeighted                                     = 2,
	EProxyNormalComputationMethod__EProxyNormalComputationMethod_MAX                 = 3
};

/// Enum /Script/Engine.ELandscapeCullingPrecision
/// Size: 0x04
enum class ELandscapeCullingPrecision : uint8_t
{
	ELandscapeCullingPrecision__High                                                 = 0,
	ELandscapeCullingPrecision__Medium                                               = 1,
	ELandscapeCullingPrecision__Low                                                  = 2,
	ELandscapeCullingPrecision__ELandscapeCullingPrecision_MAX                       = 3
};

/// Enum /Script/Engine.EStaticMeshReductionTerimationCriterion
/// Size: 0x04
enum class EStaticMeshReductionTerimationCriterion : uint8_t
{
	EStaticMeshReductionTerimationCriterion__Triangles                               = 0,
	EStaticMeshReductionTerimationCriterion__Vertices                                = 1,
	EStaticMeshReductionTerimationCriterion__Any                                     = 2,
	EStaticMeshReductionTerimationCriterion__EStaticMeshReductionTerimationCriterion_MAX = 3
};

/// Enum /Script/Engine.EMeshFeatureImportance
/// Size: 0x07
enum class EMeshFeatureImportance : uint8_t
{
	EMeshFeatureImportance__Off                                                      = 0,
	EMeshFeatureImportance__Lowest                                                   = 1,
	EMeshFeatureImportance__Low                                                      = 2,
	EMeshFeatureImportance__Normal                                                   = 3,
	EMeshFeatureImportance__High                                                     = 4,
	EMeshFeatureImportance__Highest                                                  = 5,
	EMeshFeatureImportance__EMeshFeatureImportance_MAX                               = 6
};

/// Enum /Script/Engine.EVertexPaintAxis
/// Size: 0x04
enum class EVertexPaintAxis : uint8_t
{
	EVertexPaintAxis__X                                                              = 0,
	EVertexPaintAxis__Y                                                              = 1,
	EVertexPaintAxis__Z                                                              = 2,
	EVertexPaintAxis__EVertexPaintAxis_MAX                                           = 3
};

/// Enum /Script/Engine.EMicroTransactionResult
/// Size: 0x05
enum class EMicroTransactionResult : uint8_t
{
	MTR_Succeeded                                                                    = 0,
	MTR_Failed                                                                       = 1,
	MTR_Canceled                                                                     = 2,
	MTR_RestoredFromServer                                                           = 3,
	MTR_MAX                                                                          = 4
};

/// Enum /Script/Engine.EMicroTransactionDelegate
/// Size: 0x03
enum class EMicroTransactionDelegate : uint8_t
{
	MTD_PurchaseQueryComplete                                                        = 0,
	MTD_PurchaseComplete                                                             = 1,
	MTD_MAX                                                                          = 2
};

/// Enum /Script/Engine.FNavigationSystemRunMode
/// Size: 0x06
enum class FNavigationSystemRunMode : uint8_t
{
	FNavigationSystemRunMode__InvalidMode                                            = 0,
	FNavigationSystemRunMode__GameMode                                               = 1,
	FNavigationSystemRunMode__EditorMode                                             = 2,
	FNavigationSystemRunMode__SimulationMode                                         = 3,
	FNavigationSystemRunMode__PIEMode                                                = 4,
	FNavigationSystemRunMode__FNavigationSystemRunMode_MAX                           = 5
};

/// Enum /Script/Engine.ENavigationQueryResult
/// Size: 0x05
enum class ENavigationQueryResult : uint8_t
{
	ENavigationQueryResult__Invalid                                                  = 0,
	ENavigationQueryResult__Error                                                    = 1,
	ENavigationQueryResult__Fail                                                     = 2,
	ENavigationQueryResult__Success                                                  = 3,
	ENavigationQueryResult__ENavigationQueryResult_MAX                               = 4
};

/// Enum /Script/Engine.ENavPathEvent
/// Size: 0x09
enum class ENavPathEvent : uint8_t
{
	ENavPathEvent__Cleared                                                           = 0,
	ENavPathEvent__NewPath                                                           = 1,
	ENavPathEvent__UpdatedDueToGoalMoved                                             = 2,
	ENavPathEvent__UpdatedDueToNavigationChanged                                     = 3,
	ENavPathEvent__Invalidated                                                       = 4,
	ENavPathEvent__RePathFailed                                                      = 5,
	ENavPathEvent__MetaPathUpdate                                                    = 6,
	ENavPathEvent__Custom                                                            = 7,
	ENavPathEvent__ENavPathEvent_MAX                                                 = 8
};

/// Enum /Script/Engine.ENavDataGatheringModeConfig
/// Size: 0x04
enum class ENavDataGatheringModeConfig : uint8_t
{
	ENavDataGatheringModeConfig__Invalid                                             = 0,
	ENavDataGatheringModeConfig__Instant                                             = 1,
	ENavDataGatheringModeConfig__Lazy                                                = 2,
	ENavDataGatheringModeConfig__ENavDataGatheringModeConfig_MAX                     = 3
};

/// Enum /Script/Engine.ENavDataGatheringMode
/// Size: 0x04
enum class ENavDataGatheringMode : uint8_t
{
	ENavDataGatheringMode__Default                                                   = 0,
	ENavDataGatheringMode__Instant                                                   = 1,
	ENavDataGatheringMode__Lazy                                                      = 2,
	ENavDataGatheringMode__ENavDataGatheringMode_MAX                                 = 3
};

/// Enum /Script/Engine.ENavigationOptionFlag
/// Size: 0x04
enum class ENavigationOptionFlag : uint8_t
{
	ENavigationOptionFlag__Default                                                   = 0,
	ENavigationOptionFlag__Enable                                                    = 1,
	ENavigationOptionFlag__Disable                                                   = 2,
	ENavigationOptionFlag__MAX                                                       = 3
};

/// Enum /Script/Engine.ENavLinkDirection
/// Size: 0x04
enum class ENavLinkDirection : uint8_t
{
	ENavLinkDirection__BothWays                                                      = 0,
	ENavLinkDirection__LeftToRight                                                   = 1,
	ENavLinkDirection__RightToLeft                                                   = 2,
	ENavLinkDirection__ENavLinkDirection_MAX                                         = 3
};

/// Enum /Script/Engine.EEmitterBloodMode
/// Size: 0x04
enum class EEmitterBloodMode : uint8_t
{
	EBM_Ignore                                                                       = 0,
	ERM_AcitveWithBlood                                                              = 1,
	ERM_ActiveWithoutBlood                                                           = 2,
	EEmitterBloodMode_MAX                                                            = 3
};

/// Enum /Script/Engine.EEmitterRenderMode
/// Size: 0x06
enum class EEmitterRenderMode : uint8_t
{
	ERM_Normal                                                                       = 0,
	ERM_Point                                                                        = 1,
	ERM_Cross                                                                        = 2,
	ERM_LightsOnly                                                                   = 3,
	ERM_None                                                                         = 4,
	ERM_MAX                                                                          = 5
};

/// Enum /Script/Engine.EParticleSubUVInterpMethod
/// Size: 0x06
enum class EParticleSubUVInterpMethod : uint8_t
{
	PSUVIM_None                                                                      = 0,
	PSUVIM_Linear                                                                    = 1,
	PSUVIM_Linear_Blend                                                              = 2,
	PSUVIM_Random                                                                    = 3,
	PSUVIM_Random_Blend                                                              = 4,
	PSUVIM_MAX                                                                       = 5
};

/// Enum /Script/Engine.EParticleBurstMethod
/// Size: 0x03
enum class EParticleBurstMethod : uint8_t
{
	EPBM_Instant                                                                     = 0,
	EPBM_Interpolated                                                                = 1,
	EPBM_MAX                                                                         = 2
};

/// Enum /Script/Engine.EParticleSystemInsignificanceReaction
/// Size: 0x06
enum class EParticleSystemInsignificanceReaction : uint8_t
{
	EParticleSystemInsignificanceReaction__Auto                                      = 0,
	EParticleSystemInsignificanceReaction__Complete                                  = 1,
	EParticleSystemInsignificanceReaction__DisableTick                               = 2,
	EParticleSystemInsignificanceReaction__DisableTickAndKill                        = 3,
	EParticleSystemInsignificanceReaction__Num                                       = 4,
	EParticleSystemInsignificanceReaction__EParticleSystemInsignificanceReaction_MAX = 5
};

/// Enum /Script/Engine.EParticleSignificanceLevel
/// Size: 0x06
enum class EParticleSignificanceLevel : uint8_t
{
	EParticleSignificanceLevel__Low                                                  = 0,
	EParticleSignificanceLevel__Medium                                               = 1,
	EParticleSignificanceLevel__High                                                 = 2,
	EParticleSignificanceLevel__Critical                                             = 3,
	EParticleSignificanceLevel__Num                                                  = 4,
	EParticleSignificanceLevel__EParticleSignificanceLevel_MAX                       = 5
};

/// Enum /Script/Engine.EParticleDetailMode
/// Size: 0x04
enum class EParticleDetailMode : uint8_t
{
	PDM_Low                                                                          = 0,
	PDM_Medium                                                                       = 1,
	PDM_High                                                                         = 2,
	PDM_MAX                                                                          = 3
};

/// Enum /Script/Engine.EParticleSourceSelectionMethod
/// Size: 0x03
enum class EParticleSourceSelectionMethod : uint8_t
{
	EPSSM_Random                                                                     = 0,
	EPSSM_Sequential                                                                 = 1,
	EPSSM_MAX                                                                        = 2
};

/// Enum /Script/Engine.EModuleType
/// Size: 0x10
enum class EModuleType : uint8_t
{
	EPMT_General                                                                     = 0,
	EPMT_TypeData                                                                    = 1,
	EPMT_Beam                                                                        = 2,
	EPMT_Trail                                                                       = 3,
	EPMT_Spawn                                                                       = 4,
	EPMT_Required                                                                    = 5,
	EPMT_Event                                                                       = 6,
	EPMT_Light                                                                       = 7,
	EPMT_SubUV                                                                       = 8,
	EPMT_MAX                                                                         = 9
};

/// Enum /Script/Engine.EAttractorParticleSelectionMethod
/// Size: 0x03
enum class EAttractorParticleSelectionMethod : uint8_t
{
	EAPSM_Random                                                                     = 0,
	EAPSM_Sequential                                                                 = 1,
	EAPSM_MAX                                                                        = 2
};

/// Enum /Script/Engine.Beam2SourceTargetTangentMethod
/// Size: 0x05
enum class Beam2SourceTargetTangentMethod : uint8_t
{
	PEB2STTM_Direct                                                                  = 0,
	PEB2STTM_UserSet                                                                 = 1,
	PEB2STTM_Distribution                                                            = 2,
	PEB2STTM_Emitter                                                                 = 3,
	PEB2STTM_MAX                                                                     = 4
};

/// Enum /Script/Engine.Beam2SourceTargetMethod
/// Size: 0x06
enum class Beam2SourceTargetMethod : uint8_t
{
	PEB2STM_Default                                                                  = 0,
	PEB2STM_UserSet                                                                  = 1,
	PEB2STM_Emitter                                                                  = 2,
	PEB2STM_Particle                                                                 = 3,
	PEB2STM_Actor                                                                    = 4,
	PEB2STM_MAX                                                                      = 5
};

/// Enum /Script/Engine.BeamModifierType
/// Size: 0x03
enum class BeamModifierType : uint8_t
{
	PEB2MT_Source                                                                    = 0,
	PEB2MT_Target                                                                    = 1,
	PEB2MT_MAX                                                                       = 2
};

/// Enum /Script/Engine.EParticleCameraOffsetUpdateMethod
/// Size: 0x04
enum class EParticleCameraOffsetUpdateMethod : uint8_t
{
	EPCOUM_DirectSet                                                                 = 0,
	EPCOUM_Additive                                                                  = 1,
	EPCOUM_Scalar                                                                    = 2,
	EPCOUM_MAX                                                                       = 3
};

/// Enum /Script/Engine.EParticleCollisionComplete
/// Size: 0x07
enum class EParticleCollisionComplete : uint8_t
{
	EPCC_Kill                                                                        = 0,
	EPCC_Freeze                                                                      = 1,
	EPCC_HaltCollisions                                                              = 2,
	EPCC_FreezeTranslation                                                           = 3,
	EPCC_FreezeRotation                                                              = 4,
	EPCC_FreezeMovement                                                              = 5,
	EPCC_MAX                                                                         = 6
};

/// Enum /Script/Engine.EParticleCollisionResponse
/// Size: 0x04
enum class EParticleCollisionResponse : uint8_t
{
	EParticleCollisionResponse__Bounce                                               = 0,
	EParticleCollisionResponse__Stop                                                 = 1,
	EParticleCollisionResponse__Kill                                                 = 2,
	EParticleCollisionResponse__EParticleCollisionResponse_MAX                       = 3
};

/// Enum /Script/Engine.ELocationBoneSocketSelectionMethod
/// Size: 0x03
enum class ELocationBoneSocketSelectionMethod : uint8_t
{
	BONESOCKETSEL_Sequential                                                         = 0,
	BONESOCKETSEL_Random                                                             = 1,
	BONESOCKETSEL_MAX                                                                = 2
};

/// Enum /Script/Engine.ELocationBoneSocketSource
/// Size: 0x03
enum class ELocationBoneSocketSource : uint8_t
{
	BONESOCKETSOURCE_Bones                                                           = 0,
	BONESOCKETSOURCE_Sockets                                                         = 1,
	BONESOCKETSOURCE_MAX                                                             = 2
};

/// Enum /Script/Engine.ELocationEmitterSelectionMethod
/// Size: 0x03
enum class ELocationEmitterSelectionMethod : uint8_t
{
	ELESM_Random                                                                     = 0,
	ELESM_Sequential                                                                 = 1,
	ELESM_MAX                                                                        = 2
};

/// Enum /Script/Engine.CylinderHeightAxis
/// Size: 0x04
enum class CylinderHeightAxis : uint8_t
{
	PMLPC_HEIGHTAXIS_X                                                               = 0,
	PMLPC_HEIGHTAXIS_Y                                                               = 1,
	PMLPC_HEIGHTAXIS_Z                                                               = 2,
	PMLPC_HEIGHTAXIS_MAX                                                             = 3
};

/// Enum /Script/Engine.ELocationSkelVertSurfaceSource
/// Size: 0x03
enum class ELocationSkelVertSurfaceSource : uint8_t
{
	VERTSURFACESOURCE_Vert                                                           = 0,
	VERTSURFACESOURCE_Surface                                                        = 1,
	VERTSURFACESOURCE_MAX                                                            = 2
};

/// Enum /Script/Engine.EOrbitChainMode
/// Size: 0x04
enum class EOrbitChainMode : uint8_t
{
	EOChainMode_Add                                                                  = 0,
	EOChainMode_Scale                                                                = 1,
	EOChainMode_Link                                                                 = 2,
	EOChainMode_MAX                                                                  = 3
};

/// Enum /Script/Engine.EParticleAxisLock
/// Size: 0x11
enum class EParticleAxisLock : uint8_t
{
	EPAL_NONE                                                                        = 0,
	EPAL_X                                                                           = 1,
	EPAL_Y                                                                           = 2,
	EPAL_Z                                                                           = 3,
	EPAL_NEGATIVE_X                                                                  = 4,
	EPAL_NEGATIVE_Y                                                                  = 5,
	EPAL_NEGATIVE_Z                                                                  = 6,
	EPAL_ROTATE_X                                                                    = 7,
	EPAL_ROTATE_Y                                                                    = 8,
	EPAL_ROTATE_Z                                                                    = 9,
	EPAL_MAX                                                                         = 10
};

/// Enum /Script/Engine.EEmitterDynamicParameterValue
/// Size: 0x07
enum class EEmitterDynamicParameterValue : uint8_t
{
	EDPV_UserSet                                                                     = 0,
	EDPV_AutoSet                                                                     = 1,
	EDPV_VelocityX                                                                   = 2,
	EDPV_VelocityY                                                                   = 3,
	EDPV_VelocityZ                                                                   = 4,
	EDPV_VelocityMag                                                                 = 5,
	EDPV_MAX                                                                         = 6
};

/// Enum /Script/Engine.EEmitterNormalsMode
/// Size: 0x04
enum class EEmitterNormalsMode : uint8_t
{
	ENM_CameraFacing                                                                 = 0,
	ENM_Spherical                                                                    = 1,
	ENM_Cylindrical                                                                  = 2,
	ENM_MAX                                                                          = 3
};

/// Enum /Script/Engine.EParticleSortMode
/// Size: 0x06
enum class EParticleSortMode : uint8_t
{
	PSORTMODE_None                                                                   = 0,
	PSORTMODE_ViewProjDepth                                                          = 1,
	PSORTMODE_DistanceToView                                                         = 2,
	PSORTMODE_Age_OldestFirst                                                        = 3,
	PSORTMODE_Age_NewestFirst                                                        = 4,
	PSORTMODE_MAX                                                                    = 5
};

/// Enum /Script/Engine.EParticleUVFlipMode
/// Size: 0x09
enum class EParticleUVFlipMode : uint8_t
{
	EParticleUVFlipMode__None                                                        = 0,
	EParticleUVFlipMode__FlipUV                                                      = 1,
	EParticleUVFlipMode__FlipUOnly                                                   = 2,
	EParticleUVFlipMode__FlipVOnly                                                   = 3,
	EParticleUVFlipMode__RandomFlipUV                                                = 4,
	EParticleUVFlipMode__RandomFlipUOnly                                             = 5,
	EParticleUVFlipMode__RandomFlipVOnly                                             = 6,
	EParticleUVFlipMode__RandomFlipUVIndependent                                     = 7,
	EParticleUVFlipMode__EParticleUVFlipMode_MAX                                     = 8
};

/// Enum /Script/Engine.ETrail2SourceMethod
/// Size: 0x04
enum class ETrail2SourceMethod : uint8_t
{
	PET2SRCM_Default                                                                 = 0,
	PET2SRCM_Particle                                                                = 1,
	PET2SRCM_Actor                                                                   = 2,
	PET2SRCM_MAX                                                                     = 3
};

/// Enum /Script/Engine.EBeamTaperMethod
/// Size: 0x04
enum class EBeamTaperMethod : uint8_t
{
	PEBTM_None                                                                       = 0,
	PEBTM_Full                                                                       = 1,
	PEBTM_Partial                                                                    = 2,
	PEBTM_MAX                                                                        = 3
};

/// Enum /Script/Engine.EBeam2Method
/// Size: 0x04
enum class EBeam2Method : uint8_t
{
	PEB2M_Distance                                                                   = 0,
	PEB2M_Target                                                                     = 1,
	PEB2M_Branch                                                                     = 2,
	PEB2M_MAX                                                                        = 3
};

/// Enum /Script/Engine.EMeshCameraFacingOptions
/// Size: 0x14
enum class EMeshCameraFacingOptions : uint8_t
{
	XAxisFacing_NoUp                                                                 = 0,
	XAxisFacing_ZUp                                                                  = 1,
	XAxisFacing_NegativeZUp                                                          = 2,
	XAxisFacing_YUp                                                                  = 3,
	XAxisFacing_NegativeYUp                                                          = 4,
	LockedAxis_ZAxisFacing                                                           = 5,
	LockedAxis_NegativeZAxisFacing                                                   = 6,
	LockedAxis_YAxisFacing                                                           = 7,
	LockedAxis_NegativeYAxisFacing                                                   = 8,
	VelocityAligned_ZAxisFacing                                                      = 9,
	VelocityAligned_NegativeZAxisFacing                                              = 10,
	VelocityAligned_YAxisFacing                                                      = 11,
	VelocityAligned_NegativeYAxisFacing                                              = 12,
	EMeshCameraFacingOptions_MAX                                                     = 13
};

/// Enum /Script/Engine.EMeshCameraFacingUpAxis
/// Size: 0x06
enum class EMeshCameraFacingUpAxis : uint8_t
{
	CameraFacing_NoneUP                                                              = 0,
	CameraFacing_ZUp                                                                 = 1,
	CameraFacing_NegativeZUp                                                         = 2,
	CameraFacing_YUp                                                                 = 3,
	CameraFacing_NegativeYUp                                                         = 4,
	CameraFacing_MAX                                                                 = 5
};

/// Enum /Script/Engine.EMeshScreenAlignment
/// Size: 0x04
enum class EMeshScreenAlignment : uint8_t
{
	PSMA_MeshFaceCameraWithRoll                                                      = 0,
	PSMA_MeshFaceCameraWithSpin                                                      = 1,
	PSMA_MeshFaceCameraWithLockedAxis                                                = 2,
	PSMA_MAX                                                                         = 3
};

/// Enum /Script/Engine.ETrailsRenderAxisOption
/// Size: 0x04
enum class ETrailsRenderAxisOption : uint8_t
{
	Trails_CameraUp                                                                  = 0,
	Trails_SourceUp                                                                  = 1,
	Trails_WorldUp                                                                   = 2,
	Trails_MAX                                                                       = 3
};

/// Enum /Script/Engine.EParticleScreenAlignment
/// Size: 0x08
enum class EParticleScreenAlignment : uint8_t
{
	PSA_FacingCameraPosition                                                         = 0,
	PSA_Square                                                                       = 1,
	PSA_Rectangle                                                                    = 2,
	PSA_Velocity                                                                     = 3,
	PSA_AwayFromCenter                                                               = 4,
	PSA_TypeSpecific                                                                 = 5,
	PSA_FacingCameraDistanceBlend                                                    = 6,
	PSA_MAX                                                                          = 7
};

/// Enum /Script/Engine.EParticleSystemOcclusionBoundsMethod
/// Size: 0x04
enum class EParticleSystemOcclusionBoundsMethod : uint8_t
{
	EPSOBM_None                                                                      = 0,
	EPSOBM_ParticleBounds                                                            = 1,
	EPSOBM_CustomBounds                                                              = 2,
	EPSOBM_MAX                                                                       = 3
};

/// Enum /Script/Engine.ParticleSystemLODMethod
/// Size: 0x04
enum class ParticleSystemLODMethod : uint8_t
{
	PARTICLESYSTEMLODMETHOD_Automatic                                                = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                                                = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic                                        = 2,
	PARTICLESYSTEMLODMETHOD_MAX                                                      = 3
};

/// Enum /Script/Engine.EParticleSystemUpdateMode
/// Size: 0x03
enum class EParticleSystemUpdateMode : uint8_t
{
	EPSUM_RealTime                                                                   = 0,
	EPSUM_FixedTime                                                                  = 1,
	EPSUM_MAX                                                                        = 2
};

/// Enum /Script/Engine.EParticleEventType
/// Size: 0x07
enum class EParticleEventType : uint8_t
{
	EPET_Any                                                                         = 0,
	EPET_Spawn                                                                       = 1,
	EPET_Death                                                                       = 2,
	EPET_Collision                                                                   = 3,
	EPET_Burst                                                                       = 4,
	EPET_Blueprint                                                                   = 5,
	EPET_MAX                                                                         = 6
};

/// Enum /Script/Engine.ParticleReplayState
/// Size: 0x04
enum class ParticleReplayState : uint8_t
{
	PRS_Disabled                                                                     = 0,
	PRS_Capturing                                                                    = 1,
	PRS_Replaying                                                                    = 2,
	PRS_MAX                                                                          = 3
};

/// Enum /Script/Engine.EParticleSysParamType
/// Size: 0x10
enum class EParticleSysParamType : uint8_t
{
	PSPT_None                                                                        = 0,
	PSPT_Scalar                                                                      = 1,
	PSPT_ScalarRand                                                                  = 2,
	PSPT_Vector                                                                      = 3,
	PSPT_VectorRand                                                                  = 4,
	PSPT_Color                                                                       = 5,
	PSPT_Actor                                                                       = 6,
	PSPT_Material                                                                    = 7,
	PSPT_VectorUnitRand                                                              = 8,
	PSPT_MAX                                                                         = 9
};

/// Enum /Script/Engine.ESettingsLockedAxis
/// Size: 0x06
enum class ESettingsLockedAxis : uint8_t
{
	ESettingsLockedAxis__None                                                        = 0,
	ESettingsLockedAxis__X                                                           = 1,
	ESettingsLockedAxis__Y                                                           = 2,
	ESettingsLockedAxis__Z                                                           = 3,
	ESettingsLockedAxis__Invalid                                                     = 4,
	ESettingsLockedAxis__ESettingsLockedAxis_MAX                                     = 5
};

/// Enum /Script/Engine.ESettingsDOF
/// Size: 0x05
enum class ESettingsDOF : uint8_t
{
	ESettingsDOF__Full3D                                                             = 0,
	ESettingsDOF__YZPlane                                                            = 1,
	ESettingsDOF__XZPlane                                                            = 2,
	ESettingsDOF__XYPlane                                                            = 3,
	ESettingsDOF__ESettingsDOF_MAX                                                   = 4
};

/// Enum /Script/Engine.EFrictionCombineMode
/// Size: 0x04
enum class EFrictionCombineMode : uint8_t
{
	EFrictionCombineMode__Average                                                    = 0,
	EFrictionCombineMode__Min                                                        = 1,
	EFrictionCombineMode__Multiply                                                   = 2,
	EFrictionCombineMode__Max                                                        = 3
};

/// Enum /Script/Engine.EViewTargetBlendFunction
/// Size: 0x06
enum class EViewTargetBlendFunction : uint8_t
{
	EViewTargetBlendFunction__VTBlend_Linear                                         = 0,
	EViewTargetBlendFunction__VTBlend_Cubic                                          = 1,
	EViewTargetBlendFunction__VTBlend_EaseIn                                         = 2,
	EViewTargetBlendFunction__VTBlend_EaseOut                                        = 3,
	EViewTargetBlendFunction__VTBlend_EaseInOut                                      = 4,
	EViewTargetBlendFunction__VTBlend_MAX                                            = 5
};

/// Enum /Script/Engine.EDynamicForceFeedbackAction
/// Size: 0x04
enum class EDynamicForceFeedbackAction : uint8_t
{
	EDynamicForceFeedbackAction__Start                                               = 0,
	EDynamicForceFeedbackAction__Update                                              = 1,
	EDynamicForceFeedbackAction__Stop                                                = 2,
	EDynamicForceFeedbackAction__EDynamicForceFeedbackAction_MAX                     = 3
};

/// Enum /Script/Engine.ERendererStencilMask
/// Size: 0x11
enum class ERendererStencilMask : uint8_t
{
	ERendererStencilMask__ERSM_Default                                               = 0,
	ERendererStencilMask__ERSM                                                       = 1,
	ERendererStencilMask__ERSM3                                                      = 2,
	ERendererStencilMask__ERSM4                                                      = 3,
	ERendererStencilMask__ERSM5                                                      = 4,
	ERendererStencilMask__ERSM6                                                      = 5,
	ERendererStencilMask__ERSM7                                                      = 6,
	ERendererStencilMask__ERSM8                                                      = 7,
	ERendererStencilMask__ERSM9                                                      = 8,
	ERendererStencilMask__ERSM10                                                     = 9,
	ERendererStencilMask__ERSM_MAX                                                   = 10
};

/// Enum /Script/Engine.EHasCustomNavigableGeometry
/// Size: 0x05
enum class EHasCustomNavigableGeometry : uint8_t
{
	EHasCustomNavigableGeometry__No                                                  = 0,
	EHasCustomNavigableGeometry__Yes                                                 = 1,
	EHasCustomNavigableGeometry__EvenIfNotCollidable                                 = 2,
	EHasCustomNavigableGeometry__DontExport                                          = 3,
	EHasCustomNavigableGeometry__EHasCustomNavigableGeometry_MAX                     = 4
};

/// Enum /Script/Engine.ECanBeCharacterBase
/// Size: 0x04
enum class ECanBeCharacterBase : uint8_t
{
	ECB_No                                                                           = 0,
	ECB_Yes                                                                          = 1,
	ECB_Owner                                                                        = 2,
	ECB_MAX                                                                          = 3
};

/// Enum /Script/Engine.EReflectionSourceType
/// Size: 0x03
enum class EReflectionSourceType : uint8_t
{
	EReflectionSourceType__CapturedScene                                             = 0,
	EReflectionSourceType__SpecifiedCubemap                                          = 1,
	EReflectionSourceType__EReflectionSourceType_MAX                                 = 2
};

/// Enum /Script/Engine.EShaderCompressionFormat
/// Size: 0x05
enum class EShaderCompressionFormat : uint8_t
{
	EShaderCompressionFormat__None                                                   = 0,
	EShaderCompressionFormat__LZ4                                                    = 1,
	EShaderCompressionFormat__Oodle                                                  = 2,
	EShaderCompressionFormat__Zlib                                                   = 3,
	EShaderCompressionFormat__EShaderCompressionFormat_MAX                           = 4
};

/// Enum /Script/Engine.EDefaultBackBufferPixelFormat
/// Size: 0x06
enum class EDefaultBackBufferPixelFormat : uint8_t
{
	EDefaultBackBufferPixelFormat__DBBPF_B8G8R8A8                                    = 0,
	EDefaultBackBufferPixelFormat__DBBPF_A16B16G16R16_DEPRECATED                     = 1,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGB_DEPRECATED                         = 2,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGBA                                   = 3,
	EDefaultBackBufferPixelFormat__DBBPF_A2B10G10R10                                 = 4,
	EDefaultBackBufferPixelFormat__DBBPF_MAX                                         = 5
};

/// Enum /Script/Engine.EAutoExposureMethodUI
/// Size: 0x04
enum class EAutoExposureMethodUI : uint8_t
{
	EAutoExposureMethodUI__AEM_Histogram                                             = 0,
	EAutoExposureMethodUI__AEM_Basic                                                 = 1,
	EAutoExposureMethodUI__AEM_Manual                                                = 2,
	EAutoExposureMethodUI__AEM_MAX                                                   = 3
};

/// Enum /Script/Engine.EAlphaChannelMode
/// Size: 0x04
enum class EAlphaChannelMode : uint8_t
{
	EAlphaChannelMode__Disabled                                                      = 0,
	EAlphaChannelMode__LinearColorSpaceOnly                                          = 1,
	EAlphaChannelMode__AllowThroughTonemapper                                        = 2,
	EAlphaChannelMode__EAlphaChannelMode_MAX                                         = 3
};

/// Enum /Script/Engine.EEarlyZPass
/// Size: 0x05
enum class EEarlyZPass : uint8_t
{
	EEarlyZPass__None                                                                = 0,
	EEarlyZPass__OpaqueOnly                                                          = 1,
	EEarlyZPass__OpaqueAndMasked                                                     = 2,
	EEarlyZPass__Auto                                                                = 3,
	EEarlyZPass__EEarlyZPass_MAX                                                     = 4
};

/// Enum /Script/Engine.ECustomDepthStencil
/// Size: 0x05
enum class ECustomDepthStencil : uint8_t
{
	ECustomDepthStencil__Disabled                                                    = 0,
	ECustomDepthStencil__Enabled                                                     = 1,
	ECustomDepthStencil__EnabledOnDemand                                             = 2,
	ECustomDepthStencil__EnabledWithStencil                                          = 3,
	ECustomDepthStencil__ECustomDepthStencil_MAX                                     = 4
};

/// Enum /Script/Engine.EMobileMSAASampleCount
/// Size: 0x05
enum class EMobileMSAASampleCount : uint8_t
{
	EMobileMSAASampleCount__One                                                      = 1,
	EMobileMSAASampleCount__Two                                                      = 2,
	EMobileMSAASampleCount__Four                                                     = 4,
	EMobileMSAASampleCount__Eight                                                    = 8,
	EMobileMSAASampleCount__EMobileMSAASampleCount_MAX                               = 9
};

/// Enum /Script/Engine.ECompositingSampleCount
/// Size: 0x05
enum class ECompositingSampleCount : uint8_t
{
	ECompositingSampleCount__One                                                     = 1,
	ECompositingSampleCount__Two                                                     = 2,
	ECompositingSampleCount__Four                                                    = 4,
	ECompositingSampleCount__Eight                                                   = 8,
	ECompositingSampleCount__ECompositingSampleCount_MAX                             = 9
};

/// Enum /Script/Engine.EClearSceneOptions
/// Size: 0x04
enum class EClearSceneOptions : uint8_t
{
	EClearSceneOptions__NoClear                                                      = 0,
	EClearSceneOptions__HardwareClear                                                = 1,
	EClearSceneOptions__QuadAtMaxZ                                                   = 2,
	EClearSceneOptions__EClearSceneOptions_MAX                                       = 3
};

/// Enum /Script/Engine.EReporterLineStyle
/// Size: 0x03
enum class EReporterLineStyle : uint8_t
{
	EReporterLineStyle__Line                                                         = 0,
	EReporterLineStyle__Dash                                                         = 1,
	EReporterLineStyle__EReporterLineStyle_MAX                                       = 2
};

/// Enum /Script/Engine.ELegendPosition
/// Size: 0x03
enum class ELegendPosition : uint8_t
{
	ELegendPosition__Outside                                                         = 0,
	ELegendPosition__Inside                                                          = 1,
	ELegendPosition__ELegendPosition_MAX                                             = 2
};

/// Enum /Script/Engine.EGraphDataStyle
/// Size: 0x03
enum class EGraphDataStyle : uint8_t
{
	EGraphDataStyle__Lines                                                           = 0,
	EGraphDataStyle__Filled                                                          = 1,
	EGraphDataStyle__EGraphDataStyle_MAX                                             = 2
};

/// Enum /Script/Engine.EGraphAxisStyle
/// Size: 0x04
enum class EGraphAxisStyle : uint8_t
{
	EGraphAxisStyle__Lines                                                           = 0,
	EGraphAxisStyle__Notches                                                         = 1,
	EGraphAxisStyle__Grid                                                            = 2,
	EGraphAxisStyle__EGraphAxisStyle_MAX                                             = 3
};

/// Enum /Script/Engine.ReverbPreset
/// Size: 0x24
enum class ReverbPreset : uint8_t
{
	REVERB_Default                                                                   = 0,
	REVERB_Bathroom                                                                  = 1,
	REVERB_StoneRoom                                                                 = 2,
	REVERB_Auditorium                                                                = 3,
	REVERB_ConcertHall                                                               = 4,
	REVERB_Cave                                                                      = 5,
	REVERB_Hallway                                                                   = 6,
	REVERB_StoneCorridor                                                             = 7,
	REVERB_Alley                                                                     = 8,
	REVERB_Forest                                                                    = 9,
	REVERB_City                                                                      = 10,
	REVERB_Mountains                                                                 = 11,
	REVERB_Quarry                                                                    = 12,
	REVERB_Plain                                                                     = 13,
	REVERB_ParkingLot                                                                = 14,
	REVERB_SewerPipe                                                                 = 15,
	REVERB_Underwater                                                                = 16,
	REVERB_SmallRoom                                                                 = 17,
	REVERB_MediumRoom                                                                = 18,
	REVERB_LargeRoom                                                                 = 19,
	REVERB_MediumHall                                                                = 20,
	REVERB_LargeHall                                                                 = 21,
	REVERB_Plate                                                                     = 22,
	REVERB_MAX                                                                       = 23
};

/// Enum /Script/Engine.ERichCurveKeyTimeCompressionFormat
/// Size: 0x03
enum class ERichCurveKeyTimeCompressionFormat : uint8_t
{
	RCKTCF_uint16                                                                    = 0,
	RCKTCF_float32                                                                   = 1,
	RCKTCF_MAX                                                                       = 2
};

/// Enum /Script/Engine.ERichCurveCompressionFormat
/// Size: 0x06
enum class ERichCurveCompressionFormat : uint8_t
{
	RCCF_Empty                                                                       = 0,
	RCCF_Constant                                                                    = 1,
	RCCF_Linear                                                                      = 2,
	RCCF_Cubic                                                                       = 3,
	RCCF_Mixed                                                                       = 4,
	RCCF_MAX                                                                         = 5
};

/// Enum /Script/Engine.EConstraintTransform
/// Size: 0x03
enum class EConstraintTransform : uint8_t
{
	EConstraintTransform__Absolute                                                   = 0,
	EConstraintTransform__Relative                                                   = 1,
	EConstraintTransform__EConstraintTransform_MAX                                   = 2
};

/// Enum /Script/Engine.EControlConstraint
/// Size: 0x03
enum class EControlConstraint : uint8_t
{
	EControlConstraint__Orientation                                                  = 0,
	EControlConstraint__Translation                                                  = 1,
	EControlConstraint__MAX                                                          = 2
};

/// Enum /Script/Engine.ERootMotionFinishVelocityMode
/// Size: 0x04
enum class ERootMotionFinishVelocityMode : uint8_t
{
	ERootMotionFinishVelocityMode__MaintainLastRootMotionVelocity                    = 0,
	ERootMotionFinishVelocityMode__SetVelocity                                       = 1,
	ERootMotionFinishVelocityMode__ClampVelocity                                     = 2,
	ERootMotionFinishVelocityMode__ERootMotionFinishVelocityMode_MAX                 = 3
};

/// Enum /Script/Engine.ERootMotionSourceSettingsFlags
/// Size: 0x04
enum class ERootMotionSourceSettingsFlags : uint8_t
{
	ERootMotionSourceSettingsFlags__UseSensitiveLiftoffCheck                         = 1,
	ERootMotionSourceSettingsFlags__DisablePartialEndTick                            = 2,
	ERootMotionSourceSettingsFlags__IgnoreZAccumulate                                = 4,
	ERootMotionSourceSettingsFlags__ERootMotionSourceSettingsFlags_MAX               = 5
};

/// Enum /Script/Engine.ERootMotionSourceStatusFlags
/// Size: 0x04
enum class ERootMotionSourceStatusFlags : uint8_t
{
	ERootMotionSourceStatusFlags__Prepared                                           = 1,
	ERootMotionSourceStatusFlags__Finished                                           = 2,
	ERootMotionSourceStatusFlags__MarkedForRemoval                                   = 4,
	ERootMotionSourceStatusFlags__ERootMotionSourceStatusFlags_MAX                   = 5
};

/// Enum /Script/Engine.ERootMotionAccumulateMode
/// Size: 0x03
enum class ERootMotionAccumulateMode : uint8_t
{
	ERootMotionAccumulateMode__Override                                              = 0,
	ERootMotionAccumulateMode__Additive                                              = 1,
	ERootMotionAccumulateMode__ERootMotionAccumulateMode_MAX                         = 2
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMainPassType
/// Size: 0x04
enum class ERuntimeVirtualTextureMainPassType : uint8_t
{
	ERuntimeVirtualTextureMainPassType__Never                                        = 0,
	ERuntimeVirtualTextureMainPassType__Exclusive                                    = 1,
	ERuntimeVirtualTextureMainPassType__Always                                       = 2,
	ERuntimeVirtualTextureMainPassType__ERuntimeVirtualTextureMainPassType_MAX       = 3
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMaterialType
/// Size: 0x08
enum class ERuntimeVirtualTextureMaterialType : uint8_t
{
	ERuntimeVirtualTextureMaterialType__BaseColor                                    = 0,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_DEPRECATED                  = 1,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular                    = 2,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular_YCoCg              = 3,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular_Mask_YCoCg         = 4,
	ERuntimeVirtualTextureMaterialType__WorldHeight                                  = 5,
	ERuntimeVirtualTextureMaterialType__Count                                        = 6,
	ERuntimeVirtualTextureMaterialType__ERuntimeVirtualTextureMaterialType_MAX       = 7
};

/// Enum /Script/Engine.ERayTracingWaterCausticsBufferScale
/// Size: 0x04
enum class ERayTracingWaterCausticsBufferScale : uint8_t
{
	ERayTracingWaterCausticsBufferScale__FULL                                        = 0,
	ERayTracingWaterCausticsBufferScale__HALF                                        = 1,
	ERayTracingWaterCausticsBufferScale__QUATER                                      = 2,
	ERayTracingWaterCausticsBufferScale__ERayTracingWaterCausticsBufferScale_MAX     = 3
};

/// Enum /Script/Engine.ERayTracingWaterCausticsType
/// Size: 0x04
enum class ERayTracingWaterCausticsType : uint8_t
{
	ERayTracingWaterCausticsType__Disable                                            = 0,
	ERayTracingWaterCausticsType__SurfelBasedRendering                               = 1,
	ERayTracingWaterCausticsType__ProceduralMeshes                                   = 2,
	ERayTracingWaterCausticsType__ERayTracingWaterCausticsType_MAX                   = 3
};

/// Enum /Script/Engine.ERayTracingMeshCausticsDebugScreenData
/// Size: 0x04
enum class ERayTracingMeshCausticsDebugScreenData : uint8_t
{
	ERayTracingMeshCausticsDebugScreenData__Debug_None                               = 0,
	ERayTracingMeshCausticsDebugScreenData__Debug_Photon                             = 1,
	ERayTracingMeshCausticsDebugScreenData__Debug_CausticsVariance                   = 2,
	ERayTracingMeshCausticsDebugScreenData__Debug_MAX                                = 3
};

/// Enum /Script/Engine.ERayTracingMeshCausticsDebugLightData
/// Size: 0x09
enum class ERayTracingMeshCausticsDebugLightData : uint8_t
{
	ERayTracingMeshCausticsDebugLightData__Debug_None                                = 0,
	ERayTracingMeshCausticsDebugLightData__Debug_Normal                              = 1,
	ERayTracingMeshCausticsDebugLightData__Debug_ScreenArea                          = 2,
	ERayTracingMeshCausticsDebugLightData__Debug_CausticsVariance                    = 3,
	ERayTracingMeshCausticsDebugLightData__Debug_RayDensity                          = 4,
	ERayTracingMeshCausticsDebugLightData__Debug_RayDensityMip                       = 5,
	ERayTracingMeshCausticsDebugLightData__Debug_LightID                             = 6,
	ERayTracingMeshCausticsDebugLightData__Debug_PhotonCount                         = 7,
	ERayTracingMeshCausticsDebugLightData__Debug_MAX                                 = 8
};

/// Enum /Script/Engine.ERayTracingMeshCausticsTranslucentReflectionMode
/// Size: 0x04
enum class ERayTracingMeshCausticsTranslucentReflectionMode : uint8_t
{
	ERayTracingMeshCausticsTranslucentReflectionMode__TranslucentReflectionMode_NoReflection = 0,
	ERayTracingMeshCausticsTranslucentReflectionMode__TranslucentReflectionMode_AlwaysReflection = 1,
	ERayTracingMeshCausticsTranslucentReflectionMode__TranslucentReflectionMode_RandomReflection = 2,
	ERayTracingMeshCausticsTranslucentReflectionMode__TranslucentReflectionMode_MAX  = 3
};

/// Enum /Script/Engine.ERayTracingMeshCausticsBufferScale
/// Size: 0x04
enum class ERayTracingMeshCausticsBufferScale : uint8_t
{
	ERayTracingMeshCausticsBufferScale__BufferScale_Full                             = 0,
	ERayTracingMeshCausticsBufferScale__BufferScale_Half                             = 1,
	ERayTracingMeshCausticsBufferScale__BufferScale_Quarter                          = 2,
	ERayTracingMeshCausticsBufferScale__BufferScale_MAX                              = 3
};

/// Enum /Script/Engine.ERayTracingMeshCausticsResolutionOverride
/// Size: 0x08
enum class ERayTracingMeshCausticsResolutionOverride : uint8_t
{
	ERayTracingMeshCausticsResolutionOverride__Resolution_None                       = 0,
	ERayTracingMeshCausticsResolutionOverride__Resolution                            = 1,
	ERayTracingMeshCausticsResolutionOverride__Resolution3                           = 2,
	ERayTracingMeshCausticsResolutionOverride__Resolution4                           = 3,
	ERayTracingMeshCausticsResolutionOverride__Resolution5                           = 4,
	ERayTracingMeshCausticsResolutionOverride__Resolution6                           = 5,
	ERayTracingMeshCausticsResolutionOverride__Resolution7                           = 6,
	ERayTracingMeshCausticsResolutionOverride__Resolution_MAX                        = 7
};

/// Enum /Script/Engine.ERayTracingMeshCausticsResolution
/// Size: 0x07
enum class ERayTracingMeshCausticsResolution : uint8_t
{
	ERayTracingMeshCausticsResolution__Resolution                                    = 0,
	ERayTracingMeshCausticsResolution__Resolution2                                   = 1,
	ERayTracingMeshCausticsResolution__Resolution3                                   = 2,
	ERayTracingMeshCausticsResolution__Resolution4                                   = 3,
	ERayTracingMeshCausticsResolution__Resolution5                                   = 4,
	ERayTracingMeshCausticsResolution__Resolution6                                   = 5,
	ERayTracingMeshCausticsResolution__Resolution_MAX                                = 6
};

/// Enum /Script/Engine.EReflectedAndRefractedRayTracedShadows
/// Size: 0x04
enum class EReflectedAndRefractedRayTracedShadows : uint8_t
{
	EReflectedAndRefractedRayTracedShadows__Disabled                                 = 0,
	EReflectedAndRefractedRayTracedShadows__Hard_shadows                             = 1,
	EReflectedAndRefractedRayTracedShadows__Area_shadows                             = 2,
	EReflectedAndRefractedRayTracedShadows__EReflectedAndRefractedRayTracedShadows_MAX = 3
};

/// Enum /Script/Engine.ERayTracingGIDenoiseDebugType
/// Size: 0x09
enum class ERayTracingGIDenoiseDebugType : uint8_t
{
	ERayTracingGIDenoiseDebugType__Disabled                                          = 0,
	ERayTracingGIDenoiseDebugType__Variance                                          = 1,
	ERayTracingGIDenoiseDebugType__FirstMoment                                       = 2,
	ERayTracingGIDenoiseDebugType__SecondMoment                                      = 3,
	ERayTracingGIDenoiseDebugType__HistoryLength                                     = 4,
	ERayTracingGIDenoiseDebugType__MotionVector                                      = 5,
	ERayTracingGIDenoiseDebugType__HitDistance                                       = 6,
	ERayTracingGIDenoiseDebugType__RawOutput                                         = 7,
	ERayTracingGIDenoiseDebugType__ERayTracingGIDenoiseDebugType_MAX                 = 8
};

/// Enum /Script/Engine.ERayTracingGIDenoiseSpatialFilterType
/// Size: 0x03
enum class ERayTracingGIDenoiseSpatialFilterType : uint8_t
{
	ERayTracingGIDenoiseSpatialFilterType__ATrous                                    = 0,
	ERayTracingGIDenoiseSpatialFilterType__Gaussian                                  = 1,
	ERayTracingGIDenoiseSpatialFilterType__ERayTracingGIDenoiseSpatialFilterType_MAX = 2
};

/// Enum /Script/Engine.ERayTracingGIDenoiseType
/// Size: 0x04
enum class ERayTracingGIDenoiseType : uint8_t
{
	ERayTracingGIDenoiseType__Disabled                                               = 0,
	ERayTracingGIDenoiseType__UE4                                                    = 1,
	ERayTracingGIDenoiseType__New                                                    = 2,
	ERayTracingGIDenoiseType__ERayTracingGIDenoiseType_MAX                           = 3
};

/// Enum /Script/Engine.ERayTracingGlobalIlluminationType
/// Size: 0x04
enum class ERayTracingGlobalIlluminationType : uint8_t
{
	ERayTracingGlobalIlluminationType__Disabled                                      = 0,
	ERayTracingGlobalIlluminationType__BruteForce                                    = 1,
	ERayTracingGlobalIlluminationType__FinalGather                                   = 2,
	ERayTracingGlobalIlluminationType__ERayTracingGlobalIlluminationType_MAX         = 3
};

/// Enum /Script/Engine.ETranslucencyType
/// Size: 0x03
enum class ETranslucencyType : uint8_t
{
	ETranslucencyType__Raster                                                        = 0,
	ETranslucencyType__RayTracing                                                    = 1,
	ETranslucencyType__ETranslucencyType_MAX                                         = 2
};

/// Enum /Script/Engine.EReflectionsType
/// Size: 0x03
enum class EReflectionsType : uint8_t
{
	EReflectionsType__ScreenSpace                                                    = 0,
	EReflectionsType__RayTracing                                                     = 1,
	EReflectionsType__EReflectionsType_MAX                                           = 2
};

/// Enum /Script/Engine.ELightUnits
/// Size: 0x04
enum class ELightUnits : uint8_t
{
	ELightUnits__Unitless                                                            = 0,
	ELightUnits__Candelas                                                            = 1,
	ELightUnits__Lumens                                                              = 2,
	ELightUnits__ELightUnits_MAX                                                     = 3
};

/// Enum /Script/Engine.EBloomMethod
/// Size: 0x03
enum class EBloomMethod : uint8_t
{
	BM_SOG                                                                           = 0,
	BM_FFT                                                                           = 1,
	BM_MAX                                                                           = 2
};

/// Enum /Script/Engine.EAutoExposureMethod
/// Size: 0x04
enum class EAutoExposureMethod : uint8_t
{
	AEM_Histogram                                                                    = 0,
	AEM_Basic                                                                        = 1,
	AEM_Manual                                                                       = 2,
	AEM_MAX                                                                          = 3
};

/// Enum /Script/Engine.EAntiAliasingMethod
/// Size: 0x06
enum class EAntiAliasingMethod : uint8_t
{
	AAM_None                                                                         = 0,
	AAM_FXAA                                                                         = 1,
	AAM_TemporalAA                                                                   = 2,
	AAM_MSAA                                                                         = 3,
	AAM_DLSS                                                                         = 4,
	AAM_MAX                                                                          = 5
};

/// Enum /Script/Engine.EDepthOfFieldMethod
/// Size: 0x04
enum class EDepthOfFieldMethod : uint8_t
{
	DOFM_BokehDOF                                                                    = 0,
	DOFM_Gaussian                                                                    = 1,
	DOFM_CircleDOF                                                                   = 2,
	DOFM_MAX                                                                         = 3
};

/// Enum /Script/Engine.ESceneCapturePrimitiveRenderMode
/// Size: 0x04
enum class ESceneCapturePrimitiveRenderMode : uint8_t
{
	ESceneCapturePrimitiveRenderMode__PRM_LegacySceneCapture                         = 0,
	ESceneCapturePrimitiveRenderMode__PRM_RenderScenePrimitives                      = 1,
	ESceneCapturePrimitiveRenderMode__PRM_UseShowOnlyList                            = 2,
	ESceneCapturePrimitiveRenderMode__PRM_MAX                                        = 3
};

/// Enum /Script/Engine.EMaterialProperty
/// Size: 0x33
enum class EMaterialProperty : uint8_t
{
	MP_EmissiveColor                                                                 = 0,
	MP_Opacity                                                                       = 1,
	MP_OpacityMask                                                                   = 2,
	MP_DiffuseColor                                                                  = 3,
	MP_SpecularColor                                                                 = 4,
	MP_BaseColor                                                                     = 5,
	MP_Metallic                                                                      = 6,
	MP_Specular                                                                      = 7,
	MP_Roughness                                                                     = 8,
	MP_Anisotropy                                                                    = 9,
	MP_Normal                                                                        = 10,
	MP_Tangent                                                                       = 11,
	MP_WorldPositionOffset                                                           = 12,
	MP_WorldDisplacement                                                             = 13,
	MP_TessellationMultiplier                                                        = 14,
	MP_SubsurfaceColor                                                               = 15,
	MP_CustomData0                                                                   = 16,
	MP_CustomData1                                                                   = 17,
	MP_AmbientOcclusion                                                              = 18,
	MP_Refraction                                                                    = 19,
	MP_CustomizedUVs0                                                                = 20,
	MP_CustomizedUVs1                                                                = 21,
	MP_CustomizedUVs2                                                                = 22,
	MP_CustomizedUVs3                                                                = 23,
	MP_CustomizedUVs4                                                                = 24,
	MP_CustomizedUVs5                                                                = 25,
	MP_CustomizedUVs6                                                                = 26,
	MP_CustomizedUVs7                                                                = 27,
	MP_PixelDepthOffset                                                              = 28,
	MP_ShadingModel                                                                  = 29,
	MP_MaterialAttributes                                                            = 30,
	MP_CustomOutput                                                                  = 31,
	MP_MAX                                                                           = 32
};

/// Enum /Script/Engine.ESkinCacheDefaultBehavior
/// Size: 0x03
enum class ESkinCacheDefaultBehavior : uint8_t
{
	ESkinCacheDefaultBehavior__Exclusive                                             = 0,
	ESkinCacheDefaultBehavior__Inclusive                                             = 1,
	ESkinCacheDefaultBehavior__ESkinCacheDefaultBehavior_MAX                         = 2
};

/// Enum /Script/Engine.ESkinCacheUsage
/// Size: 0x04
enum class ESkinCacheUsage : uint8_t
{
	ESkinCacheUsage__Auto                                                            = 0,
	ESkinCacheUsage__Disabled                                                        = 255,
	ESkinCacheUsage__Enabled                                                         = 1,
	ESkinCacheUsage__ESkinCacheUsage_MAX                                             = 256
};

/// Enum /Script/Engine.EPhysicsTransformUpdateMode
/// Size: 0x03
enum class EPhysicsTransformUpdateMode : uint8_t
{
	EPhysicsTransformUpdateMode__SimulationUpatesComponentTransform                  = 0,
	EPhysicsTransformUpdateMode__ComponentTransformIsKinematic                       = 1,
	EPhysicsTransformUpdateMode__EPhysicsTransformUpdateMode_MAX                     = 2
};

/// Enum /Script/Engine.EAnimationMode
/// Size: 0x04
enum class EAnimationMode : uint8_t
{
	EAnimationMode__AnimationBlueprint                                               = 0,
	EAnimationMode__AnimationSingleNode                                              = 1,
	EAnimationMode__AnimationCustomMode                                              = 2,
	EAnimationMode__EAnimationMode_MAX                                               = 3
};

/// Enum /Script/Engine.EKinematicBonesUpdateToPhysics
/// Size: 0x03
enum class EKinematicBonesUpdateToPhysics : uint8_t
{
	EKinematicBonesUpdateToPhysics__SkipSimulatingBones                              = 0,
	EKinematicBonesUpdateToPhysics__SkipAllBones                                     = 1,
	EKinematicBonesUpdateToPhysics__EKinematicBonesUpdateToPhysics_MAX               = 2
};

/// Enum /Script/Engine.EClothMassMode
/// Size: 0x05
enum class EClothMassMode : uint8_t
{
	EClothMassMode__UniformMass                                                      = 0,
	EClothMassMode__TotalMass                                                        = 1,
	EClothMassMode__Density                                                          = 2,
	EClothMassMode__MaxClothMassMode                                                 = 3,
	EClothMassMode__EClothMassMode_MAX                                               = 4
};

/// Enum /Script/Engine.EAnimCurveType
/// Size: 0x05
enum class EAnimCurveType : uint8_t
{
	EAnimCurveType__AttributeCurve                                                   = 0,
	EAnimCurveType__MaterialCurve                                                    = 1,
	EAnimCurveType__MorphTargetCurve                                                 = 2,
	EAnimCurveType__MaxAnimCurveType                                                 = 3,
	EAnimCurveType__EAnimCurveType_MAX                                               = 4
};

/// Enum /Script/Engine.ESkeletalMeshSkinningImportVersions
/// Size: 0x05
enum class ESkeletalMeshSkinningImportVersions : uint8_t
{
	ESkeletalMeshSkinningImportVersions__Before_Versionning                          = 0,
	ESkeletalMeshSkinningImportVersions__SkeletalMeshBuildRefactor                   = 1,
	ESkeletalMeshSkinningImportVersions__VersionPlusOne                              = 2,
	ESkeletalMeshSkinningImportVersions__LatestVersion                               = 1,
	ESkeletalMeshSkinningImportVersions__ESkeletalMeshSkinningImportVersions_MAX     = 3
};

/// Enum /Script/Engine.ESkeletalMeshGeoImportVersions
/// Size: 0x05
enum class ESkeletalMeshGeoImportVersions : uint8_t
{
	ESkeletalMeshGeoImportVersions__Before_Versionning                               = 0,
	ESkeletalMeshGeoImportVersions__SkeletalMeshBuildRefactor                        = 1,
	ESkeletalMeshGeoImportVersions__VersionPlusOne                                   = 2,
	ESkeletalMeshGeoImportVersions__LatestVersion                                    = 1,
	ESkeletalMeshGeoImportVersions__ESkeletalMeshGeoImportVersions_MAX               = 3
};

/// Enum /Script/Engine.EBoneFilterActionOption
/// Size: 0x04
enum class EBoneFilterActionOption : uint8_t
{
	EBoneFilterActionOption__Remove                                                  = 0,
	EBoneFilterActionOption__Keep                                                    = 1,
	EBoneFilterActionOption__Invalid                                                 = 2,
	EBoneFilterActionOption__EBoneFilterActionOption_MAX                             = 3
};

/// Enum /Script/Engine.SkeletalMeshOptimizationImportance
/// Size: 0x07
enum class SkeletalMeshOptimizationImportance : uint8_t
{
	SMOI_Off                                                                         = 0,
	SMOI_Lowest                                                                      = 1,
	SMOI_Low                                                                         = 2,
	SMOI_Normal                                                                      = 3,
	SMOI_High                                                                        = 4,
	SMOI_Highest                                                                     = 5,
	SMOI_MAX                                                                         = 6
};

/// Enum /Script/Engine.SkeletalMeshOptimizationType
/// Size: 0x04
enum class SkeletalMeshOptimizationType : uint8_t
{
	SMOT_NumOfTriangles                                                              = 0,
	SMOT_MaxDeviation                                                                = 1,
	SMOT_TriangleOrDeviation                                                         = 2,
	SMOT_MAX                                                                         = 3
};

/// Enum /Script/Engine.SkeletalMeshTerminationCriterion
/// Size: 0x07
enum class SkeletalMeshTerminationCriterion : uint8_t
{
	SMTC_NumOfTriangles                                                              = 0,
	SMTC_NumOfVerts                                                                  = 1,
	SMTC_TriangleOrVert                                                              = 2,
	SMTC_AbsNumOfTriangles                                                           = 3,
	SMTC_AbsNumOfVerts                                                               = 4,
	SMTC_AbsTriangleOrVert                                                           = 5,
	SMTC_MAX                                                                         = 6
};

/// Enum /Script/Engine.EBoneTranslationRetargetingMode
/// Size: 0x06
enum class EBoneTranslationRetargetingMode : uint8_t
{
	EBoneTranslationRetargetingMode__Animation                                       = 0,
	EBoneTranslationRetargetingMode__Skeleton                                        = 1,
	EBoneTranslationRetargetingMode__AnimationScaled                                 = 2,
	EBoneTranslationRetargetingMode__AnimationRelative                               = 3,
	EBoneTranslationRetargetingMode__OrientAndScale                                  = 4,
	EBoneTranslationRetargetingMode__EBoneTranslationRetargetingMode_MAX             = 5
};

/// Enum /Script/Engine.EBoneSpaces
/// Size: 0x03
enum class EBoneSpaces : uint8_t
{
	EBoneSpaces__WorldSpace                                                          = 0,
	EBoneSpaces__ComponentSpace                                                      = 1,
	EBoneSpaces__EBoneSpaces_MAX                                                     = 2
};

/// Enum /Script/Engine.EVisibilityBasedAnimTickOption
/// Size: 0x05
enum class EVisibilityBasedAnimTickOption : uint8_t
{
	EVisibilityBasedAnimTickOption__AlwaysTickPoseAndRefreshBones                    = 0,
	EVisibilityBasedAnimTickOption__AlwaysTickPose                                   = 1,
	EVisibilityBasedAnimTickOption__OnlyTickMontagesWhenNotRendered                  = 2,
	EVisibilityBasedAnimTickOption__OnlyTickPoseWhenRendered                         = 3,
	EVisibilityBasedAnimTickOption__EVisibilityBasedAnimTickOption_MAX               = 4
};

/// Enum /Script/Engine.EPhysBodyOp
/// Size: 0x03
enum class EPhysBodyOp : uint8_t
{
	PBO_None                                                                         = 0,
	PBO_Term                                                                         = 1,
	PBO_MAX                                                                          = 2
};

/// Enum /Script/Engine.EBoneVisibilityStatus
/// Size: 0x04
enum class EBoneVisibilityStatus : uint8_t
{
	BVS_HiddenByParent                                                               = 0,
	BVS_Visible                                                                      = 1,
	BVS_ExplicitlyHidden                                                             = 2,
	BVS_MAX                                                                          = 3
};

/// Enum /Script/Engine.ESkyAtmosphereTransformMode
/// Size: 0x04
enum class ESkyAtmosphereTransformMode : uint8_t
{
	ESkyAtmosphereTransformMode__PlanetTopAtAbsoluteWorldOrigin                      = 0,
	ESkyAtmosphereTransformMode__PlanetTopAtComponentTransform                       = 1,
	ESkyAtmosphereTransformMode__PlanetCenterAtComponentTransform                    = 2,
	ESkyAtmosphereTransformMode__ESkyAtmosphereTransformMode_MAX                     = 3
};

/// Enum /Script/Engine.ESkyLightSourceType
/// Size: 0x03
enum class ESkyLightSourceType : uint8_t
{
	SLS_CapturedScene                                                                = 0,
	SLS_SpecifiedCubemap                                                             = 1,
	SLS_MAX                                                                          = 2
};

/// Enum /Script/Engine.ESoundDistanceCalc
/// Size: 0x05
enum class ESoundDistanceCalc : uint8_t
{
	SOUNDDISTANCE_Normal                                                             = 0,
	SOUNDDISTANCE_InfiniteXYPlane                                                    = 1,
	SOUNDDISTANCE_InfiniteXZPlane                                                    = 2,
	SOUNDDISTANCE_InfiniteYZPlane                                                    = 3,
	SOUNDDISTANCE_MAX                                                                = 4
};

/// Enum /Script/Engine.EVirtualizationMode
/// Size: 0x04
enum class EVirtualizationMode : uint8_t
{
	EVirtualizationMode__Disabled                                                    = 0,
	EVirtualizationMode__PlayWhenSilent                                              = 1,
	EVirtualizationMode__Restart                                                     = 2,
	EVirtualizationMode__EVirtualizationMode_MAX                                     = 3
};

/// Enum /Script/Engine.EMaxConcurrentResolutionRule
/// Size: 0x09
enum class EMaxConcurrentResolutionRule : uint8_t
{
	EMaxConcurrentResolutionRule__PreventNew                                         = 0,
	EMaxConcurrentResolutionRule__StopOldest                                         = 1,
	EMaxConcurrentResolutionRule__StopFarthestThenPreventNew                         = 2,
	EMaxConcurrentResolutionRule__StopFarthestThenOldest                             = 3,
	EMaxConcurrentResolutionRule__StopLowestPriority                                 = 4,
	EMaxConcurrentResolutionRule__StopQuietest                                       = 5,
	EMaxConcurrentResolutionRule__StopLowestPriorityThenPreventNew                   = 6,
	EMaxConcurrentResolutionRule__Count                                              = 7,
	EMaxConcurrentResolutionRule__EMaxConcurrentResolutionRule_MAX                   = 8
};

/// Enum /Script/Engine.ESoundGroup
/// Size: 0x26
enum class ESoundGroup : uint8_t
{
	SOUNDGROUP_Default                                                               = 0,
	SOUNDGROUP_Effects                                                               = 1,
	SOUNDGROUP_UI                                                                    = 2,
	SOUNDGROUP_Music                                                                 = 3,
	SOUNDGROUP_Voice                                                                 = 4,
	SOUNDGROUP_GameSoundGroup1                                                       = 5,
	SOUNDGROUP_GameSoundGroup2                                                       = 6,
	SOUNDGROUP_GameSoundGroup3                                                       = 7,
	SOUNDGROUP_GameSoundGroup4                                                       = 8,
	SOUNDGROUP_GameSoundGroup5                                                       = 9,
	SOUNDGROUP_GameSoundGroup6                                                       = 10,
	SOUNDGROUP_GameSoundGroup7                                                       = 11,
	SOUNDGROUP_GameSoundGroup8                                                       = 12,
	SOUNDGROUP_GameSoundGroup9                                                       = 13,
	SOUNDGROUP_GameSoundGroup10                                                      = 14,
	SOUNDGROUP_GameSoundGroup11                                                      = 15,
	SOUNDGROUP_GameSoundGroup12                                                      = 16,
	SOUNDGROUP_GameSoundGroup13                                                      = 17,
	SOUNDGROUP_GameSoundGroup14                                                      = 18,
	SOUNDGROUP_GameSoundGroup15                                                      = 19,
	SOUNDGROUP_GameSoundGroup16                                                      = 20,
	SOUNDGROUP_GameSoundGroup17                                                      = 21,
	SOUNDGROUP_GameSoundGroup18                                                      = 22,
	SOUNDGROUP_GameSoundGroup19                                                      = 23,
	SOUNDGROUP_GameSoundGroup20                                                      = 24,
	SOUNDGROUP_MAX                                                                   = 25
};

/// Enum /Script/Engine.ModulationParamMode
/// Size: 0x04
enum class ModulationParamMode : uint8_t
{
	MPM_Normal                                                                       = 0,
	MPM_Abs                                                                          = 1,
	MPM_Direct                                                                       = 2,
	MPM_MAX                                                                          = 3
};

/// Enum /Script/Engine.ESourceBusChannels
/// Size: 0x03
enum class ESourceBusChannels : uint8_t
{
	ESourceBusChannels__Mono                                                         = 0,
	ESourceBusChannels__Stereo                                                       = 1,
	ESourceBusChannels__ESourceBusChannels_MAX                                       = 2
};

/// Enum /Script/Engine.ESourceBusSendLevelControlMethod
/// Size: 0x04
enum class ESourceBusSendLevelControlMethod : uint8_t
{
	ESourceBusSendLevelControlMethod__Linear                                         = 0,
	ESourceBusSendLevelControlMethod__CustomCurve                                    = 1,
	ESourceBusSendLevelControlMethod__Manual                                         = 2,
	ESourceBusSendLevelControlMethod__ESourceBusSendLevelControlMethod_MAX           = 3
};

/// Enum /Script/Engine.ESendLevelControlMethod
/// Size: 0x04
enum class ESendLevelControlMethod : uint8_t
{
	ESendLevelControlMethod__Linear                                                  = 0,
	ESendLevelControlMethod__CustomCurve                                             = 1,
	ESendLevelControlMethod__Manual                                                  = 2,
	ESendLevelControlMethod__ESendLevelControlMethod_MAX                             = 3
};

/// Enum /Script/Engine.EAudioRecordingExportType
/// Size: 0x03
enum class EAudioRecordingExportType : uint8_t
{
	EAudioRecordingExportType__SoundWave                                             = 0,
	EAudioRecordingExportType__WavFile                                               = 1,
	EAudioRecordingExportType__EAudioRecordingExportType_MAX                         = 2
};

/// Enum /Script/Engine.ESoundWaveFFTSize
/// Size: 0x06
enum class ESoundWaveFFTSize : uint8_t
{
	ESoundWaveFFTSize__VerySmall                                                     = 0,
	ESoundWaveFFTSize__Small                                                         = 1,
	ESoundWaveFFTSize__Medium                                                        = 2,
	ESoundWaveFFTSize__Large                                                         = 3,
	ESoundWaveFFTSize__VeryLarge                                                     = 4,
	ESoundWaveFFTSize__ESoundWaveFFTSize_MAX                                         = 5
};

/// Enum /Script/Engine.EDecompressionType
/// Size: 0x09
enum class EDecompressionType : uint8_t
{
	DTYPE_Setup                                                                      = 0,
	DTYPE_Invalid                                                                    = 1,
	DTYPE_Preview                                                                    = 2,
	DTYPE_Native                                                                     = 3,
	DTYPE_RealTime                                                                   = 4,
	DTYPE_Procedural                                                                 = 5,
	DTYPE_Xenon                                                                      = 6,
	DTYPE_Streaming                                                                  = 7,
	DTYPE_MAX                                                                        = 8
};

/// Enum /Script/Engine.ESoundWaveLoadingBehavior
/// Size: 0x07
enum class ESoundWaveLoadingBehavior : uint8_t
{
	ESoundWaveLoadingBehavior__Inherited                                             = 0,
	ESoundWaveLoadingBehavior__RetainOnLoad                                          = 1,
	ESoundWaveLoadingBehavior__PrimeOnLoad                                           = 2,
	ESoundWaveLoadingBehavior__LoadOnDemand                                          = 3,
	ESoundWaveLoadingBehavior__ForceInline                                           = 4,
	ESoundWaveLoadingBehavior__Uninitialized                                         = 255,
	ESoundWaveLoadingBehavior__ESoundWaveLoadingBehavior_MAX                         = 256
};

/// Enum /Script/Engine.ESplineCoordinateSpace
/// Size: 0x03
enum class ESplineCoordinateSpace : uint8_t
{
	ESplineCoordinateSpace__Local                                                    = 0,
	ESplineCoordinateSpace__World                                                    = 1,
	ESplineCoordinateSpace__ESplineCoordinateSpace_MAX                               = 2
};

/// Enum /Script/Engine.ESplinePointType
/// Size: 0x06
enum class ESplinePointType : uint8_t
{
	ESplinePointType__Linear                                                         = 0,
	ESplinePointType__Curve                                                          = 1,
	ESplinePointType__Constant                                                       = 2,
	ESplinePointType__CurveClamped                                                   = 3,
	ESplinePointType__CurveCustomTangent                                             = 4,
	ESplinePointType__ESplinePointType_MAX                                           = 5
};

/// Enum /Script/Engine.ESplineMeshAxis
/// Size: 0x04
enum class ESplineMeshAxis : uint8_t
{
	ESplineMeshAxis__X                                                               = 0,
	ESplineMeshAxis__Y                                                               = 1,
	ESplineMeshAxis__Z                                                               = 2,
	ESplineMeshAxis__ESplineMeshAxis_MAX                                             = 3
};

/// Enum /Script/Engine.EOptimizationType
/// Size: 0x03
enum class EOptimizationType : uint8_t
{
	OT_NumOfTriangles                                                                = 0,
	OT_MaxDeviation                                                                  = 1,
	OT_MAX                                                                           = 2
};

/// Enum /Script/Engine.EImportanceLevel
/// Size: 0x08
enum class EImportanceLevel : uint8_t
{
	IL_Off                                                                           = 0,
	IL_Lowest                                                                        = 1,
	IL_Low                                                                           = 2,
	IL_Normal                                                                        = 3,
	IL_High                                                                          = 4,
	IL_Highest                                                                       = 5,
	TEMP_BROKEN2                                                                     = 6,
	EImportanceLevel_MAX                                                             = 7
};

/// Enum /Script/Engine.ENormalMode
/// Size: 0x06
enum class ENormalMode : uint8_t
{
	NM_PreserveSmoothingGroups                                                       = 0,
	NM_RecalculateNormals                                                            = 1,
	NM_RecalculateNormalsSmooth                                                      = 2,
	NM_RecalculateNormalsHard                                                        = 3,
	TEMP_BROKEN                                                                      = 4,
	ENormalMode_MAX                                                                  = 5
};

/// Enum /Script/Engine.EStereoLayerShape
/// Size: 0x05
enum class EStereoLayerShape : uint8_t
{
	SLSH_QuadLayer                                                                   = 0,
	SLSH_CylinderLayer                                                               = 1,
	SLSH_CubemapLayer                                                                = 2,
	SLSH_EquirectLayer                                                               = 3,
	SLSH_MAX                                                                         = 4
};

/// Enum /Script/Engine.EStereoLayerType
/// Size: 0x04
enum class EStereoLayerType : uint8_t
{
	SLT_WorldLocked                                                                  = 0,
	SLT_TrackerLocked                                                                = 1,
	SLT_FaceLocked                                                                   = 2,
	SLT_MAX                                                                          = 3
};

/// Enum /Script/Engine.EOpacitySourceMode
/// Size: 0x06
enum class EOpacitySourceMode : uint8_t
{
	OSM_Alpha                                                                        = 0,
	OSM_ColorBrightness                                                              = 1,
	OSM_RedChannel                                                                   = 2,
	OSM_GreenChannel                                                                 = 3,
	OSM_BlueChannel                                                                  = 4,
	OSM_MAX                                                                          = 5
};

/// Enum /Script/Engine.ESubUVBoundingVertexCount
/// Size: 0x03
enum class ESubUVBoundingVertexCount : uint8_t
{
	BVC_FourVertices                                                                 = 0,
	BVC_EightVertices                                                                = 1,
	BVC_MAX                                                                          = 2
};

/// Enum /Script/Engine.EVerticalTextAligment
/// Size: 0x05
enum class EVerticalTextAligment : uint8_t
{
	EVRTA_TextTop                                                                    = 0,
	EVRTA_TextCenter                                                                 = 1,
	EVRTA_TextBottom                                                                 = 2,
	EVRTA_QuadTop                                                                    = 3,
	EVRTA_MAX                                                                        = 4
};

/// Enum /Script/Engine.EHorizTextAligment
/// Size: 0x04
enum class EHorizTextAligment : uint8_t
{
	EHTA_Left                                                                        = 0,
	EHTA_Center                                                                      = 1,
	EHTA_Right                                                                       = 2,
	EHTA_MAX                                                                         = 3
};

/// Enum /Script/Engine.ETextureLossyCompressionAmount
/// Size: 0x08
enum class ETextureLossyCompressionAmount : uint8_t
{
	TLCA_Default                                                                     = 0,
	TLCA_None                                                                        = 1,
	TLCA_Lowest                                                                      = 2,
	TLCA_Low                                                                         = 3,
	TLCA_Medium                                                                      = 4,
	TLCA_High                                                                        = 5,
	TLCA_Highest                                                                     = 6,
	TLCA_MAX                                                                         = 7
};

/// Enum /Script/Engine.ETextureCompressionQuality
/// Size: 0x07
enum class ETextureCompressionQuality : uint8_t
{
	TCQ_Default                                                                      = 0,
	TCQ_Lowest                                                                       = 1,
	TCQ_Low                                                                          = 2,
	TCQ_Medium                                                                       = 3,
	TCQ_High                                                                         = 4,
	TCQ_Highest                                                                      = 5,
	TCQ_MAX                                                                          = 6
};

/// Enum /Script/Engine.ETextureSourceFormat
/// Size: 0x10
enum class ETextureSourceFormat : uint8_t
{
	TSF_Invalid                                                                      = 0,
	TSF_G8                                                                           = 1,
	TSF_BGRA8                                                                        = 2,
	TSF_BGRE8                                                                        = 3,
	TSF_RGBA16                                                                       = 4,
	TSF_RGBA16F                                                                      = 5,
	TSF_RGBA8                                                                        = 6,
	TSF_RGBE8                                                                        = 7,
	TSF_G16                                                                          = 8,
	TSF_MAX                                                                          = 9
};

/// Enum /Script/Engine.ETextureSourceArtType
/// Size: 0x04
enum class ETextureSourceArtType : uint8_t
{
	TSAT_Uncompressed                                                                = 0,
	TSAT_PNGCompressed                                                               = 1,
	TSAT_DDSFile                                                                     = 2,
	TSAT_MAX                                                                         = 3
};

/// Enum /Script/Engine.ETextureMipCount
/// Size: 0x04
enum class ETextureMipCount : uint8_t
{
	TMC_ResidentMips                                                                 = 0,
	TMC_AllMips                                                                      = 1,
	TMC_AllMipsBiased                                                                = 2,
	TMC_MAX                                                                          = 3
};

/// Enum /Script/Engine.ECompositeTextureMode
/// Size: 0x06
enum class ECompositeTextureMode : uint8_t
{
	CTM_Disabled                                                                     = 0,
	CTM_NormalRoughnessToRed                                                         = 1,
	CTM_NormalRoughnessToGreen                                                       = 2,
	CTM_NormalRoughnessToBlue                                                        = 3,
	CTM_NormalRoughnessToAlpha                                                       = 4,
	CTM_MAX                                                                          = 5
};

/// Enum /Script/Engine.ETextureSamplerFilter
/// Size: 0x06
enum class ETextureSamplerFilter : uint8_t
{
	ETextureSamplerFilter__Point                                                     = 0,
	ETextureSamplerFilter__Bilinear                                                  = 1,
	ETextureSamplerFilter__Trilinear                                                 = 2,
	ETextureSamplerFilter__AnisotropicPoint                                          = 3,
	ETextureSamplerFilter__AnisotropicLinear                                         = 4,
	ETextureSamplerFilter__ETextureSamplerFilter_MAX                                 = 5
};

/// Enum /Script/Engine.ETexturePowerOfTwoSetting
/// Size: 0x04
enum class ETexturePowerOfTwoSetting : uint8_t
{
	ETexturePowerOfTwoSetting__None                                                  = 0,
	ETexturePowerOfTwoSetting__PadToPowerOfTwo                                       = 1,
	ETexturePowerOfTwoSetting__PadToSquarePowerOfTwo                                 = 2,
	ETexturePowerOfTwoSetting__ETexturePowerOfTwoSetting_MAX                         = 3
};

/// Enum /Script/Engine.TextureMipGenSettings
/// Size: 0x22
enum class TextureMipGenSettings : uint8_t
{
	TMGS_FromTextureGroup                                                            = 0,
	TMGS_SimpleAverage                                                               = 1,
	TMGS_Sharpen0                                                                    = 2,
	TMGS_Sharpen1                                                                    = 3,
	TMGS_Sharpen2                                                                    = 4,
	TMGS_Sharpen3                                                                    = 5,
	TMGS_Sharpen4                                                                    = 6,
	TMGS_Sharpen5                                                                    = 7,
	TMGS_Sharpen6                                                                    = 8,
	TMGS_Sharpen7                                                                    = 9,
	TMGS_Sharpen8                                                                    = 10,
	TMGS_Sharpen9                                                                    = 11,
	TMGS_Sharpen10                                                                   = 12,
	TMGS_NoMipmaps                                                                   = 13,
	TMGS_LeaveExistingMips                                                           = 14,
	TMGS_Blur1                                                                       = 15,
	TMGS_Blur2                                                                       = 16,
	TMGS_Blur3                                                                       = 17,
	TMGS_Blur4                                                                       = 18,
	TMGS_Blur5                                                                       = 19,
	TMGS_Unfiltered                                                                  = 20,
	TMGS_MAX                                                                         = 21
};

/// Enum /Script/Engine.ETextureRenderTargetFormat
/// Size: 0x12
enum class ETextureRenderTargetFormat : uint8_t
{
	RTF_R8                                                                           = 0,
	RTF_RG8                                                                          = 1,
	RTF_RGBA8                                                                        = 2,
	RTF_RGBA8_SRGB                                                                   = 3,
	RTF_R16f                                                                         = 4,
	RTF_RG16f                                                                        = 5,
	RTF_RGBA16f                                                                      = 6,
	RTF_R32f                                                                         = 7,
	RTF_RG32f                                                                        = 8,
	RTF_RGBA32f                                                                      = 9,
	RTF_RGB10A2                                                                      = 10,
	RTF_MAX                                                                          = 11
};

/// Enum /Script/Engine.ETimecodeProviderSynchronizationState
/// Size: 0x05
enum class ETimecodeProviderSynchronizationState : uint8_t
{
	ETimecodeProviderSynchronizationState__Closed                                    = 0,
	ETimecodeProviderSynchronizationState__Error                                     = 1,
	ETimecodeProviderSynchronizationState__Synchronized                              = 2,
	ETimecodeProviderSynchronizationState__Synchronizing                             = 3,
	ETimecodeProviderSynchronizationState__ETimecodeProviderSynchronizationState_MAX = 4
};

/// Enum /Script/Engine.ETimelineDirection
/// Size: 0x03
enum class ETimelineDirection : uint8_t
{
	ETimelineDirection__Forward                                                      = 0,
	ETimelineDirection__Backward                                                     = 1,
	ETimelineDirection__ETimelineDirection_MAX                                       = 2
};

/// Enum /Script/Engine.ETimelineLengthMode
/// Size: 0x03
enum class ETimelineLengthMode : uint8_t
{
	TL_TimelineLength                                                                = 0,
	TL_LastKeyFrame                                                                  = 1,
	TL_MAX                                                                           = 2
};

/// Enum /Script/Engine.ETimeStretchCurveMapping
/// Size: 0x04
enum class ETimeStretchCurveMapping : uint8_t
{
	ETimeStretchCurveMapping__T_Original                                             = 0,
	ETimeStretchCurveMapping__T_TargetMin                                            = 1,
	ETimeStretchCurveMapping__T_TargetMax                                            = 2,
	ETimeStretchCurveMapping__MAX                                                    = 3
};

/// Enum /Script/Engine.ETwitterIntegrationDelegate
/// Size: 0x04
enum class ETwitterIntegrationDelegate : uint8_t
{
	TID_AuthorizeComplete                                                            = 0,
	TID_TweetUIComplete                                                              = 1,
	TID_RequestComplete                                                              = 2,
	TID_MAX                                                                          = 3
};

/// Enum /Script/Engine.ETwitterRequestMethod
/// Size: 0x04
enum class ETwitterRequestMethod : uint8_t
{
	TRM_Get                                                                          = 0,
	TRM_Post                                                                         = 1,
	TRM_Delete                                                                       = 2,
	TRM_MAX                                                                          = 3
};

/// Enum /Script/Engine.EUserDefinedStructureStatus
/// Size: 0x05
enum class EUserDefinedStructureStatus : uint8_t
{
	UDSS_UpToDate                                                                    = 0,
	UDSS_Dirty                                                                       = 1,
	UDSS_Error                                                                       = 2,
	UDSS_Duplicate                                                                   = 3,
	UDSS_MAX                                                                         = 4
};

/// Enum /Script/Engine.EUIScalingRule
/// Size: 0x06
enum class EUIScalingRule : uint8_t
{
	EUIScalingRule__ShortestSide                                                     = 0,
	EUIScalingRule__LongestSide                                                      = 1,
	EUIScalingRule__Horizontal                                                       = 2,
	EUIScalingRule__Vertical                                                         = 3,
	EUIScalingRule__Custom                                                           = 4,
	EUIScalingRule__EUIScalingRule_MAX                                               = 5
};

/// Enum /Script/Engine.ERenderFocusRule
/// Size: 0x05
enum class ERenderFocusRule : uint8_t
{
	ERenderFocusRule__Always                                                         = 0,
	ERenderFocusRule__NonPointer                                                     = 1,
	ERenderFocusRule__NavigationOnly                                                 = 2,
	ERenderFocusRule__Never                                                          = 3,
	ERenderFocusRule__ERenderFocusRule_MAX                                           = 4
};

/// Enum /Script/Engine.EVectorFieldConstructionOp
/// Size: 0x03
enum class EVectorFieldConstructionOp : uint8_t
{
	VFCO_Extrude                                                                     = 0,
	VFCO_Revolve                                                                     = 1,
	VFCO_MAX                                                                         = 2
};

/// Enum /Script/Engine.EWindSourceType
/// Size: 0x03
enum class EWindSourceType : uint8_t
{
	EWindSourceType__Directional                                                     = 0,
	EWindSourceType__Point                                                           = 1,
	EWindSourceType__EWindSourceType_MAX                                             = 2
};

/// Enum /Script/Engine.EPSCPoolMethod
/// Size: 0x06
enum class EPSCPoolMethod : uint8_t
{
	EPSCPoolMethod__None                                                             = 0,
	EPSCPoolMethod__AutoRelease                                                      = 1,
	EPSCPoolMethod__ManualRelease                                                    = 2,
	EPSCPoolMethod__ManualRelease_OnComplete                                         = 3,
	EPSCPoolMethod__FreeInPool                                                       = 4,
	EPSCPoolMethod__EPSCPoolMethod_MAX                                               = 5
};

/// Enum /Script/Engine.EVolumeLightingMethod
/// Size: 0x03
enum class EVolumeLightingMethod : uint8_t
{
	VLM_VolumetricLightmap                                                           = 0,
	VLM_SparseVolumeLightingSamples                                                  = 1,
	VLM_MAX                                                                          = 2
};

/// Enum /Script/Engine.EVisibilityAggressiveness
/// Size: 0x04
enum class EVisibilityAggressiveness : uint8_t
{
	VIS_LeastAggressive                                                              = 0,
	VIS_ModeratelyAggressive                                                         = 1,
	VIS_MostAggressive                                                               = 2,
	VIS_Max                                                                          = 3
};

/// Class /Script/Engine.BlueprintFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintFunctionLibrary : public UObject
{ 
public:
};

/// Struct /Script/Engine.TickFunction
/// Size: 0x0028 (0x000000 - 0x000028)
struct FTickFunction
{ 
	SDK_UNDEFINED(1,32) /* TEnumAsByte<ETickingGroup> */ __um(TickGroup);                                          // 0x0008   (0x0001)  
	SDK_UNDEFINED(1,33) /* TEnumAsByte<ETickingGroup> */ __um(EndTickGroup);                                       // 0x0009   (0x0001)  
	bool                                               bTickEvenWhenPaused : 1;                                    // 0x000A:0 (0x0001)  
	bool                                               bCanEverTick : 1;                                           // 0x000A:1 (0x0001)  
	bool                                               bStartWithTickEnabled : 1;                                  // 0x000A:2 (0x0001)  
	bool                                               bAllowTickOnDedicatedServer : 1;                            // 0x000A:3 (0x0001)  
	unsigned char                                      UnknownData00_4[0x1];                                       // 0x000B   (0x0001)  MISSED
	float                                              TickInterval;                                               // 0x000C   (0x0004)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0010   (0x0018)  MISSED
};

/// Struct /Script/Engine.ActorComponentTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
struct FActorComponentTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.SimpleMemberReference
/// Size: 0x0020 (0x000000 - 0x000020)
struct FSimpleMemberReference
{ 
	class UObject*                                     MemberParent;                                               // 0x0000   (0x0008)  
	FName                                              MemberName;                                                 // 0x0008   (0x0008)  
	FGuid                                              MemberGuid;                                                 // 0x0010   (0x0010)  
};

/// Class /Script/Engine.ActorComponent
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UActorComponent : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	FActorComponentTickFunction                        PrimaryComponentTick;                                       // 0x0030   (0x0030)  
	TArray<FName>                                      ComponentTags;                                              // 0x0060   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0070   (0x0010)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0080   (0x0004)  MISSED
	int32_t                                            UCSSerializationIndex;                                      // 0x0084   (0x0004)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0088:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0088:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0088:2 (0x0001)  MISSED
	bool                                               bNetAddressable : 1;                                        // 0x0088:3 (0x0001)  
	bool                                               bReplicates : 1;                                            // 0x0088:4 (0x0001)  
	unsigned char                                      UnknownBit05 : 1;                                           // 0x0088:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x0088:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x0088:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0089:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0089:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x0089:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x0089:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit12 : 1;                                           // 0x0089:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit13 : 1;                                           // 0x0089:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit14 : 1;                                           // 0x0089:6 (0x0001)  MISSED
	bool                                               bAutoActivate : 1;                                          // 0x0089:7 (0x0001)  
	bool                                               bIsActive : 1;                                              // 0x008A:0 (0x0001)  
	bool                                               bEditableWhenInherited : 1;                                 // 0x008A:1 (0x0001)  
	unsigned char                                      UnknownBit15 : 1;                                           // 0x008A:2 (0x0001)  MISSED
	bool                                               bCanEverAffectNavigation : 1;                               // 0x008A:3 (0x0001)  
	unsigned char                                      UnknownBit16 : 1;                                           // 0x008A:4 (0x0001)  MISSED
	bool                                               bIsEditorOnly : 1;                                          // 0x008A:5 (0x0001)  
	unsigned char                                      UnknownData17_4[0x1];                                       // 0x008B   (0x0001)  MISSED
	EComponentCreationMethod                           CreationMethod;                                             // 0x008C   (0x0001)  
	SDK_UNDEFINED(1,34) /* FMulticastSparseDelegate */ __um(OnComponentActivated);                                 // 0x008D   (0x0001)  
	SDK_UNDEFINED(1,35) /* FMulticastSparseDelegate */ __um(OnComponentDeactivated);                               // 0x008E   (0x0001)  
	unsigned char                                      UnknownData18_5[0x1];                                       // 0x008F   (0x0001)  MISSED
	TArray<FSimpleMemberReference>                     UCSModifiedProperties;                                      // 0x0090   (0x0010)  
	unsigned char                                      UnknownData19_6[0x10];                                      // 0x00A0   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.ActorComponent.ToggleActive
	// void ToggleActive();                                                                                                  // [0xe2d1e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetTickGroup
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                           // [0x2e90740] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetTickableWhenPaused
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                 // [0x2e907c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetIsReplicated
	// void SetIsReplicated(bool ShouldReplicate);                                                                           // [0x2e906b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickInterval
	// void SetComponentTickInterval(float TickInterval);                                                                    // [0x2e90630] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickEnabled
	// void SetComponentTickEnabled(bool bEnabled);                                                                          // [0x2e905a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetAutoActivate
	// void SetAutoActivate(bool bNewAutoActivate);                                                                          // [0x2e8cc00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetActive
	// void SetActive(bool bNewActive, bool bReset);                                                                         // [0x2e904d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteComponent
	// void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                   // [0x2e90440] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteActor
	// void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                    // [0x2e903b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.ReceiveTick
	// void ReceiveTick(float DeltaSeconds);                                                                                 // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveEndPlay
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                       // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveBeginPlay
	// void ReceiveBeginPlay();                                                                                              // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.OnRep_IsActive
	// void OnRep_IsActive();                                                                                                // [0xe32f90] Native|Public        
	// Function /Script/Engine.ActorComponent.K2_DestroyComponent
	// void K2_DestroyComponent(class UObject* Object);                                                                      // [0x2e902b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.IsComponentTickEnabled
	// bool IsComponentTickEnabled();                                                                                        // [0x2e90280] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.IsBeingDestroyed
	// bool IsBeingDestroyed();                                                                                              // [0x2e90250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.IsActive
	// bool IsActive();                                                                                                      // [0x2e90220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.GetOwner
	// class AActor* GetOwner();                                                                                             // [0x2e90200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.GetComponentTickInterval
	// float GetComponentTickInterval();                                                                                     // [0x2e901d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.Deactivate
	// void Deactivate();                                                                                                    // [0xe45730] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.ComponentHasTag
	// bool ComponentHasTag(FName Tag);                                                                                      // [0x2e8ffc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteComponent
	// void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                      // [0x2e8fe70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteActor
	// void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                       // [0x2e8fde0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.Activate
	// void Activate(bool bReset);                                                                                           // [0x25959c0] Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.ActorTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
struct FActorTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.RepMovement
/// Size: 0x0034 (0x000000 - 0x000034)
struct FRepMovement
{ 
	FVector                                            LinearVelocity;                                             // 0x0000   (0x000C)  
	FVector                                            AngularVelocity;                                            // 0x000C   (0x000C)  
	FVector                                            Location;                                                   // 0x0018   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0024   (0x000C)  
	bool                                               bSimulatedPhysicSleep : 1;                                  // 0x0030:0 (0x0001)  
	bool                                               bRepPhysics : 1;                                            // 0x0030:1 (0x0001)  
	EVectorQuantization                                LocationQuantizationLevel;                                  // 0x0031   (0x0001)  
	EVectorQuantization                                VelocityQuantizationLevel;                                  // 0x0032   (0x0001)  
	ERotatorQuantization                               RotationQuantizationLevel;                                  // 0x0033   (0x0001)  
};

/// Struct /Script/Engine.Vector_NetQuantize100
/// Size: 0x0000 (0x00000C - 0x00000C)
struct FVector_NetQuantize100 : FVector
{ 
};

/// Struct /Script/Engine.RepAttachment
/// Size: 0x0040 (0x000000 - 0x000040)
struct FRepAttachment
{ 
	class AActor*                                      AttachParent;                                               // 0x0000   (0x0008)  
	FVector_NetQuantize100                             LocationOffset;                                             // 0x0008   (0x000C)  
	FVector_NetQuantize100                             RelativeScale3D;                                            // 0x0014   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x0020   (0x000C)  
	FName                                              AttachSocket;                                               // 0x002C   (0x0008)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0034   (0x0004)  MISSED
	class USceneComponent*                             AttachComponent;                                            // 0x0038   (0x0008)  
};

/// Class /Script/Engine.Actor
/// Size: 0x01F8 (0x000028 - 0x000220)
class AActor : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FActorTickFunction                                 PrimaryActorTick;                                           // 0x0028   (0x0030)  
	bool                                               bNetTemporary : 1;                                          // 0x0058:0 (0x0001)  
	bool                                               bNetStartup : 1;                                            // 0x0058:1 (0x0001)  
	bool                                               bOnlyRelevantToOwner : 1;                                   // 0x0058:2 (0x0001)  
	bool                                               bAlwaysRelevant : 1;                                        // 0x0058:3 (0x0001)  
	bool                                               bReplicateMovement : 1;                                     // 0x0058:4 (0x0001)  
	bool                                               bHidden : 1;                                                // 0x0058:5 (0x0001)  
	bool                                               bTearOff : 1;                                               // 0x0058:6 (0x0001)  
	bool                                               bExchangedRoles : 1;                                        // 0x0058:7 (0x0001)  
	bool                                               bNetLoadOnClient : 1;                                       // 0x0059:0 (0x0001)  
	bool                                               bNetUseOwnerRelevancy : 1;                                  // 0x0059:1 (0x0001)  
	bool                                               bRelevantForNetworkReplays : 1;                             // 0x0059:2 (0x0001)  
	bool                                               bRelevantForLevelBounds : 1;                                // 0x0059:3 (0x0001)  
	bool                                               bReplayRewindable : 1;                                      // 0x0059:4 (0x0001)  
	bool                                               bAllowTickBeforeBeginPlay : 1;                              // 0x0059:5 (0x0001)  
	bool                                               bAutoDestroyWhenFinished : 1;                               // 0x0059:6 (0x0001)  
	bool                                               bCanBeDamaged : 1;                                          // 0x0059:7 (0x0001)  
	bool                                               bBlockInput : 1;                                            // 0x005A:0 (0x0001)  
	bool                                               bCollideWhenPlacing : 1;                                    // 0x005A:1 (0x0001)  
	bool                                               bFindCameraComponentWhenViewTarget : 1;                     // 0x005A:2 (0x0001)  
	bool                                               bGenerateOverlapEventsDuringLevelStreaming : 1;             // 0x005A:3 (0x0001)  
	bool                                               bIgnoresOriginShifting : 1;                                 // 0x005A:4 (0x0001)  
	bool                                               bEnableAutoLODGeneration : 1;                               // 0x005A:5 (0x0001)  
	bool                                               bIsEditorOnlyActor : 1;                                     // 0x005A:6 (0x0001)  
	bool                                               bActorSeamlessTraveled : 1;                                 // 0x005A:7 (0x0001)  
	bool                                               bReplicates : 1;                                            // 0x005B:0 (0x0001)  
	bool                                               bCanBeInCluster : 1;                                        // 0x005B:1 (0x0001)  
	bool                                               bAllowReceiveTickEventOnDedicatedServer : 1;                // 0x005B:2 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x005B:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x005B:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x005B:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x005B:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x005B:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x005C:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x005C:1 (0x0001)  MISSED
	bool                                               bActorEnableCollision : 1;                                  // 0x005C:2 (0x0001)  
	bool                                               bActorIsBeingDestroyed : 1;                                 // 0x005C:3 (0x0001)  
	EActorUpdateOverlapsMethod                         UpdateOverlapsMethodDuringLevelStreaming;                   // 0x005D   (0x0001)  
	EActorUpdateOverlapsMethod                         DefaultUpdateOverlapsMethodDuringLevelStreaming;            // 0x005E   (0x0001)  
	SDK_UNDEFINED(1,36) /* TEnumAsByte<ENetRole> */    __um(RemoteRole);                                           // 0x005F   (0x0001)  
	FRepMovement                                       ReplicatedMovement;                                         // 0x0060   (0x0034)  
	float                                              InitialLifeSpan;                                            // 0x0094   (0x0004)  
	float                                              CustomTimeDilation;                                         // 0x0098   (0x0004)  
	unsigned char                                      UnknownData08_5[0x4];                                       // 0x009C   (0x0004)  MISSED
	FRepAttachment                                     AttachmentReplication;                                      // 0x00A0   (0x0040)  
	class AActor*                                      Owner;                                                      // 0x00E0   (0x0008)  
	FName                                              NetDriverName;                                              // 0x00E8   (0x0008)  
	SDK_UNDEFINED(1,37) /* TEnumAsByte<ENetRole> */    __um(Role);                                                 // 0x00F0   (0x0001)  
	SDK_UNDEFINED(1,38) /* TEnumAsByte<ENetDormancy> */ __um(NetDormancy);                                         // 0x00F1   (0x0001)  
	ESpawnActorCollisionHandlingMethod                 SpawnCollisionHandlingMethod;                               // 0x00F2   (0x0001)  
	SDK_UNDEFINED(1,39) /* TEnumAsByte<EAutoReceiveInput> */ __um(AutoReceiveInput);                               // 0x00F3   (0x0001)  
	int32_t                                            InputPriority;                                              // 0x00F4   (0x0004)  
	class UInputComponent*                             InputComponent;                                             // 0x00F8   (0x0008)  
	float                                              NetCullDistanceSquared;                                     // 0x0100   (0x0004)  
	int32_t                                            NetTag;                                                     // 0x0104   (0x0004)  
	float                                              NetUpdateFrequency;                                         // 0x0108   (0x0004)  
	float                                              MinNetUpdateFrequency;                                      // 0x010C   (0x0004)  
	float                                              NetPriority;                                                // 0x0110   (0x0004)  
	unsigned char                                      UnknownData09_5[0x4];                                       // 0x0114   (0x0004)  MISSED
	class APawn*                                       Instigator;                                                 // 0x0118   (0x0008)  
	TArray<class AActor*>                              Children;                                                   // 0x0120   (0x0010)  
	class USceneComponent*                             RootComponent;                                              // 0x0130   (0x0008)  
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                                   // 0x0138   (0x0010)  
	unsigned char                                      UnknownData10_5[0x8];                                       // 0x0148   (0x0008)  MISSED
	TArray<FName>                                      Layers;                                                     // 0x0150   (0x0010)  
	SDK_UNDEFINED(8,40) /* TWeakObjectPtr<UChildActorComponent*> */ __um(ParentComponent);                         // 0x0160   (0x0008)  
	unsigned char                                      UnknownData11_5[0x8];                                       // 0x0168   (0x0008)  MISSED
	TArray<FName>                                      Tags;                                                       // 0x0170   (0x0010)  
	SDK_UNDEFINED(1,41) /* FMulticastSparseDelegate */ __um(OnTakeAnyDamage);                                      // 0x0180   (0x0001)  
	SDK_UNDEFINED(1,42) /* FMulticastSparseDelegate */ __um(OnTakePointDamage);                                    // 0x0181   (0x0001)  
	SDK_UNDEFINED(1,43) /* FMulticastSparseDelegate */ __um(OnTakeRadialDamage);                                   // 0x0182   (0x0001)  
	SDK_UNDEFINED(1,44) /* FMulticastSparseDelegate */ __um(OnActorBeginOverlap);                                  // 0x0183   (0x0001)  
	SDK_UNDEFINED(1,45) /* FMulticastSparseDelegate */ __um(OnActorEndOverlap);                                    // 0x0184   (0x0001)  
	SDK_UNDEFINED(1,46) /* FMulticastSparseDelegate */ __um(OnBeginCursorOver);                                    // 0x0185   (0x0001)  
	SDK_UNDEFINED(1,47) /* FMulticastSparseDelegate */ __um(OnEndCursorOver);                                      // 0x0186   (0x0001)  
	SDK_UNDEFINED(1,48) /* FMulticastSparseDelegate */ __um(OnClicked);                                            // 0x0187   (0x0001)  
	SDK_UNDEFINED(1,49) /* FMulticastSparseDelegate */ __um(OnReleased);                                           // 0x0188   (0x0001)  
	SDK_UNDEFINED(1,50) /* FMulticastSparseDelegate */ __um(OnInputTouchBegin);                                    // 0x0189   (0x0001)  
	SDK_UNDEFINED(1,51) /* FMulticastSparseDelegate */ __um(OnInputTouchEnd);                                      // 0x018A   (0x0001)  
	SDK_UNDEFINED(1,52) /* FMulticastSparseDelegate */ __um(OnInputTouchEnter);                                    // 0x018B   (0x0001)  
	SDK_UNDEFINED(1,53) /* FMulticastSparseDelegate */ __um(OnInputTouchLeave);                                    // 0x018C   (0x0001)  
	SDK_UNDEFINED(1,54) /* FMulticastSparseDelegate */ __um(OnActorHit);                                           // 0x018D   (0x0001)  
	SDK_UNDEFINED(1,55) /* FMulticastSparseDelegate */ __um(OnDestroyed);                                          // 0x018E   (0x0001)  
	SDK_UNDEFINED(1,56) /* FMulticastSparseDelegate */ __um(OnEndPlay);                                            // 0x018F   (0x0001)  
	unsigned char                                      UnknownData12_5[0x60];                                      // 0x0190   (0x0060)  MISSED
	TArray<class UActorComponent*>                     InstanceComponents;                                         // 0x01F0   (0x0010)  
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                                 // 0x0200   (0x0010)  
	unsigned char                                      UnknownData13_6[0x10];                                      // 0x0210   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.Actor.WasRecentlyRendered
	// bool WasRecentlyRendered(float Tolerance);                                                                            // [0x2e8cef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.UserConstructionScript
	// void UserConstructionScript();                                                                                        // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.TearOff
	// void TearOff();                                                                                                       // [0xe32f70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SnapRootComponentTo
	// void SnapRootComponentTo(class AActor* InParentActor, FName InSocketName);                                            // [0x2e8ce30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetTickGroup
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                           // [0x2e8cd20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetTickableWhenPaused
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                 // [0x2e8cda0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetReplicates
	// void SetReplicates(bool bInReplicates);                                                                               // [0x2e8cc90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetReplicateMovement
	// void SetReplicateMovement(bool bInReplicateMovement);                                                                 // [0x2e8cc00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetOwner
	// void SetOwner(class AActor* NewOwner);                                                                                // [0x2e8cb70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetNetDormancy
	// void SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy);                                                           // [0x2e8caf0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetLifeSpan
	// void SetLifeSpan(float InLifespan);                                                                                   // [0x2e8ca70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetAutoDestroyWhenFinished
	// void SetAutoDestroyWhenFinished(bool bVal);                                                                           // [0x2e8c9e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorTickInterval
	// void SetActorTickInterval(float TickInterval);                                                                        // [0x2e8c960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorTickEnabled
	// void SetActorTickEnabled(bool bEnabled);                                                                              // [0x2e8c8d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorScale3D
	// void SetActorScale3D(FVector NewScale3D);                                                                             // [0x2e8c840] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorRelativeScale3D
	// void SetActorRelativeScale3D(FVector NewRelativeScale);                                                               // [0x2e8c7b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorHiddenInGame
	// void SetActorHiddenInGame(bool bNewHidden);                                                                           // [0x2e8c720] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorEnableCollision
	// void SetActorEnableCollision(bool bNewActorEnableCollision);                                                          // [0x2e8c690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteComponent
	// void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                   // [0x2e8c600] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteActor
	// void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                    // [0x2e8c570] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.ReceiveTick
	// void ReceiveTick(float DeltaSeconds);                                                                                 // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveRadialDamage
	// void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, FVector Origin, FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser); // [0x15dd8c0] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceivePointDamage
	// void ReceivePointDamage(float Damage, class UDamageType* DamageType, FVector HitLocation, FVector HitNormal, class UPrimitiveComponent* HitComponent, FName BoneName, FVector ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, FHitResult& HitInfo); // [0x15dd8c0] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveHit
	// void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, FHitResult& Hit); // [0x15dd8c0] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveEndPlay
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                       // [0x15dd8c0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveDestroyed
	// void ReceiveDestroyed();                                                                                              // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveBeginPlay
	// void ReceiveBeginPlay();                                                                                              // [0x15dd8c0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveAnyDamage
	// void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser); // [0x15dd8c0] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnReleased
	// void ReceiveActorOnReleased(FKey ButtonReleased);                                                                     // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchLeave
	// void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);                                             // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnter
	// void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);                                             // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnd
	// void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);                                               // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchBegin
	// void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);                                             // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnClicked
	// void ReceiveActorOnClicked(FKey ButtonPressed);                                                                       // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorEndOverlap
	// void ReceiveActorEndOverlap(class AActor* OtherActor);                                                                // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorEndCursorOver
	// void ReceiveActorEndCursorOver();                                                                                     // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorBeginOverlap
	// void ReceiveActorBeginOverlap(class AActor* OtherActor);                                                              // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorBeginCursorOver
	// void ReceiveActorBeginCursorOver();                                                                                   // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.PrestreamTextures
	// void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups);                         // [0x2e8c460] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.OnRep_ReplicateMovement
	// void OnRep_ReplicateMovement();                                                                                       // [0xe32f90] Native|Public        
	// Function /Script/Engine.Actor.OnRep_ReplicatedMovement
	// void OnRep_ReplicatedMovement();                                                                                      // [0xa2f2a0] Native|Public        
	// Function /Script/Engine.Actor.OnRep_Owner
	// void OnRep_Owner();                                                                                                   // [0xe2d1e0] Native|Protected     
	// Function /Script/Engine.Actor.OnRep_Instigator
	// void OnRep_Instigator();                                                                                              // [0x2e8c440] Native|Public        
	// Function /Script/Engine.Actor.OnRep_AttachmentReplication
	// void OnRep_AttachmentReplication();                                                                                   // [0x2116f90] Native|Public        
	// Function /Script/Engine.Actor.MakeNoise
	// void MakeNoise(float Loudness, class APawn* NoiseInstigator, FVector NoiseLocation, float MaxRange, FName Tag);       // [0x2e8c2b0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.MakeMIDForMaterial
	// class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);                                 // [0xeb7ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_TeleportTo
	// bool K2_TeleportTo(FVector DestLocation, FRotator DestRotation);                                                      // [0x2e8c1c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorTransform
	// bool K2_SetActorTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);         // [0x2e8bfc0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRotation
	// bool K2_SetActorRotation(FRotator NewRotation, bool bTeleportPhysics);                                                // [0x2e8bee0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeTransform
	// void K2_SetActorRelativeTransform(FTransform& NewRelativeTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x2e8bce0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeRotation
	// void K2_SetActorRelativeRotation(FRotator NewRelativeRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x2e8bb40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeLocation
	// void K2_SetActorRelativeLocation(FVector NewRelativeLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x2e8b9a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorLocationAndRotation
	// bool K2_SetActorLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x2e8b7a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorLocation
	// bool K2_SetActorLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x2e8b5f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_OnReset
	// void K2_OnReset();                                                                                                    // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_OnEndViewTarget
	// void K2_OnEndViewTarget(class APlayerController* PC);                                                                 // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_OnBecomeViewTarget
	// void K2_OnBecomeViewTarget(class APlayerController* PC);                                                              // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_GetRootComponent
	// class USceneComponent* K2_GetRootComponent();                                                                         // [0x2e8b5d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetComponentsByClass
	// TArray<UActorComponent*> K2_GetComponentsByClass(class UClass* ComponentClass);                                       // [0x2e8b4f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetActorRotation
	// FRotator K2_GetActorRotation();                                                                                       // [0x2e8b430] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetActorLocation
	// FVector K2_GetActorLocation();                                                                                        // [0x2e8b3b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_DetachFromActor
	// void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);       // [0x2e8b2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_DestroyComponent
	// void K2_DestroyComponent(class UActorComponent* Component);                                                           // [0x2e8b230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_DestroyActor
	// void K2_DestroyActor();                                                                                               // [0x2e8b210] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachToComponent
	// void K2_AttachToComponent(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x2e8b050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachToActor
	// void K2_AttachToActor(class AActor* ParentActor, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x2e8ae90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachRootComponentToActor
	// void K2_AttachRootComponentToActor(class AActor* InParentActor, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x2e8ad40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachRootComponentTo
	// void K2_AttachRootComponentTo(class USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x2e8abf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldTransform
	// void K2_AddActorWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);  // [0x2e8a9f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldRotation
	// void K2_AddActorWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);       // [0x2e8a850] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldOffset
	// void K2_AddActorWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x2e8a6b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalTransform
	// void K2_AddActorLocalTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);    // [0x2e8a4b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalRotation
	// void K2_AddActorLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);       // [0x2e8a310] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalOffset
	// void K2_AddActorLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x2e8a170] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.IsOverlappingActor
	// bool IsOverlappingActor(class AActor* Other);                                                                         // [0x2e8a0e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsChildActor
	// bool IsChildActor();                                                                                                  // [0x2e8a0b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsActorTickEnabled
	// bool IsActorTickEnabled();                                                                                            // [0x2e8a080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsActorBeingDestroyed
	// bool IsActorBeingDestroyed();                                                                                         // [0x2e8a050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.HasAuthority
	// bool HasAuthority();                                                                                                  // [0x2e8a020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetVerticalDistanceTo
	// float GetVerticalDistanceTo(class AActor* OtherActor);                                                                // [0x2e89f80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetVelocity
	// FVector GetVelocity();                                                                                                // [0x2e89f40] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetTransform
	// FTransform GetTransform();                                                                                            // [0x2e89ef0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetTickableWhenPaused
	// bool GetTickableWhenPaused();                                                                                         // [0x2e89ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.GetSquaredDistanceTo
	// float GetSquaredDistanceTo(class AActor* OtherActor);                                                                 // [0x2e89e20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetRemoteRole
	// TEnumAsByte<ENetRole> GetRemoteRole();                                                                                // [0x2e89e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetParentComponent
	// class UChildActorComponent* GetParentComponent();                                                                     // [0x2e89dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetParentActor
	// class AActor* GetParentActor();                                                                                       // [0x2e89da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOwner
	// class AActor* GetOwner();                                                                                             // [0xe9bd40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOverlappingComponents
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OverlappingComponents);                                   // [0x2e89cf0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOverlappingActors
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, class UClass* ClassFilter);                             // [0x2e89c00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLocalRole
	// TEnumAsByte<ENetRole> GetLocalRole();                                                                                 // [0x2e89be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLifeSpan
	// float GetLifeSpan();                                                                                                  // [0x2e89ba0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInstigatorController
	// class AController* GetInstigatorController();                                                                         // [0x2e89b70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInstigator
	// class APawn* GetInstigator();                                                                                         // [0x2e89b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputVectorAxisValue
	// FVector GetInputVectorAxisValue(FKey InputAxisKey);                                                                   // [0x2e89a40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputAxisValue
	// float GetInputAxisValue(FName InputAxisName);                                                                         // [0x2e899a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputAxisKeyValue
	// float GetInputAxisKeyValue(FKey InputAxisKey);                                                                        // [0x2e898b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetHorizontalDotProductTo
	// float GetHorizontalDotProductTo(class AActor* OtherActor);                                                            // [0x2e89810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetHorizontalDistanceTo
	// float GetHorizontalDistanceTo(class AActor* OtherActor);                                                              // [0x2e89770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetGameTimeSinceCreation
	// float GetGameTimeSinceCreation();                                                                                     // [0x2e89740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetDotProductTo
	// float GetDotProductTo(class AActor* OtherActor);                                                                      // [0x2e896a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetDistanceTo
	// float GetDistanceTo(class AActor* OtherActor);                                                                        // [0x2e89600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentsByTag
	// TArray<UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, FName Tag);                                 // [0x2e89500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentsByInterface
	// TArray<UActorComponent*> GetComponentsByInterface(class UClass* Interface);                                           // [0x2e89420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentByClass
	// class UActorComponent* GetComponentByClass(class UClass* ComponentClass);                                             // [0x2e89390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachParentSocketName
	// FName GetAttachParentSocketName();                                                                                    // [0x2e89250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachParentActor
	// class AActor* GetAttachParentActor();                                                                                 // [0x2e89220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachedActors
	// void GetAttachedActors(TArray<AActor*>& OutActors, bool bResetArray);                                                 // [0x2e89290] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAllChildActors
	// void GetAllChildActors(TArray<AActor*>& ChildActors, bool bIncludeDescendants);                                       // [0x2e89120] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorUpVector
	// FVector GetActorUpVector();                                                                                           // [0x2e890b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorTimeDilation
	// float GetActorTimeDilation();                                                                                         // [0x2e89080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorTickInterval
	// float GetActorTickInterval();                                                                                         // [0x2e89050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorScale3D
	// FVector GetActorScale3D();                                                                                            // [0x2e89010] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorRightVector
	// FVector GetActorRightVector();                                                                                        // [0x2e88fa0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorRelativeScale3D
	// FVector GetActorRelativeScale3D();                                                                                    // [0x2e88f60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorForwardVector
	// FVector GetActorForwardVector();                                                                                      // [0x2e88ef0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorEyesViewPoint
	// void GetActorEyesViewPoint(FVector& OutLocation, FRotator& OutRotation);                                              // [0x2e88e00] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorEnableCollision
	// bool GetActorEnableCollision();                                                                                       // [0x2e88dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorBounds
	// void GetActorBounds(bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent, bool bIncludeFromChildActors); // [0x2e88c50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.ForceNetUpdate
	// void ForceNetUpdate();                                                                                                // [0x2e88c30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.FlushNetDormancy
	// void FlushNetDormancy();                                                                                              // [0x2e88c10] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.EnableInput
	// void EnableInput(class APlayerController* PlayerController);                                                          // [0x25918f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.DisableInput
	// void DisableInput(class APlayerController* PlayerController);                                                         // [0x257e5a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.DetachRootComponentFromParent
	// void DetachRootComponentFromParent(bool bMaintainWorldPosition);                                                      // [0x2e88b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddTickPrerequisiteComponent
	// void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                      // [0x2e88af0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddTickPrerequisiteActor
	// void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                       // [0x2e88a60] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddComponent
	// class UActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, FTransform& RelativeTransform, class UObject* ComponentTemplateContext); // [0x2e888a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.ActorHasTag
	// bool ActorHasTag(FName Tag);                                                                                          // [0x2e88810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.DebugTextInfo
/// Size: 0x0060 (0x000000 - 0x000060)
struct FDebugTextInfo
{ 
	class AActor*                                      SrcActor;                                                   // 0x0000   (0x0008)  
	FVector                                            SrcActorOffset;                                             // 0x0008   (0x000C)  
	FVector                                            SrcActorDesiredOffset;                                      // 0x0014   (0x000C)  
	SDK_UNDEFINED(16,57) /* FString */                 __um(DebugText);                                            // 0x0020   (0x0010)  
	float                                              TimeRemaining;                                              // 0x0030   (0x0004)  
	float                                              Duration;                                                   // 0x0034   (0x0004)  
	FColor                                             TextColor;                                                  // 0x0038   (0x0004)  
	bool                                               bAbsoluteLocation : 1;                                      // 0x003C:0 (0x0001)  
	bool                                               bKeepAttachedToActor : 1;                                   // 0x003C:1 (0x0001)  
	bool                                               bDrawShadow : 1;                                            // 0x003C:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x003D   (0x0003)  MISSED
	FVector                                            OrigActorLocation;                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x004C   (0x0004)  MISSED
	class UFont*                                       Font;                                                       // 0x0050   (0x0008)  
	float                                              FontScale;                                                  // 0x0058   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.HUD
/// Size: 0x00F0 (0x000220 - 0x000310)
class AHUD : public AActor
{ 
public:
	class APlayerController*                           PlayerOwner;                                                // 0x0220   (0x0008)  
	bool                                               bLostFocusPaused : 1;                                       // 0x0228:0 (0x0001)  
	bool                                               bShowHUD : 1;                                               // 0x0228:1 (0x0001)  
	bool                                               bShowDebugInfo : 1;                                         // 0x0228:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0229   (0x0003)  MISSED
	int32_t                                            CurrentTargetIndex;                                         // 0x022C   (0x0004)  
	bool                                               bShowHitBoxDebugInfo : 1;                                   // 0x0230:0 (0x0001)  
	bool                                               bShowOverlays : 1;                                          // 0x0230:1 (0x0001)  
	bool                                               bEnableDebugTextShadow : 1;                                 // 0x0230:2 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0231   (0x0007)  MISSED
	TArray<class AActor*>                              PostRenderedActors;                                         // 0x0238   (0x0010)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0248   (0x0008)  MISSED
	TArray<FName>                                      DebugDisplay;                                               // 0x0250   (0x0010)  
	TArray<FName>                                      ToggledDebugCategories;                                     // 0x0260   (0x0010)  
	class UCanvas*                                     Canvas;                                                     // 0x0270   (0x0008)  
	class UCanvas*                                     DebugCanvas;                                                // 0x0278   (0x0008)  
	TArray<FDebugTextInfo>                             DebugTextList;                                              // 0x0280   (0x0010)  
	class UClass*                                      ShowDebugTargetDesiredClass;                                // 0x0290   (0x0008)  
	class AActor*                                      ShowDebugTargetActor;                                       // 0x0298   (0x0008)  
	unsigned char                                      UnknownData03_6[0x70];                                      // 0x02A0   (0x0070)  MISSED


	/// Functions
	// Function /Script/Engine.HUD.ShowHUD
	// void ShowHUD();                                                                                                       // [0xe92750] Exec|Native|Public   
	// Function /Script/Engine.HUD.ShowDebugToggleSubCategory
	// void ShowDebugToggleSubCategory(FName Category);                                                                      // [0x2efb610] Final|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebugForReticleTargetToggle
	// void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);                                                     // [0x2efb590] Final|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebug
	// void ShowDebug(FName DebugType);                                                                                      // [0x2efb500] Exec|Native|Public   
	// Function /Script/Engine.HUD.RemoveDebugText
	// void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);                                                // [0x2efb2e0] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.HUD.RemoveAllDebugStrings
	// void RemoveAllDebugStrings();                                                                                         // [0x2efb2c0] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.HUD.ReceiveHitBoxRelease
	// void ReceiveHitBoxRelease(FName BoxName);                                                                             // [0x15dd8c0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxEndCursorOver
	// void ReceiveHitBoxEndCursorOver(FName BoxName);                                                                       // [0x15dd8c0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxClick
	// void ReceiveHitBoxClick(FName BoxName);                                                                               // [0x15dd8c0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxBeginCursorOver
	// void ReceiveHitBoxBeginCursorOver(FName BoxName);                                                                     // [0x15dd8c0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveDrawHUD
	// void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY);                                                                    // [0x15dd8c0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.Project
	// FVector Project(FVector Location);                                                                                    // [0x2efae40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.PreviousDebugTarget
	// void PreviousDebugTarget();                                                                                           // [0x2ef57a0] Exec|Native|Public   
	// Function /Script/Engine.HUD.NextDebugTarget
	// void NextDebugTarget();                                                                                               // [0x8a5820] Exec|Native|Public   
	// Function /Script/Engine.HUD.GetTextSize
	// void GetTextSize(FString Text, float& OutWidth, float& OutHeight, class UFont* Font, float Scale);                    // [0x2efa360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetOwningPlayerController
	// class APlayerController* GetOwningPlayerController();                                                                 // [0xb0f970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetOwningPawn
	// class APawn* GetOwningPawn();                                                                                         // [0x2efa330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetActorsInSelectionRectangle
	// void GetActorsInSelectionRectangle(class UClass* ClassFilter, FVector2D& FirstPoint, FVector2D& SecondPoint, TArray<AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // [0x2efa120] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.HUD.DrawTextureSimple
	// void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);      // [0x2ef9f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawTexture
	// void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, FLinearColor TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x2ef9b70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawText
	// void DrawText(FString Text, FLinearColor TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition); // [0x2ef9950] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawRect
	// void DrawRect(FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);                    // [0x2ef97a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterialTriangle
	// void DrawMaterialTriangle(class UMaterialInterface* Material, FVector2D V0_Pos, FVector2D V1_Pos, FVector2D V2_Pos, FVector2D V0_UV, FVector2D V1_UV, FVector2D V2_UV, FLinearColor V0_Color, FLinearColor V1_Color, FLinearColor V2_Color); // [0x2ef94e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterialSimple
	// void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // [0x2ef92e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterial
	// void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x2ef8f50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawLine
	// void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor LineColor, float LineThickness); // [0x2ef8d70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.Deproject
	// void Deproject(float ScreenX, float ScreenY, FVector& WorldPosition, FVector& WorldDirection);                        // [0x2ef8c00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.AddHitBox
	// void AddHitBox(FVector2D Position, FVector2D Size, FName InName, bool bConsumesInput, int32_t Priority);              // [0x2ef88f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.AddDebugText
	// void AddDebugText(FString DebugText, class AActor* SrcActor, float Duration, FVector Offset, FVector DesiredOffset, FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow); // [0x2ef8570] Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
};

/// Class /Script/Engine.Pawn
/// Size: 0x0060 (0x000220 - 0x000280)
class APawn : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0220   (0x0008)  MISSED
	bool                                               bUseControllerRotationPitch : 1;                            // 0x0228:0 (0x0001)  
	bool                                               bUseControllerRotationYaw : 1;                              // 0x0228:1 (0x0001)  
	bool                                               bUseControllerRotationRoll : 1;                             // 0x0228:2 (0x0001)  
	bool                                               bCanAffectNavigationGeneration : 1;                         // 0x0228:3 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0229   (0x0003)  MISSED
	float                                              BaseEyeHeight;                                              // 0x022C   (0x0004)  
	SDK_UNDEFINED(1,58) /* TEnumAsByte<EAutoReceiveInput> */ __um(AutoPossessPlayer);                              // 0x0230   (0x0001)  
	EAutoPossessAI                                     AutoPossessAI;                                              // 0x0231   (0x0001)  
	char                                               RemoteViewPitch;                                            // 0x0232   (0x0001)  
	unsigned char                                      UnknownData02_5[0x5];                                       // 0x0233   (0x0005)  MISSED
	class UClass*                                      AIControllerClass;                                          // 0x0238   (0x0008)  
	class APlayerState*                                PlayerState;                                                // 0x0240   (0x0008)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0248   (0x0008)  MISSED
	class AController*                                 LastHitBy;                                                  // 0x0250   (0x0008)  
	class AController*                                 Controller;                                                 // 0x0258   (0x0008)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x0260   (0x0004)  MISSED
	FVector                                            ControlInputVector;                                         // 0x0264   (0x000C)  
	FVector                                            LastControlInputVector;                                     // 0x0270   (0x000C)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x027C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.Pawn.SpawnDefaultController
	// void SpawnDefaultController();                                                                                        // [0x2f92e20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.SetCanAffectNavigationGeneration
	// void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);                                             // [0x2f926e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.ReceiveUnpossessed
	// void ReceiveUnpossessed(class AController* OldController);                                                            // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.ReceivePossessed
	// void ReceivePossessed(class AController* NewController);                                                              // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.PawnMakeNoise
	// void PawnMakeNoise(float Loudness, FVector NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);     // [0x2f91a20] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.OnRep_PlayerState
	// void OnRep_PlayerState();                                                                                             // [0x69e440] Native|Public        
	// Function /Script/Engine.Pawn.OnRep_Controller
	// void OnRep_Controller();                                                                                              // [0x2f91a00] Native|Public        
	// Function /Script/Engine.Pawn.LaunchPawn
	// void LaunchPawn(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                           // [0x2f918e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.K2_GetMovementInputVector
	// FVector K2_GetMovementInputVector();                                                                                  // [0x2f917b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsPlayerControlled
	// bool IsPlayerControlled();                                                                                            // [0x2eecde0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsPawnControlled
	// bool IsPawnControlled();                                                                                              // [0x2f918b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                            // [0x2f91880] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsLocallyControlled
	// bool IsLocallyControlled();                                                                                           // [0x2f91850] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsControlled
	// bool IsControlled();                                                                                                  // [0x2f91820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsBotControlled
	// bool IsBotControlled();                                                                                               // [0x2f917f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetPendingMovementInputVector
	// FVector GetPendingMovementInputVector();                                                                              // [0x2f917b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetNavAgentLocation
	// FVector GetNavAgentLocation();                                                                                        // [0x2f91730] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetMovementComponent
	// class UPawnMovementComponent* GetMovementComponent();                                                                 // [0x2ed2130] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetMovementBaseActor
	// class AActor* GetMovementBaseActor(class APawn* Pawn);                                                                // [0x2f91610] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.Pawn.GetLastMovementInputVector
	// FVector GetLastMovementInputVector();                                                                                 // [0x2f915d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetControlRotation
	// FRotator GetControlRotation();                                                                                        // [0x2f91540] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetController
	// class AController* GetController();                                                                                   // [0x2f91580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetBaseAimRotation
	// FRotator GetBaseAimRotation();                                                                                        // [0x2f90da0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.DetachFromControllerPendingDestroy
	// void DetachFromControllerPendingDestroy();                                                                            // [0x2f90bb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.ConsumeMovementInputVector
	// FVector ConsumeMovementInputVector();                                                                                 // [0x2f90aa0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddMovementInput
	// void AddMovementInput(FVector WorldDirection, float ScaleValue, bool bForce);                                         // [0x2f90830] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerYawInput
	// void AddControllerYawInput(float Val);                                                                                // [0x2f907b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerRollInput
	// void AddControllerRollInput(float Val);                                                                               // [0x2f90730] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerPitchInput
	// void AddControllerPitchInput(float Val);                                                                              // [0x2f906b0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DefaultPawn
/// Size: 0x0028 (0x000280 - 0x0002A8)
class ADefaultPawn : public APawn
{ 
public:
	float                                              BaseTurnRate;                                               // 0x0280   (0x0004)  
	float                                              BaseLookUpRate;                                             // 0x0284   (0x0004)  
	class UPawnMovementComponent*                      MovementComponent;                                          // 0x0288   (0x0008)  
	class USphereComponent*                            CollisionComponent;                                         // 0x0290   (0x0008)  
	class UStaticMeshComponent*                        MeshComponent;                                              // 0x0298   (0x0008)  
	bool                                               bAddDefaultMovementBindings : 1;                            // 0x02A0:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02A1   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.DefaultPawn.TurnAtRate
	// void TurnAtRate(float Rate);                                                                                          // [0x2ed31e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveUp_World
	// void MoveUp_World(float Val);                                                                                         // [0x2ed2cd0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveRight
	// void MoveRight(float Val);                                                                                            // [0x2ed2c50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveForward
	// void MoveForward(float Val);                                                                                          // [0x2ed2bd0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.LookUpAtRate
	// void LookUpAtRate(float Rate);                                                                                        // [0x2ed2b50] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintCore
/// Size: 0x0028 (0x000028 - 0x000050)
class UBlueprintCore : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UClass*                                      SkeletonGeneratedClass;                                     // 0x0028   (0x0008)  
	class UClass*                                      GeneratedClass;                                             // 0x0030   (0x0008)  
	bool                                               bLegacyNeedToPurgeSkelRefs;                                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	FGuid                                              BlueprintGuid;                                              // 0x003C   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/Engine.BPComponentClassOverride
/// Size: 0x0010 (0x000000 - 0x000010)
struct FBPComponentClassOverride
{ 
	FName                                              ComponentName;                                              // 0x0000   (0x0008)  
	class UClass*                                      ComponentClass;                                             // 0x0008   (0x0008)  
};

/// Class /Script/Engine.Blueprint
/// Size: 0x0050 (0x000050 - 0x0000A0)
class UBlueprint : public UBlueprintCore
{ 
public:
	class UClass*                                      ParentClass;                                                // 0x0050   (0x0008)  
	SDK_UNDEFINED(1,59) /* TEnumAsByte<EBlueprintType> */ __um(BlueprintType);                                     // 0x0058   (0x0001)  
	bool                                               bRecompileOnLoad : 1;                                       // 0x0059:0 (0x0001)  
	bool                                               bHasBeenRegenerated : 1;                                    // 0x0059:1 (0x0001)  
	bool                                               bIsRegeneratingOnLoad : 1;                                  // 0x0059:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x2];                                       // 0x005A   (0x0002)  MISSED
	int32_t                                            BlueprintSystemVersion;                                     // 0x005C   (0x0004)  
	class USimpleConstructionScript*                   SimpleConstructionScript;                                   // 0x0060   (0x0008)  
	TArray<class UActorComponent*>                     ComponentTemplates;                                         // 0x0068   (0x0010)  
	TArray<class UTimelineTemplate*>                   Timelines;                                                  // 0x0078   (0x0010)  
	TArray<FBPComponentClassOverride>                  ComponentClassOverrides;                                    // 0x0088   (0x0010)  
	class UInheritableComponentHandler*                InheritableComponentHandler;                                // 0x0098   (0x0008)  
};

/// Class /Script/Engine.DataAsset
/// Size: 0x0008 (0x000028 - 0x000030)
class UDataAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UClass*                                      NativeClass;                                                // 0x0028   (0x0008)  
};

/// Class /Script/Engine.BlueprintGeneratedClass
/// Size: 0x00F8 (0x000230 - 0x000328)
class UBlueprintGeneratedClass : public UClass
{ 
public:
	int32_t                                            NumReplicatedProperties;                                    // 0x0230   (0x0004)  
	bool                                               bHasNativizedParent : 1;                                    // 0x0234:0 (0x0001)  
	bool                                               bHasCookedComponentInstancingData : 1;                      // 0x0234:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0235   (0x0003)  MISSED
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                      // 0x0238   (0x0010)  
	TArray<class UActorComponent*>                     ComponentTemplates;                                         // 0x0248   (0x0010)  
	TArray<class UTimelineTemplate*>                   Timelines;                                                  // 0x0258   (0x0010)  
	TArray<FBPComponentClassOverride>                  ComponentClassOverrides;                                    // 0x0268   (0x0010)  
	class USimpleConstructionScript*                   SimpleConstructionScript;                                   // 0x0278   (0x0008)  
	class UInheritableComponentHandler*                InheritableComponentHandler;                                // 0x0280   (0x0008)  
	class UStructProperty*                             UberGraphFramePointerProperty;                              // 0x0288   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0290   (0x0008)  MISSED
	class UFunction*                                   UberGraphFunction;                                          // 0x0298   (0x0008)  
	SDK_UNDEFINED(80,60) /* TMap<FName, FBlueprintCookedComponentInstancingData> */ __um(CookedComponentInstancingData); // 0x02A0   (0x0050)  
	unsigned char                                      UnknownData02_6[0x38];                                      // 0x02F0   (0x0038)  MISSED
};

/// Class /Script/Engine.SceneComponent
/// Size: 0x0140 (0x0000B0 - 0x0001F0)
class USceneComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B0   (0x0008)  MISSED
	SDK_UNDEFINED(8,61) /* TWeakObjectPtr<APhysicsVolume*> */ __um(PhysicsVolume);                                 // 0x00B8   (0x0008)  
	class USceneComponent*                             AttachParent;                                               // 0x00C0   (0x0008)  
	FName                                              AttachSocketName;                                           // 0x00C8   (0x0008)  
	TArray<class USceneComponent*>                     AttachChildren;                                             // 0x00D0   (0x0010)  
	TArray<class USceneComponent*>                     ClientAttachedChildren;                                     // 0x00E0   (0x0010)  
	unsigned char                                      UnknownData01_5[0x2C];                                      // 0x00F0   (0x002C)  MISSED
	FVector                                            RelativeLocation;                                           // 0x011C   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0128   (0x000C)  
	FVector                                            RelativeScale3D;                                            // 0x0134   (0x000C)  
	FVector                                            ComponentVelocity;                                          // 0x0140   (0x000C)  
	bool                                               bComponentToWorldUpdated : 1;                               // 0x014C:0 (0x0001)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x014C:1 (0x0001)  MISSED
	bool                                               bAbsoluteLocation : 1;                                      // 0x014C:2 (0x0001)  
	bool                                               bAbsoluteRotation : 1;                                      // 0x014C:3 (0x0001)  
	bool                                               bAbsoluteScale : 1;                                         // 0x014C:4 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x014C:5 (0x0001)  
	bool                                               bShouldBeAttached : 1;                                      // 0x014C:6 (0x0001)  
	bool                                               bShouldSnapLocationWhenAttached : 1;                        // 0x014C:7 (0x0001)  
	bool                                               bShouldSnapRotationWhenAttached : 1;                        // 0x014D:0 (0x0001)  
	bool                                               bShouldUpdatePhysicsVolume : 1;                             // 0x014D:1 (0x0001)  
	bool                                               bHiddenInGame : 1;                                          // 0x014D:2 (0x0001)  
	bool                                               bBoundsChangeTriggersStreamingDataRebuild : 1;              // 0x014D:3 (0x0001)  
	bool                                               bUseAttachParentBound : 1;                                  // 0x014D:4 (0x0001)  
	unsigned char                                      UnknownData03_4[0x1];                                       // 0x014E   (0x0001)  MISSED
	SDK_UNDEFINED(1,62) /* TEnumAsByte<EComponentMobility> */ __um(Mobility);                                      // 0x014F   (0x0001)  
	SDK_UNDEFINED(1,63) /* TEnumAsByte<EDetailMode> */ __um(DetailMode);                                           // 0x0150   (0x0001)  
	SDK_UNDEFINED(1,64) /* FMulticastSparseDelegate */ __um(PhysicsVolumeChangedDelegate);                         // 0x0151   (0x0001)  
	unsigned char                                      UnknownData04_6[0x9E];                                      // 0x0152   (0x009E)  MISSED


	/// Functions
	// Function /Script/Engine.SceneComponent.ToggleVisibility
	// void ToggleVisibility(bool bPropagateToChildren);                                                                     // [0x2fbfb00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SnapTo
	// bool SnapTo(class USceneComponent* InParent, FName InSocketName);                                                     // [0x2fbfa40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetWorldScale3D
	// void SetWorldScale3D(FVector NewScale);                                                                               // [0x2fbf860] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetVisibility
	// void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);                                                   // [0x2fbf790] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetShouldUpdatePhysicsVolume
	// void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);                                                 // [0x2fbf700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetRelativeScale3D
	// void SetRelativeScale3D(FVector NewScale3D);                                                                          // [0x2fbf670] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetMobility
	// void SetMobility(TEnumAsByte<EComponentMobility> NewMobility);                                                        // [0x2fbf5f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetHiddenInGame
	// void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);                                                      // [0x2fbf520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetAbsolute
	// void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);                       // [0x2fbf380] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.ResetRelativeTransform
	// void ResetRelativeTransform();                                                                                        // [0x2fbf360] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.OnRep_Visibility
	// void OnRep_Visibility(bool OldValue);                                                                                 // [0x2fbf180] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_Transform
	// void OnRep_Transform();                                                                                               // [0x2fbf160] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachSocketName
	// void OnRep_AttachSocketName();                                                                                        // [0x2fbf140] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachParent
	// void OnRep_AttachParent();                                                                                            // [0x2fbf140] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachChildren
	// void OnRep_AttachChildren();                                                                                          // [0x2fbf120] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.K2_SetWorldTransform
	// void K2_SetWorldTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);         // [0x2fbef20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldRotation
	// void K2_SetWorldRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);              // [0x2fbed80] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocationAndRotation
	// void K2_SetWorldLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x2fbeb90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocation
	// void K2_SetWorldLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x2fbe9f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeTransform
	// void K2_SetRelativeTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);      // [0x2fbe7f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeRotation
	// void K2_SetRelativeRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);           // [0x2fbe650] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocationAndRotation
	// void K2_SetRelativeLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x2fbe460] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocation
	// void K2_SetRelativeLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x2fbe2c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_GetComponentToWorld
	// FTransform K2_GetComponentToWorld();                                                                                  // [0x2fbe260] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentScale
	// FVector K2_GetComponentScale();                                                                                       // [0x2fbe220] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentRotation
	// FRotator K2_GetComponentRotation();                                                                                   // [0x2fbe1e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentLocation
	// FVector K2_GetComponentLocation();                                                                                    // [0x2fbe1a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_DetachFromComponent
	// void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify); // [0x2fbe050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AttachToComponent
	// bool K2_AttachToComponent(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x2fbdea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AttachTo
	// bool K2_AttachTo(class USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies); // [0x2fbdd50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldTransform
	// void K2_AddWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);       // [0x2fbdb50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldRotation
	// void K2_AddWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x2fbd9b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldOffset
	// void K2_AddWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x2fbd810] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeRotation
	// void K2_AddRelativeRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);         // [0x2fbd670] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeLocation
	// void K2_AddRelativeLocation(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x2fbd4d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalTransform
	// void K2_AddLocalTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);       // [0x2fbd2d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalRotation
	// void K2_AddLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x2fbd130] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalOffset
	// void K2_AddLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x2fbcf90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.IsVisible
	// bool IsVisible();                                                                                                     // [0x2fbcf60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.IsSimulatingPhysics
	// bool IsSimulatingPhysics(FName BoneName);                                                                             // [0x2fbcec0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.IsAnySimulatingPhysics
	// bool IsAnySimulatingPhysics();                                                                                        // [0x2fbce90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetUpVector
	// FVector GetUpVector();                                                                                                // [0x2fbcd00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketTransform
	// FTransform GetSocketTransform(FName InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);               // [0x2fbcc00] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketRotation
	// FRotator GetSocketRotation(FName InSocketName);                                                                       // [0x2fbcb50] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketQuaternion
	// FQuat GetSocketQuaternion(FName InSocketName);                                                                        // [0x2fbcab0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketLocation
	// FVector GetSocketLocation(FName InSocketName);                                                                        // [0x2fbca00] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetShouldUpdatePhysicsVolume
	// bool GetShouldUpdatePhysicsVolume();                                                                                  // [0x2fbc9d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetRightVector
	// FVector GetRightVector();                                                                                             // [0x2fbc990] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetRelativeTransform
	// FTransform GetRelativeTransform();                                                                                    // [0x2fbc930] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetPhysicsVolume
	// class APhysicsVolume* GetPhysicsVolume();                                                                             // [0x2fbc900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetParentComponents
	// void GetParentComponents(TArray<USceneComponent*>& Parents);                                                          // [0x2fbc850] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetNumChildrenComponents
	// int32_t GetNumChildrenComponents();                                                                                   // [0x2fbc820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetForwardVector
	// FVector GetForwardVector();                                                                                           // [0x2f98ef0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetComponentVelocity
	// FVector GetComponentVelocity();                                                                                       // [0x2fbc7e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetChildrenComponents
	// void GetChildrenComponents(bool bIncludeAllDescendants, TArray<USceneComponent*>& Children);                          // [0x2fbc6e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetChildComponent
	// class USceneComponent* GetChildComponent(int32_t ChildIndex);                                                         // [0x2fbc650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAttachSocketName
	// FName GetAttachSocketName();                                                                                          // [0x2701f40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAttachParent
	// class USceneComponent* GetAttachParent();                                                                             // [0xec11a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAllSocketNames
	// TArray<FName> GetAllSocketNames();                                                                                    // [0x2fbc5d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.DoesSocketExist
	// bool DoesSocketExist(FName InSocketName);                                                                             // [0x2fbc530] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.DetachFromParent
	// void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);                                                 // [0x2fbc460] Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.LightingChannels
/// Size: 0x0001 (0x000000 - 0x000001)
struct FLightingChannels
{ 
	bool                                               bChannel0 : 1;                                              // 0x0000:0 (0x0001)  
	bool                                               bChannel1 : 1;                                              // 0x0000:1 (0x0001)  
	bool                                               bChannel2 : 1;                                              // 0x0000:2 (0x0001)  
};

/// Struct /Script/Engine.CustomPrimitiveData
/// Size: 0x0010 (0x000000 - 0x000010)
struct FCustomPrimitiveData
{ 
	TArray<float>                                      Data;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CollisionResponseContainer
/// Size: 0x0020 (0x000000 - 0x000020)
struct FCollisionResponseContainer
{ 
	SDK_UNDEFINED(1,65) /* TEnumAsByte<ECollisionResponse> */ __um(WorldStatic);                                   // 0x0000   (0x0001)  
	SDK_UNDEFINED(1,66) /* TEnumAsByte<ECollisionResponse> */ __um(WorldDynamic);                                  // 0x0001   (0x0001)  
	SDK_UNDEFINED(1,67) /* TEnumAsByte<ECollisionResponse> */ __um(Pawn);                                          // 0x0002   (0x0001)  
	SDK_UNDEFINED(1,68) /* TEnumAsByte<ECollisionResponse> */ __um(Visibility);                                    // 0x0003   (0x0001)  
	SDK_UNDEFINED(1,69) /* TEnumAsByte<ECollisionResponse> */ __um(Camera);                                        // 0x0004   (0x0001)  
	SDK_UNDEFINED(1,70) /* TEnumAsByte<ECollisionResponse> */ __um(PhysicsBody);                                   // 0x0005   (0x0001)  
	SDK_UNDEFINED(1,71) /* TEnumAsByte<ECollisionResponse> */ __um(Vehicle);                                       // 0x0006   (0x0001)  
	SDK_UNDEFINED(1,72) /* TEnumAsByte<ECollisionResponse> */ __um(Destructible);                                  // 0x0007   (0x0001)  
	SDK_UNDEFINED(1,73) /* TEnumAsByte<ECollisionResponse> */ __um(EngineTraceChannel1);                           // 0x0008   (0x0001)  
	SDK_UNDEFINED(1,74) /* TEnumAsByte<ECollisionResponse> */ __um(EngineTraceChannel2);                           // 0x0009   (0x0001)  
	SDK_UNDEFINED(1,75) /* TEnumAsByte<ECollisionResponse> */ __um(EngineTraceChannel3);                           // 0x000A   (0x0001)  
	SDK_UNDEFINED(1,76) /* TEnumAsByte<ECollisionResponse> */ __um(EngineTraceChannel4);                           // 0x000B   (0x0001)  
	SDK_UNDEFINED(1,77) /* TEnumAsByte<ECollisionResponse> */ __um(EngineTraceChannel5);                           // 0x000C   (0x0001)  
	SDK_UNDEFINED(1,78) /* TEnumAsByte<ECollisionResponse> */ __um(EngineTraceChannel6);                           // 0x000D   (0x0001)  
	SDK_UNDEFINED(1,79) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel1);                             // 0x000E   (0x0001)  
	SDK_UNDEFINED(1,80) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel2);                             // 0x000F   (0x0001)  
	SDK_UNDEFINED(1,81) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel3);                             // 0x0010   (0x0001)  
	SDK_UNDEFINED(1,82) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel4);                             // 0x0011   (0x0001)  
	SDK_UNDEFINED(1,83) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel5);                             // 0x0012   (0x0001)  
	SDK_UNDEFINED(1,84) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel6);                             // 0x0013   (0x0001)  
	SDK_UNDEFINED(1,85) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel7);                             // 0x0014   (0x0001)  
	SDK_UNDEFINED(1,86) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel8);                             // 0x0015   (0x0001)  
	SDK_UNDEFINED(1,87) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel9);                             // 0x0016   (0x0001)  
	SDK_UNDEFINED(1,88) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel10);                            // 0x0017   (0x0001)  
	SDK_UNDEFINED(1,89) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel11);                            // 0x0018   (0x0001)  
	SDK_UNDEFINED(1,90) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel12);                            // 0x0019   (0x0001)  
	SDK_UNDEFINED(1,91) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel13);                            // 0x001A   (0x0001)  
	SDK_UNDEFINED(1,92) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel14);                            // 0x001B   (0x0001)  
	SDK_UNDEFINED(1,93) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel15);                            // 0x001C   (0x0001)  
	SDK_UNDEFINED(1,94) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel16);                            // 0x001D   (0x0001)  
	SDK_UNDEFINED(1,95) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel17);                            // 0x001E   (0x0001)  
	SDK_UNDEFINED(1,96) /* TEnumAsByte<ECollisionResponse> */ __um(GameTraceChannel18);                            // 0x001F   (0x0001)  
};

/// Struct /Script/Engine.ResponseChannel
/// Size: 0x000C (0x000000 - 0x00000C)
struct FResponseChannel
{ 
	FName                                              Channel;                                                    // 0x0000   (0x0008)  
	SDK_UNDEFINED(1,97) /* TEnumAsByte<ECollisionResponse> */ __um(Response);                                      // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.CollisionResponse
/// Size: 0x0030 (0x000000 - 0x000030)
struct FCollisionResponse
{ 
	FCollisionResponseContainer                        ResponseToChannels;                                         // 0x0000   (0x0020)  
	TArray<FResponseChannel>                           ResponseArray;                                              // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.WalkableSlopeOverride
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWalkableSlopeOverride
{ 
	SDK_UNDEFINED(1,98) /* TEnumAsByte<EWalkableSlopeBehavior> */ __um(WalkableSlopeBehavior);                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              WalkableSlopeAngle;                                         // 0x0004   (0x0004)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.BodyInstance
/// Size: 0x0130 (0x000000 - 0x000130)
struct FBodyInstance
{ 
	SDK_UNDEFINED(1,99) /* TEnumAsByte<ECollisionChannel> */ __um(ObjectType);                                     // 0x0006   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0007   (0x0001)  MISSED
	SDK_UNDEFINED(1,100) /* TEnumAsByte<ECollisionEnabled> */ __um(CollisionEnabled);                              // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0009   (0x0001)  MISSED
	ESleepFamily                                       SleepFamily;                                                // 0x000A   (0x0001)  
	SDK_UNDEFINED(1,101) /* TEnumAsByte<EDOFMode> */   __um(DOFMode);                                              // 0x000B   (0x0001)  
	bool                                               bUseCCD : 1;                                                // 0x000C:0 (0x0001)  
	bool                                               bIgnoreAnalyticCollisions : 1;                              // 0x000C:1 (0x0001)  
	bool                                               bNotifyRigidBodyCollision : 1;                              // 0x000C:2 (0x0001)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x000C:3 (0x0001)  MISSED
	bool                                               bSimulatePhysics : 1;                                       // 0x000C:4 (0x0001)  
	bool                                               bOverrideMass : 1;                                          // 0x000C:5 (0x0001)  
	bool                                               bEnableGravity : 1;                                         // 0x000C:6 (0x0001)  
	bool                                               bAutoWeld : 1;                                              // 0x000C:7 (0x0001)  
	bool                                               bStartAwake : 1;                                            // 0x000D:0 (0x0001)  
	bool                                               bGenerateWakeEvents : 1;                                    // 0x000D:1 (0x0001)  
	bool                                               bUpdateMassWhenScaleChanges : 1;                            // 0x000D:2 (0x0001)  
	bool                                               bLockTranslation : 1;                                       // 0x000D:3 (0x0001)  
	bool                                               bLockRotation : 1;                                          // 0x000D:4 (0x0001)  
	bool                                               bLockXTranslation : 1;                                      // 0x000D:5 (0x0001)  
	bool                                               bLockYTranslation : 1;                                      // 0x000D:6 (0x0001)  
	bool                                               bLockZTranslation : 1;                                      // 0x000D:7 (0x0001)  
	bool                                               bLockXRotation : 1;                                         // 0x000E:0 (0x0001)  
	bool                                               bLockYRotation : 1;                                         // 0x000E:1 (0x0001)  
	bool                                               bLockZRotation : 1;                                         // 0x000E:2 (0x0001)  
	bool                                               bOverrideMaxAngularVelocity : 1;                            // 0x000E:3 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x000E:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x000E:5 (0x0001)  MISSED
	bool                                               bOverrideMaxDepenetrationVelocity : 1;                      // 0x000E:6 (0x0001)  
	bool                                               bOverrideWalkableSlopeOnInstance : 1;                       // 0x000E:7 (0x0001)  
	bool                                               bInterpolateWhenSubStepping : 1;                            // 0x000F:0 (0x0001)  
	unsigned char                                      UnknownData05_4[0xC];                                       // 0x0010   (0x000C)  MISSED
	FName                                              CollisionProfileName;                                       // 0x001C   (0x0008)  
	char                                               PositionSolverIterationCount;                               // 0x0024   (0x0001)  
	char                                               VelocitySolverIterationCount;                               // 0x0025   (0x0001)  
	unsigned char                                      UnknownData06_5[0x2];                                       // 0x0026   (0x0002)  MISSED
	FCollisionResponse                                 CollisionResponses;                                         // 0x0028   (0x0030)  
	float                                              MaxDepenetrationVelocity;                                   // 0x0058   (0x0004)  
	float                                              MassInKgOverride;                                           // 0x005C   (0x0004)  
	unsigned char                                      UnknownData07_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              LinearDamping;                                              // 0x0068   (0x0004)  
	float                                              AngularDamping;                                             // 0x006C   (0x0004)  
	FVector                                            CustomDOFPlaneNormal;                                       // 0x0070   (0x000C)  
	FVector                                            COMNudge;                                                   // 0x007C   (0x000C)  
	float                                              MassScale;                                                  // 0x0088   (0x0004)  
	FVector                                            InertiaTensorScale;                                         // 0x008C   (0x000C)  
	unsigned char                                      UnknownData08_5[0x10];                                      // 0x0098   (0x0010)  MISSED
	FWalkableSlopeOverride                             WalkableSlopeOverride;                                      // 0x00A8   (0x0010)  
	class UPhysicalMaterial*                           PhysMaterialOverride;                                       // 0x00B8   (0x0008)  
	float                                              MaxAngularVelocity;                                         // 0x00C0   (0x0004)  
	float                                              CustomSleepThresholdMultiplier;                             // 0x00C4   (0x0004)  
	float                                              StabilizationThresholdMultiplier;                           // 0x00C8   (0x0004)  
	float                                              PhysicsBlendWeight;                                         // 0x00CC   (0x0004)  
	unsigned char                                      UnknownData09_6[0x60];                                      // 0x00D0   (0x0060)  MISSED
};

/// Class /Script/Engine.PrimitiveComponent
/// Size: 0x0220 (0x0001F0 - 0x000410)
#pragma pack(push, 0x1)
class alignas(0x10) UPrimitiveComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x01F0   (0x0008)  MISSED
	float                                              MinDrawDistance;                                            // 0x01F8   (0x0004)  
	float                                              LDMaxDrawDistance;                                          // 0x01FC   (0x0004)  
	float                                              CachedMaxDrawDistance;                                      // 0x0200   (0x0004)  
	SDK_UNDEFINED(1,102) /* TEnumAsByte<ESceneDepthPriorityGroup> */ __um(DepthPriorityGroup);                     // 0x0204   (0x0001)  
	SDK_UNDEFINED(1,103) /* TEnumAsByte<ESceneDepthPriorityGroup> */ __um(ViewOwnerDepthPriorityGroup);            // 0x0205   (0x0001)  
	SDK_UNDEFINED(1,104) /* TEnumAsByte<EIndirectLightingCacheQuality> */ __um(IndirectLightingCacheQuality);      // 0x0206   (0x0001)  
	ELightmapType                                      LightmapType;                                               // 0x0207   (0x0001)  
	bool                                               bUseMaxLODAsImposter : 1;                                   // 0x0208:0 (0x0001)  
	bool                                               bBatchImpostersAsInstances : 1;                             // 0x0208:1 (0x0001)  
	bool                                               bNeverDistanceCull : 1;                                     // 0x0208:2 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0208:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0208:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0208:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0208:6 (0x0001)  MISSED
	bool                                               bAlwaysCreatePhysicsState : 1;                              // 0x0208:7 (0x0001)  
	bool                                               bGenerateOverlapEvents : 1;                                 // 0x0209:0 (0x0001)  
	bool                                               bMultiBodyOverlap : 1;                                      // 0x0209:1 (0x0001)  
	bool                                               bTraceComplexOnMove : 1;                                    // 0x0209:2 (0x0001)  
	bool                                               bReturnMaterialOnMove : 1;                                  // 0x0209:3 (0x0001)  
	bool                                               bUseViewOwnerDepthPriorityGroup : 1;                        // 0x0209:4 (0x0001)  
	bool                                               bAllowCullDistanceVolume : 1;                               // 0x0209:5 (0x0001)  
	bool                                               bHasMotionBlurVelocityMeshes : 1;                           // 0x0209:6 (0x0001)  
	bool                                               bVisibleInReflectionCaptures : 1;                           // 0x0209:7 (0x0001)  
	bool                                               bVisibleInRayTracing : 1;                                   // 0x020A:0 (0x0001)  
	bool                                               bRenderInMainPass : 1;                                      // 0x020A:1 (0x0001)  
	bool                                               bRenderInDepthPass : 1;                                     // 0x020A:2 (0x0001)  
	bool                                               bReceivesDecals : 1;                                        // 0x020A:3 (0x0001)  
	bool                                               bOwnerNoSee : 1;                                            // 0x020A:4 (0x0001)  
	bool                                               bOnlyOwnerSee : 1;                                          // 0x020A:5 (0x0001)  
	bool                                               bTreatAsBackgroundForOcclusion : 1;                         // 0x020A:6 (0x0001)  
	bool                                               bUseAsOccluder : 1;                                         // 0x020A:7 (0x0001)  
	bool                                               bSelectable : 1;                                            // 0x020B:0 (0x0001)  
	bool                                               bForceMipStreaming : 1;                                     // 0x020B:1 (0x0001)  
	bool                                               bHasPerInstanceHitProxies : 1;                              // 0x020B:2 (0x0001)  
	bool                                               CastShadow : 1;                                             // 0x020B:3 (0x0001)  
	bool                                               bAffectDynamicIndirectLighting : 1;                         // 0x020B:4 (0x0001)  
	bool                                               bAffectDistanceFieldLighting : 1;                           // 0x020B:5 (0x0001)  
	bool                                               bCastDynamicShadow : 1;                                     // 0x020B:6 (0x0001)  
	bool                                               bCastStaticShadow : 1;                                      // 0x020B:7 (0x0001)  
	bool                                               bCastVolumetricTranslucentShadow : 1;                       // 0x020C:0 (0x0001)  
	bool                                               bSelfShadowOnly : 1;                                        // 0x020C:1 (0x0001)  
	bool                                               bCastFarShadow : 1;                                         // 0x020C:2 (0x0001)  
	bool                                               bCastInsetShadow : 1;                                       // 0x020C:3 (0x0001)  
	bool                                               bCastCinematicShadow : 1;                                   // 0x020C:4 (0x0001)  
	bool                                               bCastHiddenShadow : 1;                                      // 0x020C:5 (0x0001)  
	bool                                               bCastShadowAsTwoSided : 1;                                  // 0x020C:6 (0x0001)  
	bool                                               bLightAsIfStatic : 1;                                       // 0x020C:7 (0x0001)  
	bool                                               bLightAttachmentsAsGroup : 1;                               // 0x020D:0 (0x0001)  
	bool                                               bExcludeFromLightAttachmentGroup : 1;                       // 0x020D:1 (0x0001)  
	bool                                               bReceiveMobileCSMShadows : 1;                               // 0x020D:2 (0x0001)  
	bool                                               bSingleSampleShadowFromStationaryLights : 1;                // 0x020D:3 (0x0001)  
	bool                                               bIgnoreRadialImpulse : 1;                                   // 0x020D:4 (0x0001)  
	bool                                               bIgnoreRadialForce : 1;                                     // 0x020D:5 (0x0001)  
	bool                                               bApplyImpulseOnDamage : 1;                                  // 0x020D:6 (0x0001)  
	bool                                               bReplicatePhysicsToAutonomousProxy : 1;                     // 0x020D:7 (0x0001)  
	bool                                               bFillCollisionUnderneathForNavmesh : 1;                     // 0x020E:0 (0x0001)  
	bool                                               AlwaysLoadOnClient : 1;                                     // 0x020E:1 (0x0001)  
	bool                                               AlwaysLoadOnServer : 1;                                     // 0x020E:2 (0x0001)  
	bool                                               bUseEditorCompositing : 1;                                  // 0x020E:3 (0x0001)  
	bool                                               bRenderCustomDepth : 1;                                     // 0x020E:4 (0x0001)  
	bool                                               bEvaluateRayTracingWaterCaustics : 1;                       // 0x020E:5 (0x0001)  
	SDK_UNDEFINED(1,105) /* TEnumAsByte<EHasCustomNavigableGeometry> */ __um(bHasCustomNavigableGeometry);         // 0x020F   (0x0001)  
	unsigned char                                      UnknownData05_5[0x1];                                       // 0x0210   (0x0001)  MISSED
	SDK_UNDEFINED(1,106) /* TEnumAsByte<ECanBeCharacterBase> */ __um(CanCharacterStepUpOn);                        // 0x0211   (0x0001)  
	FLightingChannels                                  LightingChannels;                                           // 0x0212   (0x0001)  
	ERendererStencilMask                               CustomDepthStencilWriteMask;                                // 0x0213   (0x0001)  
	int32_t                                            CustomDepthStencilValue;                                    // 0x0214   (0x0004)  
	FCustomPrimitiveData                               CustomPrimitiveData;                                        // 0x0218   (0x0010)  
	FCustomPrimitiveData                               CustomPrimitiveDataInternal;                                // 0x0228   (0x0010)  
	int32_t                                            TranslucencySortPriority;                                   // 0x0238   (0x0004)  
	int32_t                                            VisibilityId;                                               // 0x023C   (0x0004)  
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextures;                                     // 0x0240   (0x0010)  
	int8_t                                             VirtualTextureLodBias;                                      // 0x0250   (0x0001)  
	int8_t                                             VirtualTextureCullMips;                                     // 0x0251   (0x0001)  
	int8_t                                             VirtualTextureMinCoverage;                                  // 0x0252   (0x0001)  
	ERuntimeVirtualTextureMainPassType                 VirtualTextureRenderPassType;                               // 0x0253   (0x0001)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x0254   (0x0004)  MISSED
	float                                              LpvBiasMultiplier;                                          // 0x0258   (0x0004)  
	unsigned char                                      UnknownData07_5[0x8];                                       // 0x025C   (0x0008)  MISSED
	float                                              BoundsScale;                                                // 0x0264   (0x0004)  
	unsigned char                                      UnknownData08_5[0x10];                                      // 0x0268   (0x0010)  MISSED
	TArray<class AActor*>                              MoveIgnoreActors;                                           // 0x0278   (0x0010)  
	TArray<class UPrimitiveComponent*>                 MoveIgnoreComponents;                                       // 0x0288   (0x0010)  
	unsigned char                                      UnknownData09_5[0x10];                                      // 0x0298   (0x0010)  MISSED
	FBodyInstance                                      BodyInstance;                                               // 0x02A8   (0x0130)  
	SDK_UNDEFINED(1,107) /* FMulticastSparseDelegate */ __um(OnComponentHit);                                      // 0x03D8   (0x0001)  
	SDK_UNDEFINED(1,108) /* FMulticastSparseDelegate */ __um(OnComponentBeginOverlap);                             // 0x03D9   (0x0001)  
	SDK_UNDEFINED(1,109) /* FMulticastSparseDelegate */ __um(OnComponentEndOverlap);                               // 0x03DA   (0x0001)  
	SDK_UNDEFINED(1,110) /* FMulticastSparseDelegate */ __um(OnComponentWake);                                     // 0x03DB   (0x0001)  
	SDK_UNDEFINED(1,111) /* FMulticastSparseDelegate */ __um(OnComponentSleep);                                    // 0x03DC   (0x0001)  
	unsigned char                                      UnknownData10_5[0x1];                                       // 0x03DD   (0x0001)  MISSED
	SDK_UNDEFINED(1,112) /* FMulticastSparseDelegate */ __um(OnBeginCursorOver);                                   // 0x03DE   (0x0001)  
	SDK_UNDEFINED(1,113) /* FMulticastSparseDelegate */ __um(OnEndCursorOver);                                     // 0x03DF   (0x0001)  
	SDK_UNDEFINED(1,114) /* FMulticastSparseDelegate */ __um(OnClicked);                                           // 0x03E0   (0x0001)  
	SDK_UNDEFINED(1,115) /* FMulticastSparseDelegate */ __um(OnReleased);                                          // 0x03E1   (0x0001)  
	SDK_UNDEFINED(1,116) /* FMulticastSparseDelegate */ __um(OnInputTouchBegin);                                   // 0x03E2   (0x0001)  
	SDK_UNDEFINED(1,117) /* FMulticastSparseDelegate */ __um(OnInputTouchEnd);                                     // 0x03E3   (0x0001)  
	SDK_UNDEFINED(1,118) /* FMulticastSparseDelegate */ __um(OnInputTouchEnter);                                   // 0x03E4   (0x0001)  
	SDK_UNDEFINED(1,119) /* FMulticastSparseDelegate */ __um(OnInputTouchLeave);                                   // 0x03E5   (0x0001)  
	unsigned char                                      UnknownData11_5[0x1A];                                      // 0x03E6   (0x001A)  MISSED
	class UPrimitiveComponent*                         LODParentPrimitive;                                         // 0x0400   (0x0008)  


	/// Functions
	// Function /Script/Engine.PrimitiveComponent.WasRecentlyRendered
	// bool WasRecentlyRendered(float Tolerance);                                                                            // [0x2fb1ed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.WakeRigidBody
	// void WakeRigidBody(FName BoneName);                                                                                   // [0x2fb1e40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.WakeAllRigidBodies
	// void WakeAllRigidBodies();                                                                                            // [0x2ec3400] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetWalkableSlopeOverride
	// void SetWalkableSlopeOverride(FWalkableSlopeOverride& NewOverride);                                                   // [0x2fb1d90] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetUseCCD
	// void SetUseCCD(bool InUseCCD, FName BoneName);                                                                        // [0x2fb1cc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetTranslucentSortPriority
	// void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority);                                                  // [0x2fb1c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
	// void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);                      // [0x2fb1bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetSimulatePhysics
	// void SetSimulatePhysics(bool bSimulate);                                                                              // [0x2fb1b20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderInMainPass
	// void SetRenderInMainPass(bool bValue);                                                                                // [0x2fb1a90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderCustomDepth
	// void SetRenderCustomDepth(bool bValue);                                                                               // [0x2fb1a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetReceivesDecals
	// void SetReceivesDecals(bool bNewReceivesDecals);                                                                      // [0x2fb1970] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysMaterialOverride
	// void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);                                               // [0x2fb1340] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
	// void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                   // [0x2fb1860] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
	// void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                   // [0x2fb1750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
	// void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                            // [0x2fb1750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsLinearVelocity
	// void SetPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent, FName BoneName);                                    // [0x2fb1630] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
	// void SetPhysicsAngularVelocityInRadians(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                       // [0x2fb1510] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
	// void SetPhysicsAngularVelocityInDegrees(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                       // [0x2fb13d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocity
	// void SetPhysicsAngularVelocity(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                                // [0x2fb13d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetOwnerNoSee
	// void SetOwnerNoSee(bool bNewOwnerNoSee);                                                                              // [0x2fb12b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetOnlyOwnerSee
	// void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);                                                                          // [0x2fb1220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
	// void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);                                                  // [0x2fb1190] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMaterialByName
	// void SetMaterialByName(FName MaterialSlotName, class UMaterialInterface* Material);                                   // [0x2fb10c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMaterial
	// void SetMaterial(int32_t ElementIndex, class UMaterialInterface* Material);                                           // [0x2fb0ff0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMassScale
	// void SetMassScale(FName BoneName, float InMassScale);                                                                 // [0x2fb0f20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMassOverrideInKg
	// void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);                                         // [0x2fb0e20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLinearDamping
	// void SetLinearDamping(float InDamping);                                                                               // [0x2fb0da0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLightingChannels
	// void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);                                             // [0x2fb0c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
	// void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);                                                     // [0x2fb0bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetGenerateOverlapEvents
	// void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);                                                         // [0x2fb0b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
	// void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);                                     // [0x2fb0ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetEnableGravity
	// void SetEnableGravity(bool bGravityEnabled);                                                                          // [0x2fa2830] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
	// void SetCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 value);                                                // [0x2fb0a00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
	// void SetCustomPrimitiveDataVector3(int32_t DataIndex, FVector value);                                                 // [0x2fb0930] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
	// void SetCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D value);                                               // [0x2fb0870] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
	// void SetCustomPrimitiveDataFloat(int32_t DataIndex, float value);                                                     // [0x2fb07a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
	// void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);                                               // [0x2fb0720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilValue
	// void SetCustomDepthStencilValue(int32_t value);                                                                       // [0x2fb06a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCullDistance
	// void SetCullDistance(float NewCullDistance);                                                                          // [0x2fb0620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetConstraintMode
	// void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);                                                         // [0x2fb05a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToChannel
	// void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse); // [0x2fb04e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
	// void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);                                  // [0x2fb0460] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionProfileName
	// void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);                                     // [0x2fb0390] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionObjectType
	// void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);                                                  // [0x2fb0310] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionEnabled
	// void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);                                                     // [0x2fb0290] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCenterOfMass
	// void SetCenterOfMass(FVector CenterOfMassOffset, FName BoneName);                                                     // [0x2fb01c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastShadow
	// void SetCastShadow(bool NewCastShadow);                                                                               // [0x2fb0130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastInsetShadow
	// void SetCastInsetShadow(bool bInCastInsetShadow);                                                                     // [0x2fb00a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetBoundsScale
	// void SetBoundsScale(float NewBoundsScale);                                                                            // [0x2fb0020] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAngularDamping
	// void SetAngularDamping(float InDamping);                                                                              // [0x2faffa0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllUseCCD
	// void SetAllUseCCD(bool InUseCCD);                                                                                     // [0x2fa52e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
	// void SetAllPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent);                                                 // [0x2fafec0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
	// void SetAllPhysicsAngularVelocityInRadians(FVector& NewAngVel, bool bAddToCurrent);                                   // [0x2fafde0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
	// void SetAllPhysicsAngularVelocityInDegrees(FVector& NewAngVel, bool bAddToCurrent);                                   // [0x2fafcc0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllMassScale
	// void SetAllMassScale(float InMassScale);                                                                              // [0x2fafc40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ScaleByMomentOfInertia
	// FVector ScaleByMomentOfInertia(FVector InputVector, FName BoneName);                                                  // [0x2fafb40] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.PutRigidBodyToSleep
	// void PutRigidBodyToSleep(FName BoneName);                                                                             // [0x2fafac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_SphereTraceComponent
	// bool K2_SphereTraceComponent(FVector TraceStart, FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x2faf730] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_SphereOverlapComponent
	// bool K2_SphereOverlapComponent(FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x2faf3f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_LineTraceComponent
	// bool K2_LineTraceComponent(FVector TraceStart, FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x2faf0a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
	// bool K2_IsQueryCollisionEnabled();                                                                                    // [0x2faf060] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
	// bool K2_IsPhysicsCollisionEnabled();                                                                                  // [0x2faf020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_IsCollisionEnabled
	// bool K2_IsCollisionEnabled();                                                                                         // [0x2faefe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_BoxOverlapComponent
	// bool K2_BoxOverlapComponent(FVector InBoxCentre, FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x2faec90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingComponent
	// bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp);                                                    // [0x2faec00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingActor
	// bool IsOverlappingActor(class AActor* Other);                                                                         // [0x2faeb70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsGravityEnabled
	// bool IsGravityEnabled();                                                                                              // [0x2faeb40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsAnyRigidBodyAwake
	// bool IsAnyRigidBodyAwake();                                                                                           // [0x2faeb10] Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.PrimitiveComponent.IgnoreComponentWhenMoving
	// void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);                             // [0x2faea40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.IgnoreActorWhenMoving
	// void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);                                                  // [0x2fae970] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetWalkableSlopeOverride
	// FWalkableSlopeOverride GetWalkableSlopeOverride();                                                                    // [0x2fae940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
	// FVector GetPhysicsLinearVelocityAtPoint(FVector Point, FName BoneName);                                               // [0x2fae850] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocity
	// FVector GetPhysicsLinearVelocity(FName BoneName);                                                                     // [0x2fae7b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
	// FVector GetPhysicsAngularVelocityInRadians(FName BoneName);                                                           // [0x2fae710] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
	// FVector GetPhysicsAngularVelocityInDegrees(FName BoneName);                                                           // [0x2fae640] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocity
	// FVector GetPhysicsAngularVelocity(FName BoneName);                                                                    // [0x2fae640] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingComponents
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OutOverlappingComponents);                                // [0x2fae590] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingActors
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, class UClass* ClassFilter);                             // [0x2fae4a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetNumMaterials
	// int32_t GetNumMaterials();                                                                                            // [0x2eebe10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
	// class UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex);                // [0x2fae3c0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMaterial
	// class UMaterialInterface* GetMaterial(int32_t ElementIndex);                                                          // [0x2fae320] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMassScale
	// float GetMassScale(FName BoneName);                                                                                   // [0x2fae280] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMass
	// float GetMass();                                                                                                      // [0x2fae240] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetLinearDamping
	// float GetLinearDamping();                                                                                             // [0x2fae200] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetInertiaTensor
	// FVector GetInertiaTensor(FName BoneName);                                                                             // [0x2fae150] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetGenerateOverlapEvents
	// bool GetGenerateOverlapEvents();                                                                                      // [0x2fae120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionResponseToChannel
	// TEnumAsByte<ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);                // [0x2fae090] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionProfileName
	// FName GetCollisionProfileName();                                                                                      // [0x2fae050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionObjectType
	// TEnumAsByte<ECollisionChannel> GetCollisionObjectType();                                                              // [0x2fae020] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionEnabled
	// TEnumAsByte<ECollisionEnabled> GetCollisionEnabled();                                                                 // [0x2fadff0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetClosestPointOnCollision
	// float GetClosestPointOnCollision(FVector& Point, FVector& OutPointOnBody, FName BoneName);                            // [0x2fadeb0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCenterOfMass
	// FVector GetCenterOfMass(FName BoneName);                                                                              // [0x2fade10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetAngularDamping
	// float GetAngularDamping();                                                                                            // [0x2faddd0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, class UMaterialInterface* SourceMaterial, FName OptionalName); // [0x2fadcc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
	// class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, class UMaterialInterface* Parent); // [0x2fadbf0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
	// class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex);                            // [0x2fadb50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
	// TArray<UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();                                                       // [0x2fadad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
	// TArray<AActor*> CopyArrayOfMoveIgnoreActors();                                                                        // [0x2fada50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreComponents
	// void ClearMoveIgnoreComponents();                                                                                     // [0x2fada20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreActors
	// void ClearMoveIgnoreActors();                                                                                         // [0x2fada00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CanCharacterStepUp
	// bool CanCharacterStepUp(class APawn* Pawn);                                                                           // [0x2fad960] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInRadians
	// void AddTorqueInRadians(FVector Torque, FName BoneName, bool bAccelChange);                                           // [0x2fad700] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInDegrees
	// void AddTorqueInDegrees(FVector Torque, FName BoneName, bool bAccelChange);                                           // [0x2fad820] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddTorque
	// void AddTorque(FVector Torque, FName BoneName, bool bAccelChange);                                                    // [0x2fad700] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddRadialImpulse
	// void AddRadialImpulse(FVector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bVelChange);  // [0x2fad540] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddRadialForce
	// void AddRadialForce(FVector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bAccelChange);  // [0x2fad380] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddImpulseAtLocation
	// void AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName);                                         // [0x2fad250] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddImpulse
	// void AddImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                                    // [0x2fad130] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocationLocal
	// void AddForceAtLocationLocal(FVector Force, FVector Location, FName BoneName);                                        // [0x2fad000] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocation
	// void AddForceAtLocation(FVector Force, FVector Location, FName BoneName);                                             // [0x2faced0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForce
	// void AddForce(FVector Force, FName BoneName, bool bAccelChange);                                                      // [0x2facdb0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInRadians
	// void AddAngularImpulseInRadians(FVector Impulse, FName BoneName, bool bVelChange);                                    // [0x2facc90] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInDegrees
	// void AddAngularImpulseInDegrees(FVector Impulse, FName BoneName, bool bVelChange);                                    // [0x2facb50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulse
	// void AddAngularImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                             // [0x2faca30] Native|Public|HasDefaults|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.MeshComponent
/// Size: 0x0020 (0x000410 - 0x000430)
class UMeshComponent : public UPrimitiveComponent
{ 
public:
	TArray<class UMaterialInterface*>                  OverrideMaterials;                                          // 0x0408   (0x0010)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0418   (0x0010)  MISSED
	bool                                               bEnableMaterialParameterCaching : 1;                        // 0x0428:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0429   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.MeshComponent.SetVectorParameterValueOnMaterials
	// void SetVectorParameterValueOnMaterials(FName ParameterName, FVector ParameterValue);                                 // [0x2f7c6c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.SetScalarParameterValueOnMaterials
	// void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue);                                   // [0x2f7c5f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.PrestreamTextures
	// void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups);             // [0x2f7c380] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.IsMaterialSlotNameValid
	// bool IsMaterialSlotNameValid(FName MaterialSlotName);                                                                 // [0x2f7c2e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterialSlotNames
	// TArray<FName> GetMaterialSlotNames();                                                                                 // [0x2f7c1e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterials
	// TArray<UMaterialInterface*> GetMaterials();                                                                           // [0x2f7c260] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterialIndex
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                     // [0x2f7c140] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.SkelMeshComponentLODInfo
/// Size: 0x0028 (0x000000 - 0x000028)
struct FSkelMeshComponentLODInfo
{ 
	TArray<bool>                                       HiddenMaterials;                                            // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0010   (0x0018)  MISSED
};

/// Class /Script/Engine.SkinnedMeshComponent
/// Size: 0x0210 (0x000430 - 0x000640)
class USkinnedMeshComponent : public UMeshComponent
{ 
public:
	class USkeletalMesh*                               SkeletalMesh;                                               // 0x0430   (0x0008)  
	SDK_UNDEFINED(8,120) /* TWeakObjectPtr<USkinnedMeshComponent*> */ __um(MasterPoseComponent);                   // 0x0438   (0x0008)  
	TArray<ESkinCacheUsage>                            SkinCacheUsage;                                             // 0x0440   (0x0010)  
	unsigned char                                      UnknownData00_5[0xF8];                                      // 0x0450   (0x00F8)  MISSED
	class UPhysicsAsset*                               PhysicsAssetOverride;                                       // 0x0548   (0x0008)  
	int32_t                                            ForcedLodModel;                                             // 0x0550   (0x0004)  
	int32_t                                            MinLodModel;                                                // 0x0554   (0x0004)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0558   (0x0008)  MISSED
	float                                              StreamingDistanceMultiplier;                                // 0x0560   (0x0004)  
	unsigned char                                      UnknownData02_5[0xC];                                       // 0x0564   (0x000C)  MISSED
	TArray<FSkelMeshComponentLODInfo>                  LODInfo;                                                    // 0x0570   (0x0010)  
	unsigned char                                      UnknownData03_5[0x24];                                      // 0x0580   (0x0024)  MISSED
	EVisibilityBasedAnimTickOption                     VisibilityBasedAnimTickOption;                              // 0x05A4   (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x05A5   (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x05A6:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x05A6:1 (0x0001)  MISSED
	bool                                               bOverrideMinLod : 1;                                        // 0x05A6:2 (0x0001)  
	bool                                               bUseBoundsFromMasterPoseComponent : 1;                      // 0x05A6:3 (0x0001)  
	bool                                               bForceWireframe : 1;                                        // 0x05A6:4 (0x0001)  
	bool                                               bDisplayBones : 1;                                          // 0x05A6:5 (0x0001)  
	bool                                               bDisableMorphTarget : 1;                                    // 0x05A6:6 (0x0001)  
	bool                                               bHideSkin : 1;                                              // 0x05A6:7 (0x0001)  
	bool                                               bPerBoneMotionBlur : 1;                                     // 0x05A7:0 (0x0001)  
	bool                                               bComponentUseFixedSkelBounds : 1;                           // 0x05A7:1 (0x0001)  
	bool                                               bConsiderAllBodiesForBounds : 1;                            // 0x05A7:2 (0x0001)  
	bool                                               bSyncAttachParentLOD : 1;                                   // 0x05A7:3 (0x0001)  
	bool                                               bCanHighlightSelectedSections : 1;                          // 0x05A7:4 (0x0001)  
	bool                                               bRecentlyRendered : 1;                                      // 0x05A7:5 (0x0001)  
	bool                                               bCastCapsuleDirectShadow : 1;                               // 0x05A7:6 (0x0001)  
	bool                                               bCastCapsuleIndirectShadow : 1;                             // 0x05A7:7 (0x0001)  
	bool                                               bCPUSkinning : 1;                                           // 0x05A8:0 (0x0001)  
	bool                                               bEnableUpdateRateOptimizations : 1;                         // 0x05A8:1 (0x0001)  
	bool                                               bDisplayDebugUpdateRateOptimizations : 1;                   // 0x05A8:2 (0x0001)  
	bool                                               bRenderStatic : 1;                                          // 0x05A8:3 (0x0001)  
	bool                                               bIgnoreMasterPoseComponentLOD : 1;                          // 0x05A8:4 (0x0001)  
	unsigned char                                      UnknownBit07 : 1;                                           // 0x05A8:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x05A8:6 (0x0001)  MISSED
	bool                                               bCachedLocalBoundsUpToDate : 1;                             // 0x05A8:7 (0x0001)  
	unsigned char                                      UnknownBit09 : 1;                                           // 0x05A9:0 (0x0001)  MISSED
	bool                                               bForceMeshObjectUpdate : 1;                                 // 0x05A9:1 (0x0001)  
	unsigned char                                      UnknownData10_4[0x2];                                       // 0x05AA   (0x0002)  MISSED
	float                                              CapsuleIndirectShadowMinVisibility;                         // 0x05AC   (0x0004)  
	unsigned char                                      UnknownData11_5[0x10];                                      // 0x05B0   (0x0010)  MISSED
	FBoxSphereBounds                                   CachedWorldSpaceBounds;                                     // 0x05C0   (0x001C)  
	unsigned char                                      UnknownData12_5[0x4];                                       // 0x05DC   (0x0004)  MISSED
	FMatrix                                            CachedWorldToLocalTransform;                                // 0x05E0   (0x0040)  
	unsigned char                                      UnknownData13_6[0x20];                                      // 0x0620   (0x0020)  MISSED


	/// Functions
	// Function /Script/Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
	// void UnloadSkinWeightProfile(FName InProfileName);                                                                    // [0x2fcd090] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.UnHideBoneByName
	// void UnHideBoneByName(FName BoneName);                                                                                // [0x2fcd010] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.TransformToBoneSpace
	// void TransformToBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x2fcce50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.TransformFromBoneSpace
	// void TransformFromBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x2fccc90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ShowMaterialSection
	// void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex);                     // [0x2fccb50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ShowAllMaterialSections
	// void ShowAllMaterialSections(int32_t LODIndex);                                                                       // [0x2fccad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
	// void SetVertexColorOverride_LinearColor(int32_t LODIndex, TArray<FLinearColor>& VertexColors);                        // [0x2fcc9f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightProfile
	// bool SetSkinWeightProfile(FName InProfileName);                                                                       // [0x2fcc960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightOverride
	// void SetSkinWeightOverride(int32_t LODIndex, TArray<FSkelMeshSkinWeightInfo>& SkinWeights);                           // [0x2fcc880] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkeletalMesh
	// void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);                                                 // [0x2fcc7b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetRenderStatic
	// void SetRenderStatic(bool bNewValue);                                                                                 // [0x2fcc720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPhysicsAsset
	// void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);                                        // [0x2fcc650] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetMinLOD
	// void SetMinLOD(int32_t InNewMinLOD);                                                                                  // [0x2fcc5d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetMasterPoseComponent
	// void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);                  // [0x2fcc500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetForcedLOD
	// void SetForcedLOD(int32_t InNewForcedLOD);                                                                            // [0x2fcc480] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
	// void SetCastCapsuleIndirectShadow(bool bNewValue);                                                                    // [0x2fcc3f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
	// void SetCastCapsuleDirectShadow(bool bNewValue);                                                                      // [0x2fcc360] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
	// void SetCapsuleIndirectShadowMinVisibility(float NewValue);                                                           // [0x2fcc2e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
	// bool IsUsingSkinWeightProfile();                                                                                      // [0x2fcc2b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.IsMaterialSectionShown
	// bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex);                                                    // [0x2fcc1f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.IsBoneHiddenByName
	// bool IsBoneHiddenByName(FName BoneName);                                                                              // [0x2fcc160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.HideBoneByName
	// void HideBoneByName(FName BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);                                         // [0x2fcbf80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
	// bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, float& OutTwistAngle, float& OutSwingAngle);     // [0x2fcbe60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetSocketBoneName
	// FName GetSocketBoneName(FName InSocketName);                                                                          // [0x2fcbd30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetRefPosePosition
	// FVector GetRefPosePosition(int32_t BoneIndex);                                                                        // [0x2fcbc90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.GetParentBone
	// FName GetParentBone(FName BoneName);                                                                                  // [0x2fcbc00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumLODs
	// int32_t GetNumLODs();                                                                                                 // [0x2fcbbd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumBones
	// int32_t GetNumBones();                                                                                                // [0x2fcbba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetForcedLOD
	// int32_t GetForcedLOD();                                                                                               // [0x2fcbb70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
	// FTransform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);                                              // [0x2fcba70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
	// FName GetCurrentSkinWeightProfileName();                                                                              // [0x2fcba50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneName
	// FName GetBoneName(int32_t BoneIndex);                                                                                 // [0x2fcb9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneIndex
	// int32_t GetBoneIndex(FName BoneName);                                                                                 // [0x2fcb930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.FindClosestBone_K2
	// FName FindClosestBone_K2(FVector TestLocation, FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);  // [0x2fcb7a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.ClearVertexColorOverride
	// void ClearVertexColorOverride(int32_t LODIndex);                                                                      // [0x2fcb720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightProfile
	// void ClearSkinWeightProfile();                                                                                        // [0x2fcb700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightOverride
	// void ClearSkinWeightOverride(int32_t LODIndex);                                                                       // [0x2fcb680] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.BoneIsChildOf
	// bool BoneIsChildOf(FName BoneName, FName ParentBoneName);                                                             // [0x2fcb5c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.SingleAnimationPlayData
/// Size: 0x0018 (0x000000 - 0x000018)
struct FSingleAnimationPlayData
{ 
	class UAnimationAsset*                             AnimToPlay;                                                 // 0x0000   (0x0008)  
	bool                                               bSavedLooping : 1;                                          // 0x0008:0 (0x0001)  
	bool                                               bSavedPlaying : 1;                                          // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              SavedPosition;                                              // 0x000C   (0x0004)  
	float                                              SavedPlayRate;                                              // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/Engine.SkeletalMeshComponent
/// Size: 0x0490 (0x000640 - 0x000AD0)
class USkeletalMeshComponent : public USkinnedMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0640   (0x0008)  MISSED
	class UAnimBlueprintGeneratedClass*                AnimBlueprintGeneratedClass;                                // 0x0648   (0x0008)  
	class UClass*                                      AnimClass;                                                  // 0x0650   (0x0008)  
	class UAnimInstance*                               AnimScriptInstance;                                         // 0x0658   (0x0008)  
	class UAnimInstance*                               PostProcessAnimInstance;                                    // 0x0660   (0x0008)  
	FSingleAnimationPlayData                           AnimationData;                                              // 0x0668   (0x0018)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x0680   (0x0010)  MISSED
	FVector                                            RootBoneTranslation;                                        // 0x0690   (0x000C)  
	FVector                                            LineCheckBoundsScale;                                       // 0x069C   (0x000C)  
	unsigned char                                      UnknownData02_5[0x20];                                      // 0x06A8   (0x0020)  MISSED
	TArray<class UAnimInstance*>                       LinkedInstances;                                            // 0x06C8   (0x0010)  
	TArray<FTransform>                                 CachedBoneSpaceTransforms;                                  // 0x06D8   (0x0010)  
	TArray<FTransform>                                 CachedComponentSpaceTransforms;                             // 0x06E8   (0x0010)  
	unsigned char                                      UnknownData03_5[0x20];                                      // 0x06F8   (0x0020)  MISSED
	float                                              GlobalAnimRateScale;                                        // 0x0718   (0x0004)  
	SDK_UNDEFINED(1,121) /* TEnumAsByte<EKinematicBonesUpdateToPhysics> */ __um(KinematicBonesUpdateType);         // 0x071C   (0x0001)  
	SDK_UNDEFINED(1,122) /* TEnumAsByte<EPhysicsTransformUpdateMode> */ __um(PhysicsTransformUpdateMode);          // 0x071D   (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x071E   (0x0001)  MISSED
	SDK_UNDEFINED(1,123) /* TEnumAsByte<EAnimationMode> */ __um(AnimationMode);                                    // 0x071F   (0x0001)  
	unsigned char                                      UnknownData05_5[0x1];                                       // 0x0720   (0x0001)  MISSED
	bool                                               bDisablePostProcessBlueprint : 1;                           // 0x0721:0 (0x0001)  
	unsigned char                                      UnknownBit06 : 1;                                           // 0x0721:1 (0x0001)  MISSED
	bool                                               bUpdateOverlapsOnAnimationFinalize : 1;                     // 0x0721:2 (0x0001)  
	unsigned char                                      UnknownBit07 : 1;                                           // 0x0721:3 (0x0001)  MISSED
	bool                                               bHasValidBodies : 1;                                        // 0x0721:4 (0x0001)  
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0721:5 (0x0001)  MISSED
	bool                                               bBlendPhysics : 1;                                          // 0x0721:6 (0x0001)  
	bool                                               bEnablePhysicsOnDedicatedServer : 1;                        // 0x0721:7 (0x0001)  
	bool                                               bUpdateJointsFromAnimation : 1;                             // 0x0722:0 (0x0001)  
	bool                                               bDisableClothSimulation : 1;                                // 0x0722:1 (0x0001)  
	bool                                               bDisableRigidBodyAnimNode : 1;                              // 0x0722:2 (0x0001)  
	bool                                               bAllowAnimCurveEvaluation : 1;                              // 0x0722:3 (0x0001)  
	bool                                               bDisableAnimCurves : 1;                                     // 0x0722:4 (0x0001)  
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0722:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x0722:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x0722:7 (0x0001)  MISSED
	bool                                               bCollideWithEnvironment : 1;                                // 0x0723:0 (0x0001)  
	bool                                               bCollideWithAttachedChildren : 1;                           // 0x0723:1 (0x0001)  
	bool                                               bLocalSpaceSimulation : 1;                                  // 0x0723:2 (0x0001)  
	bool                                               bResetAfterTeleport : 1;                                    // 0x0723:3 (0x0001)  
	unsigned char                                      UnknownBit12 : 1;                                           // 0x0723:4 (0x0001)  MISSED
	bool                                               bDeferKinematicBoneUpdate : 1;                              // 0x0723:5 (0x0001)  
	bool                                               bNoSkeletonUpdate : 1;                                      // 0x0723:6 (0x0001)  
	bool                                               bPauseAnims : 1;                                            // 0x0723:7 (0x0001)  
	bool                                               bUseRefPoseOnInitAnim : 1;                                  // 0x0724:0 (0x0001)  
	bool                                               bEnablePerPolyCollision : 1;                                // 0x0724:1 (0x0001)  
	bool                                               bForceRefpose : 1;                                          // 0x0724:2 (0x0001)  
	bool                                               bOnlyAllowAutonomousTickPose : 1;                           // 0x0724:3 (0x0001)  
	bool                                               bIsAutonomousTickPose : 1;                                  // 0x0724:4 (0x0001)  
	bool                                               bOldForceRefPose : 1;                                       // 0x0724:5 (0x0001)  
	bool                                               bShowPrePhysBones : 1;                                      // 0x0724:6 (0x0001)  
	bool                                               bRequiredBonesUpToDate : 1;                                 // 0x0724:7 (0x0001)  
	bool                                               bAnimTreeInitialised : 1;                                   // 0x0725:0 (0x0001)  
	bool                                               bIncludeComponentLocationIntoBounds : 1;                    // 0x0725:1 (0x0001)  
	bool                                               bEnableLineCheckWithBounds : 1;                             // 0x0725:2 (0x0001)  
	bool                                               bUseBendingElements : 1;                                    // 0x0725:3 (0x0001)  
	bool                                               bUseTetrahedralConstraints : 1;                             // 0x0725:4 (0x0001)  
	bool                                               bUseThinShellVolumeConstraints : 1;                         // 0x0725:5 (0x0001)  
	bool                                               bUseSelfCollisions : 1;                                     // 0x0725:6 (0x0001)  
	bool                                               bUseContinuousCollisionDetection : 1;                       // 0x0725:7 (0x0001)  
	bool                                               bPropagateCurvesToSlaves : 1;                               // 0x0726:0 (0x0001)  
	bool                                               bSkipKinematicUpdateWhenInterpolating : 1;                  // 0x0726:1 (0x0001)  
	bool                                               bSkipBoundsUpdateWhenInterpolating : 1;                     // 0x0726:2 (0x0001)  
	unsigned char                                      UnknownBit13 : 1;                                           // 0x0726:3 (0x0001)  MISSED
	bool                                               bNeedsQueuedAnimEventsDispatched : 1;                       // 0x0726:4 (0x0001)  
	unsigned char                                      UnknownData14_4[0x1];                                       // 0x0727   (0x0001)  MISSED
	uint16_t                                           CachedAnimCurveUidVersion;                                  // 0x0728   (0x0002)  
	EClothMassMode                                     MassMode;                                                   // 0x072A   (0x0001)  
	unsigned char                                      UnknownData15_5[0x1];                                       // 0x072B   (0x0001)  MISSED
	float                                              UniformMass;                                                // 0x072C   (0x0004)  
	float                                              TotalMass;                                                  // 0x0730   (0x0004)  
	float                                              Density;                                                    // 0x0734   (0x0004)  
	float                                              MinPerParticleMass;                                         // 0x0738   (0x0004)  
	float                                              ClothBlendWeight;                                           // 0x073C   (0x0004)  
	float                                              EdgeStiffness;                                              // 0x0740   (0x0004)  
	float                                              BendingStiffness;                                           // 0x0744   (0x0004)  
	float                                              AreaStiffness;                                              // 0x0748   (0x0004)  
	float                                              VolumeStiffness;                                            // 0x074C   (0x0004)  
	float                                              StrainLimitingStiffness;                                    // 0x0750   (0x0004)  
	float                                              ShapeTargetStiffness;                                       // 0x0754   (0x0004)  
	TArray<FName>                                      DisallowedAnimCurves;                                       // 0x0758   (0x0010)  
	class UBodySetup*                                  BodySetup;                                                  // 0x0768   (0x0008)  
	unsigned char                                      UnknownData16_5[0x8];                                       // 0x0770   (0x0008)  MISSED
	SDK_UNDEFINED(16,124) /* FMulticastInlineDelegate */ __um(OnConstraintBroken);                                 // 0x0778   (0x0010)  
	class UClass*                                      ClothingSimulationFactory;                                  // 0x0788   (0x0008)  
	unsigned char                                      UnknownData17_5[0xC8];                                      // 0x0790   (0x00C8)  MISSED
	float                                              TeleportDistanceThreshold;                                  // 0x0858   (0x0004)  
	float                                              TeleportRotationThreshold;                                  // 0x085C   (0x0004)  
	unsigned char                                      UnknownData18_5[0x8];                                       // 0x0860   (0x0008)  MISSED
	uint32_t                                           LastPoseTickFrame;                                          // 0x0868   (0x0004)  
	unsigned char                                      UnknownData19_5[0x54];                                      // 0x086C   (0x0054)  MISSED
	class UClothingSimulationInteractor*               ClothingInteractor;                                         // 0x08C0   (0x0008)  
	unsigned char                                      UnknownData20_5[0xC8];                                      // 0x08C8   (0x00C8)  MISSED
	SDK_UNDEFINED(16,125) /* FMulticastInlineDelegate */ __um(OnAnimInitialized);                                  // 0x0990   (0x0010)  
	unsigned char                                      UnknownData21_6[0x130];                                     // 0x09A0   (0x0130)  MISSED


	/// Functions
	// Function /Script/Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
	// void UnlinkAnimClassLayers(class UClass* InClass);                                                                    // [0x2fc7df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
	// void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);                                                // [0x2fc7d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
	// void ToggleDisablePostProcessBlueprint();                                                                             // [0x2fc7d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.TermBodiesBelow
	// void TermBodiesBelow(FName ParentBoneName);                                                                           // [0x2fc7cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SuspendClothingSimulation
	// void SuspendClothingSimulation();                                                                                     // [0x2fc7ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.Stop
	// void Stop();                                                                                                          // [0x2fc7c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SnapshotPose
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                           // [0x2fc7bb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
	// void SetUpdateAnimationInEditor(bool NewUpdateState);                                                                 // [0xe93160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
	// void SetTeleportRotationThreshold(float Threshold);                                                                   // [0x2fc7b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
	// void SetTeleportDistanceThreshold(float Threshold);                                                                   // [0x2fc7ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPosition
	// void SetPosition(float InPos, bool bFireNotifies);                                                                    // [0x2fc79e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPlayRate
	// void SetPlayRate(float Rate);                                                                                         // [0x2fc7960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
	// void SetPhysicsBlendWeight(float PhysicsBlendWeight);                                                                 // [0x2fc78e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
	// void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);          // [0x2fc77d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetMorphTarget
	// void SetMorphTarget(FName MorphTargetName, float value, bool bRemoveZeroWeight);                                      // [0x2fc76c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
	// void SetEnablePhysicsBlending(bool bNewBlendPhysics);                                                                 // [0x2fc7630] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
	// void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);                        // [0x2fc7520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableBodyGravity
	// void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);                                                       // [0x2fc7460] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
	// void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);                                                      // [0x2fc73d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisableAnimCurves
	// void SetDisableAnimCurves(bool bInDisableAnimCurves);                                                                 // [0x2fc7340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfileForAll
	// void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);                                          // [0x2fc7270] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfile
	// void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);                               // [0x2fc7160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
	// void SetClothMaxDistanceScale(float Scale);                                                                           // [0x2fc70e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
	// void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);                              // [0x2fc7010] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimClass
	// void SetAnimClass(class UClass* NewClass);                                                                            // [0x2fc6e80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimationMode
	// void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);                                                   // [0x2fc6f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimation
	// void SetAnimation(class UAnimationAsset* NewAnimToPlay);                                                              // [0x2fc6f10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAngularLimits
	// void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);       // [0x2fc6d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
	// void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);                                                      // [0x2fc6b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
	// void SetAllowedAnimCurvesEvaluation(TArray<FName>& List, bool bAllow);                                                // [0x2fc6c30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
	// void SetAllowAnimCurveEvaluation(bool bInAllow);                                                                      // [0x2fc6ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
	// void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);   // [0x2fc69b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
	// void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);   // [0x2fc6890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
	// void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType); // [0x2fc6730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
	// void SetAllBodiesSimulatePhysics(bool bNewSimulate);                                                                  // [0x2fc66a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
	// void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);                           // [0x2fc65d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
	// void SetAllBodiesBelowSimulatePhysics(FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);                       // [0x2fc64b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
	// void SetAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // [0x2fc6340] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResumeClothingSimulation
	// void ResumeClothingSimulation();                                                                                      // [0x2fc6320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetClothTeleportMode
	// void ResetClothTeleportMode();                                                                                        // [0x2fc6300] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
	// void ResetAnimInstanceDynamics(ETeleportType InTeleportType);                                                         // [0x2fc6280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
	// void ResetAllowedAnimCurveEvaluation();                                                                               // [0x2fc6260] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
	// void ResetAllBodiesSimulatePhysics();                                                                                 // [0x2fc6240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.PlayAnimation
	// void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);                                              // [0x2fc6170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.Play
	// void Play(bool bLooping);                                                                                             // [0x2fc60e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.OverrideAnimationData
	// void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // [0x2fc5f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.LinkAnimGraphByTag
	// void LinkAnimGraphByTag(FName InTag, class UClass* InClass);                                                          // [0x2fc5e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.LinkAnimClassLayers
	// void LinkAnimClassLayers(class UClass* InClass);                                                                      // [0x2fc5e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
	// bool K2_GetClosestPointOnPhysicsAsset(FVector& WorldPosition, FVector& ClosestWorldPosition, FVector& Normal, FName& BoneName, float& Distance); // [0x2fc5c00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsPlaying
	// bool IsPlaying();                                                                                                     // [0x2fc5bd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
	// bool IsClothingSimulationSuspended();                                                                                 // [0x2fc5ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsBodyGravityEnabled
	// bool IsBodyGravityEnabled(FName BoneName);                                                                            // [0x2fc5b10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.HasValidAnimationInstance
	// bool HasValidAnimationInstance();                                                                                     // [0x2fc5ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
	// float GetTeleportRotationThreshold();                                                                                 // [0x2fc5ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
	// float GetTeleportDistanceThreshold();                                                                                 // [0x2fc5ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
	// FVector GetSkeletalCenterOfMass();                                                                                    // [0x2fc5a70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPostProcessInstance
	// class UAnimInstance* GetPostProcessInstance();                                                                        // [0x2fc5a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPosition
	// float GetPosition();                                                                                                  // [0x2fc5a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPlayRate
	// float GetPlayRate();                                                                                                  // [0x2fc59e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetMorphTarget
	// float GetMorphTarget(FName MorphTargetName);                                                                          // [0x2fc5940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);                                                // [0x2fc58b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
	// class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);                                        // [0x2fc5820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
	// void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances);                       // [0x2fc5730] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
	// class UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);                                                    // [0x2fc56a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
	// bool GetDisablePostProcessBlueprint();                                                                                // [0x2fc5670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisableAnimCurves
	// bool GetDisableAnimCurves();                                                                                          // [0x2fc5640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetCurrentJointAngles
	// void GetCurrentJointAngles(FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle);              // [0x2fc54c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
	// float GetClothMaxDistanceScale();                                                                                     // [0x2fc5460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
	// class UClothingSimulationInteractor* GetClothingSimulationInteractor();                                               // [0x2fc5490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetBoneMass
	// float GetBoneMass(FName BoneName, bool bScaleMass);                                                                   // [0x2fc5390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimInstance
	// class UAnimInstance* GetAnimInstance();                                                                               // [0x2fc5330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimClass
	// class UClass* GetAnimClass();                                                                                         // [0x2fc5300] Final|Native|Public  
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimationMode
	// TEnumAsByte<EAnimationMode> GetAnimationMode();                                                                       // [0x2fc5360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
	// bool GetAllowRigidBodyAnimNode();                                                                                     // [0x2fc52a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
	// bool GetAllowedAnimCurveEvaluate();                                                                                   // [0x2fc52d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
	// void ForceClothNextUpdateTeleportAndReset();                                                                          // [0x2fc5280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
	// void ForceClothNextUpdateTeleport();                                                                                  // [0x2fc5260] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.FindConstraintBoneName
	// FName FindConstraintBoneName(int32_t ConstraintIndex);                                                                // [0x2fc51d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ClearMorphTargets
	// void ClearMorphTargets();                                                                                             // [0x2fc51b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.BreakConstraint
	// void BreakConstraint(FVector Impulse, FVector HitLocation, FName InBoneName);                                         // [0x2fc5080] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
	// void BindClothToMasterPoseComponent();                                                                                // [0x2fc5060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
	// void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);                                                        // [0x2fc4f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
	// void AddImpulseToAllBodiesBelow(FVector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);                 // [0x2fc4e20] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
	// void AddForceToAllBodiesBelow(FVector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);                   // [0x2fc4cb0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
	// void AccumulateAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // [0x2fc4b90] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.AnimNotifyEventReference
/// Size: 0x0010 (0x000000 - 0x000010)
struct FAnimNotifyEventReference
{ 
	class UObject*                                     NotifySource;                                               // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.AnimNotifyQueue
/// Size: 0x0070 (0x000000 - 0x000070)
struct FAnimNotifyQueue
{ 
	TArray<FAnimNotifyEventReference>                  AnimNotifies;                                               // 0x0010   (0x0010)  
	SDK_UNDEFINED(80,126) /* TMap<FName, FAnimNotifyArray> */ __um(UnfilteredMontageAnimNotifies);                 // 0x0020   (0x0050)  
};

/// Struct /Script/Engine.AnimLinkableElement
/// Size: 0x0030 (0x000000 - 0x000030)
struct FAnimLinkableElement
{ 
	class UAnimMontage*                                LinkedMontage;                                              // 0x0008   (0x0008)  
	int32_t                                            SlotIndex;                                                  // 0x0010   (0x0004)  
	int32_t                                            SegmentIndex;                                               // 0x0014   (0x0004)  
	SDK_UNDEFINED(1,127) /* TEnumAsByte<EAnimLinkMethod> */ __um(LinkMethod);                                      // 0x0018   (0x0001)  
	SDK_UNDEFINED(1,128) /* TEnumAsByte<EAnimLinkMethod> */ __um(CachedLinkMethod);                                // 0x0019   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x001A   (0x0002)  MISSED
	float                                              SegmentBeginTime;                                           // 0x001C   (0x0004)  
	float                                              SegmentLength;                                              // 0x0020   (0x0004)  
	float                                              LinkValue;                                                  // 0x0024   (0x0004)  
	class UAnimSequenceBase*                           LinkedSequence;                                             // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.AnimNotifyEvent
/// Size: 0x0088 (0x000030 - 0x0000B8)
struct FAnimNotifyEvent : FAnimLinkableElement
{ 
	float                                              DisplayTime;                                                // 0x0030   (0x0004)  
	float                                              TriggerTimeOffset;                                          // 0x0034   (0x0004)  
	float                                              EndTriggerTimeOffset;                                       // 0x0038   (0x0004)  
	float                                              TriggerWeightThreshold;                                     // 0x003C   (0x0004)  
	FName                                              NotifyName;                                                 // 0x0040   (0x0008)  
	class UAnimNotify*                                 Notify;                                                     // 0x0048   (0x0008)  
	class UAnimNotifyState*                            NotifyStateClass;                                           // 0x0050   (0x0008)  
	float                                              Duration;                                                   // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	FAnimLinkableElement                               EndLink;                                                    // 0x0060   (0x0030)  
	bool                                               bConvertedFromBranchingPoint;                               // 0x0090   (0x0001)  
	SDK_UNDEFINED(1,129) /* TEnumAsByte<EMontageNotifyTickType> */ __um(MontageTickType);                          // 0x0091   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0092   (0x0002)  MISSED
	float                                              NotifyTriggerChance;                                        // 0x0094   (0x0004)  
	SDK_UNDEFINED(1,130) /* TEnumAsByte<ENotifyFilterType> */ __um(NotifyFilterType);                              // 0x0098   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0099   (0x0003)  MISSED
	int32_t                                            NotifyFilterLOD;                                            // 0x009C   (0x0004)  
	bool                                               bTriggerOnDedicatedServer;                                  // 0x00A0   (0x0001)  
	bool                                               bTriggerOnFollower;                                         // 0x00A1   (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x00A2   (0x0002)  MISSED
	int32_t                                            TrackIndex;                                                 // 0x00A4   (0x0004)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x00A8   (0x0010)  MISSED
};

/// Class /Script/Engine.AnimInstance
/// Size: 0x0248 (0x000028 - 0x000270)
#pragma pack(push, 0x1)
class alignas(0x10) UAnimInstance : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class USkeleton*                                   CurrentSkeleton;                                            // 0x0028   (0x0008)  
	SDK_UNDEFINED(1,131) /* TEnumAsByte<ERootMotionMode> */ __um(RootMotionMode);                                  // 0x0030   (0x0001)  
	bool                                               bUseMultiThreadedAnimationUpdate : 1;                       // 0x0031:0 (0x0001)  
	bool                                               bUsingCopyPoseFromMesh : 1;                                 // 0x0031:1 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0031:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0031:3 (0x0001)  MISSED
	bool                                               bReceiveNotifiesFromLinkedInstances : 1;                    // 0x0031:4 (0x0001)  
	bool                                               bPropagateNotifiesToLinkedInstances : 1;                    // 0x0031:5 (0x0001)  
	bool                                               bQueueMontageEvents : 1;                                    // 0x0031:6 (0x0001)  
	unsigned char                                      UnknownData03_4[0xE];                                       // 0x0032   (0x000E)  MISSED
	SDK_UNDEFINED(16,132) /* FMulticastInlineDelegate */ __um(OnMontageBlendingOut);                               // 0x0040   (0x0010)  
	SDK_UNDEFINED(16,133) /* FMulticastInlineDelegate */ __um(OnMontageStarted);                                   // 0x0050   (0x0010)  
	SDK_UNDEFINED(16,134) /* FMulticastInlineDelegate */ __um(OnMontageEnded);                                     // 0x0060   (0x0010)  
	SDK_UNDEFINED(16,135) /* FMulticastInlineDelegate */ __um(OnAllMontageInstancesEnded);                         // 0x0070   (0x0010)  
	unsigned char                                      UnknownData04_5[0x88];                                      // 0x0080   (0x0088)  MISSED
	FAnimNotifyQueue                                   NotifyQueue;                                                // 0x0108   (0x0070)  
	TArray<FAnimNotifyEvent>                           ActiveAnimNotifyState;                                      // 0x0178   (0x0010)  
	unsigned char                                      UnknownData05_6[0xE0];                                      // 0x0188   (0x00E0)  MISSED


	/// Functions
	// Function /Script/Engine.AnimInstance.UnlockAIResources
	// void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);                                                     // [0x2e98600] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.UnlinkAnimClassLayers
	// void UnlinkAnimClassLayers(class UClass* InClass);                                                                    // [0x2e98580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.TryGetPawnOwner
	// class APawn* TryGetPawnOwner();                                                                                       // [0x2e98550] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.StopSlotAnimation
	// void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);                                                     // [0x2e98480] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SnapshotPose
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                           // [0x2e983b0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetRootMotionMode
	// void SetRootMotionMode(TEnumAsByte<ERootMotionMode> value);                                                           // [0x2e8cd20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
	// void SetReceiveNotifiesFromLinkedInstances(bool bSet);                                                                // [0x2e98320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
	// void SetPropagateNotifiesToLinkedInstances(bool bSet);                                                                // [0x2e98290] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetMorphTarget
	// void SetMorphTarget(FName MorphTargetName, float value);                                                              // [0x2e981c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SavePoseSnapshot
	// void SavePoseSnapshot(FName SnapshotName);                                                                            // [0x2e98130] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.ResetDynamics
	// void ResetDynamics(ETeleportType InTeleportType);                                                                     // [0x2e980b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
	// class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt, bool bStopAllMontages); // [0x2e97e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimation
	// float PlaySlotAnimation(class UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount); // [0x2e97c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_StopGroupByName
	// void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);                                                  // [0x2e97ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Stop
	// void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);                                                 // [0x2e97ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetPosition
	// void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);                                             // [0x2e97a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetPlayRate
	// void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);                                             // [0x2e97930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetNextSection
	// void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, class UAnimMontage* Montage);               // [0x2e97830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Resume
	// void Montage_Resume(class UAnimMontage* Montage);                                                                     // [0x2e977b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Play
	// float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // [0x2e97620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Pause
	// void Montage_Pause(class UAnimMontage* Montage);                                                                      // [0x2e975a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSectionsEnd
	// void Montage_JumpToSectionsEnd(FName SectionName, class UAnimMontage* Montage);                                       // [0x2e974e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSection
	// void Montage_JumpToSection(FName SectionName, class UAnimMontage* Montage);                                           // [0x2e97420] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_IsPlaying
	// bool Montage_IsPlaying(class UAnimMontage* Montage);                                                                  // [0x2e97390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_IsActive
	// bool Montage_IsActive(class UAnimMontage* Montage);                                                                   // [0x2e97300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetPosition
	// float Montage_GetPosition(class UAnimMontage* Montage);                                                               // [0x2e97260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetPlayRate
	// float Montage_GetPlayRate(class UAnimMontage* Montage);                                                               // [0x2e971c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetIsStopped
	// bool Montage_GetIsStopped(class UAnimMontage* Montage);                                                               // [0x2e97130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetCurrentSection
	// FName Montage_GetCurrentSection(class UAnimMontage* Montage);                                                         // [0x2e970a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetBlendTime
	// float Montage_GetBlendTime(class UAnimMontage* Montage);                                                              // [0x2e97000] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.LockAIResources
	// void LockAIResources(bool bLockMovement, bool LockAILogic);                                                           // [0x2e96f30] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.LinkAnimGraphByTag
	// void LinkAnimGraphByTag(FName InTag, class UClass* InClass);                                                          // [0x2e96e70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.LinkAnimClassLayers
	// void LinkAnimClassLayers(class UClass* InClass);                                                                      // [0x2e96df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.IsSyncGroupBetweenMarkers
	// bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder); // [0x2e96ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsPlayingSlotAnimation
	// bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, FName SlotNodeName);                                      // [0x2e96be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsAnyMontagePlaying
	// bool IsAnyMontagePlaying();                                                                                           // [0x2e96bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.HasMarkerBeenHitThisFrame
	// bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);                                                    // [0x2e96af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetTimeToClosestMarker
	// bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float& OutMarkerTime);                                 // [0x2e969e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetSyncGroupPosition
	// FMarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);                                                  // [0x2e96940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
	// float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex);                                 // [0x2e96880] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemaining
	// float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex);                                         // [0x2e967c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeFraction
	// float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex);                                          // [0x2e96700] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTime
	// float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex);                                                  // [0x2e96640] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimLength
	// float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex);                                                // [0x2e96580] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
	// bool GetReceiveNotifiesFromLinkedInstances();                                                                         // [0x2e96550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
	// bool GetPropagateNotifiesToLinkedInstances();                                                                         // [0x2e96520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetOwningComponent
	// class USkeletalMeshComponent* GetOwningComponent();                                                                   // [0x2e964f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetOwningActor
	// class AActor* GetOwningActor();                                                                                       // [0x2e964c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);                                                // [0x2e96430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass
	// class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);                                        // [0x2e963a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag
	// void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances);                       // [0x2e962b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag
	// class UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);                                                    // [0x2e96220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetInterrupterMontage
	// class UAnimMontage* GetInterrupterMontage();                                                                          // [0xe713b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
	// float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex);                        // [0x2e96160] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsed
	// float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex);                                // [0x2e960a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
	// float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex);                          // [0x2e95fe0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceStateWeight
	// float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex);                                               // [0x2e95f20] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceMachineWeight
	// float GetInstanceMachineWeight(int32_t MachineIndex);                                                                 // [0x2e95e90] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
	// float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex);                                                       // [0x2e95e00] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
	// float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex);                                            // [0x2e95d70] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
	// float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex);                                                    // [0x2e95ce0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
	// float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex);                                                   // [0x2e95c50] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTime
	// float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex);                                                           // [0x2e95bc0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerLength
	// float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex);                                                         // [0x2e95b30] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurveValue
	// float GetCurveValue(FName CurveName);                                                                                 // [0x2e95a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetCurrentStateName
	// FName GetCurrentStateName(int32_t MachineIndex);                                                                      // [0x2e95a00] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurrentActiveMontage
	// class UAnimMontage* GetCurrentActiveMontage();                                                                        // [0x2e959d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetAllCurveNames
	// void GetAllCurveNames(TArray<FName>& OutNames);                                                                       // [0x2e95920] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetActiveCurveNames
	// void GetActiveCurveNames(EAnimCurveType CurveType, TArray<FName>& OutNames);                                          // [0x2e95830] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.ClearMorphTargets
	// void ClearMorphTargets();                                                                                             // [0x2e95810] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.CalculateDirection
	// float CalculateDirection(FVector& Velocity, FRotator& BaseRotation);                                                  // [0x2e95710] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.BlueprintUpdateAnimation
	// void BlueprintUpdateAnimation(float DeltaTimeX);                                                                      // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintPostEvaluateAnimation
	// void BlueprintPostEvaluateAnimation();                                                                                // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized
	// void BlueprintLinkedAnimationLayersInitialized();                                                                     // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintInitializeAnimation
	// void BlueprintInitializeAnimation();                                                                                  // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintBeginPlay
	// void BlueprintBeginPlay();                                                                                            // [0x15dd8c0] Event|Public|BlueprintEvent 
};
#pragma pack(pop)

/// Class /Script/Engine.DeveloperSettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UDeveloperSettings : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Class /Script/Engine.StreamableRenderAsset
/// Size: 0x0018 (0x000028 - 0x000040)
class UStreamableRenderAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	double                                             ForceMipLevelsToBeResidentTimestamp;                        // 0x0028   (0x0008)  
	int32_t                                            NumCinematicMipLevels;                                      // 0x0030   (0x0004)  
	int32_t                                            StreamingIndex;                                             // 0x0034   (0x0004)  
	int32_t                                            CachedCombinedLODBias;                                      // 0x0038   (0x0004)  
	char                                               CachedNumResidentLODs;                                      // 0x003C   (0x0001)  
	bool                                               bCachedReadyForStreaming : 1;                               // 0x003D:0 (0x0001)  
	bool                                               NeverStream : 1;                                            // 0x003D:1 (0x0001)  
	bool                                               bGlobalForceMipLevelsToBeResident : 1;                      // 0x003D:2 (0x0001)  
	bool                                               bIsStreamable : 1;                                          // 0x003D:3 (0x0001)  
	bool                                               bHasStreamingUpdatePending : 1;                             // 0x003D:4 (0x0001)  
	bool                                               bForceMiplevelsToBeResident : 1;                            // 0x003D:5 (0x0001)  
	bool                                               bIgnoreStreamingMipBias : 1;                                // 0x003D:6 (0x0001)  
	bool                                               bUseCinematicMipLevels : 1;                                 // 0x003D:7 (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x003E   (0x0002)  MISSED
};

/// Struct /Script/Engine.MeshUVChannelInfo
/// Size: 0x0014 (0x000000 - 0x000014)
struct FMeshUVChannelInfo
{ 
	bool                                               bInitialized;                                               // 0x0000   (0x0001)  
	bool                                               bOverrideDensities;                                         // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              LocalUVDensities;                                           // 0x0004   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMaterial
/// Size: 0x0028 (0x000000 - 0x000028)
struct FSkeletalMaterial
{ 
	class UMaterialInterface*                          MaterialInterface;                                          // 0x0000   (0x0008)  
	FName                                              MaterialSlotName;                                           // 0x0008   (0x0008)  
	FMeshUVChannelInfo                                 UVChannelData;                                              // 0x0010   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.BoneMirrorInfo
/// Size: 0x0008 (0x000000 - 0x000008)
struct FBoneMirrorInfo
{ 
	int32_t                                            SourceIndex;                                                // 0x0000   (0x0004)  
	SDK_UNDEFINED(1,136) /* TEnumAsByte<EAxis> */      __um(BoneFlipAxis);                                         // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.PerPlatformFloat
/// Size: 0x0004 (0x000000 - 0x000004)
struct FPerPlatformFloat
{ 
	float                                              Default;                                                    // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.SkeletalMeshBuildSettings
/// Size: 0x0014 (0x000000 - 0x000014)
struct FSkeletalMeshBuildSettings
{ 
	bool                                               bRecomputeNormals : 1;                                      // 0x0000:0 (0x0001)  
	bool                                               bRecomputeTangents : 1;                                     // 0x0000:1 (0x0001)  
	bool                                               bUseMikkTSpace : 1;                                         // 0x0000:2 (0x0001)  
	bool                                               bComputeWeightedNormals : 1;                                // 0x0000:3 (0x0001)  
	bool                                               bRemoveDegenerates : 1;                                     // 0x0000:4 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x0000:5 (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x0000:6 (0x0001)  
	bool                                               bBuildAdjacencyBuffer : 1;                                  // 0x0000:7 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ThresholdPosition;                                          // 0x0004   (0x0004)  
	float                                              ThresholdTangentNormal;                                     // 0x0008   (0x0004)  
	float                                              ThresholdUV;                                                // 0x000C   (0x0004)  
	float                                              MorphThresholdPosition;                                     // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.SkeletalMeshOptimizationSettings
/// Size: 0x003C (0x000000 - 0x00003C)
struct FSkeletalMeshOptimizationSettings
{ 
	SDK_UNDEFINED(1,137) /* TEnumAsByte<SkeletalMeshTerminationCriterion> */ __um(TerminationCriterion);           // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              NumOfTrianglesPercentage;                                   // 0x0004   (0x0004)  
	float                                              NumOfVertPercentage;                                        // 0x0008   (0x0004)  
	uint32_t                                           MaxNumOfTriangles;                                          // 0x000C   (0x0004)  
	uint32_t                                           MaxNumOfVerts;                                              // 0x0010   (0x0004)  
	float                                              MaxDeviationPercentage;                                     // 0x0014   (0x0004)  
	SDK_UNDEFINED(1,138) /* TEnumAsByte<SkeletalMeshOptimizationType> */ __um(ReductionMethod);                    // 0x0018   (0x0001)  
	SDK_UNDEFINED(1,139) /* TEnumAsByte<SkeletalMeshOptimizationImportance> */ __um(SilhouetteImportance);         // 0x0019   (0x0001)  
	SDK_UNDEFINED(1,140) /* TEnumAsByte<SkeletalMeshOptimizationImportance> */ __um(TextureImportance);            // 0x001A   (0x0001)  
	SDK_UNDEFINED(1,141) /* TEnumAsByte<SkeletalMeshOptimizationImportance> */ __um(ShadingImportance);            // 0x001B   (0x0001)  
	SDK_UNDEFINED(1,142) /* TEnumAsByte<SkeletalMeshOptimizationImportance> */ __um(SkinningImportance);           // 0x001C   (0x0001)  
	bool                                               bRemapMorphTargets : 1;                                     // 0x001D:0 (0x0001)  
	bool                                               bRecalcNormals : 1;                                         // 0x001D:1 (0x0001)  
	unsigned char                                      UnknownData01_4[0x2];                                       // 0x001E   (0x0002)  MISSED
	float                                              WeldingThreshold;                                           // 0x0020   (0x0004)  
	float                                              NormalsThreshold;                                           // 0x0024   (0x0004)  
	int32_t                                            MaxBonesPerVertex;                                          // 0x0028   (0x0004)  
	bool                                               bEnforceBoneBoundaries : 1;                                 // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x002D   (0x0003)  MISSED
	float                                              VolumeImportance;                                           // 0x0030   (0x0004)  
	bool                                               bLockEdges : 1;                                             // 0x0034:0 (0x0001)  
	bool                                               bLockColorBounaries : 1;                                    // 0x0034:1 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x0035   (0x0003)  MISSED
	int32_t                                            BaseLOD;                                                    // 0x0038   (0x0004)  
};

/// Struct /Script/Engine.BoneReference
/// Size: 0x0010 (0x000000 - 0x000010)
struct FBoneReference
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshLODInfo
/// Size: 0x00B8 (0x000000 - 0x0000B8)
struct FSkeletalMeshLODInfo
{ 
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              LODHysteresis;                                              // 0x0004   (0x0004)  
	TArray<int32_t>                                    LODMaterialMap;                                             // 0x0008   (0x0010)  
	FSkeletalMeshBuildSettings                         BuildSettings;                                              // 0x0018   (0x0014)  
	FSkeletalMeshOptimizationSettings                  ReductionSettings;                                          // 0x002C   (0x003C)  
	TArray<FBoneReference>                             BonesToRemove;                                              // 0x0068   (0x0010)  
	TArray<FBoneReference>                             BonesToPrioritize;                                          // 0x0078   (0x0010)  
	float                                              WeightOfPrioritization;                                     // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x008C   (0x0004)  MISSED
	class UAnimSequence*                               BakePose;                                                   // 0x0090   (0x0008)  
	class UAnimSequence*                               BakePoseOverride;                                           // 0x0098   (0x0008)  
	SDK_UNDEFINED(16,143) /* FString */                __um(SourceImportFilename);                                 // 0x00A0   (0x0010)  
	ESkinCacheUsage                                    SkinCacheUsage;                                             // 0x00B0   (0x0001)  
	bool                                               bHasBeenSimplified : 1;                                     // 0x00B1:0 (0x0001)  
	bool                                               bHasPerLODVertexColors : 1;                                 // 0x00B1:1 (0x0001)  
	bool                                               bAllowCPUAccess : 1;                                        // 0x00B1:2 (0x0001)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x00B1:3 (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x00B2   (0x0006)  MISSED
};

/// Struct /Script/Engine.PerPlatformInt
/// Size: 0x0004 (0x000000 - 0x000004)
struct FPerPlatformInt
{ 
	int32_t                                            Default;                                                    // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.PerPlatformBool
/// Size: 0x0001 (0x000000 - 0x000001)
struct FPerPlatformBool
{ 
	bool                                               Default;                                                    // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionMaterialFilter
/// Size: 0x0008 (0x000000 - 0x000008)
struct FSkeletalMeshSamplingRegionMaterialFilter
{ 
	FName                                              MaterialName;                                               // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBoneFilter
/// Size: 0x000C (0x000000 - 0x00000C)
struct FSkeletalMeshSamplingRegionBoneFilter
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	bool                                               bIncludeOrExclude : 1;                                      // 0x0008:0 (0x0001)  
	bool                                               bApplyToChildren : 1;                                       // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegion
/// Size: 0x0030 (0x000000 - 0x000030)
struct FSkeletalMeshSamplingRegion
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	int32_t                                            LODIndex;                                                   // 0x0008   (0x0004)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x000D   (0x0003)  MISSED
	TArray<FSkeletalMeshSamplingRegionMaterialFilter>  MaterialFilters;                                            // 0x0010   (0x0010)  
	TArray<FSkeletalMeshSamplingRegionBoneFilter>      BoneFilters;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingLODBuiltData
/// Size: 0x0048 (0x000000 - 0x000048)
struct FSkeletalMeshSamplingLODBuiltData
{ 
	unsigned char                                      UnknownData00_2[0x48];                                      // 0x0000   (0x0048)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBuiltData
/// Size: 0x0078 (0x000000 - 0x000078)
struct FSkeletalMeshSamplingRegionBuiltData
{ 
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x0000   (0x0078)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingBuiltData
/// Size: 0x0020 (0x000000 - 0x000020)
struct FSkeletalMeshSamplingBuiltData
{ 
	TArray<FSkeletalMeshSamplingLODBuiltData>          WholeMeshBuiltData;                                         // 0x0000   (0x0010)  
	TArray<FSkeletalMeshSamplingRegionBuiltData>       RegionBuiltData;                                            // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingInfo
/// Size: 0x0030 (0x000000 - 0x000030)
struct FSkeletalMeshSamplingInfo
{ 
	TArray<FSkeletalMeshSamplingRegion>                Regions;                                                    // 0x0000   (0x0010)  
	FSkeletalMeshSamplingBuiltData                     BuiltData;                                                  // 0x0010   (0x0020)  
};

/// Struct /Script/Engine.SkinWeightProfileInfo
/// Size: 0x0010 (0x000000 - 0x000010)
struct FSkinWeightProfileInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FPerPlatformBool                                   DefaultProfile;                                             // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	FPerPlatformInt                                    DefaultProfileFromLODIndex;                                 // 0x000C   (0x0004)  
};

/// Class /Script/Engine.SkeletalMesh
/// Size: 0x0340 (0x000040 - 0x000380)
class USkeletalMesh : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0040   (0x0020)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0060   (0x0008)  
	FBoxSphereBounds                                   ImportedBounds;                                             // 0x0068   (0x001C)  
	FBoxSphereBounds                                   ExtendedBounds;                                             // 0x0084   (0x001C)  
	FVector                                            PositiveBoundsExtension;                                    // 0x00A0   (0x000C)  
	FVector                                            NegativeBoundsExtension;                                    // 0x00AC   (0x000C)  
	TArray<FSkeletalMaterial>                          Materials;                                                  // 0x00B8   (0x0010)  
	TArray<FBoneMirrorInfo>                            SkelMirrorTable;                                            // 0x00C8   (0x0010)  
	TArray<FSkeletalMeshLODInfo>                       LODInfo;                                                    // 0x00D8   (0x0010)  
	unsigned char                                      UnknownData01_5[0x50];                                      // 0x00E8   (0x0050)  MISSED
	FPerPlatformInt                                    MinLOD;                                                     // 0x0138   (0x0004)  
	FPerPlatformBool                                   DisableBelowMinLodStripping;                                // 0x013C   (0x0001)  
	SDK_UNDEFINED(1,144) /* TEnumAsByte<EAxis> */      __um(SkelMirrorAxis);                                       // 0x013D   (0x0001)  
	SDK_UNDEFINED(1,145) /* TEnumAsByte<EAxis> */      __um(SkelMirrorFlipAxis);                                   // 0x013E   (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x013F:0 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x013F:1 (0x0001)  
	bool                                               bHasBeenSimplified : 1;                                     // 0x013F:2 (0x0001)  
	bool                                               bHasVertexColors : 1;                                       // 0x013F:3 (0x0001)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x013F:4 (0x0001)  MISSED
	bool                                               bEnablePerPolyCollision : 1;                                // 0x013F:5 (0x0001)  
	class UBodySetup*                                  BodySetup;                                                  // 0x0140   (0x0008)  
	class UPhysicsAsset*                               PhysicsAsset;                                               // 0x0148   (0x0008)  
	class UPhysicsAsset*                               ShadowPhysicsAsset;                                         // 0x0150   (0x0008)  
	TArray<class UNodeMappingContainer*>               NodeMappingData;                                            // 0x0158   (0x0010)  
	TArray<class UMorphTarget*>                        MorphTargets;                                               // 0x0168   (0x0010)  
	unsigned char                                      UnknownData03_5[0x178];                                     // 0x0178   (0x0178)  MISSED
	class UClass*                                      PostProcessAnimBlueprint;                                   // 0x02F0   (0x0008)  
	TArray<class UClothingAssetBase*>                  MeshClothingAssets;                                         // 0x02F8   (0x0010)  
	FSkeletalMeshSamplingInfo                          SamplingInfo;                                               // 0x0308   (0x0030)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0338   (0x0010)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x0348   (0x0008)  MISSED
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                    // 0x0350   (0x0010)  
	unsigned char                                      UnknownData05_5[0x10];                                      // 0x0360   (0x0010)  MISSED
	TArray<FSkinWeightProfileInfo>                     SkinWeightProfiles;                                         // 0x0370   (0x0010)  


	/// Functions
	// Function /Script/Engine.SkeletalMesh.SetLODSettings
	// void SetLODSettings(class USkeletalMeshLODSettings* InLODSettings);                                                   // [0xee5140] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.NumSockets
	// int32_t NumSockets();                                                                                                 // [0x2fc2fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.K2_GetAllMorphTargetNames
	// TArray<FString> K2_GetAllMorphTargetNames();                                                                          // [0x2fc2ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.IsSectionUsingCloth
	// bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections);                                   // [0x2fc2e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetSocketByIndex
	// class USkeletalMeshSocket* GetSocketByIndex(int32_t Index);                                                           // [0x2fc2d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetNodeMappingContainer
	// class UNodeMappingContainer* GetNodeMappingContainer(class UBlueprint* SourceAsset);                                  // [0x2fc2ce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetImportedBounds
	// FBoxSphereBounds GetImportedBounds();                                                                                 // [0x2fc2c90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetBounds
	// FBoxSphereBounds GetBounds();                                                                                         // [0x2fc2c40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocketInfo
	// class USkeletalMeshSocket* FindSocketInfo(FName InSocketName, FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // [0x2fc2a70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocketAndIndex
	// class USkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, int32_t& OutIndex);                                 // [0x2fc29a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocket
	// class USkeletalMeshSocket* FindSocket(FName InSocketName);                                                            // [0x2fc2910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.SplineCurves
/// Size: 0x0068 (0x000000 - 0x000068)
struct FSplineCurves
{ 
	FInterpCurveVector                                 Position;                                                   // 0x0000   (0x0018)  
	FInterpCurveQuat                                   Rotation;                                                   // 0x0018   (0x0018)  
	FInterpCurveVector                                 Scale;                                                      // 0x0030   (0x0018)  
	FInterpCurveFloat                                  ReparamTable;                                               // 0x0048   (0x0018)  
	class USplineMetadata*                             MetaData;                                                   // 0x0060   (0x0008)  
};

/// Class /Script/Engine.SplineComponent
/// Size: 0x00F0 (0x000410 - 0x000500)
class USplineComponent : public UPrimitiveComponent
{ 
public:
	FSplineCurves                                      SplineCurves;                                               // 0x0408   (0x0068)  
	FInterpCurveVector                                 SplineInfo;                                                 // 0x0470   (0x0018)  
	FInterpCurveQuat                                   SplineRotInfo;                                              // 0x0488   (0x0018)  
	FInterpCurveVector                                 SplineScaleInfo;                                            // 0x04A0   (0x0018)  
	FInterpCurveFloat                                  SplineReparamTable;                                         // 0x04B8   (0x0018)  
	bool                                               bAllowSplineEditingPerInstance;                             // 0x04D0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x04D1   (0x0003)  MISSED
	int32_t                                            ReparamStepsPerSegment;                                     // 0x04D4   (0x0004)  
	float                                              Duration;                                                   // 0x04D8   (0x0004)  
	bool                                               bStationaryEndpoints;                                       // 0x04DC   (0x0001)  
	bool                                               bSplineHasBeenEdited;                                       // 0x04DD   (0x0001)  
	bool                                               bModifiedByConstructionScript;                              // 0x04DE   (0x0001)  
	bool                                               bInputSplinePointsToConstructionScript;                     // 0x04DF   (0x0001)  
	bool                                               bDrawDebug;                                                 // 0x04E0   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x04E1   (0x0003)  MISSED
	float                                              DebugLineThickness;                                         // 0x04E4   (0x0004)  
	bool                                               bClosedLoop;                                                // 0x04E8   (0x0001)  
	bool                                               bLoopPositionOverride;                                      // 0x04E9   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x04EA   (0x0002)  MISSED
	float                                              LoopPosition;                                               // 0x04EC   (0x0004)  
	FVector                                            DefaultUpVector;                                            // 0x04F0   (0x000C)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x04FC   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.SplineComponent.UpdateSpline
	// void UpdateSpline();                                                                                                  // [0x2fdd870] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetWorldLocationAtSplinePoint
	// void SetWorldLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation);                                          // [0x2fdd3e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetUpVectorAtSplinePoint
	// void SetUpVectorAtSplinePoint(int32_t PointIndex, FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x2fdd280] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetUnselectedSplineSegmentColor
	// void SetUnselectedSplineSegmentColor(FLinearColor& SegmentColor);                                                     // [0xee8650] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentsAtSplinePoint
	// void SetTangentsAtSplinePoint(int32_t PointIndex, FVector& InArriveTangent, FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x2fdd0c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentAtSplinePoint
	// void SetTangentAtSplinePoint(int32_t PointIndex, FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x2fdcf60] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplineWorldPoints
	// void SetSplineWorldPoints(TArray<FVector>& Points);                                                                   // [0x2fdcde0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplinePointType
	// void SetSplinePointType(int32_t PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline);                  // [0x2fdcbb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplinePoints
	// void SetSplinePoints(TArray<FVector>& Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x2fdccb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplineLocalPoints
	// void SetSplineLocalPoints(TArray<FVector>& Points);                                                                   // [0x2fdcb00] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSelectedSplineSegmentColor
	// void SetSelectedSplineSegmentColor(FLinearColor& SegmentColor);                                                       // [0xee8650] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetLocationAtSplinePoint
	// void SetLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x2fdc8d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDrawDebug
	// void SetDrawDebug(bool bShow);                                                                                        // [0x2fdc840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDefaultUpVector
	// void SetDefaultUpVector(FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                      // [0x2fdc760] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDebugLineThickness
	// void SetDebugLineThickness(float InDebugLineThickness);                                                               // [0x2fdc6e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetClosedLoopAtPosition
	// void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);                                      // [0x2fdc5d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetClosedLoop
	// void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);                                                           // [0x2fdc500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.RemoveSplinePoint
	// void RemoveSplinePoint(int32_t Index, bool bUpdateSpline);                                                            // [0x2fdc440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.IsClosedLoop
	// bool IsClosedLoop();                                                                                                  // [0x2fdc410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
	// FVector GetWorldTangentAtDistanceAlongSpline(float Distance);                                                         // [0x2fdc360] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtTime
	// FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);                                               // [0x2fdc270] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
	// FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);                                                       // [0x2fdc1c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtTime
	// FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);                                                // [0x2fdc0d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtSplinePoint
	// FVector GetWorldLocationAtSplinePoint(int32_t PointIndex);                                                            // [0x2fdc020] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
	// FVector GetWorldLocationAtDistanceAlongSpline(float Distance);                                                        // [0x2fdbf70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtTime
	// FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);                                               // [0x2fdbe80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
	// FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);                                                       // [0x2fdbdd0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetVectorPropertyAtSplinePoint
	// FVector GetVectorPropertyAtSplinePoint(int32_t Index, FName PropertyName);                                            // [0x2fdbd00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
	// FVector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);                                           // [0x2fdbc20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtTime
	// FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x2fdbb00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplinePoint
	// FVector GetUpVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x2fdba30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplineInputKey
	// FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x2fdb950] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
	// FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);        // [0x2fdb870] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtTime
	// FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // [0x2fdb6e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplinePoint
	// FTransform GetTransformAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x2fdb5a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplineInputKey
	// FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x2fdb450] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtDistanceAlongSpline
	// FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x2fdb300] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtTime
	// FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x2fdb1e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplinePoint
	// FVector GetTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);             // [0x2fd98f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplineInputKey
	// FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                 // [0x2fdb100] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtDistanceAlongSpline
	// FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);         // [0x2fdb020] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplinePointType
	// TEnumAsByte<ESplinePointType> GetSplinePointType(int32_t PointIndex);                                                 // [0x2fdaf90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplineLength
	// float GetSplineLength();                                                                                              // [0x2fdaf60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtTime
	// FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);                                                        // [0x2fdadf0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplinePoint
	// FVector GetScaleAtSplinePoint(int32_t PointIndex);                                                                    // [0x2fdad50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplineInputKey
	// FVector GetScaleAtSplineInputKey(float InKey);                                                                        // [0x2fdacb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtDistanceAlongSpline
	// FVector GetScaleAtDistanceAlongSpline(float Distance);                                                                // [0x2fdac10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtTime
	// FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x2fdaaf0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplinePoint
	// FRotator GetRotationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x2fdaa20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplineInputKey
	// FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x2fda940] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtDistanceAlongSpline
	// FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);       // [0x2fda860] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtTime
	// float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);      // [0x2fda750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtSplinePoint
	// float GetRollAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                  // [0x2fda690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtSplineInputKey
	// float GetRollAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                      // [0x2fda5c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtDistanceAlongSpline
	// float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x2fda4f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtTime
	// FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x2fda3d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplinePoint
	// FVector GetRightVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);         // [0x2fda300] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplineInputKey
	// FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);             // [0x2fda220] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
	// FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);     // [0x2fda140] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplineSegments
	// int32_t GetNumberOfSplineSegments();                                                                                  // [0x2fda110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplinePoints
	// int32_t GetNumberOfSplinePoints();                                                                                    // [0x2fda0e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationForAllSplinePoints
	// TArray<FVector> GetLocationForAllSplinePoints(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                   // [0x2fda010] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtTime
	// FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x2fd9ef0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplinePoint
	// FVector GetLocationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x2fd9e20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplineInputKey
	// FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x2fd9d40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtDistanceAlongSpline
	// FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);        // [0x2fd9c60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
	// void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& Location, FVector& Tangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2fd9af0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
	// void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& LocalLocation, FVector& LocalTangent);      // [0x2fd99c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLeaveTangentAtSplinePoint
	// FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);        // [0x2fd98f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
	// float GetInputKeyAtDistanceAlongSpline(float Distance);                                                               // [0x2fd9860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetFloatPropertyAtSplinePoint
	// float GetFloatPropertyAtSplinePoint(int32_t Index, FName PropertyName);                                               // [0x2fd97a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
	// float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);                                              // [0x2fd96d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
	// float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex);                                                        // [0x2fd9640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtTime
	// FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x2fd9520] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplinePoint
	// FVector GetDirectionAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x2fd9450] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplineInputKey
	// FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x2fd9370] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
	// FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);       // [0x2fd9290] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDefaultUpVector
	// FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                                      // [0x2fd91f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetArriveTangentAtSplinePoint
	// FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);       // [0x2fd9120] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindUpVectorClosestToWorldLocation
	// FVector FindUpVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2fd9030] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindTransformClosestToWorldLocation
	// FTransform FindTransformClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x2fd8ee0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindTangentClosestToWorldLocation
	// FVector FindTangentClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2fd8df0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindScaleClosestToWorldLocation
	// FVector FindScaleClosestToWorldLocation(FVector& WorldLocation);                                                      // [0x2fd8d40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRotationClosestToWorldLocation
	// FRotator FindRotationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2fd8c50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRollClosestToWorldLocation
	// float FindRollClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);    // [0x2fd8b70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRightVectorClosestToWorldLocation
	// FVector FindRightVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2fd8a80] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindLocationClosestToWorldLocation
	// FVector FindLocationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2fd8990] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindInputKeyClosestToWorldLocation
	// float FindInputKeyClosestToWorldLocation(FVector& WorldLocation);                                                     // [0x2fd88f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindDirectionClosestToWorldLocation
	// FVector FindDirectionClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2fd8800] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.ClearSplinePoints
	// void ClearSplinePoints(bool bUpdateSpline);                                                                           // [0x2fd8770] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplineWorldPoint
	// void AddSplineWorldPoint(FVector& Position);                                                                          // [0x2fd86d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplinePointAtIndex
	// void AddSplinePointAtIndex(FVector& Position, int32_t Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x2fd8570] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplinePoint
	// void AddSplinePoint(FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);      // [0x2fd8460] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplineLocalPoint
	// void AddSplineLocalPoint(FVector& Position);                                                                          // [0x2fd83d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddPoints
	// void AddPoints(TArray<FSplinePoint>& Points, bool bUpdateSpline);                                                     // [0x2fd82d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddPoint
	// void AddPoint(FSplinePoint& Point, bool bUpdateSpline);                                                               // [0x2fd81c0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.TriggerBase
/// Size: 0x0008 (0x000220 - 0x000228)
class ATriggerBase : public AActor
{ 
public:
	class UShapeComponent*                             CollisionComponent;                                         // 0x0220   (0x0008)  
};

/// Class /Script/Engine.TriggerBox
/// Size: 0x0000 (0x000228 - 0x000228)
class ATriggerBox : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.Player
/// Size: 0x0020 (0x000028 - 0x000048)
class UPlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	class APlayerController*                           PlayerController;                                           // 0x0030   (0x0008)  
	int32_t                                            CurrentNetSpeed;                                            // 0x0038   (0x0004)  
	int32_t                                            ConfiguredInternetSpeed;                                    // 0x003C   (0x0004)  
	int32_t                                            ConfiguredLanSpeed;                                         // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.UniqueNetIdRepl
/// Size: 0x0027 (0x000001 - 0x000028)
struct FUniqueNetIdRepl : FUniqueNetIdWrapper
{ 
	unsigned char                                      UnknownData00_3[0x17];                                      // 0x0001   (0x0017)  MISSED
	TArray<char>                                       ReplicationBytes;                                           // 0x0018   (0x0010)  
};

/// Class /Script/Engine.NetConnection
/// Size: 0x19E8 (0x000048 - 0x001A30)
class UNetConnection : public UPlayer
{ 
public:
	TArray<class UChildConnection*>                    Children;                                                   // 0x0048   (0x0010)  
	class UNetDriver*                                  Driver;                                                     // 0x0058   (0x0008)  
	class UClass*                                      PackageMapClass;                                            // 0x0060   (0x0008)  
	class UPackageMap*                                 PackageMap;                                                 // 0x0068   (0x0008)  
	TArray<class UChannel*>                            OpenChannels;                                               // 0x0070   (0x0010)  
	TArray<class AActor*>                              SentTemporaries;                                            // 0x0080   (0x0010)  
	class AActor*                                      ViewTarget;                                                 // 0x0090   (0x0008)  
	class AActor*                                      OwningActor;                                                // 0x0098   (0x0008)  
	int32_t                                            MaxPacket;                                                  // 0x00A0   (0x0004)  
	bool                                               InternalAck : 1;                                            // 0x00A4:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0xBB];                                      // 0x00A5   (0x00BB)  MISSED
	FUniqueNetIdRepl                                   PlayerID;                                                   // 0x0160   (0x0028)  
	unsigned char                                      UnknownData01_5[0x48];                                      // 0x0188   (0x0048)  MISSED
	double                                             LastReceiveTime;                                            // 0x01D0   (0x0008)  
	unsigned char                                      UnknownData02_5[0x1338];                                    // 0x01D8   (0x1338)  MISSED
	TArray<class UChannel*>                            ChannelsToTick;                                             // 0x1510   (0x0010)  
	unsigned char                                      UnknownData03_6[0x510];                                     // 0x1520   (0x0510)  MISSED
};

/// Struct /Script/Engine.ChannelDefinition
/// Size: 0x0028 (0x000000 - 0x000028)
struct FChannelDefinition
{ 
	FName                                              ChannelName;                                                // 0x0000   (0x0008)  
	FName                                              ClassName;                                                  // 0x0008   (0x0008)  
	class UClass*                                      ChannelClass;                                               // 0x0010   (0x0008)  
	int32_t                                            StaticChannelIndex;                                         // 0x0018   (0x0004)  
	bool                                               bTickOnCreate;                                              // 0x001C   (0x0001)  
	bool                                               bServerOpen;                                                // 0x001D   (0x0001)  
	bool                                               bClientOpen;                                                // 0x001E   (0x0001)  
	bool                                               bInitialServer;                                             // 0x001F   (0x0001)  
	bool                                               bInitialClient;                                             // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Class /Script/Engine.NetDriver
/// Size: 0x0720 (0x000028 - 0x000748)
class UNetDriver : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	SDK_UNDEFINED(16,146) /* FString */                __um(NetConnectionClassName);                               // 0x0030   (0x0010)  
	SDK_UNDEFINED(16,147) /* FString */                __um(ReplicationDriverClassName);                           // 0x0040   (0x0010)  
	int32_t                                            MaxDownloadSize;                                            // 0x0050   (0x0004)  
	bool                                               bClampListenServerTickRate : 1;                             // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0055   (0x0003)  MISSED
	int32_t                                            NetServerMaxTickRate;                                       // 0x0058   (0x0004)  
	int32_t                                            MaxNetTickRate;                                             // 0x005C   (0x0004)  
	int32_t                                            MaxInternetClientRate;                                      // 0x0060   (0x0004)  
	int32_t                                            MaxClientRate;                                              // 0x0064   (0x0004)  
	float                                              ServerTravelPause;                                          // 0x0068   (0x0004)  
	float                                              SpawnPrioritySeconds;                                       // 0x006C   (0x0004)  
	float                                              RelevantTimeout;                                            // 0x0070   (0x0004)  
	float                                              KeepAliveTime;                                              // 0x0074   (0x0004)  
	float                                              InitialConnectTimeout;                                      // 0x0078   (0x0004)  
	float                                              ConnectionTimeout;                                          // 0x007C   (0x0004)  
	float                                              TimeoutMultiplierForUnoptimizedBuilds;                      // 0x0080   (0x0004)  
	bool                                               bNoTimeouts;                                                // 0x0084   (0x0001)  
	bool                                               bNeverApplyNetworkEmulationSettings;                        // 0x0085   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0086   (0x0002)  MISSED
	class UNetConnection*                              ServerConnection;                                           // 0x0088   (0x0008)  
	TArray<class UNetConnection*>                      ClientConnections;                                          // 0x0090   (0x0010)  
	unsigned char                                      UnknownData03_5[0x60];                                      // 0x00A0   (0x0060)  MISSED
	int32_t                                            RecentlyDisconnectedTrackingTime;                           // 0x0100   (0x0004)  
	unsigned char                                      UnknownData04_5[0x3C];                                      // 0x0104   (0x003C)  MISSED
	class UWorld*                                      World;                                                      // 0x0140   (0x0008)  
	class UPackage*                                    WorldPackage;                                               // 0x0148   (0x0008)  
	unsigned char                                      UnknownData05_5[0x20];                                      // 0x0150   (0x0020)  MISSED
	class UClass*                                      NetConnectionClass;                                         // 0x0170   (0x0008)  
	class UClass*                                      ReplicationDriverClass;                                     // 0x0178   (0x0008)  
	unsigned char                                      UnknownData06_5[0x10];                                      // 0x0180   (0x0010)  MISSED
	FName                                              NetDriverName;                                              // 0x0190   (0x0008)  
	TArray<FChannelDefinition>                         ChannelDefinitions;                                         // 0x0198   (0x0010)  
	SDK_UNDEFINED(80,148) /* TMap<FName, FChannelDefinition> */ __um(ChannelDefinitionMap);                        // 0x01A8   (0x0050)  
	TArray<class UChannel*>                            ActorChannelPool;                                           // 0x01F8   (0x0010)  
	unsigned char                                      UnknownData07_5[0x8];                                       // 0x0208   (0x0008)  MISSED
	float                                              Time;                                                       // 0x0210   (0x0004)  
	unsigned char                                      UnknownData08_5[0x4D4];                                     // 0x0214   (0x04D4)  MISSED
	class UReplicationDriver*                          ReplicationDriver;                                          // 0x06E8   (0x0008)  
	unsigned char                                      UnknownData09_6[0x58];                                      // 0x06F0   (0x0058)  MISSED
};

/// Class /Script/Engine.BlueprintAsyncActionBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UBlueprintAsyncActionBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0000   (0x0030)  MISSED


	/// Functions
	// Function /Script/Engine.BlueprintAsyncActionBase.Activate
	// void Activate();                                                                                                      // [0xe32f90] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.OnlineBlueprintCallProxyBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{ 
public:
};

/// Class /Script/Engine.OnlineEngineInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UOnlineEngineInterface : public UObject
{ 
public:
};

/// Class /Script/Engine.OnlineSession
/// Size: 0x0000 (0x000028 - 0x000028)
class UOnlineSession : public UObject
{ 
public:
};

/// Struct /Script/Engine.GeomSelection
/// Size: 0x000C (0x000000 - 0x00000C)
struct FGeomSelection
{ 
	int32_t                                            Type;                                                       // 0x0000   (0x0004)  
	int32_t                                            Index;                                                      // 0x0004   (0x0004)  
	int32_t                                            SelectionIndex;                                             // 0x0008   (0x0004)  
};

/// Class /Script/Engine.Brush
/// Size: 0x0038 (0x000220 - 0x000258)
class ABrush : public AActor
{ 
public:
	SDK_UNDEFINED(1,149) /* TEnumAsByte<EBrushType> */ __um(BrushType);                                            // 0x0220   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0221   (0x0003)  MISSED
	FColor                                             BrushColor;                                                 // 0x0224   (0x0004)  
	int32_t                                            PolyFlags;                                                  // 0x0228   (0x0004)  
	bool                                               bColored : 1;                                               // 0x022C:0 (0x0001)  
	bool                                               bSolidWhenSelected : 1;                                     // 0x022C:1 (0x0001)  
	bool                                               bPlaceableFromClassBrowser : 1;                             // 0x022C:2 (0x0001)  
	bool                                               bNotForClientOrServer : 1;                                  // 0x022C:3 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x022D   (0x0003)  MISSED
	class UModel*                                      Brush;                                                      // 0x0230   (0x0008)  
	class UBrushComponent*                             BrushComponent;                                             // 0x0238   (0x0008)  
	bool                                               bInManipulation : 1;                                        // 0x0240:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x7];                                       // 0x0241   (0x0007)  MISSED
	TArray<FGeomSelection>                             SavedSelections;                                            // 0x0248   (0x0010)  
};

/// Class /Script/Engine.Volume
/// Size: 0x0000 (0x000258 - 0x000258)
class AVolume : public ABrush
{ 
public:
};

/// Struct /Script/Engine.SoundConcurrencySettings
/// Size: 0x0020 (0x000000 - 0x000020)
struct FSoundConcurrencySettings
{ 
	int32_t                                            MaxCount;                                                   // 0x0000   (0x0004)  
	bool                                               bLimitToOwner : 1;                                          // 0x0004:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0005   (0x0003)  MISSED
	SDK_UNDEFINED(1,150) /* TEnumAsByte<EMaxConcurrentResolutionRule> */ __um(ResolutionRule);                     // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              VolumeScale;                                                // 0x000C   (0x0004)  
	float                                              VolumeScaleAttackTime;                                      // 0x0010   (0x0004)  
	bool                                               bVolumeScaleCanRelease : 1;                                 // 0x0014:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0015   (0x0003)  MISSED
	float                                              VolumeScaleReleaseTime;                                     // 0x0018   (0x0004)  
	float                                              VoiceStealReleaseTime;                                      // 0x001C   (0x0004)  
};

/// Struct /Script/Engine.KeyHandleMap
/// Size: 0x0060 (0x000000 - 0x000060)
struct FKeyHandleMap
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.IndexedCurve
/// Size: 0x0068 (0x000000 - 0x000068)
struct FIndexedCurve
{ 
	FKeyHandleMap                                      KeyHandlesToIndices;                                        // 0x0008   (0x0060)  
};

/// Struct /Script/Engine.RealCurve
/// Size: 0x0008 (0x000068 - 0x000070)
struct FRealCurve : FIndexedCurve
{ 
	float                                              DefaultValue;                                               // 0x0068   (0x0004)  
	SDK_UNDEFINED(1,151) /* TEnumAsByte<ERichCurveExtrapolation> */ __um(PreInfinityExtrap);                       // 0x006C   (0x0001)  
	SDK_UNDEFINED(1,152) /* TEnumAsByte<ERichCurveExtrapolation> */ __um(PostInfinityExtrap);                      // 0x006D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x006E   (0x0002)  MISSED
};

/// Struct /Script/Engine.RichCurveKey
/// Size: 0x001C (0x000000 - 0x00001C)
struct FRichCurveKey
{ 
	SDK_UNDEFINED(1,153) /* TEnumAsByte<ERichCurveInterpMode> */ __um(InterpMode);                                 // 0x0000   (0x0001)  
	SDK_UNDEFINED(1,154) /* TEnumAsByte<ERichCurveTangentMode> */ __um(TangentMode);                               // 0x0001   (0x0001)  
	SDK_UNDEFINED(1,155) /* TEnumAsByte<ERichCurveTangentWeightMode> */ __um(TangentWeightMode);                   // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              Time;                                                       // 0x0004   (0x0004)  
	float                                              value;                                                      // 0x0008   (0x0004)  
	float                                              ArriveTangent;                                              // 0x000C   (0x0004)  
	float                                              ArriveTangentWeight;                                        // 0x0010   (0x0004)  
	float                                              LeaveTangent;                                               // 0x0014   (0x0004)  
	float                                              LeaveTangentWeight;                                         // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.RichCurve
/// Size: 0x0010 (0x000070 - 0x000080)
struct FRichCurve : FRealCurve
{ 
	TArray<FRichCurveKey>                              Keys;                                                       // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.RuntimeFloatCurve
/// Size: 0x0088 (0x000000 - 0x000088)
struct FRuntimeFloatCurve
{ 
	FRichCurve                                         EditorCurveData;                                            // 0x0000   (0x0080)  
	class UCurveFloat*                                 ExternalCurve;                                              // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.SoundSubmixSendInfo
/// Size: 0x00B0 (0x000000 - 0x0000B0)
struct FSoundSubmixSendInfo
{ 
	ESendLevelControlMethod                            SendLevelControlMethod;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	class USoundSubmixBase*                            SoundSubmix;                                                // 0x0008   (0x0008)  
	float                                              SendLevel;                                                  // 0x0010   (0x0004)  
	float                                              MinSendLevel;                                               // 0x0014   (0x0004)  
	float                                              MaxSendLevel;                                               // 0x0018   (0x0004)  
	float                                              MinSendDistance;                                            // 0x001C   (0x0004)  
	float                                              MaxSendDistance;                                            // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0024   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomSendLevelCurve;                                       // 0x0028   (0x0088)  
};

/// Struct /Script/Engine.SoundSourceBusSendInfo
/// Size: 0x00B0 (0x000000 - 0x0000B0)
struct FSoundSourceBusSendInfo
{ 
	ESourceBusSendLevelControlMethod                   SourceBusSendLevelControlMethod;                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	class USoundSourceBus*                             SoundSourceBus;                                             // 0x0008   (0x0008)  
	float                                              SendLevel;                                                  // 0x0010   (0x0004)  
	float                                              MinSendLevel;                                               // 0x0014   (0x0004)  
	float                                              MaxSendLevel;                                               // 0x0018   (0x0004)  
	float                                              MinSendDistance;                                            // 0x001C   (0x0004)  
	float                                              MaxSendDistance;                                            // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0024   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomSendLevelCurve;                                       // 0x0028   (0x0088)  
};

/// Class /Script/Engine.SoundBase
/// Size: 0x0138 (0x000028 - 0x000160)
class USoundBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class USoundClass*                                 SoundClassObject;                                           // 0x0028   (0x0008)  
	bool                                               bDebug : 1;                                                 // 0x0030:0 (0x0001)  
	bool                                               bOverrideConcurrency : 1;                                   // 0x0030:1 (0x0001)  
	bool                                               bOutputToBusOnly : 1;                                       // 0x0030:2 (0x0001)  
	bool                                               bHasDelayNode : 1;                                          // 0x0030:3 (0x0001)  
	bool                                               bHasConcatenatorNode : 1;                                   // 0x0030:4 (0x0001)  
	bool                                               bBypassVolumeScaleForPriority : 1;                          // 0x0030:5 (0x0001)  
	EVirtualizationMode                                VirtualizationMode;                                         // 0x0031   (0x0001)  
	unsigned char                                      UnknownData01_5[0x56];                                      // 0x0032   (0x0056)  MISSED
	SDK_UNDEFINED(80,156) /* TSet<USoundConcurrency*> */ __um(ConcurrencySet);                                     // 0x0088   (0x0050)  
	FSoundConcurrencySettings                          ConcurrencyOverrides;                                       // 0x00D8   (0x0020)  
	float                                              Duration;                                                   // 0x00F8   (0x0004)  
	float                                              MaxDistance;                                                // 0x00FC   (0x0004)  
	float                                              TotalSamples;                                               // 0x0100   (0x0004)  
	float                                              Priority;                                                   // 0x0104   (0x0004)  
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0108   (0x0008)  
	FSoundModulation                                   Modulation;                                                 // 0x0110   (0x0010)  
	class USoundSubmixBase*                            SoundSubmixObject;                                          // 0x0120   (0x0008)  
	TArray<FSoundSubmixSendInfo>                       SoundSubmixSends;                                           // 0x0128   (0x0010)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0138   (0x0008)  
	TArray<FSoundSourceBusSendInfo>                    BusSends;                                                   // 0x0140   (0x0010)  
	TArray<FSoundSourceBusSendInfo>                    PreEffectBusSends;                                          // 0x0150   (0x0010)  
};

/// Struct /Script/Engine.SoundWaveSpectralDataEntry
/// Size: 0x0008 (0x000000 - 0x000008)
struct FSoundWaveSpectralDataEntry
{ 
	float                                              Magnitude;                                                  // 0x0000   (0x0004)  
	float                                              NormalizedMagnitude;                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveSpectralTimeData
/// Size: 0x0018 (0x000000 - 0x000018)
struct FSoundWaveSpectralTimeData
{ 
	TArray<FSoundWaveSpectralDataEntry>                Data;                                                       // 0x0000   (0x0010)  
	float                                              TimeSec;                                                    // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.SoundWaveEnvelopeTimeData
/// Size: 0x0008 (0x000000 - 0x000008)
struct FSoundWaveEnvelopeTimeData
{ 
	float                                              Amplitude;                                                  // 0x0000   (0x0004)  
	float                                              TimeSec;                                                    // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SubtitleCue
/// Size: 0x0020 (0x000000 - 0x000020)
struct FSubtitleCue
{ 
	SDK_UNDEFINED(24,157) /* FText */                  __um(Text);                                                 // 0x0000   (0x0018)  
	float                                              Time;                                                       // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundWave
/// Size: 0x01A8 (0x000160 - 0x000308)
class USoundWave : public USoundBase
{ 
public:
	int32_t                                            CompressionQuality;                                         // 0x0160   (0x0004)  
	int32_t                                            StreamingPriority;                                          // 0x0164   (0x0004)  
	ESoundwaveSampleRateSettings                       SampleRateQuality;                                          // 0x0168   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0169   (0x0001)  MISSED
	SDK_UNDEFINED(1,158) /* TEnumAsByte<ESoundGroup> */ __um(SoundGroup);                                          // 0x016A   (0x0001)  
	bool                                               bLooping : 1;                                               // 0x016B:0 (0x0001)  
	bool                                               bStreaming : 1;                                             // 0x016B:1 (0x0001)  
	bool                                               bSeekableStreaming : 1;                                     // 0x016B:2 (0x0001)  
	ESoundWaveLoadingBehavior                          LoadingBehavior;                                            // 0x016C   (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x016D:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x016D:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x016D:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x016D:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x016D:4 (0x0001)  MISSED
	bool                                               bMature : 1;                                                // 0x016D:5 (0x0001)  
	bool                                               bManualWordWrap : 1;                                        // 0x016D:6 (0x0001)  
	bool                                               bSingleLine : 1;                                            // 0x016D:7 (0x0001)  
	bool                                               bIsAmbisonics : 1;                                          // 0x016E:0 (0x0001)  
	unsigned char                                      UnknownData06_4[0x1];                                       // 0x016F   (0x0001)  MISSED
	TArray<float>                                      FrequenciesToAnalyze;                                       // 0x0170   (0x0010)  
	TArray<FSoundWaveSpectralTimeData>                 CookedSpectralTimeData;                                     // 0x0180   (0x0010)  
	TArray<FSoundWaveEnvelopeTimeData>                 CookedEnvelopeTimeData;                                     // 0x0190   (0x0010)  
	int32_t                                            InitialChunkSize;                                           // 0x01A0   (0x0004)  
	unsigned char                                      UnknownData07_5[0x44];                                      // 0x01A4   (0x0044)  MISSED
	SDK_UNDEFINED(16,159) /* FString */                __um(SpokenText);                                           // 0x01E8   (0x0010)  
	float                                              SubtitlePriority;                                           // 0x01F8   (0x0004)  
	float                                              Volume;                                                     // 0x01FC   (0x0004)  
	float                                              Pitch;                                                      // 0x0200   (0x0004)  
	int32_t                                            NumChannels;                                                // 0x0204   (0x0004)  
	int32_t                                            SampleRate;                                                 // 0x0208   (0x0004)  
	unsigned char                                      UnknownData08_5[0xC];                                       // 0x020C   (0x000C)  MISSED
	TArray<FSubtitleCue>                               Subtitles;                                                  // 0x0218   (0x0010)  
	class UCurveTable*                                 Curves;                                                     // 0x0228   (0x0008)  
	class UCurveTable*                                 InternalCurves;                                             // 0x0230   (0x0008)  
	unsigned char                                      UnknownData09_6[0xD0];                                      // 0x0238   (0x00D0)  MISSED
};

/// Class /Script/Engine.SoundWaveProcedural
/// Size: 0x0058 (0x000308 - 0x000360)
class USoundWaveProcedural : public USoundWave
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x0308   (0x0058)  MISSED
};

/// Class /Script/Engine.Texture
/// Size: 0x0078 (0x000040 - 0x0000B8)
class UTexture : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0040   (0x0008)  MISSED
	FGuid                                              LightingGuid;                                               // 0x0048   (0x0010)  
	int32_t                                            LODBias;                                                    // 0x0058   (0x0004)  
	SDK_UNDEFINED(1,160) /* TEnumAsByte<TextureCompressionSettings> */ __um(CompressionSettings);                  // 0x005C   (0x0001)  
	SDK_UNDEFINED(1,161) /* TEnumAsByte<TextureFilter> */ __um(Filter);                                            // 0x005D   (0x0001)  
	ETextureMipLoadOptions                             MipLoadOptions;                                             // 0x005E   (0x0001)  
	SDK_UNDEFINED(1,162) /* TEnumAsByte<TextureGroup> */ __um(LODGroup);                                           // 0x005F   (0x0001)  
	bool                                               SRGB : 1;                                                   // 0x0060:0 (0x0001)  
	bool                                               bNoTiling : 1;                                              // 0x0060:1 (0x0001)  
	bool                                               VirtualTextureStreaming : 1;                                // 0x0060:2 (0x0001)  
	bool                                               CompressionYCoCg : 1;                                       // 0x0060:3 (0x0001)  
	bool                                               bAsyncResourceReleaseHasBeenStarted : 1;                    // 0x0060:4 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0061   (0x0007)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0068   (0x0010)  
	unsigned char                                      UnknownData02_6[0x40];                                      // 0x0078   (0x0040)  MISSED
};

/// Class /Script/Engine.MaterialExpression
/// Size: 0x0018 (0x000028 - 0x000040)
class UMaterialExpression : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UMaterial*                                   Material;                                                   // 0x0028   (0x0008)  
	class UMaterialFunction*                           Function;                                                   // 0x0030   (0x0008)  
	bool                                               bIsParameterExpression : 1;                                 // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureBase
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionTextureBase : public UMaterialExpression
{ 
public:
	class UTexture*                                    Texture;                                                    // 0x0040   (0x0008)  
	SDK_UNDEFINED(1,163) /* TEnumAsByte<EMaterialSamplerType> */ __um(SamplerType);                                // 0x0048   (0x0001)  
	bool                                               IsDefaultMeshpaintTexture : 1;                              // 0x0049:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x004A   (0x0006)  MISSED
};

/// Struct /Script/Engine.ExpressionInput
/// Size: 0x000C (0x000000 - 0x00000C)
struct FExpressionInput
{ 
	int32_t                                            OutputIndex;                                                // 0x0000   (0x0004)  
	FName                                              ExpressionName;                                             // 0x0004   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionTextureSample
/// Size: 0x0080 (0x000050 - 0x0000D0)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0050   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x005C   (0x0008)  MISSED
	FExpressionInput                                   TextureObject;                                              // 0x0064   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0070   (0x0008)  MISSED
	FExpressionInput                                   MipValue;                                                   // 0x0078   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0084   (0x0008)  MISSED
	FExpressionInput                                   CoordinatesDX;                                              // 0x008C   (0x000C)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0098   (0x0008)  MISSED
	FExpressionInput                                   CoordinatesDY;                                              // 0x00A0   (0x000C)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x00AC   (0x0008)  MISSED
	FExpressionInput                                   AutomaticViewMipBiasValue;                                  // 0x00B4   (0x000C)  
	unsigned char                                      UnknownData05_5[0x8];                                       // 0x00C0   (0x0008)  MISSED
	SDK_UNDEFINED(1,164) /* TEnumAsByte<ETextureMipValueMode> */ __um(MipValueMode);                               // 0x00C8   (0x0001)  
	SDK_UNDEFINED(1,165) /* TEnumAsByte<ESamplerSourceMode> */ __um(SamplerSource);                                // 0x00C9   (0x0001)  
	bool                                               AutomaticViewMipBias : 1;                                   // 0x00CA:0 (0x0001)  
	char                                               ConstCoordinate;                                            // 0x00CB   (0x0001)  
	int32_t                                            ConstMipValue;                                              // 0x00CC   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter
/// Size: 0x0020 (0x0000D0 - 0x0000F0)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{ 
public:
	FName                                              ParameterName;                                              // 0x00D0   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x00D8   (0x0010)  
	FName                                              Group;                                                      // 0x00E8   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2D
/// Size: 0x0000 (0x0000F0 - 0x0000F0)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Struct /Script/Engine.BasedMovementInfo
/// Size: 0x0030 (0x000000 - 0x000030)
struct FBasedMovementInfo
{ 
	class UPrimitiveComponent*                         MovementBase;                                               // 0x0000   (0x0008)  
	FName                                              BoneName;                                                   // 0x0008   (0x0008)  
	FVector_NetQuantize100                             Location;                                                   // 0x0010   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x001C   (0x000C)  
	bool                                               bServerHasBaseComponent;                                    // 0x0028   (0x0001)  
	bool                                               bRelativeRotation;                                          // 0x0029   (0x0001)  
	bool                                               bServerHasVelocity;                                         // 0x002A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x002B   (0x0005)  MISSED
};

/// Struct /Script/Engine.RootMotionSourceSettings
/// Size: 0x0001 (0x000000 - 0x000001)
struct FRootMotionSourceSettings
{ 
	char                                               Flags;                                                      // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.Vector_NetQuantize10
/// Size: 0x0000 (0x00000C - 0x00000C)
struct FVector_NetQuantize10 : FVector
{ 
};

/// Struct /Script/Engine.RootMotionSourceGroup
/// Size: 0x0038 (0x000000 - 0x000038)
struct FRootMotionSourceGroup
{ 
	bool                                               bHasAdditiveSources : 1;                                    // 0x0028:0 (0x0001)  
	bool                                               bHasOverrideSources : 1;                                    // 0x0028:1 (0x0001)  
	bool                                               bHasOverrideSourcesWithIgnoreZAccumulate : 1;               // 0x0028:2 (0x0001)  
	bool                                               bIsAdditiveVelocityApplied : 1;                             // 0x0028:3 (0x0001)  
	FRootMotionSourceSettings                          LastAccumulatedSettings;                                    // 0x0029   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x002A   (0x0002)  MISSED
	FVector_NetQuantize10                              LastPreAdditiveVelocity;                                    // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.RootMotionMovementParams
/// Size: 0x0040 (0x000000 - 0x000040)
struct FRootMotionMovementParams
{ 
	bool                                               bHasRootMotion;                                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              BlendWeight;                                                // 0x0004   (0x0004)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         RootMotionTransform;                                        // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.RepRootMotionMontage
/// Size: 0x0098 (0x000000 - 0x000098)
struct FRepRootMotionMontage
{ 
	bool                                               bIsActive;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UAnimMontage*                                AnimMontage;                                                // 0x0008   (0x0008)  
	float                                              Position;                                                   // 0x0010   (0x0004)  
	FVector_NetQuantize100                             Location;                                                   // 0x0014   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0020   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	class UPrimitiveComponent*                         MovementBase;                                               // 0x0030   (0x0008)  
	FName                                              MovementBaseBoneName;                                       // 0x0038   (0x0008)  
	bool                                               bRelativePosition;                                          // 0x0040   (0x0001)  
	bool                                               bRelativeRotation;                                          // 0x0041   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x0042   (0x0006)  MISSED
	FRootMotionSourceGroup                             AuthoritativeRootMotion;                                    // 0x0048   (0x0038)  
	FVector_NetQuantize10                              Acceleration;                                               // 0x0080   (0x000C)  
	FVector_NetQuantize10                              LinearVelocity;                                             // 0x008C   (0x000C)  
};

/// Struct /Script/Engine.SimulatedRootMotionReplicatedMove
/// Size: 0x00A0 (0x000000 - 0x0000A0)
struct FSimulatedRootMotionReplicatedMove
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	FRepRootMotionMontage                              RootMotion;                                                 // 0x0008   (0x0098)  
};

/// Class /Script/Engine.Character
/// Size: 0x0240 (0x000280 - 0x0004C0)
#pragma pack(push, 0x1)
class alignas(0x10) ACharacter : public APawn
{ 
public:
	class USkeletalMeshComponent*                      Mesh;                                                       // 0x0280   (0x0008)  
	class UCharacterMovementComponent*                 CharacterMovement;                                          // 0x0288   (0x0008)  
	class UCapsuleComponent*                           CapsuleComponent;                                           // 0x0290   (0x0008)  
	FBasedMovementInfo                                 BasedMovement;                                              // 0x0298   (0x0030)  
	FBasedMovementInfo                                 ReplicatedBasedMovement;                                    // 0x02C8   (0x0030)  
	float                                              AnimRootMotionTranslationScale;                             // 0x02F8   (0x0004)  
	FVector                                            BaseTranslationOffset;                                      // 0x02FC   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0308   (0x0008)  MISSED
	FQuat                                              BaseRotationOffset;                                         // 0x0310   (0x0010)  
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;               // 0x0320   (0x0004)  
	float                                              ReplayLastTransformUpdateTimeStamp;                         // 0x0324   (0x0004)  
	char                                               ReplicatedMovementMode;                                     // 0x0328   (0x0001)  
	bool                                               bInBaseReplication;                                         // 0x0329   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x032A   (0x0002)  MISSED
	float                                              CrouchedEyeHeight;                                          // 0x032C   (0x0004)  
	bool                                               bIsCrouched : 1;                                            // 0x0330:0 (0x0001)  
	bool                                               bProxyIsJumpForceApplied : 1;                               // 0x0330:1 (0x0001)  
	bool                                               bPressedJump : 1;                                           // 0x0330:2 (0x0001)  
	bool                                               bClientUpdating : 1;                                        // 0x0330:3 (0x0001)  
	bool                                               bClientWasFalling : 1;                                      // 0x0330:4 (0x0001)  
	bool                                               bClientResimulateRootMotion : 1;                            // 0x0330:5 (0x0001)  
	bool                                               bClientResimulateRootMotionSources : 1;                     // 0x0330:6 (0x0001)  
	bool                                               bSimGravityDisabled : 1;                                    // 0x0330:7 (0x0001)  
	bool                                               bClientCheckEncroachmentOnNetUpdate : 1;                    // 0x0331:0 (0x0001)  
	bool                                               bServerMoveIgnoreRootMotion : 1;                            // 0x0331:1 (0x0001)  
	bool                                               bWasJumping : 1;                                            // 0x0331:2 (0x0001)  
	unsigned char                                      UnknownData02_4[0x2];                                       // 0x0332   (0x0002)  MISSED
	float                                              JumpKeyHoldTime;                                            // 0x0334   (0x0004)  
	float                                              JumpForceTimeRemaining;                                     // 0x0338   (0x0004)  
	float                                              ProxyJumpForceStartedTime;                                  // 0x033C   (0x0004)  
	float                                              JumpMaxHoldTime;                                            // 0x0340   (0x0004)  
	int32_t                                            JumpMaxCount;                                               // 0x0344   (0x0004)  
	int32_t                                            JumpCurrentCount;                                           // 0x0348   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x034C   (0x0004)  MISSED
	SDK_UNDEFINED(16,166) /* FMulticastInlineDelegate */ __um(OnReachedJumpApex);                                  // 0x0350   (0x0010)  
	unsigned char                                      UnknownData04_5[0x10];                                      // 0x0360   (0x0010)  MISSED
	SDK_UNDEFINED(16,167) /* FMulticastInlineDelegate */ __um(MovementModeChangedDelegate);                        // 0x0370   (0x0010)  
	SDK_UNDEFINED(16,168) /* FMulticastInlineDelegate */ __um(OnCharacterMovementUpdated);                         // 0x0380   (0x0010)  
	FRootMotionSourceGroup                             SavedRootMotion;                                            // 0x0390   (0x0038)  
	unsigned char                                      UnknownData05_5[0x8];                                       // 0x03C8   (0x0008)  MISSED
	FRootMotionMovementParams                          ClientRootMotionParams;                                     // 0x03D0   (0x0040)  
	TArray<FSimulatedRootMotionReplicatedMove>         RootMotionRepMoves;                                         // 0x0410   (0x0010)  
	FRepRootMotionMontage                              RepRootMotion;                                              // 0x0420   (0x0098)  


	/// Functions
	// Function /Script/Engine.Character.UnCrouch
	// void UnCrouch(bool bClientSimulation);                                                                                // [0x2ec4f70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.StopJumping
	// void StopJumping();                                                                                                   // [0x2ec4f50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.StopAnimMontage
	// void StopAnimMontage(class UAnimMontage* AnimMontage);                                                                // [0x2ec4ec0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.ServerMoveOld
	// void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, char OldMoveFlags);                            // [0x2ec4a20] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveNoBase
	// void ServerMoveNoBase(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // [0x2ec47a0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDualNoBase
	// void ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // [0x2ec43e0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDualHybridRootMotion
	// void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x2ec3f90] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDual
	// void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x2ec3b40] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMove
	// void ServerMove(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x2ec3830] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.RootMotionDebugClientPrintOnScreen
	// void RootMotionDebugClientPrintOnScreen(FString inString);                                                            // [0x2ec3790] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.PlayAnimMontage
	// float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);                     // [0x2ec3600] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.OnWalkingOffLedge
	// void OnWalkingOffLedge(FVector& PreviousFloorImpactNormal, FVector& PreviousFloorContactNormal, FVector& PreviousLocation, float TimeDelta); // [0x2ec3440] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Character.OnRep_RootMotion
	// void OnRep_RootMotion();                                                                                              // [0x2ec3420] Final|Native|Public  
	// Function /Script/Engine.Character.OnRep_ReplicatedBasedMovement
	// void OnRep_ReplicatedBasedMovement();                                                                                 // [0x2ec3400] Native|Public        
	// Function /Script/Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp
	// void OnRep_ReplayLastTransformUpdateTimeStamp();                                                                      // [0x2ec33e0] Final|Native|Public  
	// Function /Script/Engine.Character.OnRep_IsCrouched
	// void OnRep_IsCrouched();                                                                                              // [0x2ec33c0] Native|Public        
	// Function /Script/Engine.Character.OnLaunched
	// void OnLaunched(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                           // [0x15dd8c0] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Character.OnLanded
	// void OnLanded(FHitResult& Hit);                                                                                       // [0x15dd8c0] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Engine.Character.OnJumped
	// void OnJumped();                                                                                                      // [0x2ec33a0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.LaunchCharacter
	// void LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                      // [0x2ec3280] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Character.K2_UpdateCustomMovement
	// void K2_UpdateCustomMovement(float DeltaTime);                                                                        // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnStartCrouch
	// void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                          // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnMovementModeChanged
	// void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, char PrevCustomMode, char NewCustomMode); // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnEndCrouch
	// void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                            // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.Jump
	// void Jump();                                                                                                          // [0x2ec1bc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.IsPlayingRootMotion
	// bool IsPlayingRootMotion();                                                                                           // [0x2ec1b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.IsPlayingNetworkedRootMotionMontage
	// bool IsPlayingNetworkedRootMotionMontage();                                                                           // [0x2ec1b60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.IsJumpProvidingForce
	// bool IsJumpProvidingForce();                                                                                          // [0x2ec1b30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.HasAnyRootMotion
	// bool HasAnyRootMotion();                                                                                              // [0x2ec1b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetCurrentMontage
	// class UAnimMontage* GetCurrentMontage();                                                                              // [0x2ec1470] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.GetBaseTranslationOffset
	// FVector GetBaseTranslationOffset();                                                                                   // [0x2ec1440] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetBaseRotationOffsetRotator
	// FRotator GetBaseRotationOffsetRotator();                                                                              // [0x2ec13f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetAnimRootMotionTranslationScale
	// float GetAnimRootMotionTranslationScale();                                                                            // [0x2ec1320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.Crouch
	// void Crouch(bool bClientSimulation);                                                                                  // [0x2ec1290] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.ClientVeryShortAdjustPosition
	// void ClientVeryShortAdjustPosition(float Timestamp, FVector NewLoc, class UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x2ec0f40] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientCheatWalk
	// void ClientCheatWalk();                                                                                               // [0x2ec0f20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientCheatGhost
	// void ClientCheatGhost();                                                                                              // [0x2ec0f00] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientCheatFly
	// void ClientCheatFly();                                                                                                // [0x2ec0ee0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientAdjustRootMotionSourcePosition
	// void ClientAdjustRootMotionSourcePosition(float Timestamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x2ec0a40] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAdjustRootMotionPosition
	// void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x2ec0750] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAdjustPosition
	// void ClientAdjustPosition(float Timestamp, FVector NewLoc, FVector NewVel, class UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x2ec04e0] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAckGoodMove
	// void ClientAckGoodMove(float Timestamp);                                                                              // [0x2ec0460] Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.Character.CanJumpInternal
	// bool CanJumpInternal();                                                                                               // [0x2ec0430] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/Engine.Character.CanJump
	// bool CanJump();                                                                                                       // [0x2ec0400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.CanCrouch
	// bool CanCrouch();                                                                                                     // [0x2ec03d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.CacheInitialMeshOffset
	// void CacheInitialMeshOffset(FVector MeshRelativeLocation, FRotator MeshRelativeRotation);                             // [0x2ec02f0] Native|Public|HasDefaults|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.Controller
/// Size: 0x0078 (0x000220 - 0x000298)
class AController : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0220   (0x0008)  MISSED
	class APlayerState*                                PlayerState;                                                // 0x0228   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0230   (0x0008)  MISSED
	SDK_UNDEFINED(16,169) /* FMulticastInlineDelegate */ __um(OnInstigatedAnyDamage);                              // 0x0238   (0x0010)  
	FName                                              StateName;                                                  // 0x0248   (0x0008)  
	class APawn*                                       Pawn;                                                       // 0x0250   (0x0008)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0258   (0x0008)  MISSED
	class ACharacter*                                  Character;                                                  // 0x0260   (0x0008)  
	class USceneComponent*                             TransformComponent;                                         // 0x0268   (0x0008)  
	unsigned char                                      UnknownData03_5[0x18];                                      // 0x0270   (0x0018)  MISSED
	FRotator                                           ControlRotation;                                            // 0x0288   (0x000C)  
	bool                                               bAttachToPawn : 1;                                          // 0x0294:0 (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0295   (0x0003)  MISSED


	/// Functions
	// Function /Script/Engine.Controller.UnPossess
	// void UnPossess();                                                                                                     // [0x2ecf2d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.StopMovement
	// void StopMovement();                                                                                                  // [0x2ecf2b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetInitialLocationAndRotation
	// void SetInitialLocationAndRotation(FVector& NewLocation, FRotator& NewRotation);                                      // [0x2ecf1c0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Controller.SetIgnoreMoveInput
	// void SetIgnoreMoveInput(bool bNewMoveInput);                                                                          // [0x2ecf130] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetIgnoreLookInput
	// void SetIgnoreLookInput(bool bNewLookInput);                                                                          // [0x2ecf0a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetControlRotation
	// void SetControlRotation(FRotator& NewRotation);                                                                       // [0x2ecf010] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreMoveInput
	// void ResetIgnoreMoveInput();                                                                                          // [0x2eceff0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreLookInput
	// void ResetIgnoreLookInput();                                                                                          // [0x2ecefd0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreInputFlags
	// void ResetIgnoreInputFlags();                                                                                         // [0x2ecefb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ReceiveUnPossess
	// void ReceiveUnPossess(class APawn* UnpossessedPawn);                                                                  // [0x15dd8c0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.ReceivePossess
	// void ReceivePossess(class APawn* PossessedPawn);                                                                      // [0x15dd8c0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.ReceiveInstigatedAnyDamage
	// void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser); // [0x15dd8c0] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.Possess
	// void Possess(class APawn* InPawn);                                                                                    // [0x2ecef30] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.OnRep_PlayerState
	// void OnRep_PlayerState();                                                                                             // [0x2ecef10] Native|Public        
	// Function /Script/Engine.Controller.OnRep_Pawn
	// void OnRep_Pawn();                                                                                                    // [0x69e440] Native|Public        
	// Function /Script/Engine.Controller.LineOfSightTo
	// bool LineOfSightTo(class AActor* Other, FVector ViewPoint, bool bAlternateChecks);                                    // [0x2ecedf0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.K2_GetPawn
	// class APawn* K2_GetPawn();                                                                                            // [0x2ecedc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsPlayerController
	// bool IsPlayerController();                                                                                            // [0x2eced90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                            // [0x2eced60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLookInputIgnored
	// bool IsLookInputIgnored();                                                                                            // [0x2eced30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLocalPlayerController
	// bool IsLocalPlayerController();                                                                                       // [0x2ecece0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLocalController
	// bool IsLocalController();                                                                                             // [0x2ececb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetViewTarget
	// class AActor* GetViewTarget();                                                                                        // [0x2ecec80] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetDesiredRotation
	// FRotator GetDesiredRotation();                                                                                        // [0x2ece8b0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetControlRotation
	// FRotator GetControlRotation();                                                                                        // [0x2ece640] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.ClientSetRotation
	// void ClientSetRotation(FRotator NewRotation, bool bResetCamera);                                                      // [0x2ece480] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Controller.ClientSetLocation
	// void ClientSetLocation(FVector NewLocation, FRotator NewRotation);                                                    // [0x2ece3a0] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Controller.CastToPlayerController
	// class APlayerController* CastToPlayerController();                                                                    // [0x2ece370] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.ActiveForceFeedbackEffect
/// Size: 0x0018 (0x000000 - 0x000018)
struct FActiveForceFeedbackEffect
{ 
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                        // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0008   (0x0010)  MISSED
};

/// Class /Script/Engine.PlayerController
/// Size: 0x02D8 (0x000298 - 0x000570)
class APlayerController : public AController
{ 
public:
	class UPlayer*                                     Player;                                                     // 0x0298   (0x0008)  
	class APawn*                                       AcknowledgedPawn;                                           // 0x02A0   (0x0008)  
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                    // 0x02A8   (0x0008)  
	class AHUD*                                        MyHUD;                                                      // 0x02B0   (0x0008)  
	class APlayerCameraManager*                        PlayerCameraManager;                                        // 0x02B8   (0x0008)  
	class UClass*                                      PlayerCameraManagerClass;                                   // 0x02C0   (0x0008)  
	bool                                               bAutoManageActiveCameraTarget;                              // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x02C9   (0x0003)  MISSED
	FRotator                                           TargetViewRotation;                                         // 0x02CC   (0x000C)  
	unsigned char                                      UnknownData01_5[0xC];                                       // 0x02D8   (0x000C)  MISSED
	float                                              SmoothTargetViewRotationSpeed;                              // 0x02E4   (0x0004)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x02E8   (0x0008)  MISSED
	TArray<class AActor*>                              HiddenActors;                                               // 0x02F0   (0x0010)  
	SDK_UNDEFINED(16,170) /* TArray<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(HiddenPrimitiveComponents);      // 0x0300   (0x0010)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x0310   (0x0004)  MISSED
	float                                              LastSpectatorStateSynchTime;                                // 0x0314   (0x0004)  
	FVector                                            LastSpectatorSyncLocation;                                  // 0x0318   (0x000C)  
	FRotator                                           LastSpectatorSyncRotation;                                  // 0x0324   (0x000C)  
	int32_t                                            ClientCap;                                                  // 0x0330   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x0334   (0x0004)  MISSED
	class UCheatManager*                               CheatManager;                                               // 0x0338   (0x0008)  
	class UClass*                                      CheatClass;                                                 // 0x0340   (0x0008)  
	class UPlayerInput*                                PlayerInput;                                                // 0x0348   (0x0008)  
	TArray<FActiveForceFeedbackEffect>                 ActiveForceFeedbackEffects;                                 // 0x0350   (0x0010)  
	unsigned char                                      UnknownData05_5[0x70];                                      // 0x0360   (0x0070)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x03D0:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x03D0:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x03D0:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x03D0:3 (0x0001)  MISSED
	bool                                               bPlayerIsWaiting : 1;                                       // 0x03D0:4 (0x0001)  
	unsigned char                                      UnknownData10_4[0x3];                                       // 0x03D1   (0x0003)  MISSED
	char                                               NetPlayerIndex;                                             // 0x03D4   (0x0001)  
	unsigned char                                      UnknownData11_5[0x3B];                                      // 0x03D5   (0x003B)  MISSED
	class UNetConnection*                              PendingSwapConnection;                                      // 0x0410   (0x0008)  
	class UNetConnection*                              NetConnection;                                              // 0x0418   (0x0008)  
	unsigned char                                      UnknownData12_5[0xC];                                       // 0x0420   (0x000C)  MISSED
	float                                              InputYawScale;                                              // 0x042C   (0x0004)  
	float                                              InputPitchScale;                                            // 0x0430   (0x0004)  
	float                                              InputRollScale;                                             // 0x0434   (0x0004)  
	bool                                               bShowMouseCursor : 1;                                       // 0x0438:0 (0x0001)  
	bool                                               bEnableClickEvents : 1;                                     // 0x0438:1 (0x0001)  
	bool                                               bEnableTouchEvents : 1;                                     // 0x0438:2 (0x0001)  
	bool                                               bEnableMouseOverEvents : 1;                                 // 0x0438:3 (0x0001)  
	bool                                               bEnableTouchOverEvents : 1;                                 // 0x0438:4 (0x0001)  
	bool                                               bForceFeedbackEnabled : 1;                                  // 0x0438:5 (0x0001)  
	unsigned char                                      UnknownData13_4[0x3];                                       // 0x0439   (0x0003)  MISSED
	float                                              ForceFeedbackScale;                                         // 0x043C   (0x0004)  
	TArray<FKey>                                       ClickEventKeys;                                             // 0x0440   (0x0010)  
	SDK_UNDEFINED(1,171) /* TEnumAsByte<EMouseCursor> */ __um(DefaultMouseCursor);                                 // 0x0450   (0x0001)  
	SDK_UNDEFINED(1,172) /* TEnumAsByte<EMouseCursor> */ __um(CurrentMouseCursor);                                 // 0x0451   (0x0001)  
	SDK_UNDEFINED(1,173) /* TEnumAsByte<ECollisionChannel> */ __um(DefaultClickTraceChannel);                      // 0x0452   (0x0001)  
	SDK_UNDEFINED(1,174) /* TEnumAsByte<ECollisionChannel> */ __um(CurrentClickTraceChannel);                      // 0x0453   (0x0001)  
	float                                              HitResultTraceDistance;                                     // 0x0454   (0x0004)  
	uint16_t                                           SeamlessTravelCount;                                        // 0x0458   (0x0002)  
	uint16_t                                           LastCompletedSeamlessTravelCount;                           // 0x045A   (0x0002)  
	unsigned char                                      UnknownData14_5[0x74];                                      // 0x045C   (0x0074)  MISSED
	class UInputComponent*                             InactiveStateInputComponent;                                // 0x04D0   (0x0008)  
	unsigned char                                      UnknownBit15 : 1;                                           // 0x04D8:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit16 : 1;                                           // 0x04D8:1 (0x0001)  MISSED
	bool                                               bShouldPerformFullTickWhenPaused : 1;                       // 0x04D8:2 (0x0001)  
	unsigned char                                      UnknownData17_4[0x17];                                      // 0x04D9   (0x0017)  MISSED
	class UTouchInterface*                             CurrentTouchInterface;                                      // 0x04F0   (0x0008)  
	unsigned char                                      UnknownData18_5[0x50];                                      // 0x04F8   (0x0050)  MISSED
	class ASpectatorPawn*                              SpectatorPawn;                                              // 0x0548   (0x0008)  
	unsigned char                                      UnknownData19_5[0x4];                                       // 0x0550   (0x0004)  MISSED
	bool                                               bIsLocalPlayerController;                                   // 0x0554   (0x0001)  
	unsigned char                                      UnknownData20_5[0x3];                                       // 0x0555   (0x0003)  MISSED
	FVector                                            SpawnLocation;                                              // 0x0558   (0x000C)  
	unsigned char                                      UnknownData21_6[0xC];                                       // 0x0564   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.PlayerController.WasInputKeyJustReleased
	// bool WasInputKeyJustReleased(FKey Key);                                                                               // [0x2fa5ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.WasInputKeyJustPressed
	// bool WasInputKeyJustPressed(FKey Key);                                                                                // [0x2fa59e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.ToggleSpeaking
	// void ToggleSpeaking(bool bInSpeaking);                                                                                // [0x2fa5950] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.TestServerLevelVisibilityChange
	// void TestServerLevelVisibilityChange(FName PackageName, FName Filename);                                              // [0xecb2d0] Final|Exec|Native|Private 
	// Function /Script/Engine.PlayerController.SwitchLevel
	// void SwitchLevel(FString URL);                                                                                        // [0x2fa58b0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.StopHapticEffect
	// void StopHapticEffect(EControllerHand Hand);                                                                          // [0x2fa5830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.StartFire
	// void StartFire(char FireModeNum);                                                                                     // [0x2fa5260] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.SetVirtualJoystickVisibility
	// void SetVirtualJoystickVisibility(bool bVisible);                                                                     // [0x2fa5000] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetViewTargetWithBlend
	// void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // [0x2fa4e80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetName
	// void SetName(FString S);                                                                                              // [0x2fa4de0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.SetMouseLocation
	// void SetMouseLocation(int32_t X, int32_t Y);                                                                          // [0x2fa4d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetMouseCursorWidget
	// void SetMouseCursorWidget(TEnumAsByte<EMouseCursor> Cursor, class UUserWidget* CursorWidget);                         // [0x2fa4c50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetHapticsByValue
	// void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand);                                       // [0x2fa4a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetDisableHaptics
	// void SetDisableHaptics(bool bNewDisabled);                                                                            // [0x2fa4980] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetControllerLightColor
	// void SetControllerLightColor(FColor Color);                                                                           // [0x2fa4910] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetCinematicMode
	// void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x2fa4750] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetAudioListenerOverride
	// void SetAudioListenerOverride(class USceneComponent* AttachToComponent, FVector Location, FRotator Rotation);         // [0x2fa4630] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetAudioListenerAttenuationOverride
	// void SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, FVector AttenuationLocationOVerride); // [0x2fa4560] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ServerViewSelf
	// void ServerViewSelf(FViewTargetTransitionParams TransitionParams);                                                    // [0x2fa4470] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerViewPrevPlayer
	// void ServerViewPrevPlayer();                                                                                          // [0x2fa4420] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerViewNextPlayer
	// void ServerViewNextPlayer();                                                                                          // [0x2fa43d0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerVerifyViewTarget
	// void ServerVerifyViewTarget();                                                                                        // [0x2fa4380] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
	// void ServerUpdateMultipleLevelsVisibility(TArray<FUpdateLevelVisibilityLevelInfo> LevelVisibilities);                 // [0x2fa42c0] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateLevelVisibility
	// void ServerUpdateLevelVisibility(FUpdateLevelVisibilityLevelInfo LevelVisibility);                                    // [0x2fa4200] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateCamera
	// void ServerUpdateCamera(FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw);                                          // [0x2fa40e0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUnmutePlayer
	// void ServerUnmutePlayer(FUniqueNetIdRepl PlayerID);                                                                   // [0x2fa3f80] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerToggleAILogging
	// void ServerToggleAILogging();                                                                                         // [0x2fa3f30] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerShortTimeout
	// void ServerShortTimeout();                                                                                            // [0x2fa3ee0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorWaiting
	// void ServerSetSpectatorWaiting(bool bWaiting);                                                                        // [0x2fa3e20] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorLocation
	// void ServerSetSpectatorLocation(FVector NewLoc, FRotator NewRot);                                                     // [0x2fa3cf0] Net|Native|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/Engine.PlayerController.ServerRestartPlayer
	// void ServerRestartPlayer();                                                                                           // [0x2fa3ca0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerPause
	// void ServerPause();                                                                                                   // [0x2fa3c50] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerNotifyLoadedWorld
	// void ServerNotifyLoadedWorld(FName WorldPackageName);                                                                 // [0x2fa3ba0] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerMutePlayer
	// void ServerMutePlayer(FUniqueNetIdRepl PlayerID);                                                                     // [0x2fa3a40] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerExecRPC
	// void ServerExecRPC(FString Msg);                                                                                      // [0x2fa3980] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerExec
	// void ServerExec(FString Msg);                                                                                         // [0x2fa38e0] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossessionReliable
	// void ServerCheckClientPossessionReliable();                                                                           // [0x2fa3890] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossession
	// void ServerCheckClientPossession();                                                                                   // [0x2fa3840] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerChangeName
	// void ServerChangeName(FString S);                                                                                     // [0x2fa3780] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCamera
	// void ServerCamera(FName NewMode);                                                                                     // [0x2fa36c0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerAcknowledgePossession
	// void ServerAcknowledgePossession(class APawn* P);                                                                     // [0x2fa3600] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.SendToConsole
	// void SendToConsole(FString Command);                                                                                  // [0x2fa3560] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.RestartLevel
	// void RestartLevel();                                                                                                  // [0x2fa3540] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.ResetControllerLightColor
	// void ResetControllerLightColor();                                                                                     // [0x2fa3520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ProjectWorldLocationToScreen
	// bool ProjectWorldLocationToScreen(FVector WorldLocation, FVector2D& ScreenLocation, bool bPlayerViewportRelative);    // [0x2fa3350] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.PlayHapticEffect
	// void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop); // [0x2fa3200] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.PlayDynamicForceFeedback
	// void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, FLatentActionInfo LatentInfo); // [0x2fa2f80] Final|Native|Private|BlueprintCallable 
	// Function /Script/Engine.PlayerController.Pause
	// void Pause();                                                                                                         // [0x2fa28c0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.OnServerStartedVisualLogger
	// void OnServerStartedVisualLogger(bool bIsLogging);                                                                    // [0x2fa2830] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.LocalTravel
	// void LocalTravel(FString URL);                                                                                        // [0x2fa2790] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.K2_ClientPlayForceFeedback
	// void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // [0x2fa25e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.IsInputKeyDown
	// bool IsInputKeyDown(FKey Key);                                                                                        // [0x2fa24f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetViewportSize
	// void GetViewportSize(int32_t& SizeX, int32_t& SizeY);                                                                 // [0x2fa2410] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetSpectatorPawn
	// class ASpectatorPawn* GetSpectatorPawn();                                                                             // [0x2fa23f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetMousePosition
	// bool GetMousePosition(float& LocationX, float& LocationY);                                                            // [0x2fa22a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputVectorKeyState
	// FVector GetInputVectorKeyState(FKey Key);                                                                             // [0x2fa21a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputTouchState
	// void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // [0x2fa2020] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputMouseDelta
	// void GetInputMouseDelta(float& DeltaX, float& DeltaY);                                                                // [0x2fa1f40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputMotionState
	// void GetInputMotionState(FVector& Tilt, FVector& RotationRate, FVector& Gravity, FVector& Acceleration);              // [0x2fa1db0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputKeyTimeDown
	// float GetInputKeyTimeDown(FKey Key);                                                                                  // [0x2fa1cc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputAnalogStickState
	// void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);          // [0x2fa1ba0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputAnalogKeyState
	// float GetInputAnalogKeyState(FKey Key);                                                                               // [0x2fa1ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHUD
	// class AHUD* GetHUD();                                                                                                 // [0x2fa0eb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerForObjects
	// bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // [0x2fa18f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerByChannel
	// bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, ETraceTypeQuery TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x2fa1750] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFinger
	// bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x2fa15b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorForObjects
	// bool GetHitResultUnderCursorForObjects(TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // [0x2fa1430] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorByChannel
	// bool GetHitResultUnderCursorByChannel(ETraceTypeQuery TraceChannel, bool bTraceComplex, FHitResult& HitResult);       // [0x2fa12b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursor
	// bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x2fa1130] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetFocalLocation
	// FVector GetFocalLocation();                                                                                           // [0x2fa0e70] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.FOV
	// void FOV(float NewFOV);                                                                                               // [0x2fa0c90] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.EnableCheats
	// void EnableCheats();                                                                                                  // [0x2fa0c70] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.DeprojectScreenPositionToWorld
	// bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, FVector& WorldLocation, FVector& WorldDirection);   // [0x2fa0af0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.DeprojectMousePositionToWorld
	// bool DeprojectMousePositionToWorld(FVector& WorldLocation, FVector& WorldDirection);                                  // [0x2fa09f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.ConsoleKey
	// void ConsoleKey(FKey Key);                                                                                            // [0x2fa0910] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.ClientWasKicked
	// void ClientWasKicked(FText KickReason);                                                                               // [0x2fa0850] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientVoiceHandshakeComplete
	// void ClientVoiceHandshakeComplete();                                                                                  // [0x2fa0830] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
	// void ClientUpdateMultipleLevelsStreamingStatus(TArray<FUpdateLevelStreamingLevelStatus> LevelStatuses);               // [0x2fa0790] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUpdateLevelStreamingStatus
	// void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex); // [0x2fa05e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUnmutePlayer
	// void ClientUnmutePlayer(FUniqueNetIdRepl PlayerID);                                                                   // [0x2fa04c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientTravelInternal
	// void ClientTravelInternal(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);    // [0x2fa0350] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientTravel
	// void ClientTravel(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);            // [0x2fa01e0] Final|Native|Public|HasDefaults 
	// Function /Script/Engine.PlayerController.ClientTeamMessage
	// void ClientTeamMessage(class APlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);              // [0x2fa0080] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStopForceFeedback
	// void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FName Tag);                             // [0x2f9ffb0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraShakesFromSource
	// void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);         // [0x2f9fee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraShake
	// void ClientStopCameraShake(class UClass* Shake, bool bImmediately);                                                   // [0x2f9fe10] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraAnim
	// void ClientStopCameraAnim(class UCameraAnim* AnimToStop);                                                             // [0x259efc0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStartOnlineSession
	// void ClientStartOnlineSession();                                                                                      // [0x2f9fdf0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSpawnCameraLensEffect
	// void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);                                               // [0x2f9fd60] Net|Native|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSetViewTarget
	// void ClientSetViewTarget(class AActor* A, FViewTargetTransitionParams TransitionParams);                              // [0x2f9fc70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetSpectatorWaiting
	// void ClientSetSpectatorWaiting(bool bWaiting);                                                                        // [0x2f9fbe0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetHUD
	// void ClientSetHUD(class UClass* NewHUDClass);                                                                         // [0x2f9fb50] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSetForceMipLevelsToBeResident
	// void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // [0x2f9fa50] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCinematicMode
	// void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);    // [0x2f9f8e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCameraMode
	// void ClientSetCameraMode(FName NewCamMode);                                                                           // [0x2f9f850] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCameraFade
	// void ClientSetCameraFade(bool bEnableFading, FColor FadeColor, FVector2D FadeAlpha, float FadeTime, bool bFadeAudio); // [0x2f9f6c0] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetBlockOnAsyncLoading
	// void ClientSetBlockOnAsyncLoading();                                                                                  // [0xe65420] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenuWithTextReason
	// void ClientReturnToMainMenuWithTextReason(FText ReturnReason);                                                        // [0x2f9f600] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenu
	// void ClientReturnToMainMenu(FString ReturnReason);                                                                    // [0x2f9f560] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRetryClientRestart
	// void ClientRetryClientRestart(class APawn* NewPawn);                                                                  // [0x2f9f4d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRestart
	// void ClientRestart(class APawn* NewPawn);                                                                             // [0x2f9f440] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReset
	// void ClientReset();                                                                                                   // [0x2f9f420] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRepObjRef
	// void ClientRepObjRef(class UObject* Object);                                                                          // [0xe4bc50] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReceiveLocalizedMessage
	// void ClientReceiveLocalizedMessage(class UClass* Message, int32_t Switch, class APlayerState* RelatedPlayerState, class APlayerState* RelatedPlayerState, class UObject* OptionalObject); // [0x2f9f2a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPrestreamTextures
	// void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // [0x2f9f150] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPrepareMapChange
	// void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);                                                // [0x2f9f040] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlaySoundAtLocation
	// void ClientPlaySoundAtLocation(class USoundBase* Sound, FVector Location, float VolumeMultiplier, float PitchMultiplier); // [0x2f9eef0] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlaySound
	// void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);                         // [0x2f9edf0] Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlayForceFeedback_Internal
	// void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, FForceFeedbackParameters Params); // [0x2f9ed00] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlayCameraShakeFromSource
	// void ClientPlayCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent);        // [0x2f9ec40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientPlayCameraShake
	// void ClientPlayCameraShake(class UClass* Shake, float Scale, ECameraAnimPlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x2f9eae0] Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientPlayCameraAnim
	// void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, ECameraAnimPlaySpace Space, FRotator CustomPlaySpace); // [0x2f9e840] Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientMutePlayer
	// void ClientMutePlayer(FUniqueNetIdRepl PlayerID);                                                                     // [0x2f9e720] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientMessage
	// void ClientMessage(FString S, FName Type, float MsgLifeTime);                                                         // [0x2f9e600] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientIgnoreMoveInput
	// void ClientIgnoreMoveInput(bool bIgnore);                                                                             // [0x2f9e570] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientIgnoreLookInput
	// void ClientIgnoreLookInput(bool bIgnore);                                                                             // [0x2f9e4e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientGotoState
	// void ClientGotoState(FName NewState);                                                                                 // [0x2f9e450] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientGameEnded
	// void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);                                                     // [0x2f9e380] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientForceGarbageCollection
	// void ClientForceGarbageCollection();                                                                                  // [0x2f9e360] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientFlushLevelStreaming
	// void ClientFlushLevelStreaming();                                                                                     // [0x2f9e340] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientEndOnlineSession
	// void ClientEndOnlineSession();                                                                                        // [0x2f9e320] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientEnableNetworkVoice
	// void ClientEnableNetworkVoice(bool bEnable);                                                                          // [0x2f9e290] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientCommitMapChange
	// void ClientCommitMapChange();                                                                                         // [0x2f9e270] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientClearCameraLensEffects
	// void ClientClearCameraLensEffects();                                                                                  // [0x2f9e250] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientCapBandwidth
	// void ClientCapBandwidth(int32_t Cap);                                                                                 // [0x2f9e1c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientCancelPendingMapChange
	// void ClientCancelPendingMapChange();                                                                                  // [0x2f9e1a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientAddTextureStreamingLoc
	// void ClientAddTextureStreamingLoc(FVector InLoc, float Duration, bool bOverrideLocation);                             // [0x2f9e080] Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClearAudioListenerOverride
	// void ClearAudioListenerOverride();                                                                                    // [0x2f9e060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClearAudioListenerAttenuationOverride
	// void ClearAudioListenerAttenuationOverride();                                                                         // [0x2f9e040] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.CanRestartPlayer
	// bool CanRestartPlayer();                                                                                              // [0x2f9e010] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.Camera
	// void Camera(FName NewMode);                                                                                           // [0x2f9df80] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.AddYawInput
	// void AddYawInput(float Val);                                                                                          // [0x2f9df00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.AddRollInput
	// void AddRollInput(float Val);                                                                                         // [0x2f9de80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.AddPitchInput
	// void AddPitchInput(float Val);                                                                                        // [0x2f9de00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ActivateTouchInterface
	// void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);                                                // [0x2f9dc30] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.CheatManager
/// Size: 0x0050 (0x000028 - 0x000078)
class UCheatManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class ADebugCameraController*                      DebugCameraControllerRef;                                   // 0x0028   (0x0008)  
	class UClass*                                      DebugCameraControllerClass;                                 // 0x0030   (0x0008)  
	unsigned char                                      UnknownData01_6[0x40];                                      // 0x0038   (0x0040)  MISSED


	/// Functions
	// Function /Script/Engine.CheatManager.Walk
	// void Walk();                                                                                                          // [0x2116f90] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.ViewSelf
	// void ViewSelf();                                                                                                      // [0x2ecb190] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewPlayer
	// void ViewPlayer(FString S);                                                                                           // [0x2ecb0f0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewClass
	// void ViewClass(class UClass* DesiredClass);                                                                           // [0x25a0af0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewActor
	// void ViewActor(FName ActorName);                                                                                      // [0x2ecb060] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.UpdateSafeArea
	// void UpdateSafeArea();                                                                                                // [0x2ecb040] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
	// void ToggleServerStatReplicatorUpdateStatNet();                                                                       // [0x2ecb020] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
	// void ToggleServerStatReplicatorClientOverwrite();                                                                     // [0x2ecb000] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleDebugCamera
	// void ToggleDebugCamera();                                                                                             // [0xa28590] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ToggleAILogging
	// void ToggleAILogging();                                                                                               // [0xa28570] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.TestCollisionDistance
	// void TestCollisionDistance();                                                                                         // [0xa28530] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.Teleport
	// void Teleport();                                                                                                      // [0x2ecafe0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Summon
	// void Summon(FString ClassName);                                                                                       // [0x2ecaf40] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.StreamLevelOut
	// void StreamLevelOut(FName PackageName);                                                                               // [0x2e8c570] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.StreamLevelIn
	// void StreamLevelIn(FName PackageName);                                                                                // [0x2e88a60] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.SpawnServerStatReplicator
	// void SpawnServerStatReplicator();                                                                                     // [0x2ecaf20] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.Slomo
	// void Slomo(float NewTimeDilation);                                                                                    // [0x2ecaea0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.SetWorldOrigin
	// void SetWorldOrigin();                                                                                                // [0x2ecae80] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.SetMouseSensitivityToDefault
	// void SetMouseSensitivityToDefault();                                                                                  // [0xa28690] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ServerToggleAILogging
	// void ServerToggleAILogging();                                                                                         // [0x2ecada0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.CheatManager.ReceiveInitCheatManager
	// void ReceiveInitCheatManager();                                                                                       // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CheatManager.ReceiveEndPlay
	// void ReceiveEndPlay();                                                                                                // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CheatManager.PlayersOnly
	// void PlayersOnly();                                                                                                   // [0x2ecad80] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.OnlyLoadLevel
	// void OnlyLoadLevel(FName PackageName);                                                                                // [0x2e88af0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.LogLoc
	// void LogLoc();                                                                                                        // [0xa28a30] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.InvertMouse
	// void InvertMouse();                                                                                                   // [0x68c9c0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.God
	// void God();                                                                                                           // [0x681450] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Ghost
	// void Ghost();                                                                                                         // [0x2ebc1e0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.FreezeFrame
	// void FreezeFrame(float Delay);                                                                                        // [0x2ecad00] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Fly
	// void Fly();                                                                                                           // [0x26e12c0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.FlushLog
	// void FlushLog();                                                                                                      // [0xa2bb10] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.EnableDebugCamera
	// void EnableDebugCamera();                                                                                             // [0x718be0] Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DumpVoiceMutingState
	// void DumpVoiceMutingState();                                                                                          // [0xa287f0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpPartyState
	// void DumpPartyState();                                                                                                // [0xa28710] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpOnlineSessionState
	// void DumpOnlineSessionState();                                                                                        // [0xa2bad0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpGameConsoleVariables
	// void DumpGameConsoleVariables();                                                                                      // [0x2ecace0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DumpChatState
	// void DumpChatState();                                                                                                 // [0xa287d0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DisableDebugCamera
	// void DisableDebugCamera();                                                                                            // [0xa286f0] Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DestroyTarget
	// void DestroyTarget();                                                                                                 // [0x2ecacc0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DestroyServerStatReplicator
	// void DestroyServerStatReplicator();                                                                                   // [0x2ecaca0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DestroyPawns
	// void DestroyPawns(class UClass* aClass);                                                                              // [0x2ecac10] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DestroyAllPawnsExceptTarget
	// void DestroyAllPawnsExceptTarget();                                                                                   // [0x2ecabf0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DestroyAll
	// void DestroyAll(class UClass* aClass);                                                                                // [0x2ecab60] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepSize
	// void DebugCapsuleSweepSize(float HalfHeight, float Radius);                                                           // [0x2ecaa90] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepPawn
	// void DebugCapsuleSweepPawn();                                                                                         // [0xa287b0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepComplex
	// void DebugCapsuleSweepComplex(bool bTraceComplex);                                                                    // [0x2ecaa00] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepClear
	// void DebugCapsuleSweepClear();                                                                                        // [0xa28750] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepChannel
	// void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);                                                // [0x2eca980] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepCapture
	// void DebugCapsuleSweepCapture();                                                                                      // [0xa28730] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweep
	// void DebugCapsuleSweep();                                                                                             // [0xa2baf0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DamageTarget
	// void DamageTarget(float DamageAmount);                                                                                // [0x2eca900] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.CheatScript
	// void CheatScript(FString ScriptName);                                                                                 // [0x2eca820] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ChangeSize
	// void ChangeSize(float F);                                                                                             // [0xe46c80] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.BugItStringCreator
	// void BugItStringCreator(FVector ViewLocation, FRotator ViewRotation, FString& GoString, FString& LocString);          // [0x2eca660] Exec|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/Engine.CheatManager.BugItGo
	// void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);                                          // [0x2eca490] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.BugIt
	// void BugIt(FString ScreenShotDescription);                                                                            // [0x2eca3f0] Exec|Native|Public   
};

/// Class /Script/Engine.Commandlet
/// Size: 0x0058 (0x000028 - 0x000080)
class UCommandlet : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(16,175) /* FString */                __um(HelpDescription);                                      // 0x0028   (0x0010)  
	SDK_UNDEFINED(16,176) /* FString */                __um(HelpUsage);                                            // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,177) /* FString */                __um(HelpWebLink);                                          // 0x0048   (0x0010)  
	SDK_UNDEFINED(16,178) /* TArray<FString> */        __um(HelpParamNames);                                       // 0x0058   (0x0010)  
	SDK_UNDEFINED(16,179) /* TArray<FString> */        __um(HelpParamDescriptions);                                // 0x0068   (0x0010)  
	bool                                               IsServer : 1;                                               // 0x0078:0 (0x0001)  
	bool                                               IsClient : 1;                                               // 0x0078:1 (0x0001)  
	bool                                               IsEditor : 1;                                               // 0x0078:2 (0x0001)  
	bool                                               LogToConsole : 1;                                           // 0x0078:3 (0x0001)  
	bool                                               ShowErrorCount : 1;                                         // 0x0078:4 (0x0001)  
	bool                                               ShowProgress : 1;                                           // 0x0078:5 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Struct /Script/Engine.AudioComponentParam
/// Size: 0x0020 (0x000000 - 0x000020)
struct FAudioComponentParam
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	float                                              FloatParam;                                                 // 0x0008   (0x0004)  
	bool                                               BoolParam;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	int32_t                                            IntParam;                                                   // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	class USoundWave*                                  SoundWaveParam;                                             // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.BaseAttenuationSettings
/// Size: 0x00B0 (0x000000 - 0x0000B0)
struct FBaseAttenuationSettings
{ 
	EAttenuationDistanceModel                          DistanceAlgorithm;                                          // 0x0008   (0x0001)  
	SDK_UNDEFINED(1,180) /* TEnumAsByte<EAttenuationShape> */ __um(AttenuationShape);                              // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              dBAttenuationAtMax;                                         // 0x000C   (0x0004)  
	ENaturalSoundFalloffMode                           FalloffMode;                                                // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	FVector                                            AttenuationShapeExtents;                                    // 0x0014   (0x000C)  
	float                                              ConeOffset;                                                 // 0x0020   (0x0004)  
	float                                              FalloffDistance;                                            // 0x0024   (0x0004)  
	FRuntimeFloatCurve                                 CustomAttenuationCurve;                                     // 0x0028   (0x0088)  
};

/// Struct /Script/Engine.AttenuationSubmixSendSettings
/// Size: 0x00A8 (0x000000 - 0x0000A8)
struct FAttenuationSubmixSendSettings
{ 
	class USoundSubmix*                                Submix;                                                     // 0x0000   (0x0008)  
	ESubmixSendMethod                                  SubmixSendMethod;                                           // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              SubmixSendLevelMin;                                         // 0x000C   (0x0004)  
	float                                              SubmixSendLevelMax;                                         // 0x0010   (0x0004)  
	float                                              SubmixSendDistanceMin;                                      // 0x0014   (0x0004)  
	float                                              SubmixSendDistanceMax;                                      // 0x0018   (0x0004)  
	float                                              ManualSubmixSendLevel;                                      // 0x001C   (0x0004)  
	FRuntimeFloatCurve                                 CustomSubmixSendCurve;                                      // 0x0020   (0x0088)  
};

/// Struct /Script/Engine.SoundAttenuationPluginSettings
/// Size: 0x0030 (0x000000 - 0x000030)
struct FSoundAttenuationPluginSettings
{ 
	TArray<class USpatializationPluginSourceSettingsBase*> SpatializationPluginSettingsArray;                      // 0x0000   (0x0010)  
	TArray<class UOcclusionPluginSourceSettingsBase*>  OcclusionPluginSettingsArray;                               // 0x0010   (0x0010)  
	TArray<class UReverbPluginSourceSettingsBase*>     ReverbPluginSettingsArray;                                  // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.SoundAttenuationSettings
/// Size: 0x02F0 (0x0000B0 - 0x0003A0)
struct FSoundAttenuationSettings : FBaseAttenuationSettings
{ 
	bool                                               bAttenuate : 1;                                             // 0x00B0:0 (0x0001)  
	bool                                               bSpatialize : 1;                                            // 0x00B0:1 (0x0001)  
	bool                                               bAttenuateWithLPF : 1;                                      // 0x00B0:2 (0x0001)  
	bool                                               bEnableListenerFocus : 1;                                   // 0x00B0:3 (0x0001)  
	bool                                               bEnableFocusInterpolation : 1;                              // 0x00B0:4 (0x0001)  
	bool                                               bEnableOcclusion : 1;                                       // 0x00B0:5 (0x0001)  
	bool                                               bUseComplexCollisionForOcclusion : 1;                       // 0x00B0:6 (0x0001)  
	bool                                               bEnableReverbSend : 1;                                      // 0x00B0:7 (0x0001)  
	bool                                               bEnablePriorityAttenuation : 1;                             // 0x00B1:0 (0x0001)  
	bool                                               bApplyNormalizationToStereoSounds : 1;                      // 0x00B1:1 (0x0001)  
	bool                                               bEnableLogFrequencyScaling : 1;                             // 0x00B1:2 (0x0001)  
	bool                                               bEnableSubmixSends : 1;                                     // 0x00B1:3 (0x0001)  
	SDK_UNDEFINED(1,181) /* TEnumAsByte<ESoundSpatializationAlgorithm> */ __um(SpatializationAlgorithm);           // 0x00B2   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x00B3   (0x0001)  MISSED
	float                                              BinauralRadius;                                             // 0x00B4   (0x0004)  
	EAirAbsorptionMethod                               AbsorptionMethod;                                           // 0x00B8   (0x0001)  
	SDK_UNDEFINED(1,182) /* TEnumAsByte<ECollisionChannel> */ __um(OcclusionTraceChannel);                         // 0x00B9   (0x0001)  
	EReverbSendMethod                                  ReverbSendMethod;                                           // 0x00BA   (0x0001)  
	EPriorityAttenuationMethod                         PriorityAttenuationMethod;                                  // 0x00BB   (0x0001)  
	float                                              OmniRadius;                                                 // 0x00BC   (0x0004)  
	float                                              StereoSpread;                                               // 0x00C0   (0x0004)  
	float                                              LPFRadiusMin;                                               // 0x00C4   (0x0004)  
	float                                              LPFRadiusMax;                                               // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x00CC   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomLowpassAirAbsorptionCurve;                            // 0x00D0   (0x0088)  
	FRuntimeFloatCurve                                 CustomHighpassAirAbsorptionCurve;                           // 0x0158   (0x0088)  
	float                                              LPFFrequencyAtMin;                                          // 0x01E0   (0x0004)  
	float                                              LPFFrequencyAtMax;                                          // 0x01E4   (0x0004)  
	float                                              HPFFrequencyAtMin;                                          // 0x01E8   (0x0004)  
	float                                              HPFFrequencyAtMax;                                          // 0x01EC   (0x0004)  
	float                                              FocusAzimuth;                                               // 0x01F0   (0x0004)  
	float                                              NonFocusAzimuth;                                            // 0x01F4   (0x0004)  
	float                                              FocusDistanceScale;                                         // 0x01F8   (0x0004)  
	float                                              NonFocusDistanceScale;                                      // 0x01FC   (0x0004)  
	float                                              FocusPriorityScale;                                         // 0x0200   (0x0004)  
	float                                              NonFocusPriorityScale;                                      // 0x0204   (0x0004)  
	float                                              FocusVolumeAttenuation;                                     // 0x0208   (0x0004)  
	float                                              NonFocusVolumeAttenuation;                                  // 0x020C   (0x0004)  
	float                                              FocusAttackInterpSpeed;                                     // 0x0210   (0x0004)  
	float                                              FocusReleaseInterpSpeed;                                    // 0x0214   (0x0004)  
	float                                              OcclusionLowPassFilterFrequency;                            // 0x0218   (0x0004)  
	float                                              OcclusionVolumeAttenuation;                                 // 0x021C   (0x0004)  
	float                                              OcclusionInterpolationTime;                                 // 0x0220   (0x0004)  
	float                                              ReverbWetLevelMin;                                          // 0x0224   (0x0004)  
	float                                              ReverbWetLevelMax;                                          // 0x0228   (0x0004)  
	float                                              ReverbDistanceMin;                                          // 0x022C   (0x0004)  
	float                                              ReverbDistanceMax;                                          // 0x0230   (0x0004)  
	float                                              ManualReverbSendLevel;                                      // 0x0234   (0x0004)  
	FRuntimeFloatCurve                                 CustomReverbSendCurve;                                      // 0x0238   (0x0088)  
	TArray<FAttenuationSubmixSendSettings>             SubmixSendSettings;                                         // 0x02C0   (0x0010)  
	float                                              PriorityAttenuationMin;                                     // 0x02D0   (0x0004)  
	float                                              PriorityAttenuationMax;                                     // 0x02D4   (0x0004)  
	float                                              PriorityAttenuationDistanceMin;                             // 0x02D8   (0x0004)  
	float                                              PriorityAttenuationDistanceMax;                             // 0x02DC   (0x0004)  
	float                                              ManualPriorityAttenuation;                                  // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x02E4   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomPriorityAttenuationCurve;                             // 0x02E8   (0x0088)  
	FSoundAttenuationPluginSettings                    PluginSettings;                                             // 0x0370   (0x0030)  
};

/// Class /Script/Engine.AudioComponent
/// Size: 0x05E0 (0x0001F0 - 0x0007D0)
class UAudioComponent : public USceneComponent
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x01F0   (0x0008)  
	TArray<FAudioComponentParam>                       InstanceParameters;                                         // 0x01F8   (0x0010)  
	class USoundClass*                                 SoundClassOverride;                                         // 0x0208   (0x0008)  
	bool                                               bAutoDestroy : 1;                                           // 0x0210:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x0210:1 (0x0001)  
	bool                                               bShouldRemainActiveIfDropped : 1;                           // 0x0210:2 (0x0001)  
	bool                                               bAllowSpatialization : 1;                                   // 0x0210:3 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x0210:4 (0x0001)  
	bool                                               bOverrideSubtitlePriority : 1;                              // 0x0210:5 (0x0001)  
	bool                                               bIsUISound : 1;                                             // 0x0210:6 (0x0001)  
	bool                                               bEnableLowPassFilter : 1;                                   // 0x0210:7 (0x0001)  
	bool                                               bOverridePriority : 1;                                      // 0x0211:0 (0x0001)  
	bool                                               bSuppressSubtitles : 1;                                     // 0x0211:1 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x0211:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0211:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0211:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0211:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0211:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x0211:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x0212:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x0212:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0212:2 (0x0001)  MISSED
	bool                                               bAutoManageAttachment : 1;                                  // 0x0212:3 (0x0001)  
	unsigned char                                      UnknownData09_4[0x5];                                       // 0x0213   (0x0005)  MISSED
	FName                                              AudioComponentUserID;                                       // 0x0218   (0x0008)  
	float                                              PitchModulationMin;                                         // 0x0220   (0x0004)  
	float                                              PitchModulationMax;                                         // 0x0224   (0x0004)  
	float                                              VolumeModulationMin;                                        // 0x0228   (0x0004)  
	float                                              VolumeModulationMax;                                        // 0x022C   (0x0004)  
	float                                              VolumeMultiplier;                                           // 0x0230   (0x0004)  
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x0234   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x0238   (0x0004)  
	float                                              Priority;                                                   // 0x023C   (0x0004)  
	float                                              SubtitlePriority;                                           // 0x0240   (0x0004)  
	unsigned char                                      UnknownData10_5[0x4];                                       // 0x0244   (0x0004)  MISSED
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0248   (0x0008)  
	float                                              PitchMultiplier;                                            // 0x0250   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x0254   (0x0004)  
	unsigned char                                      UnknownData11_5[0x8];                                       // 0x0258   (0x0008)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0260   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0268   (0x03A0)  
	class USoundConcurrency*                           ConcurrencySettings;                                        // 0x0608   (0x0008)  
	SDK_UNDEFINED(80,183) /* TSet<USoundConcurrency*> */ __um(ConcurrencySet);                                     // 0x0610   (0x0050)  
	unsigned char                                      UnknownData12_5[0xC];                                       // 0x0660   (0x000C)  MISSED
	EAttachmentRule                                    AutoAttachLocationRule;                                     // 0x066C   (0x0001)  
	EAttachmentRule                                    AutoAttachRotationRule;                                     // 0x066D   (0x0001)  
	EAttachmentRule                                    AutoAttachScaleRule;                                        // 0x066E   (0x0001)  
	unsigned char                                      UnknownData13_5[0x1];                                       // 0x066F   (0x0001)  MISSED
	SDK_UNDEFINED(16,184) /* FMulticastInlineDelegate */ __um(OnAudioFinished);                                    // 0x0670   (0x0010)  
	unsigned char                                      UnknownData14_5[0x18];                                      // 0x0680   (0x0018)  MISSED
	SDK_UNDEFINED(16,185) /* FMulticastInlineDelegate */ __um(OnAudioPlaybackPercent);                             // 0x0698   (0x0010)  
	unsigned char                                      UnknownData15_5[0x18];                                      // 0x06A8   (0x0018)  MISSED
	SDK_UNDEFINED(16,186) /* FMulticastInlineDelegate */ __um(OnAudioSingleEnvelopeValue);                         // 0x06C0   (0x0010)  
	unsigned char                                      UnknownData16_5[0x18];                                      // 0x06D0   (0x0018)  MISSED
	SDK_UNDEFINED(16,187) /* FMulticastInlineDelegate */ __um(OnAudioMultiEnvelopeValue);                          // 0x06E8   (0x0010)  
	unsigned char                                      UnknownData17_5[0x18];                                      // 0x06F8   (0x0018)  MISSED
	FSoundModulation                                   Modulation;                                                 // 0x0710   (0x0010)  
	SDK_UNDEFINED(16,188) /* FDelegateProperty */      __um(OnQueueSubtitles);                                     // 0x0720   (0x0010)  
	SDK_UNDEFINED(8,189) /* TWeakObjectPtr<USceneComponent*> */ __um(AutoAttachParent);                            // 0x0730   (0x0008)  
	FName                                              AutoAttachSocketName;                                       // 0x0738   (0x0008)  
	unsigned char                                      UnknownData18_6[0x90];                                      // 0x0740   (0x0090)  MISSED


	/// Functions
	// Function /Script/Engine.AudioComponent.StopDelayed
	// void StopDelayed(float DelayTime);                                                                                    // [0x2ea9a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.Stop
	// void Stop();                                                                                                          // [0xa2f560] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetWaveParameter
	// void SetWaveParameter(FName InName, class USoundWave* InWave);                                                        // [0x2ea99b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetVolumeMultiplier
	// void SetVolumeMultiplier(float NewVolumeMultiplier);                                                                  // [0x2ea9930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetUISound
	// void SetUISound(bool bInUISound);                                                                                     // [0x2ea98a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSubmixSend
	// void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);                                                  // [0x2ea9750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSourceBusSendPreEffect
	// void SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);                      // [0x2ea9600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSourceBusSendPostEffect
	// void SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);                     // [0x2ea9530] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSound
	// void SetSound(class USoundBase* NewSound);                                                                            // [0x2ea94b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetPitchMultiplier
	// void SetPitchMultiplier(float NewPitchMultiplier);                                                                    // [0x2ea9320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetPaused
	// void SetPaused(bool bPause);                                                                                          // [0x2ea9290] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterFrequency
	// void SetLowPassFilterFrequency(float InLowPassFilterFrequency);                                                       // [0x2ea9210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterEnabled
	// void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);                                                            // [0x2ea9180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetIntParameter
	// void SetIntParameter(FName InName, int32_t inInt);                                                                    // [0x2ea90c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetFloatParameter
	// void SetFloatParameter(FName InName, float InFloat);                                                                  // [0x2ea8f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetBoolParameter
	// void SetBoolParameter(FName InName, bool InBool);                                                                     // [0x2ea8ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.Play
	// void Play(float StartTime);                                                                                           // [0x2ea8aa0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.IsPlaying
	// bool IsPlaying();                                                                                                     // [0x2ea8a70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.HasCookedFFTData
	// bool HasCookedFFTData();                                                                                              // [0x2ea8a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
	// bool HasCookedAmplitudeEnvelopeData();                                                                                // [0x2ea8a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.GetPlayState
	// EAudioComponentPlayState GetPlayState();                                                                              // [0x2ea89e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
	// bool GetCookedFFTDataForAllPlayingSounds(TArray<FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData);           // [0x2ea8900] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedFFTData
	// bool GetCookedFFTData(TArray<float>& FrequenciesToGet, TArray<FSoundWaveSpectralData>& OutSoundWaveSpectralData);     // [0x2ea87e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
	// bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData);               // [0x2ea8720] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedEnvelopeData
	// bool GetCookedEnvelopeData(float& OutEnvelopeData);                                                                   // [0x2ea8670] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.FadeOut
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel, EAudioFaderCurve FadeCurve);                               // [0x2ea8560] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.FadeIn
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, EAudioFaderCurve FadeCurve);                // [0x2ea8410] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.BP_GetAttenuationSettingsToApply
	// bool BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings& OutAttenuationSettings);                             // [0x2ea8220] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.AdjustVolume
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, EAudioFaderCurve FadeCurve);                   // [0x2ea78d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.AdjustAttenuation
	// void AdjustAttenuation(FSoundAttenuationSettings& InAttenuationSettings);                                             // [0x2ea7800] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AssetImportData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAssetImportData : public UObject
{ 
public:
};

/// Class /Script/Engine.AssetUserData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAssetUserData : public UObject
{ 
public:
};

/// Class /Script/Engine.MovementComponent
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UMovementComponent : public UActorComponent
{ 
public:
	class USceneComponent*                             UpdatedComponent;                                           // 0x00B0   (0x0008)  
	class UPrimitiveComponent*                         UpdatedPrimitive;                                           // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x00C0   (0x0004)  MISSED
	FVector                                            Velocity;                                                   // 0x00C4   (0x000C)  
	FVector                                            PlaneConstraintNormal;                                      // 0x00D0   (0x000C)  
	FVector                                            PlaneConstraintOrigin;                                      // 0x00DC   (0x000C)  
	bool                                               bUpdateOnlyIfRendered : 1;                                  // 0x00E8:0 (0x0001)  
	bool                                               bAutoUpdateTickRegistration : 1;                            // 0x00E8:1 (0x0001)  
	bool                                               bTickBeforeOwner : 1;                                       // 0x00E8:2 (0x0001)  
	bool                                               bAutoRegisterUpdatedComponent : 1;                          // 0x00E8:3 (0x0001)  
	bool                                               bConstrainToPlane : 1;                                      // 0x00E8:4 (0x0001)  
	bool                                               bSnapToPlaneAtStart : 1;                                    // 0x00E8:5 (0x0001)  
	bool                                               bAutoRegisterPhysicsVolumeUpdates : 1;                      // 0x00E8:6 (0x0001)  
	bool                                               bComponentShouldUpdatePhysicsVolume : 1;                    // 0x00E8:7 (0x0001)  
	unsigned char                                      UnknownData01_4[0x2];                                       // 0x00E9   (0x0002)  MISSED
	EPlaneConstraintAxisSetting                        PlaneConstraintAxisSetting;                                 // 0x00EB   (0x0001)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00EC   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.MovementComponent.StopMovementImmediately
	// void StopMovementImmediately();                                                                                       // [0xa2f2a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SnapUpdatedComponentToPlane
	// void SnapUpdatedComponentToPlane();                                                                                   // [0xa28a10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetUpdatedComponent
	// void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);                                                 // [0x2e8cb70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintOrigin
	// void SetPlaneConstraintOrigin(FVector PlaneOrigin);                                                                   // [0x2f802f0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintNormal
	// void SetPlaneConstraintNormal(FVector PlaneNormal);                                                                   // [0x2f80260] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintFromVectors
	// void SetPlaneConstraintFromVectors(FVector Forward, FVector Up);                                                      // [0x2f80180] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintEnabled
	// void SetPlaneConstraintEnabled(bool bEnabled);                                                                        // [0x2f800f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintAxisSetting
	// void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting);                                       // [0x2f80070] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.PhysicsVolumeChanged
	// void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);                                                           // [0x2f7ff70] Native|Public        
	// Function /Script/Engine.MovementComponent.K2_MoveUpdatedComponent
	// bool K2_MoveUpdatedComponent(FVector Delta, FRotator NewRotation, FHitResult& OutHit, bool bSweep, bool bTeleport);   // [0x2f7fab0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.K2_GetModifiedMaxSpeed
	// float K2_GetModifiedMaxSpeed();                                                                                       // [0x2f7fa70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.K2_GetMaxSpeedModifier
	// float K2_GetMaxSpeedModifier();                                                                                       // [0x2f7fa30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.IsExceedingMaxSpeed
	// bool IsExceedingMaxSpeed(float MaxSpeed);                                                                             // [0x2f7f9a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintOrigin
	// FVector GetPlaneConstraintOrigin();                                                                                   // [0x2f7f960] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintNormal
	// FVector GetPlaneConstraintNormal();                                                                                   // [0x2f7f920] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintAxisSetting
	// EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();                                                          // [0x2f7f900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPhysicsVolume
	// class APhysicsVolume* GetPhysicsVolume();                                                                             // [0x2f7f8d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetMaxSpeed
	// float GetMaxSpeed();                                                                                                  // [0x2f7f890] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetGravityZ
	// float GetGravityZ();                                                                                                  // [0x2f7f850] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainNormalToPlane
	// FVector ConstrainNormalToPlane(FVector Normal);                                                                       // [0x2f7f7a0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainLocationToPlane
	// FVector ConstrainLocationToPlane(FVector Location);                                                                   // [0x2f7f6f0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainDirectionToPlane
	// FVector ConstrainDirectionToPlane(FVector Direction);                                                                 // [0x2f7f640] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.MovementProperties
/// Size: 0x0001 (0x000000 - 0x000001)
struct FMovementProperties
{ 
	bool                                               bCanCrouch : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bCanJump : 1;                                               // 0x0000:1 (0x0001)  
	bool                                               bCanWalk : 1;                                               // 0x0000:2 (0x0001)  
	bool                                               bCanSwim : 1;                                               // 0x0000:3 (0x0001)  
	bool                                               bCanFly : 1;                                                // 0x0000:4 (0x0001)  
};

/// Struct /Script/Engine.NavAgentProperties
/// Size: 0x002F (0x000001 - 0x000030)
struct FNavAgentProperties : FMovementProperties
{ 
	unsigned char                                      UnknownData00_3[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              AgentRadius;                                                // 0x0004   (0x0004)  
	float                                              AgentHeight;                                                // 0x0008   (0x0004)  
	float                                              AgentStepHeight;                                            // 0x000C   (0x0004)  
	float                                              NavWalkingSearchHeightScale;                                // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	FSoftClassPath                                     PreferredNavData;                                           // 0x0018   (0x0018)  
};

/// Class /Script/Engine.NavMovementComponent
/// Size: 0x0040 (0x0000F0 - 0x000130)
class UNavMovementComponent : public UMovementComponent
{ 
public:
	FNavAgentProperties                                NavAgentProps;                                              // 0x00F0   (0x0030)  
	float                                              FixedPathBrakingDistance;                                   // 0x0120   (0x0004)  
	bool                                               bUpdateNavAgentWithOwnersCollision : 1;                     // 0x0124:0 (0x0001)  
	bool                                               bUseAccelerationForPaths : 1;                               // 0x0124:1 (0x0001)  
	bool                                               bUseFixedBrakingDistanceForPaths : 1;                       // 0x0124:2 (0x0001)  
	FMovementProperties                                MovementState;                                              // 0x0125   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0126   (0x0002)  MISSED
	class UObject*                                     PathFollowingComp;                                          // 0x0128   (0x0008)  


	/// Functions
	// Function /Script/Engine.NavMovementComponent.StopMovementKeepPathing
	// void StopMovementKeepPathing();                                                                                       // [0x2f83af0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavMovementComponent.StopActiveMovement
	// void StopActiveMovement();                                                                                            // [0xa288d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavMovementComponent.IsSwimming
	// bool IsSwimming();                                                                                                    // [0x2f839d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsMovingOnGround
	// bool IsMovingOnGround();                                                                                              // [0x2ec6780] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsFlying
	// bool IsFlying();                                                                                                      // [0x2f839a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsFalling
	// bool IsFalling();                                                                                                     // [0x2f83970] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsCrouching
	// bool IsCrouching();                                                                                                   // [0x2ea8a70] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PawnMovementComponent
/// Size: 0x0008 (0x000130 - 0x000138)
class UPawnMovementComponent : public UNavMovementComponent
{ 
public:
	class APawn*                                       PawnOwner;                                                  // 0x0130   (0x0008)  


	/// Functions
	// Function /Script/Engine.PawnMovementComponent.K2_GetInputVector
	// FVector K2_GetInputVector();                                                                                          // [0x2f956f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                            // [0x2f95760] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetPendingInputVector
	// FVector GetPendingInputVector();                                                                                      // [0x2f956f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetPawnOwner
	// class APawn* GetPawnOwner();                                                                                          // [0x2f956c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetLastInputVector
	// FVector GetLastInputVector();                                                                                         // [0x2f95680] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.ConsumeInputVector
	// FVector ConsumeInputVector();                                                                                         // [0x2f95410] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PawnMovementComponent.AddInputVector
	// void AddInputVector(FVector WorldVector, bool bForce);                                                                // [0x2f94fb0] Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.Vector_NetQuantize
/// Size: 0x0000 (0x00000C - 0x00000C)
struct FVector_NetQuantize : FVector
{ 
};

/// Struct /Script/Engine.Vector_NetQuantizeNormal
/// Size: 0x0000 (0x00000C - 0x00000C)
struct FVector_NetQuantizeNormal : FVector
{ 
};

/// Struct /Script/Engine.HitResult
/// Size: 0x0088 (0x000000 - 0x000088)
struct FHitResult
{ 
	bool                                               bBlockingHit : 1;                                           // 0x0000:0 (0x0001)  
	bool                                               bStartPenetrating : 1;                                      // 0x0000:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            FaceIndex;                                                  // 0x0004   (0x0004)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
	float                                              Distance;                                                   // 0x000C   (0x0004)  
	FVector_NetQuantize                                Location;                                                   // 0x0010   (0x000C)  
	FVector_NetQuantize                                ImpactPoint;                                                // 0x001C   (0x000C)  
	FVector_NetQuantizeNormal                          Normal;                                                     // 0x0028   (0x000C)  
	FVector_NetQuantizeNormal                          ImpactNormal;                                               // 0x0034   (0x000C)  
	FVector_NetQuantize                                TraceStart;                                                 // 0x0040   (0x000C)  
	FVector_NetQuantize                                TraceEnd;                                                   // 0x004C   (0x000C)  
	float                                              PenetrationDepth;                                           // 0x0058   (0x0004)  
	int32_t                                            item;                                                       // 0x005C   (0x0004)  
	SDK_UNDEFINED(8,190) /* TWeakObjectPtr<UPhysicalMaterial*> */ __um(PhysMaterial);                              // 0x0060   (0x0008)  
	SDK_UNDEFINED(8,191) /* TWeakObjectPtr<AActor*> */ __um(Actor);                                                // 0x0068   (0x0008)  
	SDK_UNDEFINED(8,192) /* TWeakObjectPtr<UPrimitiveComponent*> */ __um(Component);                               // 0x0070   (0x0008)  
	FName                                              BoneName;                                                   // 0x0078   (0x0008)  
	FName                                              MyBoneName;                                                 // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.FindFloorResult
/// Size: 0x0094 (0x000000 - 0x000094)
struct FFindFloorResult
{ 
	bool                                               bBlockingHit : 1;                                           // 0x0000:0 (0x0001)  
	bool                                               bWalkableFloor : 1;                                         // 0x0000:1 (0x0001)  
	bool                                               bLineTrace : 1;                                             // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              FloorDist;                                                  // 0x0004   (0x0004)  
	float                                              LineDist;                                                   // 0x0008   (0x0004)  
	FHitResult                                         HitResult;                                                  // 0x000C   (0x0088)  
};

/// Struct /Script/Engine.NavAvoidanceMask
/// Size: 0x0004 (0x000000 - 0x000004)
struct FNavAvoidanceMask
{ 
	bool                                               bGroup0 : 1;                                                // 0x0000:0 (0x0001)  
	bool                                               bGroup1 : 1;                                                // 0x0000:1 (0x0001)  
	bool                                               bGroup2 : 1;                                                // 0x0000:2 (0x0001)  
	bool                                               bGroup3 : 1;                                                // 0x0000:3 (0x0001)  
	bool                                               bGroup4 : 1;                                                // 0x0000:4 (0x0001)  
	bool                                               bGroup5 : 1;                                                // 0x0000:5 (0x0001)  
	bool                                               bGroup6 : 1;                                                // 0x0000:6 (0x0001)  
	bool                                               bGroup7 : 1;                                                // 0x0000:7 (0x0001)  
	bool                                               bGroup8 : 1;                                                // 0x0001:0 (0x0001)  
	bool                                               bGroup9 : 1;                                                // 0x0001:1 (0x0001)  
	bool                                               bGroup10 : 1;                                               // 0x0001:2 (0x0001)  
	bool                                               bGroup11 : 1;                                               // 0x0001:3 (0x0001)  
	bool                                               bGroup12 : 1;                                               // 0x0001:4 (0x0001)  
	bool                                               bGroup13 : 1;                                               // 0x0001:5 (0x0001)  
	bool                                               bGroup14 : 1;                                               // 0x0001:6 (0x0001)  
	bool                                               bGroup15 : 1;                                               // 0x0001:7 (0x0001)  
	bool                                               bGroup16 : 1;                                               // 0x0002:0 (0x0001)  
	bool                                               bGroup17 : 1;                                               // 0x0002:1 (0x0001)  
	bool                                               bGroup18 : 1;                                               // 0x0002:2 (0x0001)  
	bool                                               bGroup19 : 1;                                               // 0x0002:3 (0x0001)  
	bool                                               bGroup20 : 1;                                               // 0x0002:4 (0x0001)  
	bool                                               bGroup21 : 1;                                               // 0x0002:5 (0x0001)  
	bool                                               bGroup22 : 1;                                               // 0x0002:6 (0x0001)  
	bool                                               bGroup23 : 1;                                               // 0x0002:7 (0x0001)  
	bool                                               bGroup24 : 1;                                               // 0x0003:0 (0x0001)  
	bool                                               bGroup25 : 1;                                               // 0x0003:1 (0x0001)  
	bool                                               bGroup26 : 1;                                               // 0x0003:2 (0x0001)  
	bool                                               bGroup27 : 1;                                               // 0x0003:3 (0x0001)  
	bool                                               bGroup28 : 1;                                               // 0x0003:4 (0x0001)  
	bool                                               bGroup29 : 1;                                               // 0x0003:5 (0x0001)  
	bool                                               bGroup30 : 1;                                               // 0x0003:6 (0x0001)  
	bool                                               bGroup31 : 1;                                               // 0x0003:7 (0x0001)  
};

/// Struct /Script/Engine.CharacterMovementComponentPostPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
struct FCharacterMovementComponentPostPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.CharacterMovementComponent
/// Size: 0x04D8 (0x000138 - 0x000610)
class UCharacterMovementComponent : public UPawnMovementComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0138   (0x0010)  MISSED
	class ACharacter*                                  CharacterOwner;                                             // 0x0148   (0x0008)  
	float                                              GravityScale;                                               // 0x0150   (0x0004)  
	float                                              MaxStepHeight;                                              // 0x0154   (0x0004)  
	float                                              JumpZVelocity;                                              // 0x0158   (0x0004)  
	float                                              JumpOffJumpZFactor;                                         // 0x015C   (0x0004)  
	float                                              WalkableFloorAngle;                                         // 0x0160   (0x0004)  
	float                                              WalkableFloorZ;                                             // 0x0164   (0x0004)  
	SDK_UNDEFINED(1,193) /* TEnumAsByte<EMovementMode> */ __um(MovementMode);                                      // 0x0168   (0x0001)  
	char                                               CustomMovementMode;                                         // 0x0169   (0x0001)  
	ENetworkSmoothingMode                              NetworkSmoothingMode;                                       // 0x016A   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x016B   (0x0001)  MISSED
	float                                              GroundFriction;                                             // 0x016C   (0x0004)  
	unsigned char                                      UnknownData02_5[0x1C];                                      // 0x0170   (0x001C)  MISSED
	float                                              MaxWalkSpeed;                                               // 0x018C   (0x0004)  
	float                                              MaxWalkSpeedCrouched;                                       // 0x0190   (0x0004)  
	float                                              MaxSwimSpeed;                                               // 0x0194   (0x0004)  
	float                                              MaxFlySpeed;                                                // 0x0198   (0x0004)  
	float                                              MaxCustomMovementSpeed;                                     // 0x019C   (0x0004)  
	float                                              MaxAcceleration;                                            // 0x01A0   (0x0004)  
	float                                              MinAnalogWalkSpeed;                                         // 0x01A4   (0x0004)  
	float                                              BrakingFrictionFactor;                                      // 0x01A8   (0x0004)  
	float                                              BrakingFriction;                                            // 0x01AC   (0x0004)  
	float                                              BrakingSubStepTime;                                         // 0x01B0   (0x0004)  
	float                                              BrakingDecelerationWalking;                                 // 0x01B4   (0x0004)  
	float                                              BrakingDecelerationFalling;                                 // 0x01B8   (0x0004)  
	float                                              BrakingDecelerationSwimming;                                // 0x01BC   (0x0004)  
	float                                              BrakingDecelerationFlying;                                  // 0x01C0   (0x0004)  
	float                                              AirControl;                                                 // 0x01C4   (0x0004)  
	float                                              AirControlBoostMultiplier;                                  // 0x01C8   (0x0004)  
	float                                              AirControlBoostVelocityThreshold;                           // 0x01CC   (0x0004)  
	float                                              FallingLateralFriction;                                     // 0x01D0   (0x0004)  
	float                                              CrouchedHalfHeight;                                         // 0x01D4   (0x0004)  
	float                                              Buoyancy;                                                   // 0x01D8   (0x0004)  
	float                                              PerchRadiusThreshold;                                       // 0x01DC   (0x0004)  
	float                                              PerchAdditionalHeight;                                      // 0x01E0   (0x0004)  
	FRotator                                           RotationRate;                                               // 0x01E4   (0x000C)  
	bool                                               bUseSeparateBrakingFriction : 1;                            // 0x01F0:0 (0x0001)  
	bool                                               bApplyGravityWhileJumping : 1;                              // 0x01F0:1 (0x0001)  
	bool                                               bUseControllerDesiredRotation : 1;                          // 0x01F0:2 (0x0001)  
	bool                                               bOrientRotationToMovement : 1;                              // 0x01F0:3 (0x0001)  
	bool                                               bSweepWhileNavWalking : 1;                                  // 0x01F0:4 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x01F0:5 (0x0001)  MISSED
	bool                                               bMovementInProgress : 1;                                    // 0x01F0:6 (0x0001)  
	bool                                               bEnableScopedMovementUpdates : 1;                           // 0x01F0:7 (0x0001)  
	bool                                               bEnableServerDualMoveScopedMovementUpdates : 1;             // 0x01F1:0 (0x0001)  
	bool                                               bForceMaxAccel : 1;                                         // 0x01F1:1 (0x0001)  
	bool                                               bRunPhysicsWithNoController : 1;                            // 0x01F1:2 (0x0001)  
	bool                                               bForceNextFloorCheck : 1;                                   // 0x01F1:3 (0x0001)  
	bool                                               bShrinkProxyCapsule : 1;                                    // 0x01F1:4 (0x0001)  
	bool                                               bCanWalkOffLedges : 1;                                      // 0x01F1:5 (0x0001)  
	bool                                               bCanWalkOffLedgesWhenCrouching : 1;                         // 0x01F1:6 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x01F1:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x01F2:0 (0x0001)  MISSED
	bool                                               bNetworkSkipProxyPredictionOnNetUpdate : 1;                 // 0x01F2:1 (0x0001)  
	bool                                               bNetworkAlwaysReplicateTransformUpdateTimestamp : 1;        // 0x01F2:2 (0x0001)  
	bool                                               bDeferUpdateMoveComponent : 1;                              // 0x01F2:3 (0x0001)  
	bool                                               bEnablePhysicsInteraction : 1;                              // 0x01F2:4 (0x0001)  
	bool                                               bTouchForceScaledToMass : 1;                                // 0x01F2:5 (0x0001)  
	bool                                               bPushForceScaledToMass : 1;                                 // 0x01F2:6 (0x0001)  
	bool                                               bPushForceUsingZOffset : 1;                                 // 0x01F2:7 (0x0001)  
	bool                                               bScalePushForceToVelocity : 1;                              // 0x01F3:0 (0x0001)  
	unsigned char                                      UnknownData06_4[0x4];                                       // 0x01F4   (0x0004)  MISSED
	class USceneComponent*                             DeferredUpdatedMoveComponent;                               // 0x01F8   (0x0008)  
	float                                              MaxOutOfWaterStepHeight;                                    // 0x0200   (0x0004)  
	float                                              OutofWaterZ;                                                // 0x0204   (0x0004)  
	float                                              Mass;                                                       // 0x0208   (0x0004)  
	float                                              StandingDownwardForceScale;                                 // 0x020C   (0x0004)  
	float                                              InitialPushForceFactor;                                     // 0x0210   (0x0004)  
	float                                              PushForceFactor;                                            // 0x0214   (0x0004)  
	float                                              PushForcePointZOffsetFactor;                                // 0x0218   (0x0004)  
	float                                              TouchForceFactor;                                           // 0x021C   (0x0004)  
	float                                              MinTouchForce;                                              // 0x0220   (0x0004)  
	float                                              MaxTouchForce;                                              // 0x0224   (0x0004)  
	float                                              RepulsionForce;                                             // 0x0228   (0x0004)  
	FVector                                            Acceleration;                                               // 0x022C   (0x000C)  
	unsigned char                                      UnknownData07_5[0x8];                                       // 0x0238   (0x0008)  MISSED
	FQuat                                              LastUpdateRotation;                                         // 0x0240   (0x0010)  
	FVector                                            LastUpdateLocation;                                         // 0x0250   (0x000C)  
	FVector                                            LastUpdateVelocity;                                         // 0x025C   (0x000C)  
	float                                              ServerLastTransformUpdateTimeStamp;                         // 0x0268   (0x0004)  
	float                                              ServerLastClientGoodMoveAckTime;                            // 0x026C   (0x0004)  
	float                                              ServerLastClientAdjustmentTime;                             // 0x0270   (0x0004)  
	FVector                                            PendingImpulseToApply;                                      // 0x0274   (0x000C)  
	FVector                                            PendingForceToApply;                                        // 0x0280   (0x000C)  
	float                                              AnalogInputModifier;                                        // 0x028C   (0x0004)  
	unsigned char                                      UnknownData08_5[0xC];                                       // 0x0290   (0x000C)  MISSED
	float                                              MaxSimulationTimeStep;                                      // 0x029C   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x02A0   (0x0004)  
	int32_t                                            MaxJumpApexAttemptsPerSimulation;                           // 0x02A4   (0x0004)  
	float                                              MaxDepenetrationWithGeometry;                               // 0x02A8   (0x0004)  
	float                                              MaxDepenetrationWithGeometryAsProxy;                        // 0x02AC   (0x0004)  
	float                                              MaxDepenetrationWithPawn;                                   // 0x02B0   (0x0004)  
	float                                              MaxDepenetrationWithPawnAsProxy;                            // 0x02B4   (0x0004)  
	float                                              NetworkSimulatedSmoothLocationTime;                         // 0x02B8   (0x0004)  
	float                                              NetworkSimulatedSmoothRotationTime;                         // 0x02BC   (0x0004)  
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;             // 0x02C0   (0x0004)  
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;             // 0x02C4   (0x0004)  
	float                                              NetProxyShrinkRadius;                                       // 0x02C8   (0x0004)  
	float                                              NetProxyShrinkHalfHeight;                                   // 0x02CC   (0x0004)  
	float                                              NetworkMaxSmoothUpdateDistance;                             // 0x02D0   (0x0004)  
	float                                              NetworkNoSmoothUpdateDistance;                              // 0x02D4   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAckGoodMoves;                    // 0x02D8   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAdjustments;                     // 0x02DC   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;      // 0x02E0   (0x0004)  
	float                                              NetworkLargeClientCorrectionDistance;                       // 0x02E4   (0x0004)  
	float                                              LedgeCheckThreshold;                                        // 0x02E8   (0x0004)  
	float                                              JumpOutOfWaterPitch;                                        // 0x02EC   (0x0004)  
	FFindFloorResult                                   CurrentFloor;                                               // 0x02F0   (0x0094)  
	SDK_UNDEFINED(1,194) /* TEnumAsByte<EMovementMode> */ __um(DefaultLandMovementMode);                           // 0x0384   (0x0001)  
	SDK_UNDEFINED(1,195) /* TEnumAsByte<EMovementMode> */ __um(DefaultWaterMovementMode);                          // 0x0385   (0x0001)  
	SDK_UNDEFINED(1,196) /* TEnumAsByte<EMovementMode> */ __um(GroundMovementMode);                                // 0x0386   (0x0001)  
	bool                                               bMaintainHorizontalGroundVelocity : 1;                      // 0x0387:0 (0x0001)  
	bool                                               bImpartBaseVelocityX : 1;                                   // 0x0387:1 (0x0001)  
	bool                                               bImpartBaseVelocityY : 1;                                   // 0x0387:2 (0x0001)  
	bool                                               bImpartBaseVelocityZ : 1;                                   // 0x0387:3 (0x0001)  
	bool                                               bImpartBaseAngularVelocity : 1;                             // 0x0387:4 (0x0001)  
	bool                                               bJustTeleported : 1;                                        // 0x0387:5 (0x0001)  
	bool                                               bNetworkUpdateReceived : 1;                                 // 0x0387:6 (0x0001)  
	bool                                               bNetworkMovementModeChanged : 1;                            // 0x0387:7 (0x0001)  
	bool                                               bIgnoreClientMovementErrorChecksAndCorrection : 1;          // 0x0388:0 (0x0001)  
	bool                                               bServerAcceptClientAuthoritativePosition : 1;               // 0x0388:1 (0x0001)  
	bool                                               bNotifyApex : 1;                                            // 0x0388:2 (0x0001)  
	bool                                               bCheatFlying : 1;                                           // 0x0388:3 (0x0001)  
	bool                                               bWantsToCrouch : 1;                                         // 0x0388:4 (0x0001)  
	bool                                               bCrouchMaintainsBaseLocation : 1;                           // 0x0388:5 (0x0001)  
	bool                                               bIgnoreBaseRotation : 1;                                    // 0x0388:6 (0x0001)  
	bool                                               bFastAttachedMove : 1;                                      // 0x0388:7 (0x0001)  
	bool                                               bAlwaysCheckFloor : 1;                                      // 0x0389:0 (0x0001)  
	bool                                               bUseFlatBaseForFloorChecks : 1;                             // 0x0389:1 (0x0001)  
	bool                                               bPerformingJumpOff : 1;                                     // 0x0389:2 (0x0001)  
	bool                                               bWantsToLeaveNavWalking : 1;                                // 0x0389:3 (0x0001)  
	bool                                               bUseRVOAvoidance : 1;                                       // 0x0389:4 (0x0001)  
	bool                                               bRequestedMoveUseAcceleration : 1;                          // 0x0389:5 (0x0001)  
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0389:6 (0x0001)  MISSED
	bool                                               bWasSimulatingRootMotion : 1;                               // 0x0389:7 (0x0001)  
	bool                                               bAllowPhysicsRotationDuringAnimRootMotion : 1;              // 0x038A:0 (0x0001)  
	bool                                               bHasRequestedVelocity : 1;                                  // 0x038A:1 (0x0001)  
	bool                                               bRequestedMoveWithMaxSpeed : 1;                             // 0x038A:2 (0x0001)  
	bool                                               bWasAvoidanceUpdated : 1;                                   // 0x038A:3 (0x0001)  
	unsigned char                                      UnknownBit10 : 1;                                           // 0x038A:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x038A:5 (0x0001)  MISSED
	bool                                               bProjectNavMeshWalking : 1;                                 // 0x038A:6 (0x0001)  
	bool                                               bProjectNavMeshOnBothWorldChannels : 1;                     // 0x038A:7 (0x0001)  
	unsigned char                                      UnknownData12_4[0x11];                                      // 0x038B   (0x0011)  MISSED
	float                                              AvoidanceConsiderationRadius;                               // 0x039C   (0x0004)  
	FVector                                            RequestedVelocity;                                          // 0x03A0   (0x000C)  
	int32_t                                            AvoidanceUID;                                               // 0x03AC   (0x0004)  
	FNavAvoidanceMask                                  AvoidanceGroup;                                             // 0x03B0   (0x0004)  
	FNavAvoidanceMask                                  GroupsToAvoid;                                              // 0x03B4   (0x0004)  
	FNavAvoidanceMask                                  GroupsToIgnore;                                             // 0x03B8   (0x0004)  
	float                                              AvoidanceWeight;                                            // 0x03BC   (0x0004)  
	FVector                                            PendingLaunchVelocity;                                      // 0x03C0   (0x000C)  
	unsigned char                                      UnknownData13_5[0xA4];                                      // 0x03CC   (0x00A4)  MISSED
	float                                              NavMeshProjectionInterval;                                  // 0x0470   (0x0004)  
	float                                              NavMeshProjectionTimer;                                     // 0x0474   (0x0004)  
	float                                              NavMeshProjectionInterpSpeed;                               // 0x0478   (0x0004)  
	float                                              NavMeshProjectionHeightScaleUp;                             // 0x047C   (0x0004)  
	float                                              NavMeshProjectionHeightScaleDown;                           // 0x0480   (0x0004)  
	float                                              NavWalkingFloorDistTolerance;                               // 0x0484   (0x0004)  
	FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                                    // 0x0488   (0x0030)  
	unsigned char                                      UnknownData14_5[0x18];                                      // 0x04B8   (0x0018)  MISSED
	float                                              MinTimeBetweenTimeStampResets;                              // 0x04D0   (0x0004)  
	unsigned char                                      UnknownData15_5[0x4];                                       // 0x04D4   (0x0004)  MISSED
	FRootMotionSourceGroup                             CurrentRootMotion;                                          // 0x04D8   (0x0038)  
	unsigned char                                      UnknownData16_5[0x90];                                      // 0x0510   (0x0090)  MISSED
	FRootMotionMovementParams                          RootMotionParams;                                           // 0x05A0   (0x0040)  
	FVector                                            AnimRootMotionVelocity;                                     // 0x05E0   (0x000C)  
	unsigned char                                      UnknownData17_6[0x24];                                      // 0x05EC   (0x0024)  MISSED


	/// Functions
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorZ
	// void SetWalkableFloorZ(float InWalkableFloorZ);                                                                       // [0x2ec70a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorAngle
	// void SetWalkableFloorAngle(float InWalkableFloorAngle);                                                               // [0x2ec7020] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetMovementMode
	// void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, char NewCustomMode);                                 // [0x2ec6f60] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
	// void SetGroupsToIgnoreMask(FNavAvoidanceMask& GroupMask);                                                             // [0x2ec6ed0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnore
	// void SetGroupsToIgnore(int32_t GroupFlags);                                                                           // [0x2ec6e50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoidMask
	// void SetGroupsToAvoidMask(FNavAvoidanceMask& GroupMask);                                                              // [0x2ec6dc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoid
	// void SetGroupsToAvoid(int32_t GroupFlags);                                                                            // [0x2ec6d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroupMask
	// void SetAvoidanceGroupMask(FNavAvoidanceMask& GroupMask);                                                             // [0x2ec6cb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroup
	// void SetAvoidanceGroup(int32_t GroupFlags);                                                                           // [0x2ec6c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceEnabled
	// void SetAvoidanceEnabled(bool bEnable);                                                                               // [0x2ec6ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
	// float K2_GetWalkableFloorZ();                                                                                         // [0x2ec6b70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
	// float K2_GetWalkableFloorAngle();                                                                                     // [0x2ec6b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
	// float K2_GetModifiedMaxAcceleration();                                                                                // [0x2ec6b00] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_FindFloor
	// void K2_FindFloor(FVector CapsuleLocation, FFindFloorResult& FloorResult);                                            // [0x2ec69b0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_ComputeFloorDist
	// void K2_ComputeFloorDist(FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FFindFloorResult& FloorResult); // [0x2ec67b0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.IsWalking
	// bool IsWalking();                                                                                                     // [0x2ec6780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.IsWalkable
	// bool IsWalkable(FHitResult& Hit);                                                                                     // [0x2ec6690] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetValidPerchRadius
	// float GetValidPerchRadius();                                                                                          // [0x2ec6660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetPerchRadiusThreshold
	// float GetPerchRadiusThreshold();                                                                                      // [0x2ec6630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMovementBase
	// class UPrimitiveComponent* GetMovementBase();                                                                         // [0x2ec6600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMinAnalogSpeed
	// float GetMinAnalogSpeed();                                                                                            // [0x2ec65c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
	// float GetMaxJumpHeightWithJumpTime();                                                                                 // [0x2ec6580] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeight
	// float GetMaxJumpHeight();                                                                                             // [0x2ec6540] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
	// float GetMaxBrakingDeceleration();                                                                                    // [0x2ec6500] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxAcceleration
	// float GetMaxAcceleration();                                                                                           // [0x2ec64c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateVelocity
	// FVector GetLastUpdateVelocity();                                                                                      // [0x2ec6490] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateRotation
	// FRotator GetLastUpdateRotation();                                                                                     // [0x2ec6440] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateLocation
	// FVector GetLastUpdateLocation();                                                                                      // [0x2ec6410] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
	// FVector GetImpartedMovementBaseVelocity();                                                                            // [0x2ec63d0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCurrentAcceleration
	// FVector GetCurrentAcceleration();                                                                                     // [0x2ec6390] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCharacterOwner
	// class ACharacter* GetCharacterOwner();                                                                                // [0xec1060] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetAnalogInputModifier
	// float GetAnalogInputModifier();                                                                                       // [0x2ec6360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.DisableMovement
	// void DisableMovement();                                                                                               // [0xa2f4c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.ClearAccumulatedForces
	// void ClearAccumulatedForces();                                                                                        // [0x2ec6340] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.CapsuleTouched
	// void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x2ec6140] Native|Protected|HasOutParms 
	// Function /Script/Engine.CharacterMovementComponent.CalcVelocity
	// void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);                           // [0x2ec5fe0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.AddImpulse
	// void AddImpulse(FVector Impulse, bool bVelocityChange);                                                               // [0x2ec5f00] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.AddForce
	// void AddForce(FVector Force);                                                                                         // [0x2ec5e70] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Subsystem
/// Size: 0x0008 (0x000028 - 0x000030)
class USubsystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Class /Script/Engine.DynamicSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UDynamicSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.EngineSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UEngineSubsystem : public UDynamicSubsystem
{ 
public:
};

/// Class /Script/Engine.SoundEffectPreset
/// Size: 0x0018 (0x000028 - 0x000040)
class USoundEffectPreset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0000   (0x0040)  MISSED
};

/// Class /Script/Engine.SoundEffectSourcePreset
/// Size: 0x0000 (0x000040 - 0x000040)
class USoundEffectSourcePreset : public USoundEffectPreset
{ 
public:
};

/// Class /Script/Engine.SoundEffectSubmixPreset
/// Size: 0x0000 (0x000040 - 0x000040)
class USoundEffectSubmixPreset : public USoundEffectPreset
{ 
public:
};

/// Class /Script/Engine.AnimNotify
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimNotify : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0000   (0x0038)  MISSED


	/// Functions
	// Function /Script/Engine.AnimNotify.Received_Notify
	// bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);                     // [0x15dd8c0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotify.GetNotifyName
	// FString GetNotifyName();                                                                                              // [0x2702690] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.AnimNotify_PlaySound
/// Size: 0x0020 (0x000038 - 0x000058)
class UAnimNotify_PlaySound : public UAnimNotify
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x0038   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0040   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x0044   (0x0004)  
	bool                                               bFollow : 1;                                                // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0049   (0x0003)  MISSED
	FName                                              AttachName;                                                 // 0x004C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimNotifyState
/// Size: 0x0008 (0x000028 - 0x000030)
class UAnimNotifyState : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0000   (0x0030)  MISSED


	/// Functions
	// Function /Script/Engine.AnimNotifyState.Received_NotifyTick
	// bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime); // [0x15dd8c0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.Received_NotifyEnd
	// bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);                  // [0x15dd8c0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.Received_NotifyBegin
	// bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration); // [0x15dd8c0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.GetNotifyName
	// FString GetNotifyName();                                                                                              // [0x2702690] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.CameraModifier
/// Size: 0x0020 (0x000028 - 0x000048)
class UCameraModifier : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bDebug : 1;                                                 // 0x0028:0 (0x0001)  
	bool                                               bExclusive : 1;                                             // 0x0028:1 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0029   (0x0003)  MISSED
	char                                               Priority;                                                   // 0x002C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	class APlayerCameraManager*                        CameraOwner;                                                // 0x0030   (0x0008)  
	float                                              AlphaInTime;                                                // 0x0038   (0x0004)  
	float                                              AlphaOutTime;                                               // 0x003C   (0x0004)  
	float                                              Alpha;                                                      // 0x0040   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0044   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.CameraModifier.IsDisabled
	// bool IsDisabled();                                                                                                    // [0x2117090] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CameraModifier.GetViewTarget
	// class AActor* GetViewTarget();                                                                                        // [0x25951d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CameraModifier.EnableModifier
	// void EnableModifier();                                                                                                // [0x2ebc1e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraModifier.DisableModifier
	// void DisableModifier(bool bImmediate);                                                                                // [0x2ebc150] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraModifier.BlueprintModifyPostProcess
	// void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, FPostProcessSettings& PostProcessSettings); // [0x15dd8c0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Engine.CameraModifier.BlueprintModifyCamera
	// void BlueprintModifyCamera(float DeltaTime, FVector ViewLocation, FRotator ViewRotation, float FOV, FVector& NewViewLocation, FRotator& NewViewRotation, float& NewFOV); // [0x15dd8c0] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
};

/// Class /Script/Engine.ChildActorComponent
/// Size: 0x0030 (0x0001F0 - 0x000220)
class UChildActorComponent : public USceneComponent
{ 
public:
	class UClass*                                      ChildActorClass;                                            // 0x01F0   (0x0008)  
	class AActor*                                      ChildActor;                                                 // 0x01F8   (0x0008)  
	class AActor*                                      ChildActorTemplate;                                         // 0x0200   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0208   (0x0018)  MISSED


	/// Functions
	// Function /Script/Engine.ChildActorComponent.SetChildActorClass
	// void SetChildActorClass(class UClass* InClass);                                                                       // [0x2ecadf0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DPICustomScalingRule
/// Size: 0x0000 (0x000028 - 0x000028)
class UDPICustomScalingRule : public UObject
{ 
public:
};

/// Class /Script/Engine.AmbientSound
/// Size: 0x0008 (0x000220 - 0x000228)
class AAmbientSound : public AActor
{ 
public:
	class UAudioComponent*                             AudioComponent;                                             // 0x0220   (0x0008)  


	/// Functions
	// Function /Script/Engine.AmbientSound.Stop
	// void Stop();                                                                                                          // [0x2e90850] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.Play
	// void Play(float StartTime);                                                                                           // [0x2e90330] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.FadeOut
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel);                                                           // [0x2e90110] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.FadeIn
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel);                                                             // [0x2e90050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.AdjustVolume
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);                                               // [0x2e8ff00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AssetManager
/// Size: 0x0460 (0x000028 - 0x000488)
class UAssetManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x310];                                     // 0x0000   (0x0310)  MISSED
	TArray<class UObject*>                             ObjectReferenceList;                                        // 0x0310   (0x0010)  
	bool                                               bIsGlobalAsyncScanEnvironment;                              // 0x0320   (0x0001)  
	bool                                               bShouldGuessTypeAndName;                                    // 0x0321   (0x0001)  
	bool                                               bShouldUseSynchronousLoad;                                  // 0x0322   (0x0001)  
	bool                                               bIsLoadingFromPakFiles;                                     // 0x0323   (0x0001)  
	bool                                               bShouldAcquireMissingChunksOnLoad;                          // 0x0324   (0x0001)  
	bool                                               bOnlyCookProductionAssets;                                  // 0x0325   (0x0001)  
	bool                                               bIsBulkScanning;                                            // 0x0326   (0x0001)  
	bool                                               bIsPrimaryAssetDirectoryCurrent;                            // 0x0327   (0x0001)  
	bool                                               bIsManagementDatabaseCurrent;                               // 0x0328   (0x0001)  
	bool                                               bUpdateManagementDatabaseAfterScan;                         // 0x0329   (0x0001)  
	bool                                               bIncludeOnlyOnDiskAssets;                                   // 0x032A   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x032B   (0x0001)  MISSED
	int32_t                                            NumberOfSpawnedNotifications;                               // 0x032C   (0x0004)  
	unsigned char                                      UnknownData02_6[0x158];                                     // 0x0330   (0x0158)  MISSED
};

/// Class /Script/Engine.Info
/// Size: 0x0000 (0x000220 - 0x000220)
class AInfo : public AActor
{ 
public:
};

/// Class /Script/Engine.GameStateBase
/// Size: 0x0050 (0x000220 - 0x000270)
class AGameStateBase : public AInfo
{ 
public:
	class UClass*                                      GameModeClass;                                              // 0x0220   (0x0008)  
	class AGameModeBase*                               AuthorityGameMode;                                          // 0x0228   (0x0008)  
	class UClass*                                      SpectatorClass;                                             // 0x0230   (0x0008)  
	TArray<class APlayerState*>                        PlayerArray;                                                // 0x0238   (0x0010)  
	bool                                               bReplicatedHasBegunPlay;                                    // 0x0248   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0249   (0x0003)  MISSED
	float                                              ReplicatedWorldTimeSeconds;                                 // 0x024C   (0x0004)  
	float                                              ServerWorldTimeSecondsDelta;                                // 0x0250   (0x0004)  
	float                                              ServerWorldTimeSecondsUpdateFrequency;                      // 0x0254   (0x0004)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0258   (0x0018)  MISSED


	/// Functions
	// Function /Script/Engine.GameStateBase.OnRep_SpectatorClass
	// void OnRep_SpectatorClass();                                                                                          // [0x2ef57c0] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
	// void OnRep_ReplicatedWorldTimeSeconds();                                                                              // [0x2ef57a0] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
	// void OnRep_ReplicatedHasBegunPlay();                                                                                  // [0x2ef5780] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_GameModeClass
	// void OnRep_GameModeClass();                                                                                           // [0x2ecef10] Native|Protected     
	// Function /Script/Engine.GameStateBase.HasMatchStarted
	// bool HasMatchStarted();                                                                                               // [0x2ef5410] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.HasBegunPlay
	// bool HasBegunPlay();                                                                                                  // [0x2ef53e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetServerWorldTimeSeconds
	// float GetServerWorldTimeSeconds();                                                                                    // [0x2ef5250] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetPlayerStartTime
	// float GetPlayerStartTime(class AController* Controller);                                                              // [0x2ef4d60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetPlayerRespawnDelay
	// float GetPlayerRespawnDelay(class AController* Controller);                                                           // [0x2ef4cc0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.WeightedBlendable
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWeightedBlendable
{ 
	float                                              Weight;                                                     // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UObject*                                     Object;                                                     // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.WeightedBlendables
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWeightedBlendables
{ 
	TArray<FWeightedBlendable>                         Array;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PostProcessSettings
/// Size: 0x0670 (0x000000 - 0x000670)
struct FPostProcessSettings
{ 
	bool                                               bOverride_WhiteTemp : 1;                                    // 0x0000:0 (0x0001)  
	bool                                               bOverride_WhiteTint : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bOverride_ColorSaturation : 1;                              // 0x0000:2 (0x0001)  
	bool                                               bOverride_ColorContrast : 1;                                // 0x0000:3 (0x0001)  
	bool                                               bOverride_ColorGamma : 1;                                   // 0x0000:4 (0x0001)  
	bool                                               bOverride_ColorGain : 1;                                    // 0x0000:5 (0x0001)  
	bool                                               bOverride_ColorOffset : 1;                                  // 0x0000:6 (0x0001)  
	bool                                               bOverride_ColorSaturationShadows : 1;                       // 0x0000:7 (0x0001)  
	bool                                               bOverride_ColorContrastShadows : 1;                         // 0x0001:0 (0x0001)  
	bool                                               bOverride_ColorGammaShadows : 1;                            // 0x0001:1 (0x0001)  
	bool                                               bOverride_ColorGainShadows : 1;                             // 0x0001:2 (0x0001)  
	bool                                               bOverride_ColorOffsetShadows : 1;                           // 0x0001:3 (0x0001)  
	bool                                               bOverride_ColorSaturationMidtones : 1;                      // 0x0001:4 (0x0001)  
	bool                                               bOverride_ColorContrastMidtones : 1;                        // 0x0001:5 (0x0001)  
	bool                                               bOverride_ColorGammaMidtones : 1;                           // 0x0001:6 (0x0001)  
	bool                                               bOverride_ColorGainMidtones : 1;                            // 0x0001:7 (0x0001)  
	bool                                               bOverride_ColorOffsetMidtones : 1;                          // 0x0002:0 (0x0001)  
	bool                                               bOverride_ColorSaturationHighlights : 1;                    // 0x0002:1 (0x0001)  
	bool                                               bOverride_ColorContrastHighlights : 1;                      // 0x0002:2 (0x0001)  
	bool                                               bOverride_ColorGammaHighlights : 1;                         // 0x0002:3 (0x0001)  
	bool                                               bOverride_ColorGainHighlights : 1;                          // 0x0002:4 (0x0001)  
	bool                                               bOverride_ColorOffsetHighlights : 1;                        // 0x0002:5 (0x0001)  
	bool                                               bOverride_ColorCorrectionShadowsMax : 1;                    // 0x0002:6 (0x0001)  
	bool                                               bOverride_ColorCorrectionHighlightsMin : 1;                 // 0x0002:7 (0x0001)  
	bool                                               bOverride_BlueCorrection : 1;                               // 0x0003:0 (0x0001)  
	bool                                               bOverride_ExpandGamut : 1;                                  // 0x0003:1 (0x0001)  
	bool                                               bOverride_FilmWhitePoint : 1;                               // 0x0003:2 (0x0001)  
	bool                                               bOverride_FilmSaturation : 1;                               // 0x0003:3 (0x0001)  
	bool                                               bOverride_FilmChannelMixerRed : 1;                          // 0x0003:4 (0x0001)  
	bool                                               bOverride_FilmChannelMixerGreen : 1;                        // 0x0003:5 (0x0001)  
	bool                                               bOverride_FilmChannelMixerBlue : 1;                         // 0x0003:6 (0x0001)  
	bool                                               bOverride_FilmContrast : 1;                                 // 0x0003:7 (0x0001)  
	bool                                               bOverride_FilmDynamicRange : 1;                             // 0x0004:0 (0x0001)  
	bool                                               bOverride_FilmHealAmount : 1;                               // 0x0004:1 (0x0001)  
	bool                                               bOverride_FilmToeAmount : 1;                                // 0x0004:2 (0x0001)  
	bool                                               bOverride_FilmShadowTint : 1;                               // 0x0004:3 (0x0001)  
	bool                                               bOverride_FilmShadowTintBlend : 1;                          // 0x0004:4 (0x0001)  
	bool                                               bOverride_FilmShadowTintAmount : 1;                         // 0x0004:5 (0x0001)  
	bool                                               bOverride_FilmSlope : 1;                                    // 0x0004:6 (0x0001)  
	bool                                               bOverride_FilmToe : 1;                                      // 0x0004:7 (0x0001)  
	bool                                               bOverride_FilmShoulder : 1;                                 // 0x0005:0 (0x0001)  
	bool                                               bOverride_FilmBlackClip : 1;                                // 0x0005:1 (0x0001)  
	bool                                               bOverride_FilmWhiteClip : 1;                                // 0x0005:2 (0x0001)  
	bool                                               bOverride_SceneColorTint : 1;                               // 0x0005:3 (0x0001)  
	bool                                               bOverride_SceneFringeIntensity : 1;                         // 0x0005:4 (0x0001)  
	bool                                               bOverride_ChromaticAberrationStartOffset : 1;               // 0x0005:5 (0x0001)  
	bool                                               bOverride_AmbientCubemapTint : 1;                           // 0x0005:6 (0x0001)  
	bool                                               bOverride_AmbientCubemapIntensity : 1;                      // 0x0005:7 (0x0001)  
	bool                                               bOverride_BloomMethod : 1;                                  // 0x0006:0 (0x0001)  
	bool                                               bOverride_BloomIntensity : 1;                               // 0x0006:1 (0x0001)  
	bool                                               bOverride_BloomThreshold : 1;                               // 0x0006:2 (0x0001)  
	bool                                               bOverride_Bloom1Tint : 1;                                   // 0x0006:3 (0x0001)  
	bool                                               bOverride_Bloom1Size : 1;                                   // 0x0006:4 (0x0001)  
	bool                                               bOverride_Bloom2Size : 1;                                   // 0x0006:5 (0x0001)  
	bool                                               bOverride_Bloom2Tint : 1;                                   // 0x0006:6 (0x0001)  
	bool                                               bOverride_Bloom3Tint : 1;                                   // 0x0006:7 (0x0001)  
	bool                                               bOverride_Bloom3Size : 1;                                   // 0x0007:0 (0x0001)  
	bool                                               bOverride_Bloom4Tint : 1;                                   // 0x0007:1 (0x0001)  
	bool                                               bOverride_Bloom4Size : 1;                                   // 0x0007:2 (0x0001)  
	bool                                               bOverride_Bloom5Tint : 1;                                   // 0x0007:3 (0x0001)  
	bool                                               bOverride_Bloom5Size : 1;                                   // 0x0007:4 (0x0001)  
	bool                                               bOverride_Bloom6Tint : 1;                                   // 0x0007:5 (0x0001)  
	bool                                               bOverride_Bloom6Size : 1;                                   // 0x0007:6 (0x0001)  
	bool                                               bOverride_BloomSizeScale : 1;                               // 0x0007:7 (0x0001)  
	bool                                               bOverride_BloomConvolutionTexture : 1;                      // 0x0008:0 (0x0001)  
	bool                                               bOverride_BloomConvolutionSize : 1;                         // 0x0008:1 (0x0001)  
	bool                                               bOverride_BloomConvolutionCenterUV : 1;                     // 0x0008:2 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilter : 1;                    // 0x0008:3 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMin : 1;                 // 0x0008:4 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMax : 1;                 // 0x0008:5 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMult : 1;                // 0x0008:6 (0x0001)  
	bool                                               bOverride_BloomConvolutionBufferScale : 1;                  // 0x0008:7 (0x0001)  
	bool                                               bOverride_BloomDirtMaskIntensity : 1;                       // 0x0009:0 (0x0001)  
	bool                                               bOverride_BloomDirtMaskTint : 1;                            // 0x0009:1 (0x0001)  
	bool                                               bOverride_BloomDirtMask : 1;                                // 0x0009:2 (0x0001)  
	bool                                               bOverride_CameraShutterSpeed : 1;                           // 0x0009:3 (0x0001)  
	bool                                               bOverride_CameraISO : 1;                                    // 0x0009:4 (0x0001)  
	bool                                               bOverride_AutoExposureMethod : 1;                           // 0x0009:5 (0x0001)  
	bool                                               bOverride_AutoExposureLowPercent : 1;                       // 0x0009:6 (0x0001)  
	bool                                               bOverride_AutoExposureHighPercent : 1;                      // 0x0009:7 (0x0001)  
	bool                                               bOverride_AutoExposureMinBrightness : 1;                    // 0x000A:0 (0x0001)  
	bool                                               bOverride_AutoExposureMaxBrightness : 1;                    // 0x000A:1 (0x0001)  
	bool                                               bOverride_AutoExposureCalibrationConstant : 1;              // 0x000A:2 (0x0001)  
	bool                                               bOverride_AutoExposureSpeedUp : 1;                          // 0x000A:3 (0x0001)  
	bool                                               bOverride_AutoExposureSpeedDown : 1;                        // 0x000A:4 (0x0001)  
	bool                                               bOverride_AutoExposureBias : 1;                             // 0x000A:5 (0x0001)  
	bool                                               bOverride_AutoExposureBiasCurve : 1;                        // 0x000A:6 (0x0001)  
	bool                                               bOverride_AutoExposureMeterMask : 1;                        // 0x000A:7 (0x0001)  
	bool                                               bOverride_AutoExposureApplyPhysicalCameraExposure : 1;      // 0x000B:0 (0x0001)  
	bool                                               bOverride_HistogramLogMin : 1;                              // 0x000B:1 (0x0001)  
	bool                                               bOverride_HistogramLogMax : 1;                              // 0x000B:2 (0x0001)  
	bool                                               bOverride_LensFlareIntensity : 1;                           // 0x000B:3 (0x0001)  
	bool                                               bOverride_LensFlareTint : 1;                                // 0x000B:4 (0x0001)  
	bool                                               bOverride_LensFlareTints : 1;                               // 0x000B:5 (0x0001)  
	bool                                               bOverride_LensFlareBokehSize : 1;                           // 0x000B:6 (0x0001)  
	bool                                               bOverride_LensFlareBokehShape : 1;                          // 0x000B:7 (0x0001)  
	bool                                               bOverride_LensFlareThreshold : 1;                           // 0x000C:0 (0x0001)  
	bool                                               bOverride_VignetteIntensity : 1;                            // 0x000C:1 (0x0001)  
	bool                                               bOverride_GrainIntensity : 1;                               // 0x000C:2 (0x0001)  
	bool                                               bOverride_GrainJitter : 1;                                  // 0x000C:3 (0x0001)  
	bool                                               bOverride_AmbientOcclusionIntensity : 1;                    // 0x000C:4 (0x0001)  
	bool                                               bOverride_AmbientOcclusionStaticFraction : 1;               // 0x000C:5 (0x0001)  
	bool                                               bOverride_AmbientOcclusionRadius : 1;                       // 0x000C:6 (0x0001)  
	bool                                               bOverride_AmbientOcclusionFadeDistance : 1;                 // 0x000C:7 (0x0001)  
	bool                                               bOverride_AmbientOcclusionFadeRadius : 1;                   // 0x000D:0 (0x0001)  
	bool                                               bOverride_AmbientOcclusionDistance : 1;                     // 0x000D:1 (0x0001)  
	bool                                               bOverride_AmbientOcclusionRadiusInWS : 1;                   // 0x000D:2 (0x0001)  
	bool                                               bOverride_AmbientOcclusionPower : 1;                        // 0x000D:3 (0x0001)  
	bool                                               bOverride_AmbientOcclusionBias : 1;                         // 0x000D:4 (0x0001)  
	bool                                               bOverride_AmbientOcclusionQuality : 1;                      // 0x000D:5 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipBlend : 1;                     // 0x000D:6 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipScale : 1;                     // 0x000D:7 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipThreshold : 1;                 // 0x000E:0 (0x0001)  
	unsigned char                                      UnknownData00_3[0x1];                                       // 0x000F   (0x0001)  MISSED
	bool                                               bOverride_RayTracingAO : 1;                                 // 0x0010:0 (0x0001)  
	bool                                               bOverride_RayTracingAOSamplesPerPixel : 1;                  // 0x0010:1 (0x0001)  
	unsigned char                                      UnknownData01_3[0x3];                                       // 0x0011   (0x0003)  MISSED
	bool                                               bOverride_LPVIntensity : 1;                                 // 0x0014:0 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionIntensity : 1;             // 0x0014:1 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionRadius : 1;                // 0x0014:2 (0x0001)  
	bool                                               bOverride_LPVDiffuseOcclusionExponent : 1;                  // 0x0014:3 (0x0001)  
	bool                                               bOverride_LPVSpecularOcclusionExponent : 1;                 // 0x0014:4 (0x0001)  
	bool                                               bOverride_LPVDiffuseOcclusionIntensity : 1;                 // 0x0014:5 (0x0001)  
	bool                                               bOverride_LPVSpecularOcclusionIntensity : 1;                // 0x0014:6 (0x0001)  
	bool                                               bOverride_LPVSize : 1;                                      // 0x0014:7 (0x0001)  
	bool                                               bOverride_LPVSecondaryOcclusionIntensity : 1;               // 0x0015:0 (0x0001)  
	bool                                               bOverride_LPVSecondaryBounceIntensity : 1;                  // 0x0015:1 (0x0001)  
	bool                                               bOverride_LPVGeometryVolumeBias : 1;                        // 0x0015:2 (0x0001)  
	bool                                               bOverride_LPVVplInjectionBias : 1;                          // 0x0015:3 (0x0001)  
	bool                                               bOverride_LPVEmissiveInjectionIntensity : 1;                // 0x0015:4 (0x0001)  
	bool                                               bOverride_LPVFadeRange : 1;                                 // 0x0015:5 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionFadeRange : 1;             // 0x0015:6 (0x0001)  
	bool                                               bOverride_IndirectLightingColor : 1;                        // 0x0015:7 (0x0001)  
	bool                                               bOverride_IndirectLightingIntensity : 1;                    // 0x0016:0 (0x0001)  
	bool                                               bOverride_ColorGradingIntensity : 1;                        // 0x0016:1 (0x0001)  
	bool                                               bOverride_ColorGradingLUT : 1;                              // 0x0016:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldFocalDistance : 1;                    // 0x0016:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldFstop : 1;                            // 0x0016:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldMinFstop : 1;                         // 0x0016:5 (0x0001)  
	bool                                               bOverride_DepthOfFieldBladeCount : 1;                       // 0x0016:6 (0x0001)  
	bool                                               bOverride_DepthOfFieldSensorWidth : 1;                      // 0x0016:7 (0x0001)  
	bool                                               bOverride_DepthOfFieldDepthBlurRadius : 1;                  // 0x0017:0 (0x0001)  
	bool                                               bOverride_DepthOfFieldDepthBlurAmount : 1;                  // 0x0017:1 (0x0001)  
	bool                                               bOverride_DepthOfFieldFocalRegion : 1;                      // 0x0017:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldNearTransitionRegion : 1;             // 0x0017:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldFarTransitionRegion : 1;              // 0x0017:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldScale : 1;                            // 0x0017:5 (0x0001)  
	bool                                               bOverride_DepthOfFieldNearBlurSize : 1;                     // 0x0017:6 (0x0001)  
	bool                                               bOverride_DepthOfFieldFarBlurSize : 1;                      // 0x0017:7 (0x0001)  
	bool                                               bOverride_MobileHQGaussian : 1;                             // 0x0018:0 (0x0001)  
	bool                                               bOverride_DepthOfFieldOcclusion : 1;                        // 0x0018:1 (0x0001)  
	bool                                               bOverride_DepthOfFieldSkyFocusDistance : 1;                 // 0x0018:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldVignetteSize : 1;                     // 0x0018:3 (0x0001)  
	bool                                               bOverride_MotionBlurAmount : 1;                             // 0x0018:4 (0x0001)  
	bool                                               bOverride_MotionBlurMax : 1;                                // 0x0018:5 (0x0001)  
	bool                                               bOverride_MotionBlurTargetFPS : 1;                          // 0x0018:6 (0x0001)  
	bool                                               bOverride_MotionBlurPerObjectSize : 1;                      // 0x0018:7 (0x0001)  
	bool                                               bOverride_ScreenPercentage : 1;                             // 0x0019:0 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionIntensity : 1;               // 0x0019:1 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionQuality : 1;                 // 0x0019:2 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionMaxRoughness : 1;            // 0x0019:3 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionRoughnessScale : 1;          // 0x0019:4 (0x0001)  
	unsigned char                                      UnknownData02_3[0x2];                                       // 0x001A   (0x0002)  MISSED
	bool                                               bOverride_ReflectionsType : 1;                              // 0x001C:0 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsMaxRoughness : 1;            // 0x001C:1 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsMaxBounces : 1;              // 0x001C:2 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsSamplesPerPixel : 1;         // 0x001C:3 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsShadows : 1;                 // 0x001C:4 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsTranslucency : 1;            // 0x001C:5 (0x0001)  
	bool                                               bOverride_TranslucencyType : 1;                             // 0x001C:6 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyMaxRoughness : 1;           // 0x001C:7 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyMinReflectionThroughput : 1; // 0x001D:0 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyMinRefractionThroughput : 1; // 0x001D:1 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyEnableAbsorption : 1;       // 0x001D:2 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyRefractionRays : 1;         // 0x001D:3 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencySamplesPerPixel : 1;        // 0x001D:4 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyShadows : 1;                // 0x001D:5 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyRefraction : 1;             // 0x001D:6 (0x0001)  
	bool                                               bOverride_RayTracingGI : 1;                                 // 0x001D:7 (0x0001)  
	bool                                               bOverride_RayTracingGIMaxBounces : 1;                       // 0x001E:0 (0x0001)  
	bool                                               bOverride_RayTracingGISamplesPerPixel : 1;                  // 0x001E:1 (0x0001)  
	bool                                               bOverride_GIDenoiseApplyAO : 1;                             // 0x001E:2 (0x0001)  
	bool                                               bOverride_GIDenoiseEnableTemporal : 1;                      // 0x001E:3 (0x0001)  
	bool                                               bOverride_GIDenoiseTemporalBlendWeight : 1;                 // 0x001E:4 (0x0001)  
	bool                                               bOverride_GIDenoiseTemporalMomentBlendWeight : 1;           // 0x001E:5 (0x0001)  
	bool                                               bOverride_GIDenoiseTemporalNormalTolerance : 1;             // 0x001E:6 (0x0001)  
	bool                                               bOverride_GIDenoiseTemporalDepthTolerance : 1;              // 0x001E:7 (0x0001)  
	bool                                               bOverride_GIDenoiseColorClamp : 1;                          // 0x001F:0 (0x0001)  
	bool                                               bOverride_GIDenoiseHistoryLength : 1;                       // 0x001F:1 (0x0001)  
	bool                                               bOverride_GIDenoiseEnableATrous : 1;                        // 0x001F:2 (0x0001)  
	bool                                               bOverride_GIDenoiseATrousIteration : 1;                     // 0x001F:3 (0x0001)  
	bool                                               bOverride_GIDenoiseATrousCopyIteration : 1;                 // 0x001F:4 (0x0001)  
	bool                                               bOverride_GIDenoiseATrousSampleDepthAsNormal : 1;           // 0x001F:5 (0x0001)  
	bool                                               bOverride_GIDenoiseATrousFilterWidth : 1;                   // 0x001F:6 (0x0001)  
	bool                                               bOverride_GIDenoiseATrousVarianceGain : 1;                  // 0x001F:7 (0x0001)  
	bool                                               bOverride_GIDenoiseATrousNormalTolerance : 1;               // 0x0020:0 (0x0001)  
	bool                                               bOverride_GIDenoiseATrousDepthTolerance : 1;                // 0x0020:1 (0x0001)  
	bool                                               bOverride_GIDenoiseATrousAOTolerance : 1;                   // 0x0020:2 (0x0001)  
	bool                                               bOverride_GIDenoiseSpatialFilterType : 1;                   // 0x0020:3 (0x0001)  
	bool                                               bOverride_GIDenoiseType : 1;                                // 0x0020:4 (0x0001)  
	bool                                               bOverride_GIDenoiseDebugType : 1;                           // 0x0020:5 (0x0001)  
	bool                                               bOverride_PathTracingMaxBounces : 1;                        // 0x0020:6 (0x0001)  
	bool                                               bOverride_PathTracingSamplesPerPixel : 1;                   // 0x0020:7 (0x0001)  
	bool                                               bOverride_RayTracingCausticsEnable : 1;                     // 0x0021:0 (0x0001)  
	bool                                               bOverride_RayTracingCausticsResolution : 1;                 // 0x0021:1 (0x0001)  
	bool                                               bOverride_RayTracingCausticsIntensity : 1;                  // 0x0021:2 (0x0001)  
	bool                                               bOverride_RayTracingCausticsMaxIntensity : 1;               // 0x0021:3 (0x0001)  
	bool                                               bOverride_RayTracingCausticsMaxTraceDepth : 1;              // 0x0021:4 (0x0001)  
	bool                                               bOverride_RayTracingCausticsFinalCullColorThreshold : 1;    // 0x0021:5 (0x0001)  
	bool                                               bOverride_RayTracingCausticsMidCullColorThreshold : 1;      // 0x0021:6 (0x0001)  
	bool                                               bOverride_RayTracingCausticsTranslucentReflectionMode : 1;  // 0x0021:7 (0x0001)  
	bool                                               bOverride_RayTracingCausticsMaxScreenRadius : 1;            // 0x0022:0 (0x0001)  
	bool                                               bOverride_RayTracingCausticsBufferScale : 1;                // 0x0022:1 (0x0001)  
	bool                                               bOverride_RayTracingCausticsScatterDepthTolerance : 1;      // 0x0022:2 (0x0001)  
	bool                                               bOverride_RayTracingCausticsSplatSize : 1;                  // 0x0022:3 (0x0001)  
	bool                                               bOverride_RayTracingCausticsEnableDispersion : 1;           // 0x0022:4 (0x0001)  
	bool                                               bOverride_RayTracingCausticsDispersionSamples : 1;          // 0x0022:5 (0x0001)  
	bool                                               bOverride_RayTracingCausticsAdaptivePhotonSize : 1;         // 0x0022:6 (0x0001)  
	bool                                               bOverride_RayTracingCausticsAdaptiveVarianceGain : 1;       // 0x0022:7 (0x0001)  
	bool                                               bOverride_RayTracingCausticsAdaptiveSmooth : 1;             // 0x0023:0 (0x0001)  
	bool                                               bOverride_RayTracingCausticsAdaptiveMaxSample : 1;          // 0x0023:1 (0x0001)  
	bool                                               bOverride_RayTracingCausticsAdaptiveUpdateSpeed : 1;        // 0x0023:2 (0x0001)  
	bool                                               bOverride_RayTracingCausticsEnableTemporalFilter : 1;       // 0x0023:3 (0x0001)  
	bool                                               bOverride_RayTracingCausticsJitter : 1;                     // 0x0023:4 (0x0001)  
	bool                                               bOverride_RayTracingCausticsTemporalStrength : 1;           // 0x0023:5 (0x0001)  
	bool                                               bOverride_RayTracingCausticsTemporalColorTolerance : 1;     // 0x0023:6 (0x0001)  
	bool                                               bOverride_RayTracingCausticsDebugLightData : 1;             // 0x0023:7 (0x0001)  
	bool                                               bOverride_RayTracingCausticsDebugScreenData : 1;            // 0x0024:0 (0x0001)  
	bool                                               bOverride_RayTracingCausticsDebugMaxPixelValue : 1;         // 0x0024:1 (0x0001)  
	bool                                               bOverride_RayTracingCausticsDebugMapScale : 1;              // 0x0024:2 (0x0001)  
	bool                                               bOverride_RayTracingCausticsDebugMaxPhotonCount : 1;        // 0x0024:3 (0x0001)  
	bool                                               bOverride_RayTracingCausticsDebugMip : 1;                   // 0x0024:4 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsType : 1;                  // 0x0024:5 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsBufferScale : 1;           // 0x0024:6 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsFollowCamera : 1;          // 0x0024:7 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsLookAt : 1;                // 0x0025:0 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsRange : 1;                 // 0x0025:1 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsColor : 1;                 // 0x0025:2 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsNumDenoisePasses : 1;      // 0x0025:3 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsDispersionIntensity : 1;   // 0x0025:4 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsDispersionOffset : 1;      // 0x0025:5 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsReflectiveIntensity : 1;   // 0x0025:6 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsReflectedRayTMax : 1;      // 0x0025:7 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsReflectedRayTMin : 1;      // 0x0026:0 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsRefractiveIntensity : 1;   // 0x0026:1 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsRefractedRayTMax : 1;      // 0x0026:2 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsRefractedRayTMin : 1;      // 0x0026:3 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsFresnelBaseReflectFraction : 1; // 0x0026:4 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsReflectBackFaceCullingThreshold : 1; // 0x0026:5 (0x0001)  
	bool                                               bOverride_RayTracingWaterCausticsRefractBackFaceCullingThreshold : 1; // 0x0026:6 (0x0001)  
	unsigned char                                      UnknownData03_3[0x1];                                       // 0x0027   (0x0001)  MISSED
	bool                                               bMobileHQGaussian : 1;                                      // 0x0028:0 (0x0001)  
	SDK_UNDEFINED(1,197) /* TEnumAsByte<EBloomMethod> */ __um(BloomMethod);                                        // 0x0029   (0x0001)  
	SDK_UNDEFINED(1,198) /* TEnumAsByte<EAutoExposureMethod> */ __um(AutoExposureMethod);                          // 0x002A   (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x002B   (0x0001)  MISSED
	float                                              WhiteTemp;                                                  // 0x002C   (0x0004)  
	float                                              WhiteTint;                                                  // 0x0030   (0x0004)  
	unsigned char                                      UnknownData05_5[0xC];                                       // 0x0034   (0x000C)  MISSED
	FVector4                                           ColorSaturation;                                            // 0x0040   (0x0010)  
	FVector4                                           ColorContrast;                                              // 0x0050   (0x0010)  
	FVector4                                           ColorGamma;                                                 // 0x0060   (0x0010)  
	FVector4                                           ColorGain;                                                  // 0x0070   (0x0010)  
	FVector4                                           ColorOffset;                                                // 0x0080   (0x0010)  
	FVector4                                           ColorSaturationShadows;                                     // 0x0090   (0x0010)  
	FVector4                                           ColorContrastShadows;                                       // 0x00A0   (0x0010)  
	FVector4                                           ColorGammaShadows;                                          // 0x00B0   (0x0010)  
	FVector4                                           ColorGainShadows;                                           // 0x00C0   (0x0010)  
	FVector4                                           ColorOffsetShadows;                                         // 0x00D0   (0x0010)  
	FVector4                                           ColorSaturationMidtones;                                    // 0x00E0   (0x0010)  
	FVector4                                           ColorContrastMidtones;                                      // 0x00F0   (0x0010)  
	FVector4                                           ColorGammaMidtones;                                         // 0x0100   (0x0010)  
	FVector4                                           ColorGainMidtones;                                          // 0x0110   (0x0010)  
	FVector4                                           ColorOffsetMidtones;                                        // 0x0120   (0x0010)  
	FVector4                                           ColorSaturationHighlights;                                  // 0x0130   (0x0010)  
	FVector4                                           ColorContrastHighlights;                                    // 0x0140   (0x0010)  
	FVector4                                           ColorGammaHighlights;                                       // 0x0150   (0x0010)  
	FVector4                                           ColorGainHighlights;                                        // 0x0160   (0x0010)  
	FVector4                                           ColorOffsetHighlights;                                      // 0x0170   (0x0010)  
	float                                              ColorCorrectionHighlightsMin;                               // 0x0180   (0x0004)  
	float                                              ColorCorrectionShadowsMax;                                  // 0x0184   (0x0004)  
	float                                              BlueCorrection;                                             // 0x0188   (0x0004)  
	float                                              ExpandGamut;                                                // 0x018C   (0x0004)  
	float                                              FilmSlope;                                                  // 0x0190   (0x0004)  
	float                                              FilmToe;                                                    // 0x0194   (0x0004)  
	float                                              FilmShoulder;                                               // 0x0198   (0x0004)  
	float                                              FilmBlackClip;                                              // 0x019C   (0x0004)  
	float                                              FilmWhiteClip;                                              // 0x01A0   (0x0004)  
	FLinearColor                                       FilmWhitePoint;                                             // 0x01A4   (0x0010)  
	FLinearColor                                       FilmShadowTint;                                             // 0x01B4   (0x0010)  
	float                                              FilmShadowTintBlend;                                        // 0x01C4   (0x0004)  
	float                                              FilmShadowTintAmount;                                       // 0x01C8   (0x0004)  
	float                                              FilmSaturation;                                             // 0x01CC   (0x0004)  
	FLinearColor                                       FilmChannelMixerRed;                                        // 0x01D0   (0x0010)  
	FLinearColor                                       FilmChannelMixerGreen;                                      // 0x01E0   (0x0010)  
	FLinearColor                                       FilmChannelMixerBlue;                                       // 0x01F0   (0x0010)  
	float                                              FilmContrast;                                               // 0x0200   (0x0004)  
	float                                              FilmToeAmount;                                              // 0x0204   (0x0004)  
	float                                              FilmHealAmount;                                             // 0x0208   (0x0004)  
	float                                              FilmDynamicRange;                                           // 0x020C   (0x0004)  
	FLinearColor                                       SceneColorTint;                                             // 0x0210   (0x0010)  
	float                                              SceneFringeIntensity;                                       // 0x0220   (0x0004)  
	float                                              ChromaticAberrationStartOffset;                             // 0x0224   (0x0004)  
	float                                              BloomIntensity;                                             // 0x0228   (0x0004)  
	float                                              BloomThreshold;                                             // 0x022C   (0x0004)  
	float                                              BloomSizeScale;                                             // 0x0230   (0x0004)  
	float                                              Bloom1Size;                                                 // 0x0234   (0x0004)  
	float                                              Bloom2Size;                                                 // 0x0238   (0x0004)  
	float                                              Bloom3Size;                                                 // 0x023C   (0x0004)  
	float                                              Bloom4Size;                                                 // 0x0240   (0x0004)  
	float                                              Bloom5Size;                                                 // 0x0244   (0x0004)  
	float                                              Bloom6Size;                                                 // 0x0248   (0x0004)  
	FLinearColor                                       Bloom1Tint;                                                 // 0x024C   (0x0010)  
	FLinearColor                                       Bloom2Tint;                                                 // 0x025C   (0x0010)  
	FLinearColor                                       Bloom3Tint;                                                 // 0x026C   (0x0010)  
	FLinearColor                                       Bloom4Tint;                                                 // 0x027C   (0x0010)  
	FLinearColor                                       Bloom5Tint;                                                 // 0x028C   (0x0010)  
	FLinearColor                                       Bloom6Tint;                                                 // 0x029C   (0x0010)  
	float                                              BloomConvolutionSize;                                       // 0x02AC   (0x0004)  
	class UTexture2D*                                  BloomConvolutionTexture;                                    // 0x02B0   (0x0008)  
	FVector2D                                          BloomConvolutionCenterUV;                                   // 0x02B8   (0x0008)  
	float                                              BloomConvolutionPreFilterMin;                               // 0x02C0   (0x0004)  
	float                                              BloomConvolutionPreFilterMax;                               // 0x02C4   (0x0004)  
	float                                              BloomConvolutionPreFilterMult;                              // 0x02C8   (0x0004)  
	float                                              BloomConvolutionBufferScale;                                // 0x02CC   (0x0004)  
	class UTexture*                                    BloomDirtMask;                                              // 0x02D0   (0x0008)  
	float                                              BloomDirtMaskIntensity;                                     // 0x02D8   (0x0004)  
	FLinearColor                                       BloomDirtMaskTint;                                          // 0x02DC   (0x0010)  
	FLinearColor                                       AmbientCubemapTint;                                         // 0x02EC   (0x0010)  
	float                                              AmbientCubemapIntensity;                                    // 0x02FC   (0x0004)  
	class UTextureCube*                                AmbientCubemap;                                             // 0x0300   (0x0008)  
	float                                              CameraShutterSpeed;                                         // 0x0308   (0x0004)  
	float                                              CameraISO;                                                  // 0x030C   (0x0004)  
	float                                              DepthOfFieldFstop;                                          // 0x0310   (0x0004)  
	float                                              DepthOfFieldMinFstop;                                       // 0x0314   (0x0004)  
	int32_t                                            DepthOfFieldBladeCount;                                     // 0x0318   (0x0004)  
	float                                              AutoExposureBias;                                           // 0x031C   (0x0004)  
	float                                              AutoExposureBiasBackup;                                     // 0x0320   (0x0004)  
	bool                                               bOverride_AutoExposureBiasBackup : 1;                       // 0x0324:0 (0x0001)  
	unsigned char                                      UnknownData06_3[0x3];                                       // 0x0325   (0x0003)  MISSED
	bool                                               AutoExposureApplyPhysicalCameraExposure : 1;                // 0x0328:0 (0x0001)  
	unsigned char                                      UnknownData07_4[0x7];                                       // 0x0329   (0x0007)  MISSED
	class UCurveFloat*                                 AutoExposureBiasCurve;                                      // 0x0330   (0x0008)  
	class UTexture*                                    AutoExposureMeterMask;                                      // 0x0338   (0x0008)  
	float                                              AutoExposureLowPercent;                                     // 0x0340   (0x0004)  
	float                                              AutoExposureHighPercent;                                    // 0x0344   (0x0004)  
	float                                              AutoExposureMinBrightness;                                  // 0x0348   (0x0004)  
	float                                              AutoExposureMaxBrightness;                                  // 0x034C   (0x0004)  
	float                                              AutoExposureSpeedUp;                                        // 0x0350   (0x0004)  
	float                                              AutoExposureSpeedDown;                                      // 0x0354   (0x0004)  
	float                                              HistogramLogMin;                                            // 0x0358   (0x0004)  
	float                                              HistogramLogMax;                                            // 0x035C   (0x0004)  
	float                                              AutoExposureCalibrationConstant;                            // 0x0360   (0x0004)  
	float                                              LensFlareIntensity;                                         // 0x0364   (0x0004)  
	FLinearColor                                       LensFlareTint;                                              // 0x0368   (0x0010)  
	float                                              LensFlareBokehSize;                                         // 0x0378   (0x0004)  
	float                                              LensFlareThreshold;                                         // 0x037C   (0x0004)  
	class UTexture*                                    LensFlareBokehShape;                                        // 0x0380   (0x0008)  
	FLinearColor                                       LensFlareTints;                                             // 0x0388   (0x0080)  
	float                                              VignetteIntensity;                                          // 0x0408   (0x0004)  
	float                                              GrainJitter;                                                // 0x040C   (0x0004)  
	float                                              GrainIntensity;                                             // 0x0410   (0x0004)  
	float                                              AmbientOcclusionIntensity;                                  // 0x0414   (0x0004)  
	float                                              AmbientOcclusionStaticFraction;                             // 0x0418   (0x0004)  
	float                                              AmbientOcclusionRadius;                                     // 0x041C   (0x0004)  
	bool                                               AmbientOcclusionRadiusInWS : 1;                             // 0x0420:0 (0x0001)  
	unsigned char                                      UnknownData08_4[0x3];                                       // 0x0421   (0x0003)  MISSED
	float                                              AmbientOcclusionFadeDistance;                               // 0x0424   (0x0004)  
	float                                              AmbientOcclusionFadeRadius;                                 // 0x0428   (0x0004)  
	float                                              AmbientOcclusionDistance;                                   // 0x042C   (0x0004)  
	float                                              AmbientOcclusionPower;                                      // 0x0430   (0x0004)  
	float                                              AmbientOcclusionBias;                                       // 0x0434   (0x0004)  
	float                                              AmbientOcclusionQuality;                                    // 0x0438   (0x0004)  
	float                                              AmbientOcclusionMipBlend;                                   // 0x043C   (0x0004)  
	float                                              AmbientOcclusionMipScale;                                   // 0x0440   (0x0004)  
	float                                              AmbientOcclusionMipThreshold;                               // 0x0444   (0x0004)  
	bool                                               RayTracingAO : 1;                                           // 0x0448:0 (0x0001)  
	unsigned char                                      UnknownData09_4[0x3];                                       // 0x0449   (0x0003)  MISSED
	int32_t                                            RayTracingAOSamplesPerPixel;                                // 0x044C   (0x0004)  
	FLinearColor                                       IndirectLightingColor;                                      // 0x0450   (0x0010)  
	float                                              IndirectLightingIntensity;                                  // 0x0460   (0x0004)  
	ERayTracingGlobalIlluminationType                  RayTracingGIType;                                           // 0x0464   (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0465   (0x0003)  MISSED
	int32_t                                            RayTracingGIMaxBounces;                                     // 0x0468   (0x0004)  
	int32_t                                            RayTracingGISamplesPerPixel;                                // 0x046C   (0x0004)  
	bool                                               RayTracingCausticsEnable : 1;                               // 0x0470:0 (0x0001)  
	unsigned char                                      UnknownData11_4[0x3];                                       // 0x0471   (0x0003)  MISSED
	ERayTracingMeshCausticsResolutionOverride          RayTracingCausticsResolution;                               // 0x0474   (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x0475   (0x0003)  MISSED
	float                                              RayTracingCausticsIntensity;                                // 0x0478   (0x0004)  
	float                                              RayTracingCausticsMaxIntensity;                             // 0x047C   (0x0004)  
	int32_t                                            RayTracingCausticsMaxTraceDepth;                            // 0x0480   (0x0004)  
	float                                              RayTracingCausticsFinalCullColorThreshold;                  // 0x0484   (0x0004)  
	float                                              RayTracingCausticsMidCullColorThreshold;                    // 0x0488   (0x0004)  
	ERayTracingMeshCausticsTranslucentReflectionMode   RayTracingCausticsTranslucentReflectionMode;                // 0x048C   (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x048D   (0x0003)  MISSED
	float                                              RayTracingCausticsMaxScreenRadius;                          // 0x0490   (0x0004)  
	ERayTracingMeshCausticsBufferScale                 RayTracingCausticsBufferScale;                              // 0x0494   (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x0495   (0x0003)  MISSED
	float                                              RayTracingCausticsScatterDepthTolerance;                    // 0x0498   (0x0004)  
	float                                              RayTracingCausticsSplatSize;                                // 0x049C   (0x0004)  
	bool                                               RayTracingCausticsEnableDispersion : 1;                     // 0x04A0:0 (0x0001)  
	unsigned char                                      UnknownData15_4[0x3];                                       // 0x04A1   (0x0003)  MISSED
	int32_t                                            RayTracingCausticsDispersionSamples;                        // 0x04A4   (0x0004)  
	float                                              RayTracingCausticsAdaptivePhotonSize;                       // 0x04A8   (0x0004)  
	float                                              RayTracingCausticsAdaptiveVarianceGain;                     // 0x04AC   (0x0004)  
	float                                              RayTracingCausticsAdaptiveSmooth;                           // 0x04B0   (0x0004)  
	int32_t                                            RayTracingCausticsAdaptiveMaxSample;                        // 0x04B4   (0x0004)  
	float                                              RayTracingCausticsAdaptiveUpdateSpeed;                      // 0x04B8   (0x0004)  
	bool                                               RayTracingCausticsEnableTemporalFilter : 1;                 // 0x04BC:0 (0x0001)  
	unsigned char                                      UnknownData16_4[0x3];                                       // 0x04BD   (0x0003)  MISSED
	float                                              RayTracingCausticsJitter;                                   // 0x04C0   (0x0004)  
	float                                              RayTracingCausticsTemporalStrength;                         // 0x04C4   (0x0004)  
	float                                              RayTracingCausticsTemporalColorTolerance;                   // 0x04C8   (0x0004)  
	ERayTracingMeshCausticsDebugLightData              RayTracingCausticsDebugLightData;                           // 0x04CC   (0x0001)  
	ERayTracingMeshCausticsDebugScreenData             RayTracingCausticsDebugScreenData;                          // 0x04CD   (0x0001)  
	unsigned char                                      UnknownData17_5[0x2];                                       // 0x04CE   (0x0002)  MISSED
	float                                              RayTracingCausticsDebugMaxPixelValue;                       // 0x04D0   (0x0004)  
	float                                              RayTracingCausticsDebugMapScale;                            // 0x04D4   (0x0004)  
	int32_t                                            RayTracingCausticsDebugMaxPhotonCount;                      // 0x04D8   (0x0004)  
	int32_t                                            RayTracingCausticsDebugMip;                                 // 0x04DC   (0x0004)  
	ERayTracingWaterCausticsType                       RayTracingWaterCausticsType;                                // 0x04E0   (0x0001)  
	ERayTracingWaterCausticsBufferScale                RayTracingWaterCausticsBufferScale;                         // 0x04E1   (0x0001)  
	unsigned char                                      UnknownData18_5[0x2];                                       // 0x04E2   (0x0002)  MISSED
	bool                                               RayTracingWaterCausticsFollowCamera : 1;                    // 0x04E4:0 (0x0001)  
	unsigned char                                      UnknownData19_4[0x3];                                       // 0x04E5   (0x0003)  MISSED
	FVector                                            RayTracingWaterCausticsLookAt;                              // 0x04E8   (0x000C)  
	FVector                                            RayTracingWaterCausticsRange;                               // 0x04F4   (0x000C)  
	FLinearColor                                       RayTracingWaterCausticsColor;                               // 0x0500   (0x0010)  
	int32_t                                            RayTracingWaterCausticsNumDenoisePasses;                    // 0x0510   (0x0004)  
	float                                              RayTracingWaterCausticsDispersionIntensity;                 // 0x0514   (0x0004)  
	float                                              RayTracingWaterCausticsDispersionOffset;                    // 0x0518   (0x0004)  
	float                                              RayTracingWaterCausticsReflectiveIntensity;                 // 0x051C   (0x0004)  
	float                                              RayTracingWaterCausticsReflectedRayTMax;                    // 0x0520   (0x0004)  
	float                                              RayTracingWaterCausticsReflectedRayTMin;                    // 0x0524   (0x0004)  
	float                                              RayTracingWaterCausticsRefractiveIntensity;                 // 0x0528   (0x0004)  
	float                                              RayTracingWaterCausticsRefractedRayTMax;                    // 0x052C   (0x0004)  
	float                                              RayTracingWaterCausticsRefractedRayTMin;                    // 0x0530   (0x0004)  
	float                                              RayTracingWaterCausticsFresnelBaseReflectFraction;          // 0x0534   (0x0004)  
	float                                              RayTracingWaterCausticsReflectBackFaceCullingThreshold;     // 0x0538   (0x0004)  
	float                                              RayTracingWaterCausticsRefractBackFaceCullingThreshold;     // 0x053C   (0x0004)  
	bool                                               GIDenoiseApplyAO : 1;                                       // 0x0540:0 (0x0001)  
	bool                                               GIDenoiseEnableTemporal : 1;                                // 0x0540:1 (0x0001)  
	unsigned char                                      UnknownData20_4[0x3];                                       // 0x0541   (0x0003)  MISSED
	float                                              GIDenoiseTemporalBlendWeight;                               // 0x0544   (0x0004)  
	float                                              GIDenoiseTemporalMomentBlendWeight;                         // 0x0548   (0x0004)  
	float                                              GIDenoiseTemporalNormalTolerance;                           // 0x054C   (0x0004)  
	float                                              GIDenoiseTemporalDepthTolerance;                            // 0x0550   (0x0004)  
	int32_t                                            GIDenoiseColorClamp;                                        // 0x0554   (0x0004)  
	int32_t                                            GIDenoiseHistoryLength;                                     // 0x0558   (0x0004)  
	bool                                               GIDenoiseEnableATrous : 1;                                  // 0x055C:0 (0x0001)  
	unsigned char                                      UnknownData21_4[0x3];                                       // 0x055D   (0x0003)  MISSED
	int32_t                                            GIDenoiseATrousIteration;                                   // 0x0560   (0x0004)  
	int32_t                                            GIDenoiseATrousCopyIteration;                               // 0x0564   (0x0004)  
	bool                                               GIDenoiseATrousSampleDepthAsNormal : 1;                     // 0x0568:0 (0x0001)  
	unsigned char                                      UnknownData22_4[0x3];                                       // 0x0569   (0x0003)  MISSED
	float                                              GIDenoiseATrousFilterWidth;                                 // 0x056C   (0x0004)  
	float                                              GIDenoiseATrousVarianceGain;                                // 0x0570   (0x0004)  
	float                                              GIDenoiseATrousNormalTolerance;                             // 0x0574   (0x0004)  
	float                                              GIDenoiseATrousDepthTolerance;                              // 0x0578   (0x0004)  
	float                                              GIDenoiseATrousAOTolerance;                                 // 0x057C   (0x0004)  
	ERayTracingGIDenoiseSpatialFilterType              GIDenoiseSpatialFilterType;                                 // 0x0580   (0x0001)  
	ERayTracingGIDenoiseType                           GIDenoiseType;                                              // 0x0581   (0x0001)  
	ERayTracingGIDenoiseDebugType                      GIDenoiseDebugType;                                         // 0x0582   (0x0001)  
	unsigned char                                      UnknownData23_5[0x1];                                       // 0x0583   (0x0001)  MISSED
	float                                              ColorGradingIntensity;                                      // 0x0584   (0x0004)  
	class UTexture*                                    ColorGradingLUT;                                            // 0x0588   (0x0008)  
	float                                              DepthOfFieldSensorWidth;                                    // 0x0590   (0x0004)  
	float                                              DepthOfFieldFocalDistance;                                  // 0x0594   (0x0004)  
	float                                              DepthOfFieldDepthBlurAmount;                                // 0x0598   (0x0004)  
	float                                              DepthOfFieldDepthBlurRadius;                                // 0x059C   (0x0004)  
	float                                              DepthOfFieldFocalRegion;                                    // 0x05A0   (0x0004)  
	float                                              DepthOfFieldNearTransitionRegion;                           // 0x05A4   (0x0004)  
	float                                              DepthOfFieldFarTransitionRegion;                            // 0x05A8   (0x0004)  
	float                                              DepthOfFieldScale;                                          // 0x05AC   (0x0004)  
	float                                              DepthOfFieldNearBlurSize;                                   // 0x05B0   (0x0004)  
	float                                              DepthOfFieldFarBlurSize;                                    // 0x05B4   (0x0004)  
	float                                              DepthOfFieldOcclusion;                                      // 0x05B8   (0x0004)  
	float                                              DepthOfFieldSkyFocusDistance;                               // 0x05BC   (0x0004)  
	float                                              DepthOfFieldVignetteSize;                                   // 0x05C0   (0x0004)  
	float                                              MotionBlurAmount;                                           // 0x05C4   (0x0004)  
	float                                              MotionBlurMax;                                              // 0x05C8   (0x0004)  
	int32_t                                            MotionBlurTargetFPS;                                        // 0x05CC   (0x0004)  
	float                                              MotionBlurPerObjectSize;                                    // 0x05D0   (0x0004)  
	float                                              LPVIntensity;                                               // 0x05D4   (0x0004)  
	float                                              LPVVplInjectionBias;                                        // 0x05D8   (0x0004)  
	float                                              LPVSize;                                                    // 0x05DC   (0x0004)  
	float                                              LPVSecondaryOcclusionIntensity;                             // 0x05E0   (0x0004)  
	float                                              LPVSecondaryBounceIntensity;                                // 0x05E4   (0x0004)  
	float                                              LPVGeometryVolumeBias;                                      // 0x05E8   (0x0004)  
	float                                              LPVEmissiveInjectionIntensity;                              // 0x05EC   (0x0004)  
	float                                              LPVDirectionalOcclusionIntensity;                           // 0x05F0   (0x0004)  
	float                                              LPVDirectionalOcclusionRadius;                              // 0x05F4   (0x0004)  
	float                                              LPVDiffuseOcclusionExponent;                                // 0x05F8   (0x0004)  
	float                                              LPVSpecularOcclusionExponent;                               // 0x05FC   (0x0004)  
	float                                              LPVDiffuseOcclusionIntensity;                               // 0x0600   (0x0004)  
	float                                              LPVSpecularOcclusionIntensity;                              // 0x0604   (0x0004)  
	EReflectionsType                                   ReflectionsType;                                            // 0x0608   (0x0001)  
	unsigned char                                      UnknownData24_5[0x3];                                       // 0x0609   (0x0003)  MISSED
	float                                              ScreenSpaceReflectionIntensity;                             // 0x060C   (0x0004)  
	float                                              ScreenSpaceReflectionQuality;                               // 0x0610   (0x0004)  
	float                                              ScreenSpaceReflectionMaxRoughness;                          // 0x0614   (0x0004)  
	float                                              RayTracingReflectionsMaxRoughness;                          // 0x0618   (0x0004)  
	int32_t                                            RayTracingReflectionsMaxBounces;                            // 0x061C   (0x0004)  
	int32_t                                            RayTracingReflectionsSamplesPerPixel;                       // 0x0620   (0x0004)  
	EReflectedAndRefractedRayTracedShadows             RayTracingReflectionsShadows;                               // 0x0624   (0x0001)  
	bool                                               RayTracingReflectionsTranslucency : 1;                      // 0x0625:0 (0x0001)  
	ETranslucencyType                                  TranslucencyType;                                           // 0x0626   (0x0001)  
	unsigned char                                      UnknownData25_5[0x1];                                       // 0x0627   (0x0001)  MISSED
	float                                              RayTracingTranslucencyMaxRoughness;                         // 0x0628   (0x0004)  
	float                                              RayTracingTranslucencyMinReflectionThroughput;              // 0x062C   (0x0004)  
	float                                              RayTracingTranslucencyMinRefractionThroughput;              // 0x0630   (0x0004)  
	bool                                               RayTracingTranslucencyEnableAbsorption : 1;                 // 0x0634:0 (0x0001)  
	unsigned char                                      UnknownData26_4[0x3];                                       // 0x0635   (0x0003)  MISSED
	int32_t                                            RayTracingTranslucencyRefractionRays;                       // 0x0638   (0x0004)  
	int32_t                                            RayTracingTranslucencySamplesPerPixel;                      // 0x063C   (0x0004)  
	EReflectedAndRefractedRayTracedShadows             RayTracingTranslucencyShadows;                              // 0x0640   (0x0001)  
	bool                                               RayTracingTranslucencyRefraction : 1;                       // 0x0641:0 (0x0001)  
	unsigned char                                      UnknownData27_4[0x2];                                       // 0x0642   (0x0002)  MISSED
	int32_t                                            PathTracingMaxBounces;                                      // 0x0644   (0x0004)  
	int32_t                                            PathTracingSamplesPerPixel;                                 // 0x0648   (0x0004)  
	float                                              LPVFadeRange;                                               // 0x064C   (0x0004)  
	float                                              LPVDirectionalOcclusionFadeRange;                           // 0x0650   (0x0004)  
	float                                              ScreenPercentage;                                           // 0x0654   (0x0004)  
	FWeightedBlendables                                WeightedBlendables;                                         // 0x0658   (0x0010)  
	unsigned char                                      UnknownData28_6[0x8];                                       // 0x0668   (0x0008)  MISSED
};

/// Class /Script/Engine.CameraActor
/// Size: 0x06A0 (0x000220 - 0x0008C0)
class ACameraActor : public AActor
{ 
public:
	SDK_UNDEFINED(1,199) /* TEnumAsByte<EAutoReceiveInput> */ __um(AutoActivateForPlayer);                         // 0x0220   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0221   (0x0007)  MISSED
	class UCameraComponent*                            CameraComponent;                                            // 0x0228   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x0230   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0238   (0x0008)  MISSED
	bool                                               bConstrainAspectRatio : 1;                                  // 0x0240:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0241   (0x0003)  MISSED
	float                                              AspectRatio;                                                // 0x0244   (0x0004)  
	float                                              FOVAngle;                                                   // 0x0248   (0x0004)  
	float                                              PostProcessBlendWeight;                                     // 0x024C   (0x0004)  
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0250   (0x0670)  


	/// Functions
	// Function /Script/Engine.CameraActor.GetAutoActivatePlayerIndex
	// int32_t GetAutoActivatePlayerIndex();                                                                                 // [0x2ebc200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.GameModeBase
/// Size: 0x00A0 (0x000220 - 0x0002C0)
class AGameModeBase : public AInfo
{ 
public:
	SDK_UNDEFINED(16,200) /* FString */                __um(OptionsString);                                        // 0x0220   (0x0010)  
	class UClass*                                      GameSessionClass;                                           // 0x0230   (0x0008)  
	class UClass*                                      GameStateClass;                                             // 0x0238   (0x0008)  
	class UClass*                                      PlayerControllerClass;                                      // 0x0240   (0x0008)  
	class UClass*                                      PlayerStateClass;                                           // 0x0248   (0x0008)  
	class UClass*                                      HUDClass;                                                   // 0x0250   (0x0008)  
	class UClass*                                      DefaultPawnClass;                                           // 0x0258   (0x0008)  
	class UClass*                                      SpectatorClass;                                             // 0x0260   (0x0008)  
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                       // 0x0268   (0x0008)  
	class UClass*                                      ServerStatReplicatorClass;                                  // 0x0270   (0x0008)  
	class AGameSession*                                GameSession;                                                // 0x0278   (0x0008)  
	class AGameStateBase*                              GameState;                                                  // 0x0280   (0x0008)  
	class AServerStatReplicator*                       ServerStatReplicator;                                       // 0x0288   (0x0008)  
	SDK_UNDEFINED(24,201) /* FText */                  __um(DefaultPlayerName);                                    // 0x0290   (0x0018)  
	bool                                               bUseSeamlessTravel : 1;                                     // 0x02A8:0 (0x0001)  
	bool                                               bStartPlayersAsSpectators : 1;                              // 0x02A8:1 (0x0001)  
	bool                                               bPauseable : 1;                                             // 0x02A8:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x17];                                      // 0x02A9   (0x0017)  MISSED


	/// Functions
	// Function /Script/Engine.GameModeBase.StartPlay
	// void StartPlay();                                                                                                     // [0x67a5e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnFor
	// class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);                              // [0x2ef0800] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnAtTransform
	// class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, FTransform& SpawnTransform);                   // [0x2ef06e0] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ShouldReset
	// bool ShouldReset(class AActor* ActorToReset);                                                                         // [0x2ef0200] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ReturnToMainMenuHost
	// void ReturnToMainMenuHost();                                                                                          // [0x2eef210] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtTransform
	// void RestartPlayerAtTransform(class AController* NewPlayer, FTransform& SpawnTransform);                              // [0x2eef0f0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtPlayerStart
	// void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);                               // [0x2eef020] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayer
	// void RestartPlayer(class AController* NewPlayer);                                                                     // [0x2eeef90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.ResetLevel
	// void ResetLevel();                                                                                                    // [0x2eeef50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.PlayerCanRestart
	// bool PlayerCanRestart(class APlayerController* Player);                                                               // [0x2eee8b0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.MustSpectate
	// bool MustSpectate(class APlayerController* NewPlayerController);                                                      // [0x2eed9b0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.GameModeBase.K2_PostLogin
	// void K2_PostLogin(class APlayerController* NewPlayer);                                                                // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnSwapPlayerControllers
	// void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);                      // [0x15dd8c0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnRestartPlayer
	// void K2_OnRestartPlayer(class AController* NewPlayer);                                                                // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnLogout
	// void K2_OnLogout(class AController* ExitingController);                                                               // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnChangeName
	// void K2_OnChangeName(class AController* Other, FString NewName, bool bNameChange);                                    // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_FindPlayerStart
	// class AActor* K2_FindPlayerStart(class AController* Player, FString IncomingName);                                    // [0x2eed120] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameModeBase.InitStartSpot
	// void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);                                            // [0x2eecf50] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.InitializeHUDForPlayer
	// void InitializeHUDForPlayer(class APlayerController* NewPlayer);                                                      // [0x7e0040] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.HasMatchStarted
	// bool HasMatchStarted();                                                                                               // [0x2eecde0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameModeBase.HandleStartingNewPlayer
	// void HandleStartingNewPlayer(class APlayerController* NewPlayer);                                                     // [0x2eecc80] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.GetNumSpectators
	// int32_t GetNumSpectators();                                                                                           // [0x2eebe40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.GetNumPlayers
	// int32_t GetNumPlayers();                                                                                              // [0x2eebe10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.GetDefaultPawnClassForController
	// class UClass* GetDefaultPawnClassForController(class AController* InController);                                      // [0x2eeb7b0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.FindPlayerStart
	// class AActor* FindPlayerStart(class AController* Player, FString IncomingName);                                       // [0x2eea870] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ChoosePlayerStart
	// class AActor* ChoosePlayerStart(class AController* Player);                                                           // [0x2ee9cb0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ChangeName
	// void ChangeName(class AController* Controller, FString NewName, bool bNameChange);                                    // [0x2ee9b90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.CanSpectate
	// bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);                                    // [0x2ee9aa0] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.GameInstance
/// Size: 0x0170 (0x000028 - 0x000198)
class UGameInstance : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0000   (0x0038)  MISSED
	TArray<class ULocalPlayer*>                        LocalPlayers;                                               // 0x0038   (0x0010)  
	class UOnlineSession*                              OnlineSession;                                              // 0x0048   (0x0008)  
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0050   (0x0010)  
	unsigned char                                      UnknownData01_6[0x138];                                     // 0x0060   (0x0138)  MISSED


	/// Functions
	// Function /Script/Engine.GameInstance.ReceiveShutdown
	// void ReceiveShutdown();                                                                                               // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.ReceiveInit
	// void ReceiveInit();                                                                                                   // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.HandleTravelError
	// void HandleTravelError(TEnumAsByte<ETravelFailure> FailureType);                                                      // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.HandleNetworkError
	// void HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer);                                    // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.DebugRemovePlayer
	// void DebugRemovePlayer(int32_t ControllerId);                                                                         // [0x2ee3b00] Exec|Native|Public   
	// Function /Script/Engine.GameInstance.DebugCreatePlayer
	// void DebugCreatePlayer(int32_t ControllerId);                                                                         // [0x2ee3a70] Exec|Native|Public   
};

/// Class /Script/Engine.GameUserSettings
/// Size: 0x00F8 (0x000028 - 0x000120)
class UGameUserSettings : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bUseVSync;                                                  // 0x0028   (0x0001)  
	bool                                               bUseDynamicResolution;                                      // 0x0029   (0x0001)  
	unsigned char                                      UnknownData01_5[0x56];                                      // 0x002A   (0x0056)  MISSED
	uint32_t                                           ResolutionSizeX;                                            // 0x0080   (0x0004)  
	uint32_t                                           ResolutionSizeY;                                            // 0x0084   (0x0004)  
	uint32_t                                           LastUserConfirmedResolutionSizeX;                           // 0x0088   (0x0004)  
	uint32_t                                           LastUserConfirmedResolutionSizeY;                           // 0x008C   (0x0004)  
	int32_t                                            WindowPosX;                                                 // 0x0090   (0x0004)  
	int32_t                                            WindowPosY;                                                 // 0x0094   (0x0004)  
	int32_t                                            FullScreenMode;                                             // 0x0098   (0x0004)  
	int32_t                                            LastConfirmedFullscreenMode;                                // 0x009C   (0x0004)  
	int32_t                                            PreferredFullscreenMode;                                    // 0x00A0   (0x0004)  
	uint32_t                                           Version;                                                    // 0x00A4   (0x0004)  
	int32_t                                            AudioQualityLevel;                                          // 0x00A8   (0x0004)  
	int32_t                                            LastConfirmedAudioQualityLevel;                             // 0x00AC   (0x0004)  
	float                                              FrameRateLimit;                                             // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x00B4   (0x0004)  MISSED
	int32_t                                            DesiredScreenWidth;                                         // 0x00B8   (0x0004)  
	bool                                               bUseDesiredScreenHeight;                                    // 0x00BC   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x00BD   (0x0003)  MISSED
	int32_t                                            DesiredScreenHeight;                                        // 0x00C0   (0x0004)  
	int32_t                                            LastUserConfirmedDesiredScreenWidth;                        // 0x00C4   (0x0004)  
	int32_t                                            LastUserConfirmedDesiredScreenHeight;                       // 0x00C8   (0x0004)  
	float                                              LastRecommendedScreenWidth;                                 // 0x00CC   (0x0004)  
	float                                              LastRecommendedScreenHeight;                                // 0x00D0   (0x0004)  
	float                                              LastCPUBenchmarkResult;                                     // 0x00D4   (0x0004)  
	float                                              LastGPUBenchmarkResult;                                     // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x00DC   (0x0004)  MISSED
	TArray<float>                                      LastCPUBenchmarkSteps;                                      // 0x00E0   (0x0010)  
	TArray<float>                                      LastGPUBenchmarkSteps;                                      // 0x00F0   (0x0010)  
	float                                              LastGPUBenchmarkMultiplier;                                 // 0x0100   (0x0004)  
	bool                                               bUseHDRDisplayOutput;                                       // 0x0104   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0105   (0x0003)  MISSED
	int32_t                                            HDRDisplayOutputNits;                                       // 0x0108   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x010C   (0x0004)  MISSED
	SDK_UNDEFINED(16,202) /* FMulticastInlineDelegate */ __um(OnGameUserSettingsUINeedsUpdate);                    // 0x0110   (0x0010)  


	/// Functions
	// Function /Script/Engine.GameUserSettings.ValidateSettings
	// void ValidateSettings();                                                                                              // [0x2ebc1e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SupportsNGXDLSS
	// bool SupportsNGXDLSS();                                                                                               // [0x68b6e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.SupportsNGX
	// bool SupportsNGX();                                                                                                   // [0x68b6b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.SupportsHDRDisplayOutput
	// bool SupportsHDRDisplayOutput();                                                                                      // [0x2ef62f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.SetVSyncEnabled
	// void SetVSyncEnabled(bool bEnable);                                                                                   // [0x2ef60e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetVolumetricFogQuality
	// void SetVolumetricFogQuality(int32_t value);                                                                          // [0x2ef6270] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetVisualEffectQuality
	// void SetVisualEffectQuality(int32_t value);                                                                           // [0x2ef61f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetViewDistanceQuality
	// void SetViewDistanceQuality(int32_t value);                                                                           // [0x2ef6170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetToDefaults
	// void SetToDefaults();                                                                                                 // [0x2ecabf0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetTextureQuality
	// void SetTextureQuality(int32_t value);                                                                                // [0x2ef6060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetShadowQuality
	// void SetShadowQuality(int32_t value);                                                                                 // [0x2ef5fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetShadingQuality
	// void SetShadingQuality(int32_t value);                                                                                // [0x2ef5f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetScreenResolution
	// void SetScreenResolution(FIntPoint Resolution);                                                                       // [0x2ef5ee0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValueEx
	// void SetResolutionScaleValueEx(float NewScaleValue);                                                                  // [0x2ef5e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValue
	// void SetResolutionScaleValue(int32_t NewScaleValue);                                                                  // [0x2ef5de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleNormalized
	// void SetResolutionScaleNormalized(float NewScaleNormalized);                                                          // [0x2ef5d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetPostProcessingQuality
	// void SetPostProcessingQuality(int32_t value);                                                                         // [0x2ef5ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetOverallScalabilityLevel
	// void SetOverallScalabilityLevel(int32_t value);                                                                       // [0x2ef5c50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFullscreenMode
	// void SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode);                                                    // [0x2ef5bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFrameRateLimit
	// void SetFrameRateLimit(float NewLimit);                                                                               // [0x2ef5b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFoliageQuality
	// void SetFoliageQuality(int32_t value);                                                                                // [0x2ef5ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetDynamicResolutionEnabled
	// void SetDynamicResolutionEnabled(bool bEnable);                                                                       // [0x2ef5a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetBenchmarkFallbackValues
	// void SetBenchmarkFallbackValues();                                                                                    // [0x2ef5a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetAudioQualityLevel
	// void SetAudioQualityLevel(int32_t QualityLevel);                                                                      // [0x2ef59a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetAntiAliasingQuality
	// void SetAntiAliasingQuality(int32_t value);                                                                           // [0x2ef5920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SaveSettings
	// void SaveSettings();                                                                                                  // [0x681470] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.RunHardwareBenchmark
	// void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier);                               // [0x2ef5820] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.RevertVideoMode
	// void RevertVideoMode();                                                                                               // [0x2ef5800] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ResetToCurrentSettings
	// void ResetToCurrentSettings();                                                                                        // [0x2ef57e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.NGXDriverUpdateRequired
	// void NGXDriverUpdateRequired(bool& DriverOutOfDate, int32_t& MinDriverVersionMajor, int32_t& MinDriverVersionMinor);  // [0x2ef5650] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.LoadSettings
	// void LoadSettings(bool bForceReload);                                                                                 // [0x2ef55c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.IsVSyncEnabled
	// bool IsVSyncEnabled();                                                                                                // [0x2ef5590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsVSyncDirty
	// bool IsVSyncDirty();                                                                                                  // [0x2ef5560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsScreenResolutionDirty
	// bool IsScreenResolutionDirty();                                                                                       // [0x2ef5530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsHDREnabled
	// bool IsHDREnabled();                                                                                                  // [0x2ef5500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsFullscreenModeDirty
	// bool IsFullscreenModeDirty();                                                                                         // [0x2ef54d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionEnabled
	// bool IsDynamicResolutionEnabled();                                                                                    // [0x2ef54a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionDirty
	// bool IsDynamicResolutionDirty();                                                                                      // [0x2ef5470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDirty
	// bool IsDirty();                                                                                                       // [0x2ef5440] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetVolumetricFogQuality
	// int32_t GetVolumetricFogQuality();                                                                                    // [0x2ef53b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetVisualEffectQuality
	// int32_t GetVisualEffectQuality();                                                                                     // [0x2ef5380] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetViewDistanceQuality
	// int32_t GetViewDistanceQuality();                                                                                     // [0x2ef5350] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetTextureQuality
	// int32_t GetTextureQuality();                                                                                          // [0x2ef5320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetSyncInterval
	// int32_t GetSyncInterval();                                                                                            // [0x2ef52f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameUserSettings.GetShadowQuality
	// int32_t GetShadowQuality();                                                                                           // [0x2ef52c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetShadingQuality
	// int32_t GetShadingQuality();                                                                                          // [0x2ef5290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetScreenResolution
	// FIntPoint GetScreenResolution();                                                                                      // [0x2ef5210] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleNormalized
	// float GetResolutionScaleNormalized();                                                                                 // [0x2ef51e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformationEx
	// void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // [0x2ef5040] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformation
	// void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // [0x2ef4ea0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetRecommendedResolutionScale
	// float GetRecommendedResolutionScale();                                                                                // [0x2ef4e60] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetPreferredFullscreenMode
	// TEnumAsByte<EWindowMode> GetPreferredFullscreenMode();                                                                // [0x2ef4e30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetPostProcessingQuality
	// int32_t GetPostProcessingQuality();                                                                                   // [0x2ef4e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetOverallScalabilityLevel
	// int32_t GetOverallScalabilityLevel();                                                                                 // [0x2ef4c90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetLastConfirmedScreenResolution
	// FIntPoint GetLastConfirmedScreenResolution();                                                                         // [0x2ef4c50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetLastConfirmedFullscreenMode
	// TEnumAsByte<EWindowMode> GetLastConfirmedFullscreenMode();                                                            // [0x2ef4c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetGameUserSettings
	// class UGameUserSettings* GetGameUserSettings();                                                                       // [0x2ef4bf0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetFullscreenMode
	// TEnumAsByte<EWindowMode> GetFullscreenMode();                                                                         // [0x2ef4bc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetFrameRateLimit
	// float GetFrameRateLimit();                                                                                            // [0x2ef4b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetFramePace
	// int32_t GetFramePace();                                                                                               // [0x2ef4b60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameUserSettings.GetFoliageQuality
	// int32_t GetFoliageQuality();                                                                                          // [0x2ef4b30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetDesktopResolution
	// FIntPoint GetDesktopResolution();                                                                                     // [0x2ef4af0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowPosition
	// FIntPoint GetDefaultWindowPosition();                                                                                 // [0x2ef4ab0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowMode
	// TEnumAsByte<EWindowMode> GetDefaultWindowMode();                                                                      // [0x2ef4a80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolutionScale
	// float GetDefaultResolutionScale();                                                                                    // [0x2ef4a40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolution
	// FIntPoint GetDefaultResolution();                                                                                     // [0x2ef4a00] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetCurrentHDRDisplayNits
	// int32_t GetCurrentHDRDisplayNits();                                                                                   // [0x2ef49d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetAudioQualityLevel
	// int32_t GetAudioQualityLevel();                                                                                       // [0x23ebe40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetAntiAliasingQuality
	// int32_t GetAntiAliasingQuality();                                                                                     // [0xafa9f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.EnableHDRDisplayOutput
	// void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits);                                                       // [0x2ef4910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ConfirmVideoMode
	// void ConfirmVideoMode();                                                                                              // [0x2ecafe0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplySettings
	// void ApplySettings(bool bCheckForCommandLineOverrides);                                                               // [0x2ef4880] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyResolutionSettings
	// void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);                                                     // [0x2ef47f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyNonResolutionSettings
	// void ApplyNonResolutionSettings();                                                                                    // [0xe32f70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyHardwareBenchmarkResults
	// void ApplyHardwareBenchmarkResults();                                                                                 // [0x2ecb190] Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.StatColorMapEntry
/// Size: 0x0008 (0x000000 - 0x000008)
struct FStatColorMapEntry
{ 
	float                                              In;                                                         // 0x0000   (0x0004)  
	FColor                                             Out;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.StatColorMapping
/// Size: 0x0028 (0x000000 - 0x000028)
struct FStatColorMapping
{ 
	SDK_UNDEFINED(16,203) /* FString */                __um(StatName);                                             // 0x0000   (0x0010)  
	TArray<FStatColorMapEntry>                         ColorMap;                                                   // 0x0010   (0x0010)  
	bool                                               DisableBlend : 1;                                           // 0x0020:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/Engine.GameNameRedirect
/// Size: 0x0010 (0x000000 - 0x000010)
struct FGameNameRedirect
{ 
	FName                                              OldGameName;                                                // 0x0000   (0x0008)  
	FName                                              NewGameName;                                                // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.ClassRedirect
/// Size: 0x003C (0x000000 - 0x00003C)
struct FClassRedirect
{ 
	FName                                              ObjectName;                                                 // 0x0000   (0x0008)  
	FName                                              OldClassName;                                               // 0x0008   (0x0008)  
	FName                                              NewClassName;                                               // 0x0010   (0x0008)  
	FName                                              OldSubobjName;                                              // 0x0018   (0x0008)  
	FName                                              NewSubobjName;                                              // 0x0020   (0x0008)  
	FName                                              NewClassClass;                                              // 0x0028   (0x0008)  
	FName                                              NewClassPackage;                                            // 0x0030   (0x0008)  
	bool                                               InstanceOnly;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
};

/// Struct /Script/Engine.PluginRedirect
/// Size: 0x0020 (0x000000 - 0x000020)
struct FPluginRedirect
{ 
	SDK_UNDEFINED(16,204) /* FString */                __um(OldPluginName);                                        // 0x0000   (0x0010)  
	SDK_UNDEFINED(16,205) /* FString */                __um(NewPluginName);                                        // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.StructRedirect
/// Size: 0x0010 (0x000000 - 0x000010)
struct FStructRedirect
{ 
	FName                                              OldStructName;                                              // 0x0000   (0x0008)  
	FName                                              NewStructName;                                              // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.DirectoryPath
/// Size: 0x0010 (0x000000 - 0x000010)
struct FDirectoryPath
{ 
	SDK_UNDEFINED(16,206) /* FString */                __um(Path);                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.DropNoteInfo
/// Size: 0x0028 (0x000000 - 0x000028)
struct FDropNoteInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	SDK_UNDEFINED(16,207) /* FString */                __um(Comment);                                              // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.NetDriverDefinition
/// Size: 0x0018 (0x000000 - 0x000018)
struct FNetDriverDefinition
{ 
	FName                                              DefName;                                                    // 0x0000   (0x0008)  
	FName                                              DriverClassName;                                            // 0x0008   (0x0008)  
	FName                                              DriverClassNameFallback;                                    // 0x0010   (0x0008)  
};

/// Class /Script/Engine.Engine
/// Size: 0x0DC0 (0x000028 - 0x000DE8)
class UEngine : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	class UFont*                                       TinyFont;                                                   // 0x0030   (0x0008)  
	FSoftObjectPath                                    TinyFontName;                                               // 0x0038   (0x0018)  
	class UFont*                                       SmallFont;                                                  // 0x0050   (0x0008)  
	FSoftObjectPath                                    SmallFontName;                                              // 0x0058   (0x0018)  
	class UFont*                                       MediumFont;                                                 // 0x0070   (0x0008)  
	FSoftObjectPath                                    MediumFontName;                                             // 0x0078   (0x0018)  
	class UFont*                                       LargeFont;                                                  // 0x0090   (0x0008)  
	FSoftObjectPath                                    LargeFontName;                                              // 0x0098   (0x0018)  
	class UFont*                                       SubtitleFont;                                               // 0x00B0   (0x0008)  
	FSoftObjectPath                                    SubtitleFontName;                                           // 0x00B8   (0x0018)  
	TArray<class UFont*>                               AdditionalFonts;                                            // 0x00D0   (0x0010)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x00E0   (0x0008)  MISSED
	SDK_UNDEFINED(16,208) /* TArray<FString> */        __um(AdditionalFontNames);                                  // 0x00E8   (0x0010)  
	class UClass*                                      ConsoleClass;                                               // 0x00F8   (0x0008)  
	FSoftClassPath                                     ConsoleClassName;                                           // 0x0100   (0x0018)  
	class UClass*                                      GameViewportClientClass;                                    // 0x0118   (0x0008)  
	FSoftClassPath                                     GameViewportClientClassName;                                // 0x0120   (0x0018)  
	class UClass*                                      LocalPlayerClass;                                           // 0x0138   (0x0008)  
	FSoftClassPath                                     LocalPlayerClassName;                                       // 0x0140   (0x0018)  
	class UClass*                                      WorldSettingsClass;                                         // 0x0158   (0x0008)  
	FSoftClassPath                                     WorldSettingsClassName;                                     // 0x0160   (0x0018)  
	FSoftClassPath                                     NavigationSystemClassName;                                  // 0x0178   (0x0018)  
	class UClass*                                      NavigationSystemClass;                                      // 0x0190   (0x0008)  
	FSoftClassPath                                     NavigationSystemConfigClassName;                            // 0x0198   (0x0018)  
	class UClass*                                      NavigationSystemConfigClass;                                // 0x01B0   (0x0008)  
	FSoftClassPath                                     AvoidanceManagerClassName;                                  // 0x01B8   (0x0018)  
	class UClass*                                      AvoidanceManagerClass;                                      // 0x01D0   (0x0008)  
	class UClass*                                      PhysicsCollisionHandlerClass;                               // 0x01D8   (0x0008)  
	FSoftClassPath                                     PhysicsCollisionHandlerClassName;                           // 0x01E0   (0x0018)  
	FSoftClassPath                                     GameUserSettingsClassName;                                  // 0x01F8   (0x0018)  
	class UClass*                                      GameUserSettingsClass;                                      // 0x0210   (0x0008)  
	FSoftClassPath                                     AIControllerClassName;                                      // 0x0218   (0x0018)  
	class UGameUserSettings*                           GameUserSettings;                                           // 0x0230   (0x0008)  
	class UClass*                                      LevelScriptActorClass;                                      // 0x0238   (0x0008)  
	FSoftClassPath                                     LevelScriptActorClassName;                                  // 0x0240   (0x0018)  
	FSoftClassPath                                     DefaultBlueprintBaseClassName;                              // 0x0258   (0x0018)  
	FSoftClassPath                                     GameSingletonClassName;                                     // 0x0270   (0x0018)  
	class UObject*                                     GameSingleton;                                              // 0x0288   (0x0008)  
	FSoftClassPath                                     AssetManagerClassName;                                      // 0x0290   (0x0018)  
	class UAssetManager*                               AssetManager;                                               // 0x02A8   (0x0008)  
	class UTexture2D*                                  DefaultTexture;                                             // 0x02B0   (0x0008)  
	FSoftObjectPath                                    DefaultTextureName;                                         // 0x02B8   (0x0018)  
	class UTexture*                                    DefaultDiffuseTexture;                                      // 0x02D0   (0x0008)  
	FSoftObjectPath                                    DefaultDiffuseTextureName;                                  // 0x02D8   (0x0018)  
	class UTexture2D*                                  DefaultBSPVertexTexture;                                    // 0x02F0   (0x0008)  
	FSoftObjectPath                                    DefaultBSPVertexTextureName;                                // 0x02F8   (0x0018)  
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                  // 0x0310   (0x0008)  
	FSoftObjectPath                                    HighFrequencyNoiseTextureName;                              // 0x0318   (0x0018)  
	class UTexture2D*                                  DefaultBokehTexture;                                        // 0x0330   (0x0008)  
	FSoftObjectPath                                    DefaultBokehTextureName;                                    // 0x0338   (0x0018)  
	class UTexture2D*                                  DefaultBloomKernelTexture;                                  // 0x0350   (0x0008)  
	FSoftObjectPath                                    DefaultBloomKernelTextureName;                              // 0x0358   (0x0018)  
	class UMaterial*                                   WireframeMaterial;                                          // 0x0370   (0x0008)  
	SDK_UNDEFINED(16,209) /* FString */                __um(WireframeMaterialName);                                // 0x0378   (0x0010)  
	class UMaterial*                                   DebugMeshMaterial;                                          // 0x0388   (0x0008)  
	FSoftObjectPath                                    DebugMeshMaterialName;                                      // 0x0390   (0x0018)  
	class UMaterial*                                   EmissiveMeshMaterial;                                       // 0x03A8   (0x0008)  
	FSoftObjectPath                                    EmissiveMeshMaterialName;                                   // 0x03B0   (0x0018)  
	class UMaterial*                                   LevelColorationLitMaterial;                                 // 0x03C8   (0x0008)  
	SDK_UNDEFINED(16,210) /* FString */                __um(LevelColorationLitMaterialName);                       // 0x03D0   (0x0010)  
	class UMaterial*                                   LevelColorationUnlitMaterial;                               // 0x03E0   (0x0008)  
	SDK_UNDEFINED(16,211) /* FString */                __um(LevelColorationUnlitMaterialName);                     // 0x03E8   (0x0010)  
	class UMaterial*                                   LightingTexelDensityMaterial;                               // 0x03F8   (0x0008)  
	SDK_UNDEFINED(16,212) /* FString */                __um(LightingTexelDensityName);                             // 0x0400   (0x0010)  
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                           // 0x0410   (0x0008)  
	SDK_UNDEFINED(16,213) /* FString */                __um(ShadedLevelColorationLitMaterialName);                 // 0x0418   (0x0010)  
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                         // 0x0428   (0x0008)  
	SDK_UNDEFINED(16,214) /* FString */                __um(ShadedLevelColorationUnlitMaterialName);               // 0x0430   (0x0010)  
	class UMaterial*                                   RemoveSurfaceMaterial;                                      // 0x0440   (0x0008)  
	FSoftObjectPath                                    RemoveSurfaceMaterialName;                                  // 0x0448   (0x0018)  
	class UMaterial*                                   VertexColorMaterial;                                        // 0x0460   (0x0008)  
	SDK_UNDEFINED(16,215) /* FString */                __um(VertexColorMaterialName);                              // 0x0468   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                      // 0x0478   (0x0008)  
	SDK_UNDEFINED(16,216) /* FString */                __um(VertexColorViewModeMaterialName_ColorOnly);            // 0x0480   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                   // 0x0490   (0x0008)  
	SDK_UNDEFINED(16,217) /* FString */                __um(VertexColorViewModeMaterialName_AlphaAsColor);         // 0x0498   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                        // 0x04A8   (0x0008)  
	SDK_UNDEFINED(16,218) /* FString */                __um(VertexColorViewModeMaterialName_RedOnly);              // 0x04B0   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                      // 0x04C0   (0x0008)  
	SDK_UNDEFINED(16,219) /* FString */                __um(VertexColorViewModeMaterialName_GreenOnly);            // 0x04C8   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                       // 0x04D8   (0x0008)  
	SDK_UNDEFINED(16,220) /* FString */                __um(VertexColorViewModeMaterialName_BlueOnly);             // 0x04E0   (0x0010)  
	FSoftObjectPath                                    DebugEditorMaterialName;                                    // 0x04F0   (0x0018)  
	class UMaterial*                                   ConstraintLimitMaterial;                                    // 0x0508   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                   // 0x0510   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialXAxis;                               // 0x0518   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                   // 0x0520   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialYAxis;                               // 0x0528   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                   // 0x0530   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZAxis;                               // 0x0538   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialPrismatic;                           // 0x0540   (0x0008)  
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                            // 0x0548   (0x0008)  
	FSoftObjectPath                                    InvalidLightmapSettingsMaterialName;                        // 0x0550   (0x0018)  
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                            // 0x0568   (0x0008)  
	FSoftObjectPath                                    PreviewShadowsIndicatorMaterialName;                        // 0x0570   (0x0018)  
	class UMaterial*                                   ArrowMaterial;                                              // 0x0588   (0x0008)  
	class UMaterialInstanceDynamic*                    ArrowMaterialYellow;                                        // 0x0590   (0x0008)  
	FSoftObjectPath                                    ArrowMaterialName;                                          // 0x0598   (0x0018)  
	FLinearColor                                       LightingOnlyBrightness;                                     // 0x05B0   (0x0010)  
	TArray<FLinearColor>                               ShaderComplexityColors;                                     // 0x05C0   (0x0010)  
	TArray<FLinearColor>                               QuadComplexityColors;                                       // 0x05D0   (0x0010)  
	TArray<FLinearColor>                               LightComplexityColors;                                      // 0x05E0   (0x0010)  
	TArray<FLinearColor>                               StationaryLightOverlapColors;                               // 0x05F0   (0x0010)  
	TArray<FLinearColor>                               LODColorationColors;                                        // 0x0600   (0x0010)  
	TArray<FLinearColor>                               HLODColorationColors;                                       // 0x0610   (0x0010)  
	TArray<FLinearColor>                               StreamingAccuracyColors;                                    // 0x0620   (0x0010)  
	float                                              MaxPixelShaderAdditiveComplexityCount;                      // 0x0630   (0x0004)  
	float                                              MaxES3PixelShaderAdditiveComplexityCount;                   // 0x0634   (0x0004)  
	float                                              MinLightMapDensity;                                         // 0x0638   (0x0004)  
	float                                              IdealLightMapDensity;                                       // 0x063C   (0x0004)  
	float                                              MaxLightMapDensity;                                         // 0x0640   (0x0004)  
	bool                                               bRenderLightMapDensityGrayscale : 1;                        // 0x0644:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0645   (0x0003)  MISSED
	float                                              RenderLightMapDensityGrayscaleScale;                        // 0x0648   (0x0004)  
	float                                              RenderLightMapDensityColorScale;                            // 0x064C   (0x0004)  
	FLinearColor                                       LightMapDensityVertexMappedColor;                           // 0x0650   (0x0010)  
	FLinearColor                                       LightMapDensitySelectedColor;                               // 0x0660   (0x0010)  
	TArray<FStatColorMapping>                          StatColorMappings;                                          // 0x0670   (0x0010)  
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                        // 0x0680   (0x0008)  
	FSoftObjectPath                                    DefaultPhysMaterialName;                                    // 0x0688   (0x0018)  
	TArray<FGameNameRedirect>                          ActiveGameNameRedirects;                                    // 0x06A0   (0x0010)  
	TArray<FClassRedirect>                             ActiveClassRedirects;                                       // 0x06B0   (0x0010)  
	TArray<FPluginRedirect>                            ActivePluginRedirects;                                      // 0x06C0   (0x0010)  
	TArray<FStructRedirect>                            ActiveStructRedirects;                                      // 0x06D0   (0x0010)  
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                               // 0x06E0   (0x0008)  
	FSoftObjectPath                                    PreIntegratedSkinBRDFTextureName;                           // 0x06E8   (0x0018)  
	class UTexture2D*                                  BlueNoiseTexture;                                           // 0x0700   (0x0008)  
	FSoftObjectPath                                    BlueNoiseTextureName;                                       // 0x0708   (0x0018)  
	class UTexture2D*                                  MiniFontTexture;                                            // 0x0720   (0x0008)  
	FSoftObjectPath                                    MiniFontTextureName;                                        // 0x0728   (0x0018)  
	class UTexture*                                    WeightMapPlaceholderTexture;                                // 0x0740   (0x0008)  
	FSoftObjectPath                                    WeightMapPlaceholderTextureName;                            // 0x0748   (0x0018)  
	class UTexture2D*                                  LightMapDensityTexture;                                     // 0x0760   (0x0008)  
	FSoftObjectPath                                    LightMapDensityTextureName;                                 // 0x0768   (0x0018)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0780   (0x0008)  MISSED
	class UGameViewportClient*                         GameViewport;                                               // 0x0788   (0x0008)  
	SDK_UNDEFINED(16,221) /* TArray<FString> */        __um(DeferredCommands);                                     // 0x0790   (0x0010)  
	int32_t                                            TickCycles;                                                 // 0x07A0   (0x0004)  
	int32_t                                            GameCycles;                                                 // 0x07A4   (0x0004)  
	int32_t                                            ClientCycles;                                               // 0x07A8   (0x0004)  
	float                                              NearClipPlane;                                              // 0x07AC   (0x0004)  
	bool                                               bHardwareSurveyEnabled : 1;                                 // 0x07B0:0 (0x0001)  
	bool                                               bSubtitlesEnabled : 1;                                      // 0x07B0:1 (0x0001)  
	bool                                               bSubtitlesForcedOff : 1;                                    // 0x07B0:2 (0x0001)  
	unsigned char                                      UnknownData04_4[0x3];                                       // 0x07B1   (0x0003)  MISSED
	int32_t                                            MaximumLoopIterationCount;                                  // 0x07B4   (0x0004)  
	bool                                               bCanBlueprintsTickByDefault : 1;                            // 0x07B8:0 (0x0001)  
	bool                                               bOptimizeAnimBlueprintMemberVariableAccess : 1;             // 0x07B8:1 (0x0001)  
	bool                                               bAllowMultiThreadedAnimationUpdate : 1;                     // 0x07B8:2 (0x0001)  
	bool                                               bEnableEditorPSysRealtimeLOD : 1;                           // 0x07B8:3 (0x0001)  
	unsigned char                                      UnknownBit05 : 1;                                           // 0x07B8:4 (0x0001)  MISSED
	bool                                               bSmoothFrameRate : 1;                                       // 0x07B8:5 (0x0001)  
	bool                                               bUseFixedFrameRate : 1;                                     // 0x07B8:6 (0x0001)  
	unsigned char                                      UnknownData06_4[0x3];                                       // 0x07B9   (0x0003)  MISSED
	float                                              FixedFrameRate;                                             // 0x07BC   (0x0004)  
	FFloatRange                                        SmoothedFrameRateRange;                                     // 0x07C0   (0x0010)  
	class UEngineCustomTimeStep*                       CustomTimeStep;                                             // 0x07D0   (0x0008)  
	unsigned char                                      UnknownData07_5[0x20];                                      // 0x07D8   (0x0020)  MISSED
	FSoftClassPath                                     CustomTimeStepClassName;                                    // 0x07F8   (0x0018)  
	class UTimecodeProvider*                           TimecodeProvider;                                           // 0x0810   (0x0008)  
	unsigned char                                      UnknownData08_5[0x20];                                      // 0x0818   (0x0020)  MISSED
	FSoftClassPath                                     TimecodeProviderClassName;                                  // 0x0838   (0x0018)  
	bool                                               bGenerateDefaultTimecode;                                   // 0x0850   (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x0851   (0x0003)  MISSED
	FFrameRate                                         GenerateDefaultTimecodeFrameRate;                           // 0x0854   (0x0008)  
	float                                              GenerateDefaultTimecodeFrameDelay;                          // 0x085C   (0x0004)  
	bool                                               bCheckForMultiplePawnsSpawnedInAFrame : 1;                  // 0x0860:0 (0x0001)  
	unsigned char                                      UnknownData10_4[0x3];                                       // 0x0861   (0x0003)  MISSED
	int32_t                                            NumPawnsAllowedToBeSpawnedInAFrame;                         // 0x0864   (0x0004)  
	bool                                               bShouldGenerateLowQualityLightmaps : 1;                     // 0x0868:0 (0x0001)  
	unsigned char                                      UnknownData11_4[0x3];                                       // 0x0869   (0x0003)  MISSED
	FColor                                             C_WorldBox;                                                 // 0x086C   (0x0004)  
	FColor                                             C_BrushWire;                                                // 0x0870   (0x0004)  
	FColor                                             C_AddWire;                                                  // 0x0874   (0x0004)  
	FColor                                             C_SubtractWire;                                             // 0x0878   (0x0004)  
	FColor                                             C_SemiSolidWire;                                            // 0x087C   (0x0004)  
	FColor                                             C_NonSolidWire;                                             // 0x0880   (0x0004)  
	FColor                                             C_WireBackground;                                           // 0x0884   (0x0004)  
	FColor                                             C_ScaleBoxHi;                                               // 0x0888   (0x0004)  
	FColor                                             C_VolumeCollision;                                          // 0x088C   (0x0004)  
	FColor                                             C_BSPCollision;                                             // 0x0890   (0x0004)  
	FColor                                             C_OrthoBackground;                                          // 0x0894   (0x0004)  
	FColor                                             C_Volume;                                                   // 0x0898   (0x0004)  
	FColor                                             C_BrushShape;                                               // 0x089C   (0x0004)  
	float                                              StreamingDistanceFactor;                                    // 0x08A0   (0x0004)  
	unsigned char                                      UnknownData12_5[0x4];                                       // 0x08A4   (0x0004)  MISSED
	FDirectoryPath                                     GameScreenshotSaveDirectory;                                // 0x08A8   (0x0010)  
	ETransitionType                                    TransitionType;                                             // 0x08B8   (0x0001)  
	unsigned char                                      UnknownData13_5[0x7];                                       // 0x08B9   (0x0007)  MISSED
	SDK_UNDEFINED(16,222) /* FString */                __um(TransitionDescription);                                // 0x08C0   (0x0010)  
	SDK_UNDEFINED(16,223) /* FString */                __um(TransitionGameMode);                                   // 0x08D0   (0x0010)  
	float                                              MeshLODRange;                                               // 0x08E0   (0x0004)  
	bool                                               bAllowMatureLanguage : 1;                                   // 0x08E4:0 (0x0001)  
	unsigned char                                      UnknownData14_4[0x3];                                       // 0x08E5   (0x0003)  MISSED
	float                                              CameraRotationThreshold;                                    // 0x08E8   (0x0004)  
	float                                              CameraTranslationThreshold;                                 // 0x08EC   (0x0004)  
	float                                              PrimitiveProbablyVisibleTime;                               // 0x08F0   (0x0004)  
	float                                              MaxOcclusionPixelsFraction;                                 // 0x08F4   (0x0004)  
	bool                                               bPauseOnLossOfFocus : 1;                                    // 0x08F8:0 (0x0001)  
	unsigned char                                      UnknownData15_4[0x3];                                       // 0x08F9   (0x0003)  MISSED
	int32_t                                            MaxParticleResize;                                          // 0x08FC   (0x0004)  
	int32_t                                            MaxParticleResizeWarn;                                      // 0x0900   (0x0004)  
	unsigned char                                      UnknownData16_5[0x4];                                       // 0x0904   (0x0004)  MISSED
	TArray<FDropNoteInfo>                              PendingDroppedNotes;                                        // 0x0908   (0x0010)  
	float                                              NetClientTicksPerSecond;                                    // 0x0918   (0x0004)  
	float                                              DisplayGamma;                                               // 0x091C   (0x0004)  
	float                                              MinDesiredFrameRate;                                        // 0x0920   (0x0004)  
	FLinearColor                                       DefaultSelectedMaterialColor;                               // 0x0924   (0x0010)  
	FLinearColor                                       SelectedMaterialColor;                                      // 0x0934   (0x0010)  
	FLinearColor                                       SelectionOutlineColor;                                      // 0x0944   (0x0010)  
	FLinearColor                                       SubduedSelectionOutlineColor;                               // 0x0954   (0x0010)  
	FLinearColor                                       SelectedMaterialColorOverride;                              // 0x0964   (0x0010)  
	bool                                               bIsOverridingSelectedColor;                                 // 0x0974   (0x0001)  
	unsigned char                                      UnknownData17_5[0x3];                                       // 0x0975   (0x0003)  MISSED
	bool                                               bEnableOnScreenDebugMessages : 1;                           // 0x0978:0 (0x0001)  
	bool                                               bEnableOnScreenDebugMessagesDisplay : 1;                    // 0x0978:1 (0x0001)  
	bool                                               bSuppressMapWarnings : 1;                                   // 0x0978:2 (0x0001)  
	bool                                               bDisableAILogging : 1;                                      // 0x0978:3 (0x0001)  
	unsigned char                                      UnknownData18_4[0x3];                                       // 0x0979   (0x0003)  MISSED
	uint32_t                                           bEnableVisualLogRecordingOnStart;                           // 0x097C   (0x0004)  
	unsigned char                                      UnknownData19_5[0x4];                                       // 0x0980   (0x0004)  MISSED
	int32_t                                            ScreenSaverInhibitorSemaphore;                              // 0x0984   (0x0004)  
	bool                                               bLockReadOnlyLevels : 1;                                    // 0x0988:0 (0x0001)  
	unsigned char                                      UnknownData20_4[0x7];                                       // 0x0989   (0x0007)  MISSED
	SDK_UNDEFINED(16,224) /* FString */                __um(ParticleEventManagerClassPath);                        // 0x0990   (0x0010)  
	float                                              SelectionHighlightIntensity;                                // 0x09A0   (0x0004)  
	float                                              BSPSelectionHighlightIntensity;                             // 0x09A4   (0x0004)  
	float                                              SelectionHighlightIntensityBillboards;                      // 0x09A8   (0x0004)  
	unsigned char                                      UnknownData21_5[0x24C];                                     // 0x09AC   (0x024C)  MISSED
	TArray<FNetDriverDefinition>                       NetDriverDefinitions;                                       // 0x0BF8   (0x0010)  
	SDK_UNDEFINED(16,225) /* TArray<FString> */        __um(ServerActors);                                         // 0x0C08   (0x0010)  
	SDK_UNDEFINED(16,226) /* TArray<FString> */        __um(RuntimeServerActors);                                  // 0x0C18   (0x0010)  
	float                                              NetErrorLogInterval;                                        // 0x0C28   (0x0004)  
	bool                                               bStartedLoadMapMovie : 1;                                   // 0x0C2C:0 (0x0001)  
	unsigned char                                      UnknownData22_4[0x1B];                                      // 0x0C2D   (0x001B)  MISSED
	int32_t                                            NextWorldContextHandle;                                     // 0x0C48   (0x0004)  
	unsigned char                                      UnknownData23_6[0x19C];                                     // 0x0C4C   (0x019C)  MISSED
};

/// Class /Script/Engine.ScriptViewportClient
/// Size: 0x0010 (0x000028 - 0x000038)
class UScriptViewportClient : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/Engine.DebugDisplayProperty
/// Size: 0x0020 (0x000000 - 0x000020)
struct FDebugDisplayProperty
{ 
	class UObject*                                     Obj;                                                        // 0x0000   (0x0008)  
	class UClass*                                      WithinClass;                                                // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Class /Script/Engine.GameViewportClient
/// Size: 0x0308 (0x000038 - 0x000340)
class UGameViewportClient : public UScriptViewportClient
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0038   (0x0008)  MISSED
	class UConsole*                                    ViewportConsole;                                            // 0x0040   (0x0008)  
	TArray<FDebugDisplayProperty>                      DebugProperties;                                            // 0x0048   (0x0010)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x0058   (0x0010)  MISSED
	int32_t                                            MaxSplitscreenPlayers;                                      // 0x0068   (0x0004)  
	unsigned char                                      UnknownData02_5[0xC];                                       // 0x006C   (0x000C)  MISSED
	class UWorld*                                      World;                                                      // 0x0078   (0x0008)  
	class UGameInstance*                               GameInstance;                                               // 0x0080   (0x0008)  
	unsigned char                                      UnknownData03_6[0x2B8];                                     // 0x0088   (0x02B8)  MISSED


	/// Functions
	// Function /Script/Engine.GameViewportClient.SSSwapControllers
	// void SSSwapControllers();                                                                                             // [0xe32f90] Exec|Native|Public   
	// Function /Script/Engine.GameViewportClient.ShowTitleSafeArea
	// void ShowTitleSafeArea();                                                                                             // [0xe32f70] Exec|Native|Public   
	// Function /Script/Engine.GameViewportClient.SetConsoleTarget
	// void SetConsoleTarget(int32_t PlayerIndex);                                                                           // [0x2efb470] Exec|Native|Public   
};

/// Class /Script/Engine.SaveGame
/// Size: 0x0000 (0x000028 - 0x000028)
class USaveGame : public UObject
{ 
public:
};

/// Class /Script/Engine.LevelStreamingVolume
/// Size: 0x0018 (0x000258 - 0x000270)
class ALevelStreamingVolume : public AVolume
{ 
public:
	TArray<FName>                                      StreamingLevelNames;                                        // 0x0258   (0x0010)  
	bool                                               bEditorPreVisOnly : 1;                                      // 0x0268:0 (0x0001)  
	bool                                               bDisabled : 1;                                              // 0x0268:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0269   (0x0003)  MISSED
	SDK_UNDEFINED(1,227) /* TEnumAsByte<EStreamingVolumeUsage> */ __um(StreamingUsage);                            // 0x026C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x026D   (0x0003)  MISSED
};

/// Class /Script/Engine.LocalPlayer
/// Size: 0x0210 (0x000048 - 0x000258)
class ULocalPlayer : public UPlayer
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0048   (0x0028)  MISSED
	class UGameViewportClient*                         ViewportClient;                                             // 0x0070   (0x0008)  
	unsigned char                                      UnknownData01_5[0x1C];                                      // 0x0078   (0x001C)  MISSED
	SDK_UNDEFINED(1,228) /* TEnumAsByte<EAspectRatioAxisConstraint> */ __um(AspectRatioAxisConstraint);            // 0x0094   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0095   (0x0003)  MISSED
	class UClass*                                      PendingLevelPlayerControllerClass;                          // 0x0098   (0x0008)  
	bool                                               bSentSplitJoin : 1;                                         // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData03_4[0x17];                                      // 0x00A1   (0x0017)  MISSED
	int32_t                                            ControllerId;                                               // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData04_6[0x19C];                                     // 0x00BC   (0x019C)  MISSED
};

/// Class /Script/Engine.PrimaryDataAsset
/// Size: 0x0000 (0x000030 - 0x000030)
class UPrimaryDataAsset : public UDataAsset
{ 
public:
};

/// Struct /Script/Engine.TireFrictionScalePair
/// Size: 0x0010 (0x000000 - 0x000010)
struct FTireFrictionScalePair
{ 
	class UTireType*                                   TireType;                                                   // 0x0000   (0x0008)  
	float                                              FrictionScale;                                              // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Engine.PhysicalMaterial
/// Size: 0x0058 (0x000028 - 0x000080)
class UPhysicalMaterial : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	float                                              Friction;                                                   // 0x0028   (0x0004)  
	SDK_UNDEFINED(1,229) /* TEnumAsByte<EFrictionCombineMode> */ __um(FrictionCombineMode);                        // 0x002C   (0x0001)  
	bool                                               bOverrideFrictionCombineMode;                               // 0x002D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x002E   (0x0002)  MISSED
	float                                              Restitution;                                                // 0x0030   (0x0004)  
	SDK_UNDEFINED(1,230) /* TEnumAsByte<EFrictionCombineMode> */ __um(RestitutionCombineMode);                     // 0x0034   (0x0001)  
	bool                                               bOverrideRestitutionCombineMode;                            // 0x0035   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0036   (0x0002)  MISSED
	float                                              Density;                                                    // 0x0038   (0x0004)  
	float                                              RaiseMassToPower;                                           // 0x003C   (0x0004)  
	float                                              DestructibleDamageThresholdScale;                           // 0x0040   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x0044   (0x0004)  MISSED
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                                   // 0x0048   (0x0008)  
	EPhysicalSurface                                   SurfaceType;                                                // 0x0050   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              TireFrictionScale;                                          // 0x0054   (0x0004)  
	TArray<FTireFrictionScalePair>                     TireFrictionScales;                                         // 0x0058   (0x0010)  
	unsigned char                                      UnknownData05_6[0x18];                                      // 0x0068   (0x0018)  MISSED
};

/// Class /Script/Engine.PhysicsVolume
/// Size: 0x0010 (0x000258 - 0x000268)
class APhysicsVolume : public AVolume
{ 
public:
	float                                              TerminalVelocity;                                           // 0x0258   (0x0004)  
	int32_t                                            Priority;                                                   // 0x025C   (0x0004)  
	float                                              FluidFriction;                                              // 0x0260   (0x0004)  
	bool                                               bWaterVolume : 1;                                           // 0x0264:0 (0x0001)  
	bool                                               bPhysicsOnContact : 1;                                      // 0x0264:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0265   (0x0003)  MISSED
};

/// Struct /Script/Engine.MinimalViewInfo
/// Size: 0x0700 (0x000000 - 0x000700)
struct FMinimalViewInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	float                                              FOV;                                                        // 0x0018   (0x0004)  
	float                                              DesiredFOV;                                                 // 0x001C   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x0020   (0x0004)  
	float                                              OrthoNearClipPlane;                                         // 0x0024   (0x0004)  
	float                                              OrthoFarClipPlane;                                          // 0x0028   (0x0004)  
	float                                              AspectRatio;                                                // 0x002C   (0x0004)  
	bool                                               bConstrainAspectRatio : 1;                                  // 0x0030:0 (0x0001)  
	bool                                               bUseFieldOfViewForLOD : 1;                                  // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0031   (0x0003)  MISSED
	ECameraProjectionMode                              ProjectionMode;                                             // 0x0034   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	float                                              PostProcessBlendWeight;                                     // 0x0038   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0040   (0x0670)  
	FVector2D                                          OffCenterProjectionOffset;                                  // 0x06B0   (0x0008)  
	unsigned char                                      UnknownData03_6[0x48];                                      // 0x06B8   (0x0048)  MISSED
};

/// Struct /Script/Engine.CameraCacheEntry
/// Size: 0x0710 (0x000000 - 0x000710)
struct FCameraCacheEntry
{ 
	float                                              Timestamp;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0xC];                                       // 0x0004   (0x000C)  MISSED
	FMinimalViewInfo                                   POV;                                                        // 0x0010   (0x0700)  
};

/// Struct /Script/Engine.TViewTarget
/// Size: 0x0720 (0x000000 - 0x000720)
struct FTViewTarget
{ 
	class AActor*                                      Target;                                                     // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0008   (0x0008)  MISSED
	FMinimalViewInfo                                   POV;                                                        // 0x0010   (0x0700)  
	class APlayerState*                                PlayerState;                                                // 0x0710   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0718   (0x0008)  MISSED
};

/// Class /Script/Engine.PlayerCameraManager
/// Size: 0x2C40 (0x000220 - 0x002E60)
class APlayerCameraManager : public AActor
{ 
public:
	class APlayerController*                           PCOwner;                                                    // 0x0220   (0x0008)  
	class USceneComponent*                             TransformComponent;                                         // 0x0228   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0230   (0x0008)  MISSED
	float                                              DefaultFOV;                                                 // 0x0238   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x023C   (0x0004)  MISSED
	float                                              DefaultOrthoWidth;                                          // 0x0240   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0244   (0x0004)  MISSED
	float                                              DefaultAspectRatio;                                         // 0x0248   (0x0004)  
	unsigned char                                      UnknownData03_5[0x44];                                      // 0x024C   (0x0044)  MISSED
	FCameraCacheEntry                                  CameraCache;                                                // 0x0290   (0x0710)  
	FCameraCacheEntry                                  LastFrameCameraCache;                                       // 0x09A0   (0x0710)  
	FTViewTarget                                       ViewTarget;                                                 // 0x10B0   (0x0720)  
	FTViewTarget                                       PendingViewTarget;                                          // 0x17D0   (0x0720)  
	unsigned char                                      UnknownData04_5[0x30];                                      // 0x1EF0   (0x0030)  MISSED
	FCameraCacheEntry                                  CameraCachePrivate;                                         // 0x1F20   (0x0710)  
	FCameraCacheEntry                                  LastFrameCameraCachePrivate;                                // 0x2630   (0x0710)  
	TArray<class UCameraModifier*>                     ModifierList;                                               // 0x2D40   (0x0010)  
	TArray<class UClass*>                              DefaultModifiers;                                           // 0x2D50   (0x0010)  
	float                                              FreeCamDistance;                                            // 0x2D60   (0x0004)  
	FVector                                            FreeCamOffset;                                              // 0x2D64   (0x000C)  
	FVector                                            ViewTargetOffset;                                           // 0x2D70   (0x000C)  
	unsigned char                                      UnknownData05_5[0x14];                                      // 0x2D7C   (0x0014)  MISSED
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                          // 0x2D90   (0x0010)  
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                       // 0x2DA0   (0x0008)  
	class UCameraAnimInst*                             AnimInstPool;                                               // 0x2DA8   (0x0040)  
	TArray<FPostProcessSettings>                       PostProcessBlendCache;                                      // 0x2DE8   (0x0010)  
	unsigned char                                      UnknownData06_5[0x10];                                      // 0x2DF8   (0x0010)  MISSED
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                                // 0x2E08   (0x0010)  
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                  // 0x2E18   (0x0010)  
	class ACameraActor*                                AnimCameraActor;                                            // 0x2E28   (0x0008)  
	bool                                               bIsOrthographic : 1;                                        // 0x2E30:0 (0x0001)  
	bool                                               bDefaultConstrainAspectRatio : 1;                           // 0x2E30:1 (0x0001)  
	unsigned char                                      UnknownBit07 : 1;                                           // 0x2E30:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x2E30:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x2E30:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x2E30:5 (0x0001)  MISSED
	bool                                               bClientSimulatingViewTarget : 1;                            // 0x2E30:6 (0x0001)  
	bool                                               bUseClientSideCameraUpdates : 1;                            // 0x2E30:7 (0x0001)  
	unsigned char                                      UnknownBit11 : 1;                                           // 0x2E31:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit12 : 1;                                           // 0x2E31:1 (0x0001)  MISSED
	bool                                               bGameCameraCutThisFrame : 1;                                // 0x2E31:2 (0x0001)  
	unsigned char                                      UnknownData13_4[0x2];                                       // 0x2E32   (0x0002)  MISSED
	float                                              ViewPitchMin;                                               // 0x2E34   (0x0004)  
	float                                              ViewPitchMax;                                               // 0x2E38   (0x0004)  
	float                                              ViewYawMin;                                                 // 0x2E3C   (0x0004)  
	float                                              ViewYawMax;                                                 // 0x2E40   (0x0004)  
	float                                              ViewRollMin;                                                // 0x2E44   (0x0004)  
	float                                              ViewRollMax;                                                // 0x2E48   (0x0004)  
	unsigned char                                      UnknownData14_5[0x4];                                       // 0x2E4C   (0x0004)  MISSED
	float                                              ServerUpdateCameraTimeout;                                  // 0x2E50   (0x0004)  
	unsigned char                                      UnknownData15_6[0xC];                                       // 0x2E54   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.PlayerCameraManager.StopCameraShake
	// void StopCameraShake(class UCameraShake* ShakeInstance, bool bImmediately);                                           // [0x2fa5760] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopCameraFade
	// void StopCameraFade();                                                                                                // [0x2fa5740] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopCameraAnimInst
	// void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);                                            // [0x2fa5670] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
	// void StopAllInstancesOfCameraShakeFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);  // [0x2fa55a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
	// void StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);                                           // [0x2fa54d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
	// void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);                                          // [0x2fa5400] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraShakes
	// void StopAllCameraShakes(bool bImmediately);                                                                          // [0x2fa5370] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraAnims
	// void StopAllCameraAnims(bool bImmediate);                                                                             // [0x2fa52e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraFade
	// void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // [0x2fa5090] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.SetManualCameraFade
	// void SetManualCameraFade(float InFadeAmount, FLinearColor Color, bool bInFadeAudio);                                  // [0x2fa4b30] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.SetGameCameraCutThisFrame
	// void SetGameCameraCutThisFrame();                                                                                     // [0x2fa4a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraModifier
	// bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);                                                   // [0x2fa3480] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraLensEffect
	// void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);                                             // [0x2eeef90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PlayCameraShakeFromSource
	// class UCameraShake* PlayCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent); // [0x2fa2eb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PlayCameraShake
	// class UCameraShake* PlayCameraShake(class UClass* ShakeClass, float Scale, ECameraAnimPlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x2fa2d40] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PlayCameraAnim
	// class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, ECameraAnimPlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x2fa2a60] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PhotographyCameraModify
	// void PhotographyCameraModify(FVector NewCameraLocation, FVector PreviousCameraLocation, FVector OriginalCameraLocation, FVector& ResultCameraLocation); // [0x2fa28e0] BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionStart
	// void OnPhotographySessionStart();                                                                                     // [0x6971e0] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionEnd
	// void OnPhotographySessionEnd();                                                                                       // [0xec6f20] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
	// void OnPhotographyMultiPartCaptureStart();                                                                            // [0xe3d050] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
	// void OnPhotographyMultiPartCaptureEnd();                                                                              // [0xe92750] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.GetOwningPlayerController
	// class APlayerController* GetOwningPlayerController();                                                                 // [0x2fa23c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetFOVAngle
	// float GetFOVAngle();                                                                                                  // [0x2fa0e30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetCameraRotation
	// FRotator GetCameraRotation();                                                                                         // [0x2fa0df0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetCameraLocation
	// FVector GetCameraLocation();                                                                                          // [0x2fa0db0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.FindCameraModifierByClass
	// class UCameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);                                        // [0x2fa0d10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.ClearCameraLensEffects
	// void ClearCameraLensEffects();                                                                                        // [0x2ec33c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.BlueprintUpdateCamera
	// bool BlueprintUpdateCamera(class AActor* CameraTarget, FVector& NewCameraLocation, FRotator& NewCameraRotation, float& NewCameraFOV); // [0x15dd8c0] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.AddNewCameraModifier
	// class UCameraModifier* AddNewCameraModifier(class UClass* ModifierClass);                                             // [0x2f9dd60] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.AddCameraLensEffect
	// class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);                        // [0x2f9dcc0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.NavigationObjectBase
/// Size: 0x0028 (0x000220 - 0x000248)
class ANavigationObjectBase : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0220   (0x0008)  MISSED
	class UCapsuleComponent*                           CapsuleComponent;                                           // 0x0228   (0x0008)  
	class UBillboardComponent*                         GoodSprite;                                                 // 0x0230   (0x0008)  
	class UBillboardComponent*                         BadSprite;                                                  // 0x0238   (0x0008)  
	bool                                               bIsPIEPlayerStart : 1;                                      // 0x0240:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0241   (0x0007)  MISSED
};

/// Class /Script/Engine.PlayerStart
/// Size: 0x0008 (0x000248 - 0x000250)
class APlayerStart : public ANavigationObjectBase
{ 
public:
	FName                                              PlayerStartTag;                                             // 0x0248   (0x0008)  
};

/// Class /Script/Engine.PlayerState
/// Size: 0x0100 (0x000220 - 0x000320)
class APlayerState : public AInfo
{ 
public:
	float                                              Score;                                                      // 0x0220   (0x0004)  
	int32_t                                            PlayerID;                                                   // 0x0224   (0x0004)  
	char                                               Ping;                                                       // 0x0228   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0229   (0x0001)  MISSED
	bool                                               bShouldUpdateReplicatedPing : 1;                            // 0x022A:0 (0x0001)  
	bool                                               bIsSpectator : 1;                                           // 0x022A:1 (0x0001)  
	bool                                               bOnlySpectator : 1;                                         // 0x022A:2 (0x0001)  
	bool                                               bIsABot : 1;                                                // 0x022A:3 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x022A:4 (0x0001)  MISSED
	bool                                               bIsInactive : 1;                                            // 0x022A:5 (0x0001)  
	bool                                               bFromPreviousLevel : 1;                                     // 0x022A:6 (0x0001)  
	unsigned char                                      UnknownData02_4[0x1];                                       // 0x022B   (0x0001)  MISSED
	int32_t                                            StartTime;                                                  // 0x022C   (0x0004)  
	class UClass*                                      EngineMessageClass;                                         // 0x0230   (0x0008)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0238   (0x0008)  MISSED
	SDK_UNDEFINED(16,231) /* FString */                __um(SavedNetworkAddress);                                  // 0x0240   (0x0010)  
	FUniqueNetIdRepl                                   UniqueId;                                                   // 0x0250   (0x0028)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x0278   (0x0008)  MISSED
	class APawn*                                       PawnPrivate;                                                // 0x0280   (0x0008)  
	unsigned char                                      UnknownData05_5[0x78];                                      // 0x0288   (0x0078)  MISSED
	SDK_UNDEFINED(16,232) /* FString */                __um(PlayerNamePrivate);                                    // 0x0300   (0x0010)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x0310   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.PlayerState.ReceiveOverrideWith
	// void ReceiveOverrideWith(class APlayerState* OldPlayerState);                                                         // [0x15dd8c0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.PlayerState.ReceiveCopyProperties
	// void ReceiveCopyProperties(class APlayerState* NewPlayerState);                                                       // [0x15dd8c0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.PlayerState.OnRep_UniqueId
	// void OnRep_UniqueId();                                                                                                // [0x6971c0] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_Score
	// void OnRep_Score();                                                                                                   // [0xe92750] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_PlayerName
	// void OnRep_PlayerName();                                                                                              // [0xe3d050] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_PlayerId
	// void OnRep_PlayerId();                                                                                                // [0x6971e0] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_bIsInactive
	// void OnRep_bIsInactive();                                                                                             // [0xec6f20] Native|Public        
	// Function /Script/Engine.PlayerState.GetPlayerName
	// FString GetPlayerName();                                                                                              // [0x2fa9d10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.TriggerSphere
/// Size: 0x0000 (0x000228 - 0x000228)
class ATriggerSphere : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.SpringArmComponent
/// Size: 0x0090 (0x0001F0 - 0x000280)
class USpringArmComponent : public USceneComponent
{ 
public:
	float                                              TargetArmLength;                                            // 0x01F0   (0x0004)  
	FVector                                            SocketOffset;                                               // 0x01F4   (0x000C)  
	FVector                                            TargetOffset;                                               // 0x0200   (0x000C)  
	float                                              ProbeSize;                                                  // 0x020C   (0x0004)  
	SDK_UNDEFINED(1,233) /* TEnumAsByte<ECollisionChannel> */ __um(ProbeChannel);                                  // 0x0210   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0211   (0x0003)  MISSED
	bool                                               bDoCollisionTest : 1;                                       // 0x0214:0 (0x0001)  
	bool                                               bUsePawnControlRotation : 1;                                // 0x0214:1 (0x0001)  
	bool                                               bInheritPitch : 1;                                          // 0x0214:2 (0x0001)  
	bool                                               bInheritYaw : 1;                                            // 0x0214:3 (0x0001)  
	bool                                               bInheritRoll : 1;                                           // 0x0214:4 (0x0001)  
	bool                                               bEnableCameraLag : 1;                                       // 0x0214:5 (0x0001)  
	bool                                               bEnableCameraRotationLag : 1;                               // 0x0214:6 (0x0001)  
	bool                                               bUseCameraLagSubstepping : 1;                               // 0x0214:7 (0x0001)  
	bool                                               bDrawDebugLagMarkers : 1;                                   // 0x0215:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x2];                                       // 0x0216   (0x0002)  MISSED
	float                                              CameraLagSpeed;                                             // 0x0218   (0x0004)  
	float                                              CameraRotationLagSpeed;                                     // 0x021C   (0x0004)  
	float                                              CameraLagMaxTimeStep;                                       // 0x0220   (0x0004)  
	float                                              CameraLagMaxDistance;                                       // 0x0224   (0x0004)  
	unsigned char                                      UnknownData02_6[0x58];                                      // 0x0228   (0x0058)  MISSED


	/// Functions
	// Function /Script/Engine.SpringArmComponent.IsCollisionFixApplied
	// bool IsCollisionFixApplied();                                                                                         // [0x7e0240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SpringArmComponent.GetUnfixedCameraPosition
	// FVector GetUnfixedCameraPosition();                                                                                   // [0x2ec6390] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SpringArmComponent.GetTargetRotation
	// FRotator GetTargetRotation();                                                                                         // [0x2fe0190] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.TextRenderActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ATextRenderActor : public AActor
{ 
public:
	class UTextRenderComponent*                        TextRender;                                                 // 0x0220   (0x0008)  
};

/// Class /Script/Engine.ShapeComponent
/// Size: 0x0010 (0x000410 - 0x000420)
class UShapeComponent : public UPrimitiveComponent
{ 
public:
	class UBodySetup*                                  ShapeBodySetup;                                             // 0x0408   (0x0008)  
	class UClass*                                      AreaClass;                                                  // 0x0410   (0x0008)  
	FColor                                             ShapeColor;                                                 // 0x0418   (0x0004)  
	bool                                               bDrawOnlyIfSelected : 1;                                    // 0x041C:0 (0x0001)  
	bool                                               bShouldCollideWhenPlacing : 1;                              // 0x041C:1 (0x0001)  
	bool                                               bDynamicObstacle : 1;                                       // 0x041C:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x041D   (0x0003)  MISSED
};

/// Class /Script/Engine.CapsuleComponent
/// Size: 0x0010 (0x000420 - 0x000430)
class UCapsuleComponent : public UShapeComponent
{ 
public:
	float                                              CapsuleHalfHeight;                                          // 0x0420   (0x0004)  
	float                                              CapsuleRadius;                                              // 0x0424   (0x0004)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0428   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.CapsuleComponent.SetCapsuleSize
	// void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);                                        // [0x2ec4d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleRadius
	// void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);                                                            // [0x2ec4c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleHalfHeight
	// void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);                                                    // [0x2ec4b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
	// void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);               // [0x2ec1a10] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize
	// void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                  // [0x2ec1920] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleRadius
	// float GetUnscaledCapsuleRadius();                                                                                     // [0x2ec1900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
	// float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();                                                               // [0x2ec18d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
	// float GetUnscaledCapsuleHalfHeight();                                                                                 // [0x2ec18b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetShapeScale
	// float GetShapeScale();                                                                                                // [0x2ec1790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
	// void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                 // [0x2ec1670] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize
	// void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                    // [0x2ec1560] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleRadius
	// float GetScaledCapsuleRadius();                                                                                       // [0x2ec1520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
	// float GetScaledCapsuleHalfHeight_WithoutHemisphere();                                                                 // [0x2ec14d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
	// float GetScaledCapsuleHalfHeight();                                                                                   // [0x2ec14a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.GameMode
/// Size: 0x0048 (0x0002C0 - 0x000308)
class AGameMode : public AGameModeBase
{ 
public:
	FName                                              MatchState;                                                 // 0x02C0   (0x0008)  
	bool                                               bDelayedStart : 1;                                          // 0x02C8:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x02C9   (0x0003)  MISSED
	int32_t                                            NumSpectators;                                              // 0x02CC   (0x0004)  
	int32_t                                            NumPlayers;                                                 // 0x02D0   (0x0004)  
	int32_t                                            NumBots;                                                    // 0x02D4   (0x0004)  
	float                                              MinRespawnDelay;                                            // 0x02D8   (0x0004)  
	int32_t                                            NumTravellingPlayers;                                       // 0x02DC   (0x0004)  
	class UClass*                                      EngineMessageClass;                                         // 0x02E0   (0x0008)  
	TArray<class APlayerState*>                        InactivePlayerArray;                                        // 0x02E8   (0x0010)  
	float                                              InactivePlayerStateLifeSpan;                                // 0x02F8   (0x0004)  
	int32_t                                            MaxInactivePlayers;                                         // 0x02FC   (0x0004)  
	bool                                               bHandleDedicatedServerReplays;                              // 0x0300   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0301   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.GameMode.StartMatch
	// void StartMatch();                                                                                                    // [0x2ef2610] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.SetBandwidthLimit
	// void SetBandwidthLimit(float AsyncIOBandwidthLimit);                                                                  // [0x2eef3e0] Exec|Native|Public   
	// Function /Script/Engine.GameMode.Say
	// void Say(FString Msg);                                                                                                // [0x2eef340] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.RestartGame
	// void RestartGame();                                                                                                   // [0x2eeef70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.ReadyToStartMatch
	// bool ReadyToStartMatch();                                                                                             // [0x2eeeca0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.ReadyToEndMatch
	// bool ReadyToEndMatch();                                                                                               // [0x2eeec70] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.K2_OnSetMatchState
	// void K2_OnSetMatchState(FName NewState);                                                                              // [0x15dd8c0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.IsMatchInProgress
	// bool IsMatchInProgress();                                                                                             // [0x2ec03d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.HasMatchEnded
	// bool HasMatchEnded();                                                                                                 // [0x2eecdb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.GetMatchState
	// FName GetMatchState();                                                                                                // [0x2eebd70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.EndMatch
	// void EndMatch();                                                                                                      // [0x2eea6e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.AbortMatch
	// void AbortMatch();                                                                                                    // [0x2ee71f0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GameState
/// Size: 0x0020 (0x000270 - 0x000290)
class AGameState : public AGameStateBase
{ 
public:
	FName                                              MatchState;                                                 // 0x0270   (0x0008)  
	FName                                              PreviousMatchState;                                         // 0x0278   (0x0008)  
	int32_t                                            ElapsedTime;                                                // 0x0280   (0x0004)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0284   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.GameState.OnRep_MatchState
	// void OnRep_MatchState();                                                                                              // [0x2eeef50] Native|Public        
	// Function /Script/Engine.GameState.OnRep_ElapsedTime
	// void OnRep_ElapsedTime();                                                                                             // [0x2eef210] Native|Public        
};

/// Class /Script/Engine.SkyLight
/// Size: 0x0010 (0x000220 - 0x000230)
class ASkyLight : public AInfo
{ 
public:
	class USkyLightComponent*                          LightComponent;                                             // 0x0220   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x0228:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0229   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.SkyLight.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                // [0xe92750] Native|Public        
};

/// Class /Script/Engine.TextureCube
/// Size: 0x0058 (0x0000B8 - 0x000110)
class UTextureCube : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x00B8   (0x0058)  MISSED
};

/// Struct /Script/Engine.StaticMeshComponentLODInfo
/// Size: 0x0090 (0x000000 - 0x000090)
struct FStaticMeshComponentLODInfo
{ 
	unsigned char                                      UnknownData00_2[0x90];                                      // 0x0000   (0x0090)  MISSED
};

/// Struct /Script/Engine.StreamingTextureBuildInfo
/// Size: 0x000C (0x000000 - 0x00000C)
struct FStreamingTextureBuildInfo
{ 
	uint32_t                                           PackedRelativeBox;                                          // 0x0000   (0x0004)  
	int32_t                                            TextureLevelIndex;                                          // 0x0004   (0x0004)  
	float                                              TexelFactor;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.LightmassPrimitiveSettings
/// Size: 0x0018 (0x000000 - 0x000018)
struct FLightmassPrimitiveSettings
{ 
	bool                                               bUseTwoSidedLighting : 1;                                   // 0x0000:0 (0x0001)  
	bool                                               bShadowIndirectOnly : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bUseEmissiveForStaticLighting : 1;                          // 0x0000:2 (0x0001)  
	bool                                               bUseVertexNormalForHemisphereGather : 1;                    // 0x0000:3 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              EmissiveLightFalloffExponent;                               // 0x0004   (0x0004)  
	float                                              EmissiveLightExplicitInfluenceRadius;                       // 0x0008   (0x0004)  
	float                                              EmissiveBoost;                                              // 0x000C   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0010   (0x0004)  
	float                                              FullyOccludedSamplesFraction;                               // 0x0014   (0x0004)  
};

/// Class /Script/Engine.StaticMeshComponent
/// Size: 0x0070 (0x000430 - 0x0004A0)
#pragma pack(push, 0x1)
class alignas(0x10) UStaticMeshComponent : public UMeshComponent
{ 
public:
	int32_t                                            ForcedLodModel;                                             // 0x0430   (0x0004)  
	int32_t                                            PreviousLODLevel;                                           // 0x0434   (0x0004)  
	int32_t                                            MinLOD;                                                     // 0x0438   (0x0004)  
	int32_t                                            SubDivisionStepSize;                                        // 0x043C   (0x0004)  
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0440   (0x0008)  
	FColor                                             WireframeColorOverride;                                     // 0x0448   (0x0004)  
	bool                                               bEvaluateWorldPositionOffset : 1;                           // 0x044C:0 (0x0001)  
	bool                                               bOverrideWireframeColor : 1;                                // 0x044C:1 (0x0001)  
	bool                                               bOverrideMinLod : 1;                                        // 0x044C:2 (0x0001)  
	bool                                               bOverrideNavigationExport : 1;                              // 0x044C:3 (0x0001)  
	bool                                               bForceNavigationObstacle : 1;                               // 0x044C:4 (0x0001)  
	bool                                               bDisallowMeshPaintPerInstance : 1;                          // 0x044C:5 (0x0001)  
	bool                                               bIgnoreInstanceForTextureStreaming : 1;                     // 0x044C:6 (0x0001)  
	bool                                               bOverrideLightMapRes : 1;                                   // 0x044C:7 (0x0001)  
	bool                                               bCastDistanceFieldIndirectShadow : 1;                       // 0x044D:0 (0x0001)  
	bool                                               bOverrideDistanceFieldSelfShadowBias : 1;                   // 0x044D:1 (0x0001)  
	bool                                               bUseSubDivisions : 1;                                       // 0x044D:2 (0x0001)  
	bool                                               bUseDefaultCollision : 1;                                   // 0x044D:3 (0x0001)  
	bool                                               bReverseCulling : 1;                                        // 0x044D:4 (0x0001)  
	unsigned char                                      UnknownData00_4[0x2];                                       // 0x044E   (0x0002)  MISSED
	int32_t                                            OverriddenLightMapRes;                                      // 0x0450   (0x0004)  
	float                                              DistanceFieldIndirectShadowMinVisibility;                   // 0x0454   (0x0004)  
	float                                              DistanceFieldSelfShadowBias;                                // 0x0458   (0x0004)  
	float                                              StreamingDistanceMultiplier;                                // 0x045C   (0x0004)  
	TArray<FStaticMeshComponentLODInfo>                LODData;                                                    // 0x0460   (0x0010)  
	TArray<FStreamingTextureBuildInfo>                 StreamingTextureData;                                       // 0x0470   (0x0010)  
	FLightmassPrimitiveSettings                        LightmassSettings;                                          // 0x0480   (0x0018)  


	/// Functions
	// Function /Script/Engine.StaticMeshComponent.SetStaticMesh
	// bool SetStaticMesh(class UStaticMesh* NewMesh);                                                                       // [0xacd320] Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetReverseCulling
	// void SetReverseCulling(bool ReverseCulling);                                                                          // [0x2fe4c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetForcedLodModel
	// void SetForcedLodModel(int32_t NewForcedLodModel);                                                                    // [0x2fe4880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
	// void SetDistanceFieldSelfShadowBias(float NewValue);                                                                  // [0x2fe4600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.OnRep_StaticMesh
	// void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);                                                              // [0x2fe4580] Final|Native|Public  
	// Function /Script/Engine.StaticMeshComponent.GetLocalBounds
	// void GetLocalBounds(FVector& Min, FVector& Max);                                                                      // [0x2fe43e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};
#pragma pack(pop)

/// Struct /Script/Engine.InstancedStaticMeshInstanceData
/// Size: 0x0040 (0x000000 - 0x000040)
struct FInstancedStaticMeshInstanceData
{ 
	FMatrix                                            Transform;                                                  // 0x0000   (0x0040)  
};

/// Struct /Script/Engine.InstancedStaticMeshMappingInfo
/// Size: 0x0008 (0x000000 - 0x000008)
struct FInstancedStaticMeshMappingInfo
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Class /Script/Engine.InstancedStaticMeshComponent
/// Size: 0x00A0 (0x0004A0 - 0x000540)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{ 
public:
	TArray<FInstancedStaticMeshInstanceData>           PerInstanceSMData;                                          // 0x0498   (0x0010)  
	int32_t                                            NumCustomDataFloats;                                        // 0x04A8   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x04AC   (0x0004)  MISSED
	TArray<float>                                      PerInstanceSMCustomData;                                    // 0x04B0   (0x0010)  
	int32_t                                            InstancingRandomSeed;                                       // 0x04C0   (0x0004)  
	int32_t                                            InstanceStartCullDistance;                                  // 0x04C4   (0x0004)  
	int32_t                                            InstanceEndCullDistance;                                    // 0x04C8   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x04CC   (0x0004)  MISSED
	TArray<int32_t>                                    InstanceReorderTable;                                       // 0x04D0   (0x0010)  
	unsigned char                                      UnknownData02_5[0x48];                                      // 0x04E0   (0x0048)  MISSED
	int32_t                                            NumPendingLightmaps;                                        // 0x0528   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x052C   (0x0004)  MISSED
	TArray<FInstancedStaticMeshMappingInfo>            CachedMappings;                                             // 0x0530   (0x0010)  


	/// Functions
	// Function /Script/Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
	// bool UpdateInstanceTransform(int32_t InstanceIndex, FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x2f00c10] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCustomDataValue
	// bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // [0x2f00ac0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCullDistances
	// void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance);                                            // [0x2f00a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.RemoveInstance
	// bool RemoveInstance(int32_t InstanceIndex);                                                                           // [0x2f00940] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceTransform
	// bool GetInstanceTransform(int32_t InstanceIndex, FTransform& OutInstanceTransform, bool bWorldSpace);                 // [0x2f00000] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
	// TArray<int32_t> GetInstancesOverlappingSphere(FVector& Center, float Radius, bool bSphereInWorldSpace);               // [0x2f00290] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
	// TArray<int32_t> GetInstancesOverlappingBox(FBox& Box, bool bBoxInWorldSpace);                                         // [0x2f00160] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceCount
	// int32_t GetInstanceCount();                                                                                           // [0x2efffd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.ClearInstances
	// void ClearInstances();                                                                                                // [0xe66630] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
	// bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, TArray<FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x2eff5e0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
	// bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x2eff3b0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
	// int32_t AddInstanceWorldSpace(FTransform& WorldTransform);                                                            // [0x2eff2d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstance
	// int32_t AddInstance(FTransform& InstanceTransform);                                                                   // [0x2eff1f0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.HierarchicalInstancedStaticMeshComponent
/// Size: 0x00F0 (0x000540 - 0x000630)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0540   (0x0010)  MISSED
	TArray<int32_t>                                    SortedInstances;                                            // 0x0550   (0x0010)  
	int32_t                                            NumBuiltInstances;                                          // 0x0560   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0564   (0x0004)  MISSED
	FBox                                               BuiltInstanceBounds;                                        // 0x0568   (0x001C)  
	FBox                                               UnbuiltInstanceBounds;                                      // 0x0584   (0x001C)  
	TArray<FBox>                                       UnbuiltInstanceBoundsList;                                  // 0x05A0   (0x0010)  
	bool                                               bEnableDensityScaling : 1;                                  // 0x05B0:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x7];                                       // 0x05B1   (0x0007)  MISSED
	int32_t                                            OcclusionLayerNumNodes;                                     // 0x05B8   (0x0004)  
	FBoxSphereBounds                                   CacheMeshExtendedBounds;                                    // 0x05BC   (0x001C)  
	bool                                               bDisableCollision;                                          // 0x05D8   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x05D9   (0x0003)  MISSED
	int32_t                                            InstanceCountToRender;                                      // 0x05DC   (0x0004)  
	unsigned char                                      UnknownData04_6[0x50];                                      // 0x05E0   (0x0050)  MISSED


	/// Functions
	// Function /Script/Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
	// bool RemoveInstances(TArray<int32_t>& InstancesToRemove);                                                             // [0x2efb3b0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.StaticMeshActor
/// Size: 0x0010 (0x000220 - 0x000230)
class AStaticMeshActor : public AActor
{ 
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                        // 0x0220   (0x0008)  
	bool                                               bStaticMeshReplicateMovement;                               // 0x0228   (0x0001)  
	ENavDataGatheringMode                              NavigationGeometryGatheringMode;                            // 0x0229   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x022A   (0x0006)  MISSED


	/// Functions
	// Function /Script/Engine.StaticMeshActor.SetMobility
	// void SetMobility(TEnumAsByte<EComponentMobility> InMobility);                                                         // [0x2fe4a00] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.LightmassMaterialInterfaceSettings
/// Size: 0x0010 (0x000000 - 0x000010)
struct FLightmassMaterialInterfaceSettings
{ 
	float                                              EmissiveBoost;                                              // 0x0000   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0004   (0x0004)  
	float                                              ExportResolutionScale;                                      // 0x0008   (0x0004)  
	bool                                               bCastShadowAsMasked : 1;                                    // 0x000C:0 (0x0001)  
	bool                                               bOverrideCastShadowAsMasked : 1;                            // 0x000C:1 (0x0001)  
	bool                                               bOverrideEmissiveBoost : 1;                                 // 0x000C:2 (0x0001)  
	bool                                               bOverrideDiffuseBoost : 1;                                  // 0x000C:3 (0x0001)  
	bool                                               bOverrideExportResolutionScale : 1;                         // 0x000C:4 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.MaterialTextureInfo
/// Size: 0x0010 (0x000000 - 0x000010)
struct FMaterialTextureInfo
{ 
	float                                              SamplingScale;                                              // 0x0000   (0x0004)  
	int32_t                                            UVChannelIndex;                                             // 0x0004   (0x0004)  
	FName                                              TextureName;                                                // 0x0008   (0x0008)  
};

/// Class /Script/Engine.MaterialInterface
/// Size: 0x0060 (0x000028 - 0x000088)
class UMaterialInterface : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0000   (0x0038)  MISSED
	class USubsurfaceProfile*                          SubsurfaceProfile;                                          // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x0040   (0x0010)  MISSED
	FLightmassMaterialInterfaceSettings                LightmassSettings;                                          // 0x0050   (0x0010)  
	TArray<FMaterialTextureInfo>                       TextureStreamingData;                                       // 0x0060   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0070   (0x0010)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0080   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.MaterialInterface.SetForceMipLevelsToBeResident
	// void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // [0x2f78b40] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterialMask
	// class UPhysicalMaterialMask* GetPhysicalMaterialMask();                                                               // [0x25951a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterialFromMap
	// class UPhysicalMaterial* GetPhysicalMaterialFromMap(int32_t Index);                                                   // [0x2f78310] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterial
	// class UPhysicalMaterial* GetPhysicalMaterial();                                                                       // [0x25951d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetParameterInfo
	// FMaterialParameterInfo GetParameterInfo(TEnumAsByte<EMaterialParameterAssociation> Association, FName ParameterName, class UMaterialFunctionInterface* LayerFunction); // [0x2f78200] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetBaseMaterial
	// class UMaterial* GetBaseMaterial();                                                                                   // [0x2f781d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.MaterialParameterInfo
/// Size: 0x0010 (0x000000 - 0x000010)
struct FMaterialParameterInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	SDK_UNDEFINED(1,234) /* TEnumAsByte<EMaterialParameterAssociation> */ __um(Association);                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            Index;                                                      // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.ScalarParameterValue
/// Size: 0x0024 (0x000000 - 0x000024)
struct FScalarParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	float                                              ParameterValue;                                             // 0x0010   (0x0004)  
	FGuid                                              ExpressionGUID;                                             // 0x0014   (0x0010)  
};

/// Struct /Script/Engine.VectorParameterValue
/// Size: 0x0030 (0x000000 - 0x000030)
struct FVectorParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	FLinearColor                                       ParameterValue;                                             // 0x0010   (0x0010)  
	FGuid                                              ExpressionGUID;                                             // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.TextureParameterValue
/// Size: 0x0028 (0x000000 - 0x000028)
struct FTextureParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	class UTexture*                                    ParameterValue;                                             // 0x0010   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.RuntimeVirtualTextureParameterValue
/// Size: 0x0028 (0x000000 - 0x000028)
struct FRuntimeVirtualTextureParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	class URuntimeVirtualTexture*                      ParameterValue;                                             // 0x0010   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.FontParameterValue
/// Size: 0x0030 (0x000000 - 0x000030)
struct FFontParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	class UFont*                                       FontValue;                                                  // 0x0010   (0x0008)  
	int32_t                                            FontPage;                                                   // 0x0018   (0x0004)  
	FGuid                                              ExpressionGUID;                                             // 0x001C   (0x0010)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.MaterialInstanceBasePropertyOverrides
/// Size: 0x0008 (0x000000 - 0x000008)
struct FMaterialInstanceBasePropertyOverrides
{ 
	bool                                               bOverride_OpacityMaskClipValue : 1;                         // 0x0000:0 (0x0001)  
	bool                                               bOverride_BlendMode : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bOverride_ShadingModel : 1;                                 // 0x0000:2 (0x0001)  
	bool                                               bOverride_DitheredLODTransition : 1;                        // 0x0000:3 (0x0001)  
	bool                                               bOverride_CastDynamicShadowAsMasked : 1;                    // 0x0000:4 (0x0001)  
	bool                                               bOverride_TwoSided : 1;                                     // 0x0000:5 (0x0001)  
	bool                                               TwoSided : 1;                                               // 0x0000:6 (0x0001)  
	bool                                               DitheredLODTransition : 1;                                  // 0x0000:7 (0x0001)  
	bool                                               bCastDynamicShadowAsMasked : 1;                             // 0x0001:0 (0x0001)  
	SDK_UNDEFINED(1,235) /* TEnumAsByte<EBlendMode> */ __um(BlendMode);                                            // 0x0002   (0x0001)  
	SDK_UNDEFINED(1,236) /* TEnumAsByte<EMaterialShadingModel> */ __um(ShadingModel);                              // 0x0003   (0x0001)  
	float                                              OpacityMaskClipValue;                                       // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.StaticParameterBase
/// Size: 0x0024 (0x000000 - 0x000024)
struct FStaticParameterBase
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	bool                                               bOverride;                                                  // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	FGuid                                              ExpressionGUID;                                             // 0x0014   (0x0010)  
};

/// Struct /Script/Engine.StaticSwitchParameter
/// Size: 0x0004 (0x000024 - 0x000028)
struct FStaticSwitchParameter : FStaticParameterBase
{ 
	bool                                               value;                                                      // 0x0024   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0025   (0x0003)  MISSED
};

/// Struct /Script/Engine.StaticComponentMaskParameter
/// Size: 0x0004 (0x000024 - 0x000028)
struct FStaticComponentMaskParameter : FStaticParameterBase
{ 
	bool                                               R;                                                          // 0x0024   (0x0001)  
	bool                                               G;                                                          // 0x0025   (0x0001)  
	bool                                               B;                                                          // 0x0026   (0x0001)  
	bool                                               A;                                                          // 0x0027   (0x0001)  
};

/// Struct /Script/Engine.StaticTerrainLayerWeightParameter
/// Size: 0x0008 (0x000024 - 0x00002C)
struct FStaticTerrainLayerWeightParameter : FStaticParameterBase
{ 
	int32_t                                            WeightmapIndex;                                             // 0x0024   (0x0004)  
	bool                                               bWeightBasedBlend;                                          // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0029   (0x0003)  MISSED
};

/// Struct /Script/Engine.MaterialLayersFunctions
/// Size: 0x0040 (0x000000 - 0x000040)
struct FMaterialLayersFunctions
{ 
	TArray<class UMaterialFunctionInterface*>          Layers;                                                     // 0x0000   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          Blends;                                                     // 0x0010   (0x0010)  
	TArray<bool>                                       LayerStates;                                                // 0x0020   (0x0010)  
	SDK_UNDEFINED(16,237) /* FString */                __um(KeyString);                                            // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.StaticMaterialLayersParameter
/// Size: 0x0044 (0x000024 - 0x000068)
struct FStaticMaterialLayersParameter : FStaticParameterBase
{ 
	unsigned char                                      UnknownData00_3[0x4];                                       // 0x0024   (0x0004)  MISSED
	FMaterialLayersFunctions                           value;                                                      // 0x0028   (0x0040)  
};

/// Struct /Script/Engine.StaticParameterSet
/// Size: 0x0040 (0x000000 - 0x000040)
struct FStaticParameterSet
{ 
	TArray<FStaticSwitchParameter>                     StaticSwitchParameters;                                     // 0x0000   (0x0010)  
	TArray<FStaticComponentMaskParameter>              StaticComponentMaskParameters;                              // 0x0010   (0x0010)  
	TArray<FStaticTerrainLayerWeightParameter>         TerrainLayerWeightParameters;                               // 0x0020   (0x0010)  
	TArray<FStaticMaterialLayersParameter>             MaterialLayersParameters;                                   // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.MaterialCachedParameterEntry
/// Size: 0x0040 (0x000000 - 0x000040)
struct FMaterialCachedParameterEntry
{ 
	TArray<uint64_t>                                   NameHashes;                                                 // 0x0000   (0x0010)  
	TArray<FMaterialParameterInfo>                     ParameterInfos;                                             // 0x0010   (0x0010)  
	TArray<FGuid>                                      ExpressionGuids;                                            // 0x0020   (0x0010)  
	TArray<bool>                                       Overrides;                                                  // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.MaterialCachedParameters
/// Size: 0x01A0 (0x000000 - 0x0001A0)
struct FMaterialCachedParameters
{ 
	FMaterialCachedParameterEntry                      Entries;                                                    // 0x0000   (0x0140)  
	TArray<float>                                      ScalarValues;                                               // 0x0140   (0x0010)  
	TArray<FLinearColor>                               VectorValues;                                               // 0x0150   (0x0010)  
	TArray<class UTexture*>                            TextureValues;                                              // 0x0160   (0x0010)  
	TArray<class UFont*>                               FontValues;                                                 // 0x0170   (0x0010)  
	TArray<int32_t>                                    FontPageValues;                                             // 0x0180   (0x0010)  
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextureValues;                                // 0x0190   (0x0010)  
};

/// Class /Script/Engine.MaterialInstance
/// Size: 0x0380 (0x000088 - 0x000408)
class UMaterialInstance : public UMaterialInterface
{ 
public:
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0088   (0x0008)  
	class UPhysicalMaterial*                           PhysicalMaterialMap;                                        // 0x0090   (0x0040)  
	class UMaterialInterface*                          Parent;                                                     // 0x00D0   (0x0008)  
	bool                                               bHasStaticPermutationResource : 1;                          // 0x00D8:0 (0x0001)  
	bool                                               bOverrideSubsurfaceProfile : 1;                             // 0x00D8:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x00D9   (0x0007)  MISSED
	TArray<FScalarParameterValue>                      ScalarParameterValues;                                      // 0x00E0   (0x0010)  
	TArray<FVectorParameterValue>                      VectorParameterValues;                                      // 0x00F0   (0x0010)  
	TArray<FTextureParameterValue>                     TextureParameterValues;                                     // 0x0100   (0x0010)  
	TArray<FRuntimeVirtualTextureParameterValue>       RuntimeVirtualTextureParameterValues;                       // 0x0110   (0x0010)  
	TArray<FFontParameterValue>                        FontParameterValues;                                        // 0x0120   (0x0010)  
	FMaterialInstanceBasePropertyOverrides             BasePropertyOverrides;                                      // 0x0130   (0x0008)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x0138   (0x0010)  MISSED
	FStaticParameterSet                                StaticParameters;                                           // 0x0148   (0x0040)  
	FMaterialCachedParameters                          CachedLayerParameters;                                      // 0x0188   (0x01A0)  
	TArray<class UObject*>                             CachedReferencedTextures;                                   // 0x0328   (0x0010)  
	unsigned char                                      UnknownData02_6[0xD0];                                      // 0x0338   (0x00D0)  MISSED
};

/// Class /Script/Engine.MaterialInstanceConstant
/// Size: 0x0008 (0x000408 - 0x000410)
class UMaterialInstanceConstant : public UMaterialInstance
{ 
public:
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                           // 0x0408   (0x0008)  


	/// Functions
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                         // [0x2f78840] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
	// class UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                     // [0x2f78670] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                // [0x2f78480] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.WorldSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UWorldSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCustomOutput
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.EngineCustomTimeStep
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineCustomTimeStep : public UObject
{ 
public:
};

/// Class /Script/Engine.DynamicBlueprintBinding
/// Size: 0x0000 (0x000028 - 0x000028)
class UDynamicBlueprintBinding : public UObject
{ 
public:
};

/// Class /Script/Engine.CameraComponent
/// Size: 0x06F0 (0x0001F0 - 0x0008E0)
class UCameraComponent : public USceneComponent
{ 
public:
	float                                              FieldOfView;                                                // 0x01F0   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x01F4   (0x0004)  
	float                                              OrthoNearClipPlane;                                         // 0x01F8   (0x0004)  
	float                                              OrthoFarClipPlane;                                          // 0x01FC   (0x0004)  
	float                                              AspectRatio;                                                // 0x0200   (0x0004)  
	bool                                               bConstrainAspectRatio : 1;                                  // 0x0204:0 (0x0001)  
	bool                                               bUseFieldOfViewForLOD : 1;                                  // 0x0204:1 (0x0001)  
	bool                                               bLockToHmd : 1;                                             // 0x0204:2 (0x0001)  
	bool                                               bUsePawnControlRotation : 1;                                // 0x0204:3 (0x0001)  
	ECameraProjectionMode                              ProjectionMode;                                             // 0x0205   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3A];                                      // 0x0206   (0x003A)  MISSED
	float                                              PostProcessBlendWeight;                                     // 0x0240   (0x0004)  
	unsigned char                                      UnknownData01_5[0x2C];                                      // 0x0244   (0x002C)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0270   (0x0670)  


	/// Functions
	// Function /Script/Engine.CameraComponent.SetUseFieldOfViewForLOD
	// void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);                                                           // [0x2ebc9e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetProjectionMode
	// void SetProjectionMode(ECameraProjectionMode InProjectionMode);                                                       // [0x2ebc8e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetPostProcessBlendWeight
	// void SetPostProcessBlendWeight(float InPostProcessBlendWeight);                                                       // [0x2ebc860] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoWidth
	// void SetOrthoWidth(float InOrthoWidth);                                                                               // [0x2ebc7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoNearClipPlane
	// void SetOrthoNearClipPlane(float InOrthoNearClipPlane);                                                               // [0x2ebc760] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoFarClipPlane
	// void SetOrthoFarClipPlane(float InOrthoFarClipPlane);                                                                 // [0x2ebc6e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetFieldOfView
	// void SetFieldOfView(float InFieldOfView);                                                                             // [0x2ebc660] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetConstraintAspectRatio
	// void SetConstraintAspectRatio(bool bInConstrainAspectRatio);                                                          // [0x2ebc550] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetAspectRatio
	// void SetAspectRatio(float InAspectRatio);                                                                             // [0x2ebc4d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.RemoveBlendable
	// void RemoveBlendable(TScriptInterface<Class> InBlendableObject);                                                      // [0x2ebc3a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.OnCameraMeshHiddenChanged
	// void OnCameraMeshHiddenChanged();                                                                                     // [0xbf6f60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.GetCameraView
	// void GetCameraView(float DeltaTime, FMinimalViewInfo& DesiredView);                                                   // [0x2ebc230] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                 // [0x2ebc000] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Model
/// Size: 0x0230 (0x000028 - 0x000258)
class UModel : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x258];                                     // 0x0000   (0x0258)  MISSED
};

/// Class /Script/Engine.Channel
/// Size: 0x0048 (0x000028 - 0x000070)
class UChannel : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UNetConnection*                              Connection;                                                 // 0x0028   (0x0008)  
	unsigned char                                      UnknownData01_6[0x40];                                      // 0x0030   (0x0040)  MISSED
};

/// Class /Script/Engine.ActorChannel
/// Size: 0x0228 (0x000070 - 0x000298)
class UActorChannel : public UChannel
{ 
public:
	class AActor*                                      Actor;                                                      // 0x0070   (0x0008)  
	unsigned char                                      UnknownData00_5[0xE8];                                      // 0x0078   (0x00E8)  MISSED
	TArray<class UObject*>                             CreateSubObjects;                                           // 0x0160   (0x0010)  
	unsigned char                                      UnknownData01_6[0x128];                                     // 0x0170   (0x0128)  MISSED
};

/// Class /Script/Engine.AnimationAsset
/// Size: 0x0058 (0x000028 - 0x000080)
class UAnimationAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0000   (0x0038)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_5[0x20];                                      // 0x0040   (0x0020)  MISSED
	TArray<class UAnimMetaData*>                       MetaData;                                                   // 0x0060   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.InterpolationParameter
/// Size: 0x0008 (0x000000 - 0x000008)
struct FInterpolationParameter
{ 
	float                                              InterpolationTime;                                          // 0x0000   (0x0004)  
	SDK_UNDEFINED(1,238) /* TEnumAsByte<EFilterInterpolationType> */ __um(InterpolationType);                      // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.PerBoneInterpolation
/// Size: 0x0014 (0x000000 - 0x000014)
struct FPerBoneInterpolation
{ 
	FBoneReference                                     BoneReference;                                              // 0x0000   (0x0010)  
	float                                              InterpolationSpeedPerSec;                                   // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.BlendSample
/// Size: 0x0018 (0x000000 - 0x000018)
struct FBlendSample
{ 
	class UAnimSequence*                               Animation;                                                  // 0x0000   (0x0008)  
	FVector                                            SampleValue;                                                // 0x0008   (0x000C)  
	float                                              RateScale;                                                  // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.EditorElement
/// Size: 0x0018 (0x000000 - 0x000018)
struct FEditorElement
{ 
	int32_t                                            Indices;                                                    // 0x0000   (0x000C)  
	float                                              Weights;                                                    // 0x000C   (0x000C)  
};

/// Struct /Script/Engine.BlendParameter
/// Size: 0x0020 (0x000000 - 0x000020)
struct FBlendParameter
{ 
	SDK_UNDEFINED(16,239) /* FString */                __um(DisplayName);                                          // 0x0000   (0x0010)  
	float                                              Min;                                                        // 0x0010   (0x0004)  
	float                                              Max;                                                        // 0x0014   (0x0004)  
	int32_t                                            GridNum;                                                    // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.BlendSpaceBase
/// Size: 0x00C8 (0x000080 - 0x000148)
class UBlendSpaceBase : public UAnimationAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	bool                                               bRotationBlendInMeshSpace;                                  // 0x0088   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	float                                              AnimLength;                                                 // 0x008C   (0x0004)  
	FInterpolationParameter                            InterpolationParam;                                         // 0x0090   (0x0018)  
	float                                              TargetWeightInterpolationSpeedPerSec;                       // 0x00A8   (0x0004)  
	SDK_UNDEFINED(1,240) /* TEnumAsByte<ENotifyTriggerMode> */ __um(NotifyTriggerMode);                            // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00AD   (0x0003)  MISSED
	TArray<FPerBoneInterpolation>                      PerBoneBlend;                                               // 0x00B0   (0x0010)  
	int32_t                                            SampleIndexWithMarkers;                                     // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x00C4   (0x0004)  MISSED
	TArray<FBlendSample>                               SampleData;                                                 // 0x00C8   (0x0010)  
	TArray<FEditorElement>                             GridSamples;                                                // 0x00D8   (0x0010)  
	FBlendParameter                                    BlendParameters;                                            // 0x00E8   (0x0060)  
};

/// Class /Script/Engine.BlendSpace
/// Size: 0x0008 (0x000148 - 0x000150)
class UBlendSpace : public UBlendSpaceBase
{ 
public:
	SDK_UNDEFINED(1,241) /* TEnumAsByte<EBlendSpaceAxis> */ __um(AxisToScaleAnimation);                            // 0x0148   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0149   (0x0007)  MISSED
};

/// Class /Script/Engine.AimOffsetBlendSpace
/// Size: 0x0000 (0x000150 - 0x000150)
class UAimOffsetBlendSpace : public UBlendSpace
{ 
public:
};

/// Class /Script/Engine.BlendSpace1D
/// Size: 0x0008 (0x000148 - 0x000150)
class UBlendSpace1D : public UBlendSpaceBase
{ 
public:
	bool                                               bScaleAnimation;                                            // 0x0148   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0149   (0x0007)  MISSED
};

/// Class /Script/Engine.AimOffsetBlendSpace1D
/// Size: 0x0000 (0x000150 - 0x000150)
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{ 
public:
};

/// Class /Script/Engine.AISystemBase
/// Size: 0x0030 (0x000028 - 0x000058)
class UAISystemBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FSoftClassPath                                     AISystemClassName;                                          // 0x0028   (0x0018)  
	FName                                              AISystemModuleName;                                         // 0x0040   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0048   (0x0008)  MISSED
	bool                                               bInstantiateAISystemOnClient;                               // 0x0050   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Class /Script/Engine.AnimationSettings
/// Size: 0x0020 (0x000038 - 0x000058)
class UAnimationSettings : public UDeveloperSettings
{ 
public:
	int32_t                                            CompressCommandletVersion;                                  // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	SDK_UNDEFINED(16,242) /* TArray<FString> */        __um(KeyEndEffectorsMatchNameArray);                        // 0x0040   (0x0010)  
	bool                                               ForceRecompression;                                         // 0x0050   (0x0001)  
	bool                                               bOnlyCheckForMissingSkeletalMeshes;                         // 0x0051   (0x0001)  
	bool                                               bForceBelowThreshold;                                       // 0x0052   (0x0001)  
	bool                                               bFirstRecompressUsingCurrentOrDefault;                      // 0x0053   (0x0001)  
	bool                                               bRaiseMaxErrorToExisting;                                   // 0x0054   (0x0001)  
	bool                                               bEnablePerformanceLog;                                      // 0x0055   (0x0001)  
	bool                                               bStripAnimationDataOnDedicatedServer;                       // 0x0056   (0x0001)  
	bool                                               bTickAnimationOnSkeletalMeshInit;                           // 0x0057   (0x0001)  
};

/// Struct /Script/Engine.AnimGroupInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FAnimGroupInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FLinearColor                                       Color;                                                      // 0x0008   (0x0010)  
};

/// Class /Script/Engine.AnimBlueprint
/// Size: 0x0028 (0x0000A0 - 0x0000C8)
class UAnimBlueprint : public UBlueprint
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00A0   (0x0008)  MISSED
	class USkeleton*                                   TargetSkeleton;                                             // 0x00A8   (0x0008)  
	TArray<FAnimGroupInfo>                             Groups;                                                     // 0x00B0   (0x0010)  
	bool                                               bUseMultiThreadedAnimationUpdate;                           // 0x00C0   (0x0001)  
	bool                                               bWarnAboutBlueprintUsage;                                   // 0x00C1   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x00C2   (0x0006)  MISSED
};

/// Struct /Script/Engine.BakedStateExitTransition
/// Size: 0x0020 (0x000000 - 0x000020)
struct FBakedStateExitTransition
{ 
	int32_t                                            CanTakeDelegateIndex;                                       // 0x0000   (0x0004)  
	int32_t                                            CustomResultNodeIndex;                                      // 0x0004   (0x0004)  
	int32_t                                            TransitionIndex;                                            // 0x0008   (0x0004)  
	bool                                               bDesiredTransitionReturnValue;                              // 0x000C   (0x0001)  
	bool                                               bAutomaticRemainingTimeRule;                                // 0x000D   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x000E   (0x0002)  MISSED
	TArray<int32_t>                                    PoseEvaluatorLinks;                                         // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BakedAnimationState
/// Size: 0x0058 (0x000000 - 0x000058)
struct FBakedAnimationState
{ 
	FName                                              StateName;                                                  // 0x0000   (0x0008)  
	TArray<FBakedStateExitTransition>                  Transitions;                                                // 0x0008   (0x0010)  
	int32_t                                            StateRootNodeIndex;                                         // 0x0018   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x001C   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0020   (0x0004)  
	int32_t                                            FullyBlendedNotify;                                         // 0x0024   (0x0004)  
	bool                                               bIsAConduit;                                                // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	int32_t                                            EntryRuleNodeIndex;                                         // 0x002C   (0x0004)  
	TArray<int32_t>                                    PlayerNodeIndices;                                          // 0x0030   (0x0010)  
	TArray<int32_t>                                    LayerNodeIndices;                                           // 0x0040   (0x0010)  
	bool                                               bAlwaysResetOnEntry;                                        // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimationStateBase
/// Size: 0x0008 (0x000000 - 0x000008)
struct FAnimationStateBase
{ 
	FName                                              StateName;                                                  // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.AnimationTransitionBetweenStates
/// Size: 0x0038 (0x000008 - 0x000040)
struct FAnimationTransitionBetweenStates : FAnimationStateBase
{ 
	int32_t                                            PreviousState;                                              // 0x0008   (0x0004)  
	int32_t                                            NextState;                                                  // 0x000C   (0x0004)  
	float                                              CrossfadeDuration;                                          // 0x0010   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x0014   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0018   (0x0004)  
	int32_t                                            InterruptNotify;                                            // 0x001C   (0x0004)  
	EAlphaBlendOption                                  BlendMode;                                                  // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0021   (0x0007)  MISSED
	class UCurveFloat*                                 CustomCurve;                                                // 0x0028   (0x0008)  
	class UBlendProfile*                               BlendProfile;                                               // 0x0030   (0x0008)  
	SDK_UNDEFINED(1,243) /* TEnumAsByte<ETransitionLogicType> */ __um(LogicType);                                  // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.BakedAnimationStateMachine
/// Size: 0x0030 (0x000000 - 0x000030)
struct FBakedAnimationStateMachine
{ 
	FName                                              MachineName;                                                // 0x0000   (0x0008)  
	int32_t                                            InitialState;                                               // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FBakedAnimationState>                       States;                                                     // 0x0010   (0x0010)  
	TArray<FAnimationTransitionBetweenStates>          Transitions;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ExposedValueCopyRecord
/// Size: 0x0080 (0x000000 - 0x000080)
struct FExposedValueCopyRecord
{ 
	FName                                              SourcePropertyName;                                         // 0x0000   (0x0008)  
	FName                                              SourceSubPropertyName;                                      // 0x0008   (0x0008)  
	int32_t                                            SourceArrayIndex;                                           // 0x0010   (0x0004)  
	bool                                               bInstanceIsTarget;                                          // 0x0014   (0x0001)  
	EPostCopyOperation                                 PostCopyOperation;                                          // 0x0015   (0x0001)  
	ECopyType                                          CopyType;                                                   // 0x0016   (0x0001)  
	unsigned char                                      UnknownData00_5[0x21];                                      // 0x0017   (0x0021)  MISSED
	int32_t                                            DestArrayIndex;                                             // 0x0038   (0x0004)  
	int32_t                                            Size;                                                       // 0x003C   (0x0004)  
	unsigned char                                      UnknownData01_6[0x40];                                      // 0x0040   (0x0040)  MISSED
};

/// Struct /Script/Engine.ExposedValueHandler
/// Size: 0x0048 (0x000000 - 0x000048)
struct FExposedValueHandler
{ 
	FName                                              BoundFunction;                                              // 0x0000   (0x0008)  
	TArray<FExposedValueCopyRecord>                    CopyRecords;                                                // 0x0008   (0x0010)  
	class UFunction*                                   Function;                                                   // 0x0018   (0x0008)  
	unsigned char                                      UnknownData00_6[0x28];                                      // 0x0020   (0x0028)  MISSED
};

/// Class /Script/Engine.AnimBlueprintGeneratedClass
/// Size: 0x01C0 (0x000328 - 0x0004E8)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0328   (0x0008)  MISSED
	TArray<FBakedAnimationStateMachine>                BakedStateMachines;                                         // 0x0330   (0x0010)  
	class USkeleton*                                   TargetSkeleton;                                             // 0x0340   (0x0008)  
	TArray<FAnimNotifyEvent>                           AnimNotifies;                                               // 0x0348   (0x0010)  
	SDK_UNDEFINED(80,244) /* TMap<FName, FCachedPoseIndices> */ __um(OrderedSavedPoseIndicesMap);                  // 0x0358   (0x0050)  
	unsigned char                                      UnknownData01_5[0x80];                                      // 0x03A8   (0x0080)  MISSED
	TArray<FName>                                      SyncGroupNames;                                             // 0x0428   (0x0010)  
	TArray<FExposedValueHandler>                       EvaluateGraphExposedInputs;                                 // 0x0438   (0x0010)  
	SDK_UNDEFINED(80,245) /* TMap<FName, FGraphAssetPlayerInformation> */ __um(GraphAssetPlayerInformation);       // 0x0448   (0x0050)  
	SDK_UNDEFINED(80,246) /* TMap<FName, FAnimGraphBlendOptions> */ __um(GraphBlendOptions);                       // 0x0498   (0x0050)  
};

/// Class /Script/Engine.AnimBoneCompressionCodec
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimBoneCompressionCodec : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(16,247) /* FString */                __um(Description);                                          // 0x0028   (0x0010)  
};

/// Class /Script/Engine.AnimBoneCompressionSettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimBoneCompressionSettings : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<class UAnimBoneCompressionCodec*>           Codecs;                                                     // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.AnimBlueprintFunction
/// Size: 0x0068 (0x000000 - 0x000068)
struct FAnimBlueprintFunction
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FName                                              Group;                                                      // 0x0008   (0x0008)  
	int32_t                                            OutputPoseNodeIndex;                                        // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	TArray<FName>                                      InputPoseNames;                                             // 0x0018   (0x0010)  
	TArray<int32_t>                                    InputPoseNodeIndices;                                       // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_5[0x28];                                      // 0x0038   (0x0028)  MISSED
	bool                                               bImplemented;                                               // 0x0060   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimBlueprintFunctionData
/// Size: 0x0040 (0x000000 - 0x000040)
struct FAnimBlueprintFunctionData
{ 
	SDK_UNDEFINED(16,248) /* TArray<InputPoseNodeProperties> */ __um(InputPoseNodeProperties);                     // 0x0020   (0x0010)  
	SDK_UNDEFINED(16,249) /* TArray<InputProperties> */ __um(InputProperties);                                     // 0x0030   (0x0010)  
};

/// Class /Script/Engine.AnimClassData
/// Size: 0x0240 (0x000028 - 0x000268)
class UAnimClassData : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	TArray<FBakedAnimationStateMachine>                BakedStateMachines;                                         // 0x0030   (0x0010)  
	class USkeleton*                                   TargetSkeleton;                                             // 0x0040   (0x0008)  
	TArray<FAnimNotifyEvent>                           AnimNotifies;                                               // 0x0048   (0x0010)  
	SDK_UNDEFINED(80,250) /* TMap<FName, FCachedPoseIndices> */ __um(OrderedSavedPoseIndicesMap);                  // 0x0058   (0x0050)  
	TArray<FAnimBlueprintFunction>                     AnimBlueprintFunctions;                                     // 0x00A8   (0x0010)  
	TArray<FAnimBlueprintFunctionData>                 AnimBlueprintFunctionData;                                  // 0x00B8   (0x0010)  
	SDK_UNDEFINED(16,251) /* TArray<AnimNodeProperties> */ __um(AnimNodeProperties);                               // 0x00C8   (0x0010)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x00D8   (0x0010)  MISSED
	SDK_UNDEFINED(16,252) /* TArray<LinkedAnimGraphNodeProperties> */ __um(LinkedAnimGraphNodeProperties);         // 0x00E8   (0x0010)  
	unsigned char                                      UnknownData02_5[0x10];                                      // 0x00F8   (0x0010)  MISSED
	SDK_UNDEFINED(16,253) /* TArray<LinkedAnimLayerNodeProperties> */ __um(LinkedAnimLayerNodeProperties);         // 0x0108   (0x0010)  
	unsigned char                                      UnknownData03_5[0x10];                                      // 0x0118   (0x0010)  MISSED
	SDK_UNDEFINED(16,254) /* TArray<PreUpdateNodeProperties> */ __um(PreUpdateNodeProperties);                     // 0x0128   (0x0010)  
	unsigned char                                      UnknownData04_5[0x10];                                      // 0x0138   (0x0010)  MISSED
	SDK_UNDEFINED(16,255) /* TArray<DynamicResetNodeProperties> */ __um(DynamicResetNodeProperties);               // 0x0148   (0x0010)  
	unsigned char                                      UnknownData05_5[0x10];                                      // 0x0158   (0x0010)  MISSED
	SDK_UNDEFINED(16,256) /* TArray<StateMachineNodeProperties> */ __um(StateMachineNodeProperties);               // 0x0168   (0x0010)  
	unsigned char                                      UnknownData06_5[0x10];                                      // 0x0178   (0x0010)  MISSED
	SDK_UNDEFINED(16,257) /* TArray<InitializationNodeProperties> */ __um(InitializationNodeProperties);           // 0x0188   (0x0010)  
	unsigned char                                      UnknownData07_5[0x10];                                      // 0x0198   (0x0010)  MISSED
	SDK_UNDEFINED(80,258) /* TMap<FName, FGraphAssetPlayerInformation> */ __um(GraphNameAssetPlayers);             // 0x01A8   (0x0050)  
	TArray<FName>                                      SyncGroupNames;                                             // 0x01F8   (0x0010)  
	TArray<FExposedValueHandler>                       EvaluateGraphExposedInputs;                                 // 0x0208   (0x0010)  
	SDK_UNDEFINED(80,259) /* TMap<FName, FAnimGraphBlendOptions> */ __um(GraphBlendOptions);                       // 0x0218   (0x0050)  
};

/// Class /Script/Engine.AnimClassInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimClassInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.SmartName
/// Size: 0x000C (0x000000 - 0x00000C)
struct FSmartName
{ 
	FName                                              DisplayName;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0008   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimCurveBase
/// Size: 0x0018 (0x000000 - 0x000018)
struct FAnimCurveBase
{ 
	FName                                              LastObservedName;                                           // 0x0000   (0x0008)  
	FSmartName                                         Name;                                                       // 0x0008   (0x000C)  
	int32_t                                            CurveTypeFlags;                                             // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.FloatCurve
/// Size: 0x0080 (0x000018 - 0x000098)
struct FFloatCurve : FAnimCurveBase
{ 
	FRichCurve                                         FloatCurve;                                                 // 0x0018   (0x0080)  
};

/// Struct /Script/Engine.RawCurveTracks
/// Size: 0x0010 (0x000000 - 0x000010)
struct FRawCurveTracks
{ 
	TArray<FFloatCurve>                                FloatCurves;                                                // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimSequenceBase
/// Size: 0x0028 (0x000080 - 0x0000A8)
class UAnimSequenceBase : public UAnimationAsset
{ 
public:
	TArray<FAnimNotifyEvent>                           Notifies;                                                   // 0x0080   (0x0010)  
	float                                              SequenceLength;                                             // 0x0090   (0x0004)  
	float                                              RateScale;                                                  // 0x0094   (0x0004)  
	FRawCurveTracks                                    RawCurveData;                                               // 0x0098   (0x0010)  


	/// Functions
	// Function /Script/Engine.AnimSequenceBase.GetPlayLength
	// float GetPlayLength();                                                                                                // [0x2ea1db0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AnimCompositeBase
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class UAnimCompositeBase : public UAnimSequenceBase
{ 
public:
};

/// Struct /Script/Engine.AnimSegment
/// Size: 0x0020 (0x000000 - 0x000020)
struct FAnimSegment
{ 
	class UAnimSequenceBase*                           AnimReference;                                              // 0x0000   (0x0008)  
	float                                              StartPos;                                                   // 0x0008   (0x0004)  
	float                                              AnimStartTime;                                              // 0x000C   (0x0004)  
	float                                              AnimEndTime;                                                // 0x0010   (0x0004)  
	float                                              AnimPlayRate;                                               // 0x0014   (0x0004)  
	int32_t                                            LoopingCount;                                               // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimTrack
/// Size: 0x0010 (0x000000 - 0x000010)
struct FAnimTrack
{ 
	TArray<FAnimSegment>                               AnimSegments;                                               // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimComposite
/// Size: 0x0010 (0x0000A8 - 0x0000B8)
class UAnimComposite : public UAnimCompositeBase
{ 
public:
	FAnimTrack                                         AnimationTrack;                                             // 0x00A8   (0x0010)  
};

/// Class /Script/Engine.AnimCompress
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimCompress : public UAnimBoneCompressionCodec
{ 
public:
	bool                                               bNeedsSkeleton : 1;                                         // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0039   (0x0003)  MISSED
	SDK_UNDEFINED(1,260) /* TEnumAsByte<AnimationCompressionFormat> */ __um(TranslationCompressionFormat);         // 0x003C   (0x0001)  
	SDK_UNDEFINED(1,261) /* TEnumAsByte<AnimationCompressionFormat> */ __um(RotationCompressionFormat);            // 0x003D   (0x0001)  
	SDK_UNDEFINED(1,262) /* TEnumAsByte<AnimationCompressionFormat> */ __um(ScaleCompressionFormat);               // 0x003E   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x003F   (0x0001)  MISSED
};

/// Class /Script/Engine.AnimCompress_BitwiseCompressOnly
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{ 
public:
};

/// Class /Script/Engine.AnimCompress_LeastDestructive
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{ 
public:
};

/// Class /Script/Engine.AnimCompress_RemoveLinearKeys
/// Size: 0x0020 (0x000040 - 0x000060)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{ 
public:
	float                                              MaxPosDiff;                                                 // 0x0040   (0x0004)  
	float                                              MaxAngleDiff;                                               // 0x0044   (0x0004)  
	float                                              MaxScaleDiff;                                               // 0x0048   (0x0004)  
	float                                              MaxEffectorDiff;                                            // 0x004C   (0x0004)  
	float                                              MinEffectorDiff;                                            // 0x0050   (0x0004)  
	float                                              EffectorDiffSocket;                                         // 0x0054   (0x0004)  
	float                                              ParentKeyScale;                                             // 0x0058   (0x0004)  
	bool                                               bRetarget : 1;                                              // 0x005C:0 (0x0001)  
	bool                                               bActuallyFilterLinearKeys : 1;                              // 0x005C:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x005D   (0x0003)  MISSED
};

/// Class /Script/Engine.AnimCompress_PerTrackCompression
/// Size: 0x0078 (0x000060 - 0x0000D8)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{ 
public:
	float                                              MaxZeroingThreshold;                                        // 0x0060   (0x0004)  
	float                                              MaxPosDiffBitwise;                                          // 0x0064   (0x0004)  
	float                                              MaxAngleDiffBitwise;                                        // 0x0068   (0x0004)  
	float                                              MaxScaleDiffBitwise;                                        // 0x006C   (0x0004)  
	SDK_UNDEFINED(16,263) /* TArray<TEnumAsByte<AnimationCompressionFormat>> */ __um(AllowedRotationFormats);      // 0x0070   (0x0010)  
	SDK_UNDEFINED(16,264) /* TArray<TEnumAsByte<AnimationCompressionFormat>> */ __um(AllowedTranslationFormats);   // 0x0080   (0x0010)  
	SDK_UNDEFINED(16,265) /* TArray<TEnumAsByte<AnimationCompressionFormat>> */ __um(AllowedScaleFormats);         // 0x0090   (0x0010)  
	bool                                               bResampleAnimation : 1;                                     // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x00A1   (0x0003)  MISSED
	float                                              ResampledFramerate;                                         // 0x00A4   (0x0004)  
	int32_t                                            MinKeysForResampling;                                       // 0x00A8   (0x0004)  
	bool                                               bUseAdaptiveError : 1;                                      // 0x00AC:0 (0x0001)  
	bool                                               bUseOverrideForEndEffectors : 1;                            // 0x00AC:1 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x00AD   (0x0003)  MISSED
	int32_t                                            TrackHeightBias;                                            // 0x00B0   (0x0004)  
	float                                              ParentingDivisor;                                           // 0x00B4   (0x0004)  
	float                                              ParentingDivisorExponent;                                   // 0x00B8   (0x0004)  
	bool                                               bUseAdaptiveError2 : 1;                                     // 0x00BC:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x00BD   (0x0003)  MISSED
	float                                              RotationErrorSourceRatio;                                   // 0x00C0   (0x0004)  
	float                                              TranslationErrorSourceRatio;                                // 0x00C4   (0x0004)  
	float                                              ScaleErrorSourceRatio;                                      // 0x00C8   (0x0004)  
	float                                              MaxErrorPerTrackRatio;                                      // 0x00CC   (0x0004)  
	float                                              PerturbationProbeSize;                                      // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00D4   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimCompress_RemoveEverySecondKey
/// Size: 0x0008 (0x000040 - 0x000048)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{ 
public:
	int32_t                                            MinKeys;                                                    // 0x0040   (0x0004)  
	bool                                               bStartAtSecondKey : 1;                                      // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Class /Script/Engine.AnimCompress_RemoveTrivialKeys
/// Size: 0x0010 (0x000040 - 0x000050)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{ 
public:
	float                                              MaxPosDiff;                                                 // 0x0040   (0x0004)  
	float                                              MaxAngleDiff;                                               // 0x0044   (0x0004)  
	float                                              MaxScaleDiff;                                               // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimCurveCompressionCodec
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimCurveCompressionCodec : public UObject
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_CompressedRichCurve
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformIndexable
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformlySampled
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionSettings
/// Size: 0x0008 (0x000028 - 0x000030)
class UAnimCurveCompressionSettings : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UAnimCurveCompressionCodec*                  Codec;                                                      // 0x0028   (0x0008)  
};

/// Class /Script/Engine.AnimLayerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimLayerInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.AnimMetaData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimMetaData : public UObject
{ 
public:
};

/// Struct /Script/Engine.AlphaBlend
/// Size: 0x0030 (0x000000 - 0x000030)
struct FAlphaBlend
{ 
	class UCurveFloat*                                 CustomCurve;                                                // 0x0000   (0x0008)  
	float                                              BlendTime;                                                  // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x000C   (0x0018)  MISSED
	EAlphaBlendOption                                  BlendOption;                                                // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_6[0xB];                                       // 0x0025   (0x000B)  MISSED
};

/// Struct /Script/Engine.AnimSyncMarker
/// Size: 0x000C (0x000000 - 0x00000C)
struct FAnimSyncMarker
{ 
	FName                                              MarkerName;                                                 // 0x0000   (0x0008)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.MarkerSyncData
/// Size: 0x0020 (0x000000 - 0x000020)
struct FMarkerSyncData
{ 
	TArray<FAnimSyncMarker>                            AuthoredSyncMarkers;                                        // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Struct /Script/Engine.CompositeSection
/// Size: 0x0028 (0x000030 - 0x000058)
struct FCompositeSection : FAnimLinkableElement
{ 
	FName                                              SectionName;                                                // 0x0030   (0x0008)  
	float                                              StartTime;                                                  // 0x0038   (0x0004)  
	FName                                              NextSectionName;                                            // 0x003C   (0x0008)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<class UAnimMetaData*>                       MetaData;                                                   // 0x0048   (0x0010)  
};

/// Struct /Script/Engine.SlotAnimationTrack
/// Size: 0x0018 (0x000000 - 0x000018)
struct FSlotAnimationTrack
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x0008)  
	FAnimTrack                                         AnimTrack;                                                  // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BranchingPoint
/// Size: 0x0010 (0x000030 - 0x000040)
struct FBranchingPoint : FAnimLinkableElement
{ 
	FName                                              EventName;                                                  // 0x0030   (0x0008)  
	float                                              DisplayTime;                                                // 0x0038   (0x0004)  
	float                                              TriggerTimeOffset;                                          // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.BranchingPointMarker
/// Size: 0x000C (0x000000 - 0x00000C)
struct FBranchingPointMarker
{ 
	int32_t                                            NotifyIndex;                                                // 0x0000   (0x0004)  
	float                                              TriggerTime;                                                // 0x0004   (0x0004)  
	SDK_UNDEFINED(1,266) /* TEnumAsByte<EAnimNotifyEventType> */ __um(NotifyEventType);                            // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.TimeStretchCurveMarker
/// Size: 0x0010 (0x000000 - 0x000010)
struct FTimeStretchCurveMarker
{ 
	float                                              Time;                                                       // 0x0000   (0x000C)  
	float                                              Alpha;                                                      // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.TimeStretchCurve
/// Size: 0x0028 (0x000000 - 0x000028)
struct FTimeStretchCurve
{ 
	float                                              SamplingRate;                                               // 0x0000   (0x0004)  
	float                                              CurveValueMinPrecision;                                     // 0x0004   (0x0004)  
	TArray<FTimeStretchCurveMarker>                    Markers;                                                    // 0x0008   (0x0010)  
	float                                              Sum_dT_i_by_C_i;                                            // 0x0018   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimMontage
/// Size: 0x0128 (0x0000A8 - 0x0001D0)
class UAnimMontage : public UAnimCompositeBase
{ 
public:
	FAlphaBlend                                        BlendIn;                                                    // 0x00A8   (0x0030)  
	float                                              BlendInTime;                                                // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x00DC   (0x0004)  MISSED
	FAlphaBlend                                        BlendOut;                                                   // 0x00E0   (0x0030)  
	float                                              BlendOutTime;                                               // 0x0110   (0x0004)  
	float                                              BlendOutTriggerTime;                                        // 0x0114   (0x0004)  
	FName                                              SyncGroup;                                                  // 0x0118   (0x0008)  
	int32_t                                            SyncSlotIndex;                                              // 0x0120   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0124   (0x0004)  MISSED
	FMarkerSyncData                                    MarkerData;                                                 // 0x0128   (0x0020)  
	TArray<FCompositeSection>                          CompositeSections;                                          // 0x0148   (0x0010)  
	TArray<FSlotAnimationTrack>                        SlotAnimTracks;                                             // 0x0158   (0x0010)  
	TArray<FBranchingPoint>                            BranchingPoints;                                            // 0x0168   (0x0010)  
	bool                                               bEnableRootMotionTranslation;                               // 0x0178   (0x0001)  
	bool                                               bEnableRootMotionRotation;                                  // 0x0179   (0x0001)  
	bool                                               bEnableAutoBlendOut;                                        // 0x017A   (0x0001)  
	SDK_UNDEFINED(1,267) /* TEnumAsByte<ERootMotionRootLock> */ __um(RootMotionRootLock);                          // 0x017B   (0x0001)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x017C   (0x0004)  MISSED
	TArray<FBranchingPointMarker>                      BranchingPointMarkers;                                      // 0x0180   (0x0010)  
	TArray<int32_t>                                    BranchingPointStateNotifyIndices;                           // 0x0190   (0x0010)  
	FTimeStretchCurve                                  TimeStretchCurve;                                           // 0x01A0   (0x0028)  
	FName                                              TimeStretchCurveName;                                       // 0x01C8   (0x0008)  


	/// Functions
	// Function /Script/Engine.AnimMontage.GetDefaultBlendOutTime
	// float GetDefaultBlendOutTime();                                                                                       // [0x24a7fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimNotify_PauseClothingSimulation
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_PlayParticleEffect
/// Size: 0x0058 (0x000038 - 0x000090)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0038   (0x0008)  
	FVector                                            LocationOffset;                                             // 0x0040   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x004C   (0x000C)  
	FVector                                            Scale;                                                      // 0x0058   (0x000C)  
	unsigned char                                      UnknownData00_5[0x1C];                                      // 0x0064   (0x001C)  MISSED
	bool                                               Attached : 1;                                               // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0081   (0x0003)  MISSED
	FName                                              SocketName;                                                 // 0x0084   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimNotify_ResetClothingSimulation
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_ResetDynamics
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_ResetDynamics : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_ResumeClothingSimulation
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotifyState_DisableRootMotion
/// Size: 0x0000 (0x000030 - 0x000030)
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Engine.AnimNotifyState_TimedParticleEffect
/// Size: 0x0030 (0x000030 - 0x000060)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0030   (0x0008)  
	FName                                              SocketName;                                                 // 0x0038   (0x0008)  
	FVector                                            LocationOffset;                                             // 0x0040   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x004C   (0x000C)  
	bool                                               bDestroyAtEnd;                                              // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.AnimNotifyState_Trail
/// Size: 0x0028 (0x000030 - 0x000058)
class UAnimNotifyState_Trail : public UAnimNotifyState
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0030   (0x0008)  
	FName                                              FirstSocketName;                                            // 0x0038   (0x0008)  
	FName                                              SecondSocketName;                                           // 0x0040   (0x0008)  
	SDK_UNDEFINED(1,268) /* TEnumAsByte<ETrailWidthMode> */ __um(WidthScaleMode);                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	FName                                              WidthScaleCurve;                                            // 0x004C   (0x0008)  
	bool                                               bRecycleSpawnedSystems : 1;                                 // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0055   (0x0003)  MISSED


	/// Functions
	// Function /Script/Engine.AnimNotifyState_Trail.OverridePSTemplate
	// class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation); // [0x15dd8c0] Event|Public|BlueprintEvent|Const 
};

/// Struct /Script/Engine.TrackToSkeletonMap
/// Size: 0x0004 (0x000000 - 0x000004)
struct FTrackToSkeletonMap
{ 
	int32_t                                            BoneTreeIndex;                                              // 0x0000   (0x0004)  
};

/// Class /Script/Engine.AnimSequence
/// Size: 0x00F8 (0x0000A8 - 0x0001A0)
class UAnimSequence : public UAnimSequenceBase
{ 
public:
	int32_t                                            NumFrames;                                                  // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x00AC   (0x0004)  MISSED
	TArray<FTrackToSkeletonMap>                        TrackToSkeletonMapTable;                                    // 0x00B0   (0x0010)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x00C0   (0x0010)  MISSED
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                    // 0x00D0   (0x0008)  
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                   // 0x00D8   (0x0008)  
	unsigned char                                      UnknownData02_5[0x70];                                      // 0x00E0   (0x0070)  MISSED
	SDK_UNDEFINED(1,269) /* TEnumAsByte<EAdditiveAnimationType> */ __um(AdditiveAnimType);                         // 0x0150   (0x0001)  
	SDK_UNDEFINED(1,270) /* TEnumAsByte<EAdditiveBasePoseType> */ __um(RefPoseType);                               // 0x0151   (0x0001)  
	unsigned char                                      UnknownData03_5[0x6];                                       // 0x0152   (0x0006)  MISSED
	class UAnimSequence*                               RefPoseSeq;                                                 // 0x0158   (0x0008)  
	int32_t                                            RefFrameIndex;                                              // 0x0160   (0x0004)  
	FName                                              RetargetSource;                                             // 0x0164   (0x0008)  
	EAnimInterpolationType                             Interpolation;                                              // 0x016C   (0x0001)  
	bool                                               bEnableRootMotion;                                          // 0x016D   (0x0001)  
	SDK_UNDEFINED(1,271) /* TEnumAsByte<ERootMotionRootLock> */ __um(RootMotionRootLock);                          // 0x016E   (0x0001)  
	bool                                               bForceRootLock;                                             // 0x016F   (0x0001)  
	bool                                               bUseNormalizedRootMotionScale;                              // 0x0170   (0x0001)  
	bool                                               bRootMotionSettingsCopiedFromMontage;                       // 0x0171   (0x0001)  
	unsigned char                                      UnknownData04_5[0x6];                                       // 0x0172   (0x0006)  MISSED
	TArray<FAnimSyncMarker>                            AuthoredSyncMarkers;                                        // 0x0178   (0x0010)  
	unsigned char                                      UnknownData05_6[0x18];                                      // 0x0188   (0x0018)  MISSED
};

/// Struct /Script/Engine.AnimSetMeshLinkup
/// Size: 0x0010 (0x000000 - 0x000010)
struct FAnimSetMeshLinkup
{ 
	TArray<int32_t>                                    BoneToTrackTable;                                           // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimSet
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class UAnimSet : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bAnimRotationOnly : 1;                                      // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0029   (0x0007)  MISSED
	TArray<FName>                                      TrackBoneNames;                                             // 0x0030   (0x0010)  
	TArray<FAnimSetMeshLinkup>                         LinkupCache;                                                // 0x0040   (0x0010)  
	TArray<char>                                       BoneUseAnimTranslation;                                     // 0x0050   (0x0010)  
	TArray<char>                                       ForceUseMeshTranslation;                                    // 0x0060   (0x0010)  
	TArray<FName>                                      UseTranslationBoneNames;                                    // 0x0070   (0x0010)  
	TArray<FName>                                      ForceMeshTranslationBoneNames;                              // 0x0080   (0x0010)  
	FName                                              PreviewSkelMeshName;                                        // 0x0090   (0x0008)  
	FName                                              BestRatioSkelMeshName;                                      // 0x0098   (0x0008)  
	unsigned char                                      UnknownData02_6[0x50];                                      // 0x00A0   (0x0050)  MISSED
};

/// Class /Script/Engine.AnimSingleNodeInstance
/// Size: 0x0010 (0x000270 - 0x000280)
class UAnimSingleNodeInstance : public UAnimInstance
{ 
public:
	class UAnimationAsset*                             CurrentAsset;                                               // 0x0268   (0x0008)  
	SDK_UNDEFINED(16,272) /* FDelegateProperty */      __um(PostEvaluateAnimEvent);                                // 0x0270   (0x0010)  


	/// Functions
	// Function /Script/Engine.AnimSingleNodeInstance.StopAnim
	// void StopAnim();                                                                                                      // [0x2ea25c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetReverse
	// void SetReverse(bool bInReverse);                                                                                     // [0x2ea2530] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
	// void SetPreviewCurveOverride(FName& PoseName, float value, bool bRemoveIfZero);                                       // [0x2ea2410] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
	// void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);                         // [0x2ea2300] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPosition
	// void SetPosition(float InPosition, bool bFireNotifies);                                                               // [0x2ea2230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlayRate
	// void SetPlayRate(float InPlayRate);                                                                                   // [0x2ea2120] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlaying
	// void SetPlaying(bool bIsPlaying);                                                                                     // [0x2ea21a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetLooping
	// void SetLooping(bool bIsLooping);                                                                                     // [0x2ea2090] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetBlendSpaceInput
	// void SetBlendSpaceInput(FVector& InBlendInput);                                                                       // [0x2ea2000] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetAnimationAsset
	// void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);                           // [0x2ea1ef0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.PlayAnim
	// void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);                                              // [0x2ea1df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetLength
	// float GetLength();                                                                                                    // [0x2ea1d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetAnimationAsset
	// class UAnimationAsset* GetAnimationAsset();                                                                           // [0x2ea1d50] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimStateMachineTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimStateMachineTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.AnimStreamable
/// Size: 0x0038 (0x0000A8 - 0x0000E0)
class UAnimStreamable : public UAnimSequenceBase
{ 
public:
	int32_t                                            NumFrames;                                                  // 0x00A8   (0x0004)  
	EAnimInterpolationType                             Interpolation;                                              // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00AD   (0x0003)  MISSED
	FName                                              RetargetSource;                                             // 0x00B0   (0x0008)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x00B8   (0x0010)  MISSED
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                    // 0x00C8   (0x0008)  
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                   // 0x00D0   (0x0008)  
	bool                                               bEnableRootMotion;                                          // 0x00D8   (0x0001)  
	SDK_UNDEFINED(1,273) /* TEnumAsByte<ERootMotionRootLock> */ __um(RootMotionRootLock);                          // 0x00D9   (0x0001)  
	bool                                               bForceRootLock;                                             // 0x00DA   (0x0001)  
	bool                                               bUseNormalizedRootMotionScale;                              // 0x00DB   (0x0001)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Class /Script/Engine.ApplicationLifecycleComponent
/// Size: 0x0090 (0x0000B0 - 0x000140)
class UApplicationLifecycleComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,274) /* FMulticastInlineDelegate */ __um(ApplicationWillDeactivateDelegate);                  // 0x00B0   (0x0010)  
	SDK_UNDEFINED(16,275) /* FMulticastInlineDelegate */ __um(ApplicationHasReactivatedDelegate);                  // 0x00C0   (0x0010)  
	SDK_UNDEFINED(16,276) /* FMulticastInlineDelegate */ __um(ApplicationWillEnterBackgroundDelegate);             // 0x00D0   (0x0010)  
	SDK_UNDEFINED(16,277) /* FMulticastInlineDelegate */ __um(ApplicationHasEnteredForegroundDelegate);            // 0x00E0   (0x0010)  
	SDK_UNDEFINED(16,278) /* FMulticastInlineDelegate */ __um(ApplicationWillTerminateDelegate);                   // 0x00F0   (0x0010)  
	SDK_UNDEFINED(16,279) /* FMulticastInlineDelegate */ __um(ApplicationShouldUnloadResourcesDelegate);           // 0x0100   (0x0010)  
	SDK_UNDEFINED(16,280) /* FMulticastInlineDelegate */ __um(ApplicationReceivedStartupArgumentsDelegate);        // 0x0110   (0x0010)  
	SDK_UNDEFINED(16,281) /* FMulticastInlineDelegate */ __um(OnTemperatureChangeDelegate);                        // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,282) /* FMulticastInlineDelegate */ __um(OnLowPowerModeDelegate);                             // 0x0130   (0x0010)  
};

/// Class /Script/Engine.ArrowComponent
/// Size: 0x0010 (0x000410 - 0x000420)
class UArrowComponent : public UPrimitiveComponent
{ 
public:
	FColor                                             ArrowColor;                                                 // 0x0408   (0x0004)  
	float                                              ArrowSize;                                                  // 0x040C   (0x0004)  
	float                                              ScreenSize;                                                 // 0x0410   (0x0004)  
	bool                                               bIsScreenSizeScaled : 1;                                    // 0x0414:0 (0x0001)  
	bool                                               bTreatAsASprite : 1;                                        // 0x0414:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0xB];                                       // 0x0415   (0x000B)  MISSED


	/// Functions
	// Function /Script/Engine.ArrowComponent.SetArrowColor
	// void SetArrowColor(FLinearColor NewColor);                                                                            // [0x2ea5450] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AssetExportTask
/// Size: 0x0050 (0x000028 - 0x000078)
class UAssetExportTask : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UObject*                                     Object;                                                     // 0x0028   (0x0008)  
	class UExporter*                                   Exporter;                                                   // 0x0030   (0x0008)  
	SDK_UNDEFINED(16,283) /* FString */                __um(Filename);                                             // 0x0038   (0x0010)  
	bool                                               bSelected;                                                  // 0x0048   (0x0001)  
	bool                                               bReplaceIdentical;                                          // 0x0049   (0x0001)  
	bool                                               bPrompt;                                                    // 0x004A   (0x0001)  
	bool                                               bAutomated;                                                 // 0x004B   (0x0001)  
	bool                                               bUseFileArchive;                                            // 0x004C   (0x0001)  
	bool                                               bWriteEmptyFiles;                                           // 0x004D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x004E   (0x0002)  MISSED
	TArray<class UObject*>                             IgnoreObjectList;                                           // 0x0050   (0x0010)  
	class UObject*                                     Options;                                                    // 0x0060   (0x0008)  
	SDK_UNDEFINED(16,284) /* TArray<FString> */        __um(Errors);                                               // 0x0068   (0x0010)  
};

/// Struct /Script/Engine.PrimaryAssetRules
/// Size: 0x000C (0x000000 - 0x00000C)
struct FPrimaryAssetRules
{ 
	int32_t                                            Priority;                                                   // 0x0000   (0x0004)  
	int32_t                                            ChunkId;                                                    // 0x0004   (0x0004)  
	bool                                               bApplyRecursively;                                          // 0x0008   (0x0001)  
	EPrimaryAssetCookRule                              CookRule;                                                   // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Engine.PrimaryAssetTypeInfo
/// Size: 0x0088 (0x000000 - 0x000088)
struct FPrimaryAssetTypeInfo
{ 
	FName                                              PrimaryAssetType;                                           // 0x0000   (0x0008)  
	SDK_UNDEFINED(40,285) /* TWeakObjectPtr<UClass*> */ __um(AssetBaseClass);                                      // 0x0008   (0x0028)  
	class UClass*                                      AssetBaseClassLoaded;                                       // 0x0030   (0x0008)  
	bool                                               bHasBlueprintClasses;                                       // 0x0038   (0x0001)  
	bool                                               bIsEditorOnly;                                              // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x003A   (0x0006)  MISSED
	TArray<FDirectoryPath>                             Directories;                                                // 0x0040   (0x0010)  
	TArray<FSoftObjectPath>                            SpecificAssets;                                             // 0x0050   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0060   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x006C   (0x0004)  MISSED
	SDK_UNDEFINED(16,286) /* TArray<FString> */        __um(AssetScanPaths);                                       // 0x0070   (0x0010)  
	bool                                               bIsDynamicAsset;                                            // 0x0080   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0081   (0x0003)  MISSED
	int32_t                                            NumberOfAssets;                                             // 0x0084   (0x0004)  
};

/// Struct /Script/Engine.PrimaryAssetRulesOverride
/// Size: 0x001C (0x000000 - 0x00001C)
struct FPrimaryAssetRulesOverride
{ 
	FPrimaryAssetId                                    PrimaryAssetId;                                             // 0x0000   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0010   (0x000C)  
};

/// Struct /Script/Engine.PrimaryAssetRulesCustomOverride
/// Size: 0x0038 (0x000000 - 0x000038)
struct FPrimaryAssetRulesCustomOverride
{ 
	FPrimaryAssetType                                  PrimaryAssetType;                                           // 0x0000   (0x0008)  
	FDirectoryPath                                     FilterDirectory;                                            // 0x0008   (0x0010)  
	SDK_UNDEFINED(16,287) /* FString */                __um(FilterString);                                         // 0x0018   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0028   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/Engine.AssetManagerRedirect
/// Size: 0x0020 (0x000000 - 0x000020)
struct FAssetManagerRedirect
{ 
	SDK_UNDEFINED(16,288) /* FString */                __um(Old);                                                  // 0x0000   (0x0010)  
	SDK_UNDEFINED(16,289) /* FString */                __um(New);                                                  // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AssetManagerSettings
/// Size: 0x00C8 (0x000038 - 0x000100)
class UAssetManagerSettings : public UDeveloperSettings
{ 
public:
	TArray<FPrimaryAssetTypeInfo>                      PrimaryAssetTypesToScan;                                    // 0x0038   (0x0010)  
	TArray<FDirectoryPath>                             DirectoriesToExclude;                                       // 0x0048   (0x0010)  
	TArray<FPrimaryAssetRulesOverride>                 PrimaryAssetRules;                                          // 0x0058   (0x0010)  
	TArray<FPrimaryAssetRulesCustomOverride>           CustomPrimaryAssetRules;                                    // 0x0068   (0x0010)  
	bool                                               bOnlyCookProductionAssets;                                  // 0x0078   (0x0001)  
	bool                                               bShouldManagerDetermineTypeAndName;                         // 0x0079   (0x0001)  
	bool                                               bShouldGuessTypeAndNameInEditor;                            // 0x007A   (0x0001)  
	bool                                               bShouldAcquireMissingChunksOnLoad;                          // 0x007B   (0x0001)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FAssetManagerRedirect>                      PrimaryAssetIdRedirects;                                    // 0x0080   (0x0010)  
	TArray<FAssetManagerRedirect>                      PrimaryAssetTypeRedirects;                                  // 0x0090   (0x0010)  
	TArray<FAssetManagerRedirect>                      AssetPathRedirects;                                         // 0x00A0   (0x0010)  
	SDK_UNDEFINED(80,290) /* TSet<FName> */            __um(MetaDataTagsForAssetRegistry);                         // 0x00B0   (0x0050)  
};

/// Struct /Script/Engine.AssetMapping
/// Size: 0x0010 (0x000000 - 0x000010)
struct FAssetMapping
{ 
	class UAnimationAsset*                             SourceAsset;                                                // 0x0000   (0x0008)  
	class UAnimationAsset*                             TargetAsset;                                                // 0x0008   (0x0008)  
};

/// Class /Script/Engine.AssetMappingTable
/// Size: 0x0010 (0x000028 - 0x000038)
class UAssetMappingTable : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FAssetMapping>                              MappedAssets;                                               // 0x0028   (0x0010)  
};

/// Class /Script/Engine.AsyncActionHandleSaveGame
/// Size: 0x0038 (0x000030 - 0x000068)
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{ 
public:
	SDK_UNDEFINED(16,291) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0040   (0x0020)  MISSED
	class USaveGame*                                   SaveGameObject;                                             // 0x0060   (0x0008)  


	/// Functions
	// Function /Script/Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
	// class UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(class UObject* WorldContextObject, class USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex); // [0x2ea5300] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
	// class UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(class UObject* WorldContextObject, FString SlotName, int32_t UserIndex); // [0x2ea51e0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetBase
/// Size: 0x0048 (0x000030 - 0x000078)
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x48];                                      // 0x0030   (0x0048)  MISSED
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAsset
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,292) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
	// class UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(class UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x2ea7ce0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClass
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,293) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
	// class UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x2ea7e20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetList
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,294) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
	// class UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x2ea80c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClassList
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,295) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
	// class UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x2ea7f60] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionChangePrimaryAssetBundles
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,296) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
	// class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& AddBundles, TArray<FName>& RemoveBundles); // [0x2ea7b30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
	// class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, TArray<FName>& NewBundles, TArray<FName>& OldBundles); // [0x2ea79d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AtmosphericFog
/// Size: 0x0008 (0x000220 - 0x000228)
class AAtmosphericFog : public AInfo
{ 
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                    // 0x0220   (0x0008)  
};

/// Struct /Script/Engine.AtmospherePrecomputeParameters
/// Size: 0x002C (0x000000 - 0x00002C)
struct FAtmospherePrecomputeParameters
{ 
	float                                              DensityHeight;                                              // 0x0000   (0x0004)  
	float                                              DecayHeight;                                                // 0x0004   (0x0004)  
	int32_t                                            MaxScatteringOrder;                                         // 0x0008   (0x0004)  
	int32_t                                            TransmittanceTexWidth;                                      // 0x000C   (0x0004)  
	int32_t                                            TransmittanceTexHeight;                                     // 0x0010   (0x0004)  
	int32_t                                            IrradianceTexWidth;                                         // 0x0014   (0x0004)  
	int32_t                                            IrradianceTexHeight;                                        // 0x0018   (0x0004)  
	int32_t                                            InscatterAltitudeSampleNum;                                 // 0x001C   (0x0004)  
	int32_t                                            InscatterMuNum;                                             // 0x0020   (0x0004)  
	int32_t                                            InscatterMuSNum;                                            // 0x0024   (0x0004)  
	int32_t                                            InscatterNuNum;                                             // 0x0028   (0x0004)  
};

/// Class /Script/Engine.AtmosphericFogComponent
/// Size: 0x00F0 (0x0001F0 - 0x0002E0)
class UAtmosphericFogComponent : public USceneComponent
{ 
public:
	float                                              SunMultiplier;                                              // 0x01F0   (0x0004)  
	float                                              FogMultiplier;                                              // 0x01F4   (0x0004)  
	float                                              DensityMultiplier;                                          // 0x01F8   (0x0004)  
	float                                              DensityOffset;                                              // 0x01FC   (0x0004)  
	float                                              DistanceScale;                                              // 0x0200   (0x0004)  
	float                                              AltitudeScale;                                              // 0x0204   (0x0004)  
	float                                              DistanceOffset;                                             // 0x0208   (0x0004)  
	float                                              GroundOffset;                                               // 0x020C   (0x0004)  
	float                                              StartDistance;                                              // 0x0210   (0x0004)  
	float                                              SunDiscScale;                                               // 0x0214   (0x0004)  
	float                                              DefaultBrightness;                                          // 0x0218   (0x0004)  
	FColor                                             DefaultLightColor;                                          // 0x021C   (0x0004)  
	bool                                               bDisableSunDisk : 1;                                        // 0x0220:0 (0x0001)  
	bool                                               bAtmosphereAffectsSunIlluminance : 1;                       // 0x0220:1 (0x0001)  
	bool                                               bDisableGroundScattering : 1;                               // 0x0220:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0221   (0x0003)  MISSED
	FAtmospherePrecomputeParameters                    PrecomputeParams;                                           // 0x0224   (0x002C)  
	class UTexture2D*                                  TransmittanceTexture;                                       // 0x0250   (0x0008)  
	class UTexture2D*                                  IrradianceTexture;                                          // 0x0258   (0x0008)  
	unsigned char                                      UnknownData01_6[0x80];                                      // 0x0260   (0x0080)  MISSED


	/// Functions
	// Function /Script/Engine.AtmosphericFogComponent.StartPrecompute
	// void StartPrecompute();                                                                                               // [0xbf6f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetSunMultiplier
	// void SetSunMultiplier(float NewSunMultiplier);                                                                        // [0x2ea9820] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetStartDistance
	// void SetStartDistance(float NewStartDistance);                                                                        // [0x2ea96d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetPrecomputeParams
	// void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum);        // [0x2ea93a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetFogMultiplier
	// void SetFogMultiplier(float NewFogMultiplier);                                                                        // [0x2ea9040] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDistanceScale
	// void SetDistanceScale(float NewDistanceScale);                                                                        // [0x2ea8ef0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDistanceOffset
	// void SetDistanceOffset(float NewDistanceOffset);                                                                      // [0x2ea8e70] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDensityOffset
	// void SetDensityOffset(float NewDensityOffset);                                                                        // [0x2ea8df0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDensityMultiplier
	// void SetDensityMultiplier(float NewDensityMultiplier);                                                                // [0x2ea8d70] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDefaultLightColor
	// void SetDefaultLightColor(FLinearColor NewLightColor);                                                                // [0x2ea8cf0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDefaultBrightness
	// void SetDefaultBrightness(float NewBrightness);                                                                       // [0x2ea8c70] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetAltitudeScale
	// void SetAltitudeScale(float NewAltitudeScale);                                                                        // [0x2ea8b20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.DisableSunDisk
	// void DisableSunDisk(bool NewSunDisk);                                                                                 // [0x2ea8380] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.DisableGroundScattering
	// void DisableGroundScattering(bool NewGroundScattering);                                                               // [0x2ea82f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.AudioQualitySettings
/// Size: 0x0020 (0x000000 - 0x000020)
struct FAudioQualitySettings
{ 
	SDK_UNDEFINED(24,297) /* FText */                  __um(DisplayName);                                          // 0x0000   (0x0018)  
	int32_t                                            MaxChannels;                                                // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.AudioSettings
/// Size: 0x0110 (0x000038 - 0x000148)
class UAudioSettings : public UDeveloperSettings
{ 
public:
	FSoftObjectPath                                    DefaultSoundClassName;                                      // 0x0038   (0x0018)  
	FSoftObjectPath                                    DefaultMediaSoundClassName;                                 // 0x0050   (0x0018)  
	FSoftObjectPath                                    DefaultSoundConcurrencyName;                                // 0x0068   (0x0018)  
	FSoftObjectPath                                    DefaultBaseSoundMix;                                        // 0x0080   (0x0018)  
	FSoftObjectPath                                    VoiPSoundClass;                                             // 0x0098   (0x0018)  
	FSoftObjectPath                                    MasterSubmix;                                               // 0x00B0   (0x0018)  
	FSoftObjectPath                                    ReverbSubmix;                                               // 0x00C8   (0x0018)  
	FSoftObjectPath                                    EQSubmix;                                                   // 0x00E0   (0x0018)  
	EVoiceSampleRate                                   VoiPSampleRate;                                             // 0x00F8   (0x0004)  
	float                                              DefaultReverbSendLevel;                                     // 0x00FC   (0x0004)  
	int32_t                                            MaximumConcurrentStreams;                                   // 0x0100   (0x0004)  
	float                                              GlobalMinPitchScale;                                        // 0x0104   (0x0004)  
	float                                              GlobalMaxPitchScale;                                        // 0x0108   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x010C   (0x0004)  MISSED
	TArray<FAudioQualitySettings>                      QualityLevels;                                              // 0x0110   (0x0010)  
	bool                                               bAllowPlayWhenSilent : 1;                                   // 0x0120:0 (0x0001)  
	bool                                               bDisableMasterEQ : 1;                                       // 0x0120:1 (0x0001)  
	bool                                               bAllowCenterChannel3DPanning : 1;                           // 0x0120:2 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0121   (0x0003)  MISSED
	uint32_t                                           NumStoppingSources;                                         // 0x0124   (0x0004)  
	EPanningMethod                                     PanningMethod;                                              // 0x0128   (0x0001)  
	EMonoChannelUpmixMethod                            MonoChannelUpmixMethod;                                     // 0x0129   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x012A   (0x0006)  MISSED
	SDK_UNDEFINED(16,298) /* FString */                __um(DialogueFilenameFormat);                               // 0x0130   (0x0010)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0140   (0x0008)  MISSED
};

/// Struct /Script/Engine.ReverbSettings
/// Size: 0x0020 (0x000000 - 0x000020)
struct FReverbSettings
{ 
	bool                                               bApplyReverb;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UReverbEffect*                               ReverbEffect;                                               // 0x0008   (0x0008)  
	class USoundEffectSubmixPreset*                    ReverbPluginEffect;                                         // 0x0010   (0x0008)  
	float                                              Volume;                                                     // 0x0018   (0x0004)  
	float                                              FadeTime;                                                   // 0x001C   (0x0004)  
};

/// Struct /Script/Engine.InteriorSettings
/// Size: 0x0024 (0x000000 - 0x000024)
struct FInteriorSettings
{ 
	bool                                               bIsWorldSettings;                                           // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ExteriorVolume;                                             // 0x0004   (0x0004)  
	float                                              ExteriorTime;                                               // 0x0008   (0x0004)  
	float                                              ExteriorLPF;                                                // 0x000C   (0x0004)  
	float                                              ExteriorLPFTime;                                            // 0x0010   (0x0004)  
	float                                              InteriorVolume;                                             // 0x0014   (0x0004)  
	float                                              InteriorTime;                                               // 0x0018   (0x0004)  
	float                                              InteriorLPF;                                                // 0x001C   (0x0004)  
	float                                              InteriorLPFTime;                                            // 0x0020   (0x0004)  
};

/// Class /Script/Engine.AudioVolume
/// Size: 0x0050 (0x000258 - 0x0002A8)
class AAudioVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0258   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x025C:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x025D   (0x0003)  MISSED
	FReverbSettings                                    Settings;                                                   // 0x0260   (0x0020)  
	FInteriorSettings                                  AmbientZoneSettings;                                        // 0x0280   (0x0024)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02A4   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.AudioVolume.SetReverbSettings
	// void SetReverbSettings(FReverbSettings& NewReverbSettings);                                                           // [0x2ead900] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetPriority
	// void SetPriority(float NewPriority);                                                                                  // [0x2ead880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetInteriorSettings
	// void SetInteriorSettings(FInteriorSettings& NewInteriorSettings);                                                     // [0x2ead7e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetEnabled
	// void SetEnabled(bool bNewEnabled);                                                                                    // [0x2ead750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                // [0xa97060] Final|Native|Private 
};

/// Class /Script/Engine.AutoDestroySubsystem
/// Size: 0x0018 (0x000030 - 0x000048)
class UAutoDestroySubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	TArray<class AActor*>                              ActorsToPoll;                                               // 0x0038   (0x0010)  


	/// Functions
	// Function /Script/Engine.AutoDestroySubsystem.OnActorEndPlay
	// void OnActorEndPlay(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason);                                  // [0x2ead5c0] Final|Native|Private 
};

/// Struct /Script/Engine.EditorMapPerformanceTestDefinition
/// Size: 0x0020 (0x000000 - 0x000020)
struct FEditorMapPerformanceTestDefinition
{ 
	FSoftObjectPath                                    PerformanceTestmap;                                         // 0x0000   (0x0018)  
	int32_t                                            TestTimer;                                                  // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.FilePath
/// Size: 0x0010 (0x000000 - 0x000010)
struct FFilePath
{ 
	SDK_UNDEFINED(16,299) /* FString */                __um(FilePath);                                             // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ImportFactorySettingValues
/// Size: 0x0020 (0x000000 - 0x000020)
struct FImportFactorySettingValues
{ 
	SDK_UNDEFINED(16,300) /* FString */                __um(SettingName);                                          // 0x0000   (0x0010)  
	SDK_UNDEFINED(16,301) /* FString */                __um(value);                                                // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.EditorImportWorkflowDefinition
/// Size: 0x0020 (0x000000 - 0x000020)
struct FEditorImportWorkflowDefinition
{ 
	FFilePath                                          ImportFilePath;                                             // 0x0000   (0x0010)  
	TArray<FImportFactorySettingValues>                FactorySettings;                                            // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionImportWorkflowSettings
/// Size: 0x0150 (0x000000 - 0x000150)
struct FBuildPromotionImportWorkflowSettings
{ 
	FEditorImportWorkflowDefinition                    Diffuse;                                                    // 0x0000   (0x0020)  
	FEditorImportWorkflowDefinition                    Normal;                                                     // 0x0020   (0x0020)  
	FEditorImportWorkflowDefinition                    StaticMesh;                                                 // 0x0040   (0x0020)  
	FEditorImportWorkflowDefinition                    ReimportStaticMesh;                                         // 0x0060   (0x0020)  
	FEditorImportWorkflowDefinition                    BlendShapeMesh;                                             // 0x0080   (0x0020)  
	FEditorImportWorkflowDefinition                    MorphMesh;                                                  // 0x00A0   (0x0020)  
	FEditorImportWorkflowDefinition                    SkeletalMesh;                                               // 0x00C0   (0x0020)  
	FEditorImportWorkflowDefinition                    Animation;                                                  // 0x00E0   (0x0020)  
	FEditorImportWorkflowDefinition                    Sound;                                                      // 0x0100   (0x0020)  
	FEditorImportWorkflowDefinition                    SurroundSound;                                              // 0x0120   (0x0020)  
	TArray<FEditorImportWorkflowDefinition>            OtherAssetsToImport;                                        // 0x0140   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionOpenAssetSettings
/// Size: 0x0060 (0x000000 - 0x000060)
struct FBuildPromotionOpenAssetSettings
{ 
	FFilePath                                          BlueprintAsset;                                             // 0x0000   (0x0010)  
	FFilePath                                          MaterialAsset;                                              // 0x0010   (0x0010)  
	FFilePath                                          ParticleSystemAsset;                                        // 0x0020   (0x0010)  
	FFilePath                                          SkeletalMeshAsset;                                          // 0x0030   (0x0010)  
	FFilePath                                          StaticMeshAsset;                                            // 0x0040   (0x0010)  
	FFilePath                                          TextureAsset;                                               // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionNewProjectSettings
/// Size: 0x0020 (0x000000 - 0x000020)
struct FBuildPromotionNewProjectSettings
{ 
	FDirectoryPath                                     NewProjectFolderOverride;                                   // 0x0000   (0x0010)  
	SDK_UNDEFINED(16,302) /* FString */                __um(NewProjectNameOverride);                               // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionTestSettings
/// Size: 0x01F0 (0x000000 - 0x0001F0)
struct FBuildPromotionTestSettings
{ 
	FFilePath                                          DefaultStaticMeshAsset;                                     // 0x0000   (0x0010)  
	FBuildPromotionImportWorkflowSettings              ImportWorkflow;                                             // 0x0010   (0x0150)  
	FBuildPromotionOpenAssetSettings                   OpenAssets;                                                 // 0x0160   (0x0060)  
	FBuildPromotionNewProjectSettings                  NewProjectSettings;                                         // 0x01C0   (0x0020)  
	FFilePath                                          SourceControlMaterial;                                      // 0x01E0   (0x0010)  
};

/// Struct /Script/Engine.MaterialEditorPromotionSettings
/// Size: 0x0030 (0x000000 - 0x000030)
struct FMaterialEditorPromotionSettings
{ 
	FFilePath                                          DefaultMaterialAsset;                                       // 0x0000   (0x0010)  
	FFilePath                                          DefaultDiffuseTexture;                                      // 0x0010   (0x0010)  
	FFilePath                                          DefaultNormalTexture;                                       // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ParticleEditorPromotionSettings
/// Size: 0x0010 (0x000000 - 0x000010)
struct FParticleEditorPromotionSettings
{ 
	FFilePath                                          DefaultParticleAsset;                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.BlueprintEditorPromotionSettings
/// Size: 0x0030 (0x000000 - 0x000030)
struct FBlueprintEditorPromotionSettings
{ 
	FFilePath                                          FirstMeshPath;                                              // 0x0000   (0x0010)  
	FFilePath                                          SecondMeshPath;                                             // 0x0010   (0x0010)  
	FFilePath                                          DefaultParticleAsset;                                       // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ExternalToolDefinition
/// Size: 0x0060 (0x000000 - 0x000060)
struct FExternalToolDefinition
{ 
	SDK_UNDEFINED(16,303) /* FString */                __um(ToolName);                                             // 0x0000   (0x0010)  
	FFilePath                                          ExecutablePath;                                             // 0x0010   (0x0010)  
	SDK_UNDEFINED(16,304) /* FString */                __um(CommandLineOptions);                                   // 0x0020   (0x0010)  
	FDirectoryPath                                     WorkingDirectory;                                           // 0x0030   (0x0010)  
	SDK_UNDEFINED(16,305) /* FString */                __um(ScriptExtension);                                      // 0x0040   (0x0010)  
	FDirectoryPath                                     ScriptDirectory;                                            // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.EditorImportExportTestDefinition
/// Size: 0x0038 (0x000000 - 0x000038)
struct FEditorImportExportTestDefinition
{ 
	FFilePath                                          ImportFilePath;                                             // 0x0000   (0x0010)  
	SDK_UNDEFINED(16,306) /* FString */                __um(ExportFileExtension);                                  // 0x0010   (0x0010)  
	bool                                               bSkipExport;                                                // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0021   (0x0007)  MISSED
	TArray<FImportFactorySettingValues>                FactorySettings;                                            // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.LaunchOnTestSettings
/// Size: 0x0020 (0x000000 - 0x000020)
struct FLaunchOnTestSettings
{ 
	FFilePath                                          LaunchOnTestmap;                                            // 0x0000   (0x0010)  
	SDK_UNDEFINED(16,307) /* FString */                __um(DeviceID);                                             // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AutomationTestSettings
/// Size: 0x0300 (0x000028 - 0x000328)
class UAutomationTestSettings : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(16,308) /* TArray<FString> */        __um(EngineTestModules);                                    // 0x0028   (0x0010)  
	SDK_UNDEFINED(16,309) /* TArray<FString> */        __um(EditorTestModules);                                    // 0x0038   (0x0010)  
	FSoftObjectPath                                    AutomationTestmap;                                          // 0x0048   (0x0018)  
	TArray<FEditorMapPerformanceTestDefinition>        EditorPerformanceTestMaps;                                  // 0x0060   (0x0010)  
	TArray<FSoftObjectPath>                            AssetsToOpen;                                               // 0x0070   (0x0010)  
	FBuildPromotionTestSettings                        BuildPromotionTest;                                         // 0x0080   (0x01F0)  
	FMaterialEditorPromotionSettings                   MaterialEditorPromotionTest;                                // 0x0270   (0x0030)  
	FParticleEditorPromotionSettings                   ParticleEditorPromotionTest;                                // 0x02A0   (0x0010)  
	FBlueprintEditorPromotionSettings                  BlueprintEditorPromotionTest;                               // 0x02B0   (0x0030)  
	SDK_UNDEFINED(16,310) /* TArray<FString> */        __um(TestLevelFolders);                                     // 0x02E0   (0x0010)  
	TArray<FExternalToolDefinition>                    ExternalTools;                                              // 0x02F0   (0x0010)  
	TArray<FEditorImportExportTestDefinition>          ImportExportTestDefinitions;                                // 0x0300   (0x0010)  
	TArray<FLaunchOnTestSettings>                      LaunchOnSettings;                                           // 0x0310   (0x0010)  
	FIntPoint                                          DefaultScreenshotResolution;                                // 0x0320   (0x0008)  
};

/// Class /Script/Engine.AvoidanceManager
/// Size: 0x00B8 (0x000028 - 0x0000E0)
class UAvoidanceManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	float                                              DefaultTimeToLive;                                          // 0x0030   (0x0004)  
	float                                              LockTimeAfterAvoid;                                         // 0x0034   (0x0004)  
	float                                              LockTimeAfterClean;                                         // 0x0038   (0x0004)  
	float                                              DeltaTimeToPredict;                                         // 0x003C   (0x0004)  
	float                                              ArtificialRadiusExpansion;                                  // 0x0040   (0x0004)  
	float                                              TestHeightDifference;                                       // 0x0044   (0x0004)  
	float                                              HeightCheckMargin;                                          // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_6[0x94];                                      // 0x004C   (0x0094)  MISSED


	/// Functions
	// Function /Script/Engine.AvoidanceManager.RegisterMovementComponent
	// bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);                        // [0x2ead680] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetObjectCount
	// int32_t GetObjectCount();                                                                                             // [0x2ead590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetNewAvoidanceUID
	// int32_t GetNewAvoidanceUID();                                                                                         // [0x2ead560] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
	// FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);                                     // [0x2ead4c0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.BandwidthTestItem
/// Size: 0x0010 (0x000000 - 0x000010)
struct FBandwidthTestItem
{ 
	TArray<char>                                       Kilobyte;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.BandwidthTestGenerator
/// Size: 0x0020 (0x000000 - 0x000020)
struct FBandwidthTestGenerator
{ 
	TArray<FBandwidthTestItem>                         ReplicatedBuffers;                                          // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Class /Script/Engine.BandwidthTestActor
/// Size: 0x0020 (0x000220 - 0x000240)
class ABandwidthTestActor : public AActor
{ 
public:
	FBandwidthTestGenerator                            BandwidthGenerator;                                         // 0x0220   (0x0020)  
};

/// Class /Script/Engine.BillboardComponent
/// Size: 0x0020 (0x000410 - 0x000430)
class UBillboardComponent : public UPrimitiveComponent
{ 
public:
	class UTexture2D*                                  Sprite;                                                     // 0x0408   (0x0008)  
	bool                                               bIsScreenSizeScaled : 1;                                    // 0x0410:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0411   (0x0003)  MISSED
	float                                              ScreenSize;                                                 // 0x0414   (0x0004)  
	float                                              U;                                                          // 0x0418   (0x0004)  
	float                                              UL;                                                         // 0x041C   (0x0004)  
	float                                              V;                                                          // 0x0420   (0x0004)  
	float                                              VL;                                                         // 0x0424   (0x0004)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0428   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.BillboardComponent.SetUV
	// void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);                                                 // [0x2eadbc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetSpriteAndUV
	// void SetSpriteAndUV(class UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);           // [0x2eada40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetSprite
	// void SetSprite(class UTexture2D* NewSprite);                                                                          // [0x2ead9b0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlendableInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlendableInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.BoneNode
/// Size: 0x0010 (0x000000 - 0x000010)
struct FBoneNode
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	int32_t                                            ParentIndex;                                                // 0x0008   (0x0004)  
	SDK_UNDEFINED(1,311) /* TEnumAsByte<EBoneTranslationRetargetingMode> */ __um(TranslationRetargetingMode);      // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.VirtualBone
/// Size: 0x0018 (0x000000 - 0x000018)
struct FVirtualBone
{ 
	FName                                              SourceBoneName;                                             // 0x0000   (0x0008)  
	FName                                              TargetBoneName;                                             // 0x0008   (0x0008)  
	FName                                              VirtualBoneName;                                            // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.SmartNameContainer
/// Size: 0x0050 (0x000000 - 0x000050)
struct FSmartNameContainer
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/Engine.AnimSlotGroup
/// Size: 0x0018 (0x000000 - 0x000018)
struct FAnimSlotGroup
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	TArray<FName>                                      SlotNames;                                                  // 0x0008   (0x0010)  
};

/// Class /Script/Engine.Skeleton
/// Size: 0x0340 (0x000028 - 0x000368)
class USkeleton : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0000   (0x0038)  MISSED
	TArray<FBoneNode>                                  BoneTree;                                                   // 0x0038   (0x0010)  
	TArray<FTransform>                                 RefLocalPoses;                                              // 0x0048   (0x0010)  
	unsigned char                                      UnknownData01_5[0x118];                                     // 0x0058   (0x0118)  MISSED
	FGuid                                              VirtualBoneGuid;                                            // 0x0170   (0x0010)  
	TArray<FVirtualBone>                               VirtualBones;                                               // 0x0180   (0x0010)  
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                    // 0x0190   (0x0010)  
	unsigned char                                      UnknownData02_5[0x50];                                      // 0x01A0   (0x0050)  MISSED
	FSmartNameContainer                                SmartNames;                                                 // 0x01F0   (0x0050)  
	unsigned char                                      UnknownData03_5[0x30];                                      // 0x0240   (0x0030)  MISSED
	TArray<class UBlendProfile*>                       BlendProfiles;                                              // 0x0270   (0x0010)  
	TArray<FAnimSlotGroup>                             SlotGroups;                                                 // 0x0280   (0x0010)  
	unsigned char                                      UnknownData04_5[0xC8];                                      // 0x0290   (0x00C8)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0358   (0x0010)  
};

/// Struct /Script/Engine.BlendProfileBoneEntry
/// Size: 0x0014 (0x000000 - 0x000014)
struct FBlendProfileBoneEntry
{ 
	FBoneReference                                     BoneReference;                                              // 0x0000   (0x0010)  
	float                                              BlendScale;                                                 // 0x0010   (0x0004)  
};

/// Class /Script/Engine.BlendProfile
/// Size: 0x0020 (0x000028 - 0x000048)
class UBlendProfile : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	class USkeleton*                                   OwningSkeleton;                                             // 0x0030   (0x0008)  
	TArray<FBlendProfileBoneEntry>                     ProfileEntries;                                             // 0x0038   (0x0010)  
};

/// Class /Script/Engine.BlockingVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class ABlockingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.BlueprintExtension
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintExtension : public UObject
{ 
public:
};

/// Class /Script/Engine.BlueprintMapLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.BlueprintMapLibrary.SetMapPropertyByName
	// void SetMapPropertyByName(class UObject* Object, FName PropertyName, TMap<int32_t, int32_t>& value);                  // [0x2eb54a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Values
	// void Map_Values(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Values);                                          // [0x2eb48a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Remove
	// bool Map_Remove(TMap<int32_t, int32_t>& TargetMap, int32_t& Key);                                                     // [0x2eb46f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Length
	// int32_t Map_Length(TMap<int32_t, int32_t>& TargetMap);                                                                // [0x2eb4640] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Keys
	// void Map_Keys(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Keys);                                              // [0x2eb4540] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Find
	// bool Map_Find(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& value);                                       // [0x2eb42b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Contains
	// bool Map_Contains(TMap<int32_t, int32_t>& TargetMap, int32_t& Key);                                                   // [0x2eb4100] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Clear
	// void Map_Clear(TMap<int32_t, int32_t>& TargetMap);                                                                    // [0x2eb4060] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Add
	// void Map_Add(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& value);                                        // [0x2eb3df0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintPathsLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.BlueprintPathsLibrary.VideoCaptureDir
	// FString VideoCaptureDir();                                                                                            // [0x2eb5a80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ValidatePath
	// void ValidatePath(FString InPath, bool& bDidSucceed, FText& OutReason);                                               // [0x2eb5910] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.Split
	// void Split(FString InPath, FString& PathPart, FString& FilenamePart, FString& ExtensionPart);                         // [0x2eb5750] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.SourceConfigDir
	// FString SourceConfigDir();                                                                                            // [0x2eb56d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ShouldSaveToUserDir
	// bool ShouldSaveToUserDir();                                                                                           // [0x2eb56a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ShaderWorkingDir
	// FString ShaderWorkingDir();                                                                                           // [0x2eb5620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.SetProjectFilePath
	// void SetProjectFilePath(FString NewGameProjectFilePath);                                                              // [0x2eb5590] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPathsLibrary.SetExtension
	// FString SetExtension(FString InPath, FString InNewExtension);                                                         // [0x2eb5370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ScreenShotDir
	// FString ScreenShotDir();                                                                                              // [0x2eb52f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.SandboxesDir
	// FString SandboxesDir();                                                                                               // [0x2eb5270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.RootDir
	// FString RootDir();                                                                                                    // [0x2eb51f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes
	// void RemoveDuplicateSlashes(FString InPath, FString& OutPath);                                                        // [0x2eb5100] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectUserDir
	// FString ProjectUserDir();                                                                                             // [0x2eb5080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectSavedDir
	// FString ProjectSavedDir();                                                                                            // [0x2eb5000] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectPluginsDir
	// FString ProjectPluginsDir();                                                                                          // [0x2eb4f80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir
	// FString ProjectPersistentDownloadDir();                                                                               // [0x2eb4f00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectModsDir
	// FString ProjectModsDir();                                                                                             // [0x2eb4e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectLogDir
	// FString ProjectLogDir();                                                                                              // [0x2eb4e00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectIntermediateDir
	// FString ProjectIntermediateDir();                                                                                     // [0x2eb4d80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectDir
	// FString ProjectDir();                                                                                                 // [0x2eb4d00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectContentDir
	// FString ProjectContentDir();                                                                                          // [0x2eb4c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectConfigDir
	// FString ProjectConfigDir();                                                                                           // [0x2eb4c00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProfilingDir
	// FString ProfilingDir();                                                                                               // [0x2eb4b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.NormalizeFilename
	// void NormalizeFilename(FString InPath, FString& OutPath);                                                             // [0x2eb4a90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.NormalizeDirectoryName
	// void NormalizeDirectoryName(FString InPath, FString& OutPath);                                                        // [0x2eb49a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakeValidFileName
	// FString MakeValidFileName(FString inString, FString InReplacementChar);                                               // [0x2eb3cc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakeStandardFilename
	// void MakeStandardFilename(FString InPath, FString& OutPath);                                                          // [0x2eb3bd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakePlatformFilename
	// void MakePlatformFilename(FString InPath, FString& OutPath);                                                          // [0x2eb3ae0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakePathRelativeTo
	// bool MakePathRelativeTo(FString InPath, FString InRelativeTo, FString& OutPath);                                      // [0x2eb3990] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.LaunchDir
	// FString LaunchDir();                                                                                                  // [0x2eb3910] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsSamePath
	// bool IsSamePath(FString PathA, FString PathB);                                                                        // [0x2eb3820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsRestrictedPath
	// bool IsRestrictedPath(FString InPath);                                                                                // [0x2eb3780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsRelative
	// bool IsRelative(FString InPath);                                                                                      // [0x2eb36e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsProjectFilePathSet
	// bool IsProjectFilePathSet();                                                                                          // [0x2eb36b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsDrive
	// bool IsDrive(FString InPath);                                                                                         // [0x2eb3610] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir
	// bool HasProjectPersistentDownloadDir();                                                                               // [0x2eb35e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths
	// TArray<FString> GetToolTipLocalizationPaths();                                                                        // [0x2eb35a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetRestrictedFolderNames
	// TArray<FString> GetRestrictedFolderNames();                                                                           // [0x2eb3560] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetRelativePathToRoot
	// FString GetRelativePathToRoot();                                                                                      // [0x2eb3520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths
	// TArray<FString> GetPropertyNameLocalizationPaths();                                                                   // [0x2eb34e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetProjectFilePath
	// FString GetProjectFilePath();                                                                                         // [0x2eb3460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetPath
	// FString GetPath(FString InPath);                                                                                      // [0x2eb3380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars
	// FString GetInvalidFileSystemChars();                                                                                  // [0x2eb3300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetGameLocalizationPaths
	// TArray<FString> GetGameLocalizationPaths();                                                                           // [0x2eb32c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetExtension
	// FString GetExtension(FString InPath, bool bIncludeDot);                                                               // [0x2eb31a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths
	// TArray<FString> GetEngineLocalizationPaths();                                                                         // [0x2eb3160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths
	// TArray<FString> GetEditorLocalizationPaths();                                                                         // [0x2eb3120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetCleanFilename
	// FString GetCleanFilename(FString InPath);                                                                             // [0x2eb3040] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetBaseFilename
	// FString GetBaseFilename(FString InPath, bool bRemovePath);                                                            // [0x2eb2f20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GeneratedConfigDir
	// FString GeneratedConfigDir();                                                                                         // [0x2eb2ea0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameUserDeveloperDir
	// FString GameUserDeveloperDir();                                                                                       // [0x2eb2e20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameSourceDir
	// FString GameSourceDir();                                                                                              // [0x2eb2da0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameDevelopersDir
	// FString GameDevelopersDir();                                                                                          // [0x2eb2d20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameAgnosticSavedDir
	// FString GameAgnosticSavedDir();                                                                                       // [0x2eb2ca0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.FileExists
	// bool FileExists(FString InPath);                                                                                      // [0x2eb2c00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.FeaturePackDir
	// FString FeaturePackDir();                                                                                             // [0x2eb2b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterprisePluginsDir
	// FString EnterprisePluginsDir();                                                                                       // [0x2eb2b00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir
	// FString EnterpriseFeaturePackDir();                                                                                   // [0x2eb2a80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterpriseDir
	// FString EnterpriseDir();                                                                                              // [0x2eb2a00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir
	// FString EngineVersionAgnosticUserDir();                                                                               // [0x2eb2980] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineUserDir
	// FString EngineUserDir();                                                                                              // [0x2eb2900] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineSourceDir
	// FString EngineSourceDir();                                                                                            // [0x2eb2880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineSavedDir
	// FString EngineSavedDir();                                                                                             // [0x2eb2800] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnginePluginsDir
	// FString EnginePluginsDir();                                                                                           // [0x2eb2780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineIntermediateDir
	// FString EngineIntermediateDir();                                                                                      // [0x2eb2700] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineDir
	// FString EngineDir();                                                                                                  // [0x2eb2680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineContentDir
	// FString EngineContentDir();                                                                                           // [0x2eb2600] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineConfigDir
	// FString EngineConfigDir();                                                                                            // [0x2eb2580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.DirectoryExists
	// bool DirectoryExists(FString InPath);                                                                                 // [0x2eb24e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.DiffDir
	// FString DiffDir();                                                                                                    // [0x2eb2460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.CreateTempFilename
	// FString CreateTempFilename(FString Path, FString Prefix, FString Extension);                                          // [0x2eb22e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertToSandboxPath
	// FString ConvertToSandboxPath(FString InPath, FString InSandboxName);                                                  // [0x2eb21b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertRelativePathToFull
	// FString ConvertRelativePathToFull(FString InPath, FString InBasePath);                                                // [0x2eb2080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertFromSandboxPath
	// FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);                                                // [0x2eb1f50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.Combine
	// FString Combine(TArray<FString>& InPaths);                                                                            // [0x2eb1e40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.CollapseRelativeDirectories
	// bool CollapseRelativeDirectories(FString InPath, FString& OutPath);                                                   // [0x2eb1d40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.CloudDir
	// FString CloudDir();                                                                                                   // [0x2eb1cc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ChangeExtension
	// FString ChangeExtension(FString InPath, FString InNewExtension);                                                      // [0x2eb1b90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.BugItDir
	// FString BugItDir();                                                                                                   // [0x2eb1b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationTransientDir
	// FString AutomationTransientDir();                                                                                     // [0x2eb1a90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationLogDir
	// FString AutomationLogDir();                                                                                           // [0x2eb1a10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationDir
	// FString AutomationDir();                                                                                              // [0x2eb1990] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.PlatformGameInstance
/// Size: 0x00D0 (0x000198 - 0x000268)
class UPlatformGameInstance : public UGameInstance
{ 
public:
	SDK_UNDEFINED(16,312) /* FMulticastInlineDelegate */ __um(ApplicationWillDeactivateDelegate);                  // 0x0198   (0x0010)  
	SDK_UNDEFINED(16,313) /* FMulticastInlineDelegate */ __um(ApplicationHasReactivatedDelegate);                  // 0x01A8   (0x0010)  
	SDK_UNDEFINED(16,314) /* FMulticastInlineDelegate */ __um(ApplicationWillEnterBackgroundDelegate);             // 0x01B8   (0x0010)  
	SDK_UNDEFINED(16,315) /* FMulticastInlineDelegate */ __um(ApplicationHasEnteredForegroundDelegate);            // 0x01C8   (0x0010)  
	SDK_UNDEFINED(16,316) /* FMulticastInlineDelegate */ __um(ApplicationWillTerminateDelegate);                   // 0x01D8   (0x0010)  
	SDK_UNDEFINED(16,317) /* FMulticastInlineDelegate */ __um(ApplicationShouldUnloadResourcesDelegate);           // 0x01E8   (0x0010)  
	SDK_UNDEFINED(16,318) /* FMulticastInlineDelegate */ __um(ApplicationReceivedStartupArgumentsDelegate);        // 0x01F8   (0x0010)  
	SDK_UNDEFINED(16,319) /* FMulticastInlineDelegate */ __um(ApplicationRegisteredForRemoteNotificationsDelegate); // 0x0208   (0x0010)  
	SDK_UNDEFINED(16,320) /* FMulticastInlineDelegate */ __um(ApplicationRegisteredForUserNotificationsDelegate);  // 0x0218   (0x0010)  
	SDK_UNDEFINED(16,321) /* FMulticastInlineDelegate */ __um(ApplicationFailedToRegisterForRemoteNotificationsDelegate); // 0x0228   (0x0010)  
	SDK_UNDEFINED(16,322) /* FMulticastInlineDelegate */ __um(ApplicationReceivedRemoteNotificationDelegate);      // 0x0238   (0x0010)  
	SDK_UNDEFINED(16,323) /* FMulticastInlineDelegate */ __um(ApplicationReceivedLocalNotificationDelegate);       // 0x0248   (0x0010)  
	SDK_UNDEFINED(16,324) /* FMulticastInlineDelegate */ __um(ApplicationReceivedScreenOrientationChangedNotificationDelegate); // 0x0258   (0x0010)  
};

/// Class /Script/Engine.BlueprintPlatformLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow
	// int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // [0x2eb8250] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow
	// void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, FString ActivationEvent);                        // [0x2eb8180] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime
	// int32_t ScheduleLocalNotificationBadgeAtTime(FDateTime& FireDateTime, bool LocalTime, FString ActivationEvent);       // [0x2eb8050] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime
	// int32_t ScheduleLocalNotificationAtTime(FDateTime& FireDateTime, bool LocalTime, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // [0x2eb7d70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.GetLaunchNotification
	// void GetLaunchNotification(bool& NotificationLaunchedApp, FString& ActivationEvent, int32_t& FireDate);               // [0x2eb7ba0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.GetDeviceOrientation
	// TEnumAsByte<EScreenOrientation> GetDeviceOrientation();                                                               // [0x2eb7b70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications
	// void ClearAllLocalNotifications();                                                                                    // [0x2eb7b50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.CancelLocalNotificationById
	// void CancelLocalNotificationById(int32_t NotificationId);                                                             // [0x2eb7ae0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.CancelLocalNotification
	// void CancelLocalNotification(FString ActivationEvent);                                                                // [0x2eb7a50] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintSetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.BlueprintSetLibrary.SetSetPropertyByName
	// void SetSetPropertyByName(class UObject* Object, FName PropertyName, TSet<int32_t>& value);                           // [0x2eb85c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Union
	// void Set_Union(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                            // [0x2eb92e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_ToArray
	// void Set_ToArray(TSet<int32_t>& A, TArray<int32_t>& Result);                                                          // [0x2eb91e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_RemoveItems
	// void Set_RemoveItems(TSet<int32_t>& TargetSet, TArray<int32_t>& Items);                                               // [0x2eb90e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Remove
	// bool Set_Remove(TSet<int32_t>& TargetSet, int32_t& item);                                                             // [0x2eb8f30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Length
	// int32_t Set_Length(TSet<int32_t>& TargetSet);                                                                         // [0x2eb8e80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Intersection
	// void Set_Intersection(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                     // [0x2eb8d10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Difference
	// void Set_Difference(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                       // [0x2eb8ba0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Contains
	// bool Set_Contains(TSet<int32_t>& TargetSet, int32_t& ItemToFind);                                                     // [0x2eb89f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Clear
	// void Set_Clear(TSet<int32_t>& TargetSet);                                                                             // [0x2eb8950] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_AddItems
	// void Set_AddItems(TSet<int32_t>& TargetSet, TArray<int32_t>& NewItems);                                               // [0x2eb8850] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Add
	// void Set_Add(TSet<int32_t>& TargetSet, int32_t& NewItem);                                                             // [0x2eb86b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.KShapeElem
/// Size: 0x0030 (0x000000 - 0x000030)
struct FKShapeElem
{ 
	float                                              RestOffset;                                                 // 0x0008   (0x0004)  
	FName                                              Name;                                                       // 0x000C   (0x0008)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	bool                                               bContributeToMass : 1;                                      // 0x0018:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x17];                                      // 0x0019   (0x0017)  MISSED
};

/// Struct /Script/Engine.KSphereElem
/// Size: 0x0010 (0x000030 - 0x000040)
struct FKSphereElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	float                                              Radius;                                                     // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.KBoxElem
/// Size: 0x0028 (0x000030 - 0x000058)
struct FKBoxElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              X;                                                          // 0x0048   (0x0004)  
	float                                              Y;                                                          // 0x004C   (0x0004)  
	float                                              Z;                                                          // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/Engine.KSphylElem
/// Size: 0x0020 (0x000030 - 0x000050)
struct FKSphylElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              Radius;                                                     // 0x0048   (0x0004)  
	float                                              Length;                                                     // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.KConvexElem
/// Size: 0x0080 (0x000030 - 0x0000B0)
struct FKConvexElem : FKShapeElem
{ 
	TArray<FVector>                                    VertexData;                                                 // 0x0030   (0x0010)  
	TArray<int32_t>                                    IndexData;                                                  // 0x0040   (0x0010)  
	FBox                                               ElemBox;                                                    // 0x0050   (0x001C)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x006C   (0x0004)  MISSED
	FTransform                                         Transform;                                                  // 0x0070   (0x0030)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x00A0   (0x0010)  MISSED
};

/// Struct /Script/Engine.KTaperedCapsuleElem
/// Size: 0x0028 (0x000030 - 0x000058)
struct FKTaperedCapsuleElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              Radius0;                                                    // 0x0048   (0x0004)  
	float                                              Radius1;                                                    // 0x004C   (0x0004)  
	float                                              Length;                                                     // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/Engine.KAggregateGeom
/// Size: 0x0058 (0x000000 - 0x000058)
struct FKAggregateGeom
{ 
	TArray<FKSphereElem>                               SphereElems;                                                // 0x0000   (0x0010)  
	TArray<FKBoxElem>                                  BoxElems;                                                   // 0x0010   (0x0010)  
	TArray<FKSphylElem>                                SphylElems;                                                 // 0x0020   (0x0010)  
	TArray<FKConvexElem>                               ConvexElems;                                                // 0x0030   (0x0010)  
	TArray<FKTaperedCapsuleElem>                       TaperedCapsuleElems;                                        // 0x0040   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.BodySetup
/// Size: 0x0248 (0x000028 - 0x000270)
class UBodySetup : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FKAggregateGeom                                    AggGeom;                                                    // 0x0028   (0x0058)  
	FName                                              BoneName;                                                   // 0x0080   (0x0008)  
	SDK_UNDEFINED(1,325) /* TEnumAsByte<EPhysicsType> */ __um(PhysicsType);                                        // 0x0088   (0x0001)  
	bool                                               bAlwaysFullAnimWeight : 1;                                  // 0x0089:0 (0x0001)  
	bool                                               bConsiderForBounds : 1;                                     // 0x0089:1 (0x0001)  
	bool                                               bMeshCollideAll : 1;                                        // 0x0089:2 (0x0001)  
	bool                                               bDoubleSidedGeometry : 1;                                   // 0x0089:3 (0x0001)  
	bool                                               bGenerateNonMirroredCollision : 1;                          // 0x0089:4 (0x0001)  
	bool                                               bSharedCookedData : 1;                                      // 0x0089:5 (0x0001)  
	bool                                               bGenerateMirroredCollision : 1;                             // 0x0089:6 (0x0001)  
	bool                                               bSupportUVsAndFaceRemap : 1;                                // 0x0089:7 (0x0001)  
	unsigned char                                      UnknownData01_4[0x1];                                       // 0x008A   (0x0001)  MISSED
	SDK_UNDEFINED(1,326) /* TEnumAsByte<EBodyCollisionResponse> */ __um(CollisionReponse);                         // 0x008B   (0x0001)  
	SDK_UNDEFINED(1,327) /* TEnumAsByte<ECollisionTraceFlag> */ __um(CollisionTraceFlag);                          // 0x008C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x008D   (0x0003)  MISSED
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0090   (0x0008)  
	FWalkableSlopeOverride                             WalkableSlopeOverride;                                      // 0x0098   (0x0010)  
	unsigned char                                      UnknownData03_5[0x78];                                      // 0x00A8   (0x0078)  MISSED
	FBodyInstance                                      DefaultInstance;                                            // 0x0120   (0x0130)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x0250   (0x0008)  MISSED
	FVector                                            BuildScale3D;                                               // 0x0258   (0x000C)  
	unsigned char                                      UnknownData05_6[0xC];                                       // 0x0264   (0x000C)  MISSED
};

/// Struct /Script/Engine.BranchFilter
/// Size: 0x000C (0x000000 - 0x00000C)
struct FBranchFilter
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	int32_t                                            BlendDepth;                                                 // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.InputBlendPose
/// Size: 0x0010 (0x000000 - 0x000010)
struct FInputBlendPose
{ 
	TArray<FBranchFilter>                              BranchFilters;                                              // 0x0000   (0x0010)  
};

/// Class /Script/Engine.BoneMaskFilter
/// Size: 0x0010 (0x000028 - 0x000038)
class UBoneMaskFilter : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FInputBlendPose>                            BlendPoses;                                                 // 0x0028   (0x0010)  
};

/// Class /Script/Engine.BookmarkBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UBookmarkBase : public UObject
{ 
public:
};

/// Class /Script/Engine.BookMark
/// Size: 0x0028 (0x000028 - 0x000050)
class UBookMark : public UBookmarkBase
{ 
public:
	FVector                                            Location;                                                   // 0x0028   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0034   (0x000C)  
	SDK_UNDEFINED(16,328) /* TArray<FString> */        __um(HiddenLevels);                                         // 0x0040   (0x0010)  
};

/// Class /Script/Engine.BookMark2D
/// Size: 0x0010 (0x000028 - 0x000038)
class UBookMark2D : public UBookmarkBase
{ 
public:
	float                                              Zoom2D;                                                     // 0x0028   (0x0004)  
	FIntPoint                                          Location;                                                   // 0x002C   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.BoxComponent
/// Size: 0x0010 (0x000420 - 0x000430)
class UBoxComponent : public UShapeComponent
{ 
public:
	FVector                                            BoxExtent;                                                  // 0x0420   (0x000C)  
	float                                              LineThickness;                                              // 0x042C   (0x0004)  


	/// Functions
	// Function /Script/Engine.BoxComponent.SetBoxExtent
	// void SetBoxExtent(FVector InBoxExtent, bool bUpdateOverlaps);                                                         // [0x2eb84e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BoxComponent.GetUnscaledBoxExtent
	// FVector GetUnscaledBoxExtent();                                                                                       // [0x2eb7d40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.BoxComponent.GetScaledBoxExtent
	// FVector GetScaledBoxExtent();                                                                                         // [0x2eb7ce0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.ReflectionCapture
/// Size: 0x0008 (0x000220 - 0x000228)
class AReflectionCapture : public AActor
{ 
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                           // 0x0220   (0x0008)  
};

/// Class /Script/Engine.BoxReflectionCapture
/// Size: 0x0000 (0x000228 - 0x000228)
class ABoxReflectionCapture : public AReflectionCapture
{ 
public:
};

/// Class /Script/Engine.ReflectionCaptureComponent
/// Size: 0x0080 (0x0001F0 - 0x000270)
#pragma pack(push, 0x1)
class alignas(0x10) UReflectionCaptureComponent : public USceneComponent
{ 
public:
	class UBillboardComponent*                         CaptureOffsetComponent;                                     // 0x01F0   (0x0008)  
	EReflectionSourceType                              ReflectionSourceType;                                       // 0x01F8   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x01F9   (0x0007)  MISSED
	class UTextureCube*                                Cubemap;                                                    // 0x0200   (0x0008)  
	float                                              SourceCubemapAngle;                                         // 0x0208   (0x0004)  
	float                                              Brightness;                                                 // 0x020C   (0x0004)  
	FVector                                            CaptureOffset;                                              // 0x0210   (0x000C)  
	FGuid                                              MapBuildDataId;                                             // 0x021C   (0x0010)  
	unsigned char                                      UnknownData01_6[0x3C];                                      // 0x022C   (0x003C)  MISSED
};
#pragma pack(pop)

/// Class /Script/Engine.BoxReflectionCaptureComponent
/// Size: 0x0010 (0x000270 - 0x000280)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              BoxTransitionDistance;                                      // 0x0268   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x026C   (0x0004)  MISSED
	class UBoxComponent*                               PreviewInfluenceBox;                                        // 0x0270   (0x0008)  
	class UBoxComponent*                               PreviewCaptureBox;                                          // 0x0278   (0x0008)  
};

/// Class /Script/Engine.Breakpoint
/// Size: 0x0018 (0x000028 - 0x000040)
class UBreakpoint : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bEnabled : 1;                                               // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0029   (0x0007)  MISSED
	class UEdGraphNode*                                Node;                                                       // 0x0030   (0x0008)  
	bool                                               bStepOnce : 1;                                              // 0x0038:0 (0x0001)  
	bool                                               bStepOnce_WasPreviouslyDisabled : 1;                        // 0x0038:1 (0x0001)  
	bool                                               bStepOnce_RemoveAfterHit : 1;                               // 0x0038:2 (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.BuilderPoly
/// Size: 0x0020 (0x000000 - 0x000020)
struct FBuilderPoly
{ 
	TArray<int32_t>                                    VertexIndices;                                              // 0x0000   (0x0010)  
	int32_t                                            Direction;                                                  // 0x0010   (0x0004)  
	FName                                              ItemName;                                                   // 0x0014   (0x0008)  
	int32_t                                            PolyFlags;                                                  // 0x001C   (0x0004)  
};

/// Class /Script/Engine.BrushBuilder
/// Size: 0x0058 (0x000028 - 0x000080)
class UBrushBuilder : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(16,329) /* FString */                __um(BitmapFilename);                                       // 0x0028   (0x0010)  
	SDK_UNDEFINED(16,330) /* FString */                __um(Tooltip);                                              // 0x0038   (0x0010)  
	bool                                               NotifyBadParams : 1;                                        // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0049   (0x0007)  MISSED
	TArray<FVector>                                    Vertices;                                                   // 0x0050   (0x0010)  
	TArray<FBuilderPoly>                               Polys;                                                      // 0x0060   (0x0010)  
	FName                                              Layer;                                                      // 0x0070   (0x0008)  
	bool                                               MergeCoplanars : 1;                                         // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.BrushComponent
/// Size: 0x0010 (0x000410 - 0x000420)
class UBrushComponent : public UPrimitiveComponent
{ 
public:
	class UModel*                                      Brush;                                                      // 0x0408   (0x0008)  
	class UBodySetup*                                  BrushBodySetup;                                             // 0x0410   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0418   (0x0008)  MISSED
};

/// Class /Script/Engine.BrushShape
/// Size: 0x0000 (0x000258 - 0x000258)
class ABrushShape : public ABrush
{ 
public:
};

/// Class /Script/Engine.ButtonStyleAsset
/// Size: 0x0278 (0x000028 - 0x0002A0)
class UButtonStyleAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FButtonStyle                                       ButtonStyle;                                                // 0x0028   (0x0278)  
};

/// Class /Script/Engine.CameraAnim
/// Size: 0x06B8 (0x000028 - 0x0006E0)
class UCameraAnim : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UInterpGroup*                                CameraInterpGroup;                                          // 0x0028   (0x0008)  
	float                                              AnimLength;                                                 // 0x0030   (0x0004)  
	FBox                                               BoundingBox;                                                // 0x0034   (0x001C)  
	bool                                               bRelativeToInitialTransform : 1;                            // 0x0050:0 (0x0001)  
	bool                                               bRelativeToInitialFOV : 1;                                  // 0x0050:1 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              BaseFOV;                                                    // 0x0054   (0x0004)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0058   (0x0008)  MISSED
	FPostProcessSettings                               BasePostProcessSettings;                                    // 0x0060   (0x0670)  
	float                                              BasePostProcessBlendWeight;                                 // 0x06D0   (0x0004)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x06D4   (0x000C)  MISSED
};

/// Class /Script/Engine.CameraAnimInst
/// Size: 0x0118 (0x000028 - 0x000140)
class UCameraAnimInst : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UCameraAnim*                                 CamAnim;                                                    // 0x0028   (0x0008)  
	class UInterpGroupInst*                            InterpGroupInst;                                            // 0x0030   (0x0008)  
	unsigned char                                      UnknownData01_5[0x48];                                      // 0x0038   (0x0048)  MISSED
	float                                              PlayRate;                                                   // 0x0080   (0x0004)  
	unsigned char                                      UnknownData02_5[0x14];                                      // 0x0084   (0x0014)  MISSED
	class UInterpTrackMove*                            MoveTrack;                                                  // 0x0098   (0x0008)  
	class UInterpTrackInstMove*                        MoveInst;                                                   // 0x00A0   (0x0008)  
	ECameraAnimPlaySpace                               PlaySpace;                                                  // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x97];                                      // 0x00A9   (0x0097)  MISSED


	/// Functions
	// Function /Script/Engine.CameraAnimInst.Stop
	// void Stop(bool bImmediate);                                                                                           // [0x2ebca70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraAnimInst.SetScale
	// void SetScale(float NewDuration);                                                                                     // [0x2ebc960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraAnimInst.SetDuration
	// void SetDuration(float NewDuration);                                                                                  // [0x2ebc5e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.CameraBlockingVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class ACameraBlockingVolume : public AVolume
{ 
public:
};

/// Struct /Script/Engine.ActiveCameraShakeInfo
/// Size: 0x0010 (0x000000 - 0x000010)
struct FActiveCameraShakeInfo
{ 
	class UCameraShake*                                ShakeInstance;                                              // 0x0000   (0x0008)  
	SDK_UNDEFINED(8,331) /* TWeakObjectPtr<UCameraShakeSourceComponent*> */ __um(ShakeSource);                     // 0x0008   (0x0008)  
};

/// Class /Script/Engine.CameraModifier_CameraShake
/// Size: 0x0068 (0x000048 - 0x0000B0)
class UCameraModifier_CameraShake : public UCameraModifier
{ 
public:
	TArray<FActiveCameraShakeInfo>                     ActiveShakes;                                               // 0x0048   (0x0010)  
	SDK_UNDEFINED(80,332) /* TMap<UClass*, FPooledCameraShakes> */ __um(ExpiredPooledShakesMap);                   // 0x0058   (0x0050)  
	float                                              SplitScreenShakeScale;                                      // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Struct /Script/Engine.FOscillator
/// Size: 0x000C (0x000000 - 0x00000C)
struct FFOscillator
{ 
	float                                              Amplitude;                                                  // 0x0000   (0x0004)  
	float                                              Frequency;                                                  // 0x0004   (0x0004)  
	SDK_UNDEFINED(1,333) /* TEnumAsByte<EInitialOscillatorOffset> */ __um(InitialOffset);                          // 0x0008   (0x0001)  
	EOscillatorWaveform                                Waveform;                                                   // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Engine.ROscillator
/// Size: 0x0024 (0x000000 - 0x000024)
struct FROscillator
{ 
	FFOscillator                                       Pitch;                                                      // 0x0000   (0x000C)  
	FFOscillator                                       Yaw;                                                        // 0x000C   (0x000C)  
	FFOscillator                                       Roll;                                                       // 0x0018   (0x000C)  
};

/// Struct /Script/Engine.VOscillator
/// Size: 0x0024 (0x000000 - 0x000024)
struct FVOscillator
{ 
	FFOscillator                                       X;                                                          // 0x0000   (0x000C)  
	FFOscillator                                       Y;                                                          // 0x000C   (0x000C)  
	FFOscillator                                       Z;                                                          // 0x0018   (0x000C)  
};

/// Class /Script/Engine.CameraShake
/// Size: 0x0138 (0x000028 - 0x000160)
class UCameraShake : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bSingleInstance : 1;                                        // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              OscillationDuration;                                        // 0x002C   (0x0004)  
	float                                              OscillationBlendInTime;                                     // 0x0030   (0x0004)  
	float                                              OscillationBlendOutTime;                                    // 0x0034   (0x0004)  
	FROscillator                                       RotOscillation;                                             // 0x0038   (0x0024)  
	FVOscillator                                       LocOscillation;                                             // 0x005C   (0x0024)  
	FFOscillator                                       FOVOscillation;                                             // 0x0080   (0x000C)  
	float                                              AnimPlayRate;                                               // 0x008C   (0x0004)  
	float                                              AnimScale;                                                  // 0x0090   (0x0004)  
	float                                              AnimBlendInTime;                                            // 0x0094   (0x0004)  
	float                                              AnimBlendOutTime;                                           // 0x0098   (0x0004)  
	float                                              RandomAnimSegmentDuration;                                  // 0x009C   (0x0004)  
	class UCameraAnim*                                 Anim;                                                       // 0x00A0   (0x0008)  
	bool                                               bRandomAnimSegment : 1;                                     // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0xF];                                       // 0x00A9   (0x000F)  MISSED
	class APlayerCameraManager*                        CameraOwner;                                                // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData03_5[0x88];                                      // 0x00C0   (0x0088)  MISSED
	float                                              ShakeScale;                                                 // 0x0148   (0x0004)  
	float                                              OscillatorTimeRemaining;                                    // 0x014C   (0x0004)  
	class UCameraAnimInst*                             AnimInst;                                                   // 0x0150   (0x0008)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0158   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.CameraShake.ReceiveStopShake
	// void ReceiveStopShake(bool bImmediately);                                                                             // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CameraShake.ReceivePlayShake
	// void ReceivePlayShake(float Scale);                                                                                   // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CameraShake.ReceiveIsFinished
	// bool ReceiveIsFinished();                                                                                             // [0xbf6a40] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.CameraShake.BlueprintUpdateCameraShake
	// void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, FMinimalViewInfo& POV, FMinimalViewInfo& ModifiedPOV);  // [0x15dd8c0] Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/Engine.CameraShakeSourceActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ACameraShakeSourceActor : public AActor
{ 
public:
	class UCameraShakeSourceComponent*                 CameraShakeSourceComponent;                                 // 0x0220   (0x0008)  
};

/// Class /Script/Engine.CameraShakeSourceComponent
/// Size: 0x0020 (0x0001F0 - 0x000210)
class UCameraShakeSourceComponent : public USceneComponent
{ 
public:
	ECameraShakeAttenuation                            Attenuation;                                                // 0x01F0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x01F1   (0x0003)  MISSED
	float                                              InnerAttenuationRadius;                                     // 0x01F4   (0x0004)  
	float                                              OuterAttenuationRadius;                                     // 0x01F8   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x01FC   (0x0004)  MISSED
	class UClass*                                      CameraShake;                                                // 0x0200   (0x0008)  
	bool                                               bAutoPlay;                                                  // 0x0208   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0209   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.CameraShakeSourceComponent.StopAllCameraShakes
	// void StopAllCameraShakes(bool bImmediately);                                                                          // [0x2ec4e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.PlayCameraShake
	// void PlayCameraShake(class UClass* InCameraShake);                                                                    // [0x2ec3710] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.Play
	// void Play();                                                                                                          // [0x2ec35e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.GetAttenuationFactor
	// float GetAttenuationFactor(FVector& Location);                                                                        // [0x2ec1350] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Canvas
/// Size: 0x0298 (0x000028 - 0x0002C0)
class UCanvas : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	float                                              OrgX;                                                       // 0x0028   (0x0004)  
	float                                              OrgY;                                                       // 0x002C   (0x0004)  
	float                                              ClipX;                                                      // 0x0030   (0x0004)  
	float                                              ClipY;                                                      // 0x0034   (0x0004)  
	FColor                                             DrawColor;                                                  // 0x0038   (0x0004)  
	bool                                               bCenterX : 1;                                               // 0x003C:0 (0x0001)  
	bool                                               bCenterY : 1;                                               // 0x003C:1 (0x0001)  
	bool                                               bNoSmooth : 1;                                              // 0x003C:2 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x003D   (0x0003)  MISSED
	int32_t                                            SizeX;                                                      // 0x0040   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x0044   (0x0004)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0048   (0x0008)  MISSED
	FPlane                                             ColorModulate;                                              // 0x0050   (0x0010)  
	class UTexture2D*                                  DefaultTexture;                                             // 0x0060   (0x0008)  
	class UTexture2D*                                  GradientTexture0;                                           // 0x0068   (0x0008)  
	class UReporterGraph*                              ReporterGraph;                                              // 0x0070   (0x0008)  
	unsigned char                                      UnknownData03_6[0x248];                                     // 0x0078   (0x0248)  MISSED


	/// Functions
	// Function /Script/Engine.Canvas.K2_TextSize
	// FVector2D K2_TextSize(class UFont* RenderFont, FString RenderText, FVector2D Scale);                                  // [0x2ec3160] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_StrLen
	// FVector2D K2_StrLen(class UFont* RenderFont, FString RenderText);                                                     // [0x2ec3080] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_Project
	// FVector K2_Project(FVector WorldLocation);                                                                            // [0x2ec2fd0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawTriangle
	// void K2_DrawTriangle(class UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles);                                  // [0x2ec2eb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawTexture
	// void K2_DrawTexture(class UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, FVector2D PivotPoint); // [0x2ec2c30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawText
	// void K2_DrawText(class UFont* RenderFont, FString RenderText, FVector2D ScreenPosition, FVector2D Scale, FLinearColor RenderColor, float Kerning, FLinearColor ShadowColor, FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, FLinearColor OutlineColor); // [0x2ec28b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawPolygon
	// void K2_DrawPolygon(class UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D Radius, int32_t NumberOfSides, FLinearColor RenderColor); // [0x2ec2720] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawMaterialTriangle
	// void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles);               // [0x2ec2600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawMaterial
	// void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, float Rotation, FVector2D PivotPoint); // [0x2ec23e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawLine
	// void K2_DrawLine(FVector2D ScreenPositionA, FVector2D ScreenPositionB, float Thickness, FLinearColor RenderColor);    // [0x2ec2290] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawBox
	// void K2_DrawBox(FVector2D ScreenPosition, FVector2D ScreenSize, float Thickness, FLinearColor RenderColor);           // [0x2ec2140] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawBorder
	// void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, FVector2D BorderScale, FVector2D BackgroundScale, float Rotation, FVector2D PivotPoint, FVector2D CornerSize); // [0x2ec1d00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_Deproject
	// void K2_Deproject(FVector2D ScreenPosition, FVector& WorldOrigin, FVector& WorldDirection);                           // [0x2ec1be0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.TextureRenderTarget
/// Size: 0x0008 (0x0000B8 - 0x0000C0)
class UTextureRenderTarget : public UTexture
{ 
public:
	float                                              TargetGamma;                                                // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00BC   (0x0004)  MISSED
};

/// Class /Script/Engine.TextureRenderTarget2D
/// Size: 0x0028 (0x0000C0 - 0x0000E8)
class UTextureRenderTarget2D : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x00C0   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x00C4   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x00C8   (0x0010)  
	SDK_UNDEFINED(1,334) /* TEnumAsByte<TextureAddress> */ __um(AddressX);                                         // 0x00D8   (0x0001)  
	SDK_UNDEFINED(1,335) /* TEnumAsByte<TextureAddress> */ __um(AddressY);                                         // 0x00D9   (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x00DA:0 (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x00DA:1 (0x0001)  
	bool                                               bGPUSharedFlag : 1;                                         // 0x00DA:2 (0x0001)  
	SDK_UNDEFINED(1,336) /* TEnumAsByte<ETextureRenderTargetFormat> */ __um(RenderTargetFormat);                   // 0x00DB   (0x0001)  
	bool                                               bAutoGenerateMips : 1;                                      // 0x00DC:0 (0x0001)  
	SDK_UNDEFINED(1,337) /* TEnumAsByte<TextureFilter> */ __um(MipsSamplerFilter);                                 // 0x00DD   (0x0001)  
	SDK_UNDEFINED(1,338) /* TEnumAsByte<TextureAddress> */ __um(MipsAddressU);                                     // 0x00DE   (0x0001)  
	SDK_UNDEFINED(1,339) /* TEnumAsByte<TextureAddress> */ __um(MipsAddressV);                                     // 0x00DF   (0x0001)  
	SDK_UNDEFINED(1,340) /* TEnumAsByte<EPixelFormat> */ __um(OverrideFormat);                                     // 0x00E0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00E1   (0x0007)  MISSED
};

/// Class /Script/Engine.CanvasRenderTarget2D
/// Size: 0x0020 (0x0000E8 - 0x000108)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{ 
public:
	SDK_UNDEFINED(16,341) /* FMulticastInlineDelegate */ __um(OnCanvasRenderTargetUpdate);                         // 0x00E8   (0x0010)  
	SDK_UNDEFINED(8,342) /* TWeakObjectPtr<UWorld*> */ __um(World);                                                // 0x00F8   (0x0008)  
	bool                                               bShouldClearRenderTargetOnReceiveUpdate;                    // 0x0100   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0101   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.CanvasRenderTarget2D.UpdateResource
	// void UpdateResource();                                                                                                // [0x2ec5000] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CanvasRenderTarget2D.ReceiveUpdate
	// void ReceiveUpdate(class UCanvas* Canvas, int32_t Width, int32_t Height);                                             // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CanvasRenderTarget2D.GetSize
	// void GetSize(int32_t& Width, int32_t& Height);                                                                        // [0x2ec17d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
	// class UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // [0x2ec1160] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.ChaosPhysicalMaterial
/// Size: 0x0020 (0x000028 - 0x000048)
class UChaosPhysicalMaterial : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	float                                              Friction;                                                   // 0x0028   (0x0004)  
	float                                              StaticFriction;                                             // 0x002C   (0x0004)  
	float                                              Restitution;                                                // 0x0030   (0x0004)  
	float                                              LinearEtherDrag;                                            // 0x0034   (0x0004)  
	float                                              AngularEtherDrag;                                           // 0x0038   (0x0004)  
	float                                              SleepingLinearVelocityThreshold;                            // 0x003C   (0x0004)  
	float                                              SleepingAngularVelocityThreshold;                           // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.CheckBoxStyleAsset
/// Size: 0x0580 (0x000028 - 0x0005A8)
class UCheckBoxStyleAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FCheckBoxStyle                                     CheckBoxStyle;                                              // 0x0028   (0x0580)  
};

/// Class /Script/Engine.ChildConnection
/// Size: 0x0008 (0x001A30 - 0x001A38)
class UChildConnection : public UNetConnection
{ 
public:
	class UNetConnection*                              Parent;                                                     // 0x1A30   (0x0008)  
};

/// Struct /Script/Engine.DelegateArray
/// Size: 0x0010 (0x000000 - 0x000010)
struct FDelegateArray
{ 
	SDK_UNDEFINED(16,343) /* TArray<FDelegateProperty> */ __um(Delegates);                                         // 0x0000   (0x0010)  
};

/// Class /Script/Engine.PlatformInterfaceBase
/// Size: 0x0010 (0x000028 - 0x000038)
class UPlatformInterfaceBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FDelegateArray>                             AllDelegates;                                               // 0x0028   (0x0010)  
};

/// Class /Script/Engine.CloudStorageBase
/// Size: 0x0018 (0x000038 - 0x000050)
class UCloudStorageBase : public UPlatformInterfaceBase
{ 
public:
	SDK_UNDEFINED(16,344) /* TArray<FString> */        __um(LocalCloudFiles);                                      // 0x0038   (0x0010)  
	bool                                               bSuppressDelegateCalls : 1;                                 // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Struct /Script/Engine.CollisionResponseTemplate
/// Size: 0x0048 (0x000000 - 0x000048)
struct FCollisionResponseTemplate
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	SDK_UNDEFINED(1,345) /* TEnumAsByte<ECollisionEnabled> */ __um(CollisionEnabled);                              // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0009   (0x0001)  MISSED
	bool                                               bCanModify;                                                 // 0x000A   (0x0001)  
	unsigned char                                      UnknownData01_5[0x21];                                      // 0x000B   (0x0021)  MISSED
	FName                                              ObjectTypeName;                                             // 0x002C   (0x0008)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FResponseChannel>                           CustomResponses;                                            // 0x0038   (0x0010)  
};

/// Struct /Script/Engine.CustomChannelSetup
/// Size: 0x000C (0x000000 - 0x00000C)
struct FCustomChannelSetup
{ 
	SDK_UNDEFINED(1,346) /* TEnumAsByte<ECollisionChannel> */ __um(Channel);                                       // 0x0000   (0x0001)  
	SDK_UNDEFINED(1,347) /* TEnumAsByte<ECollisionResponse> */ __um(DefaultResponse);                              // 0x0001   (0x0001)  
	bool                                               bTraceType;                                                 // 0x0002   (0x0001)  
	bool                                               bStaticObject;                                              // 0x0003   (0x0001)  
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.CustomProfile
/// Size: 0x0018 (0x000000 - 0x000018)
struct FCustomProfile
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TArray<FResponseChannel>                           CustomResponses;                                            // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.Redirector
/// Size: 0x0010 (0x000000 - 0x000010)
struct FRedirector
{ 
	FName                                              OldName;                                                    // 0x0000   (0x0008)  
	FName                                              NewName;                                                    // 0x0008   (0x0008)  
};

/// Class /Script/Engine.CollisionProfile
/// Size: 0x0120 (0x000038 - 0x000158)
class UCollisionProfile : public UDeveloperSettings
{ 
public:
	TArray<FCollisionResponseTemplate>                 Profiles;                                                   // 0x0038   (0x0010)  
	TArray<FCustomChannelSetup>                        DefaultChannelResponses;                                    // 0x0048   (0x0010)  
	TArray<FCustomProfile>                             EditProfiles;                                               // 0x0058   (0x0010)  
	TArray<FRedirector>                                ProfileRedirects;                                           // 0x0068   (0x0010)  
	TArray<FRedirector>                                CollisionChannelRedirects;                                  // 0x0078   (0x0010)  
	unsigned char                                      UnknownData00_6[0xD0];                                      // 0x0088   (0x00D0)  MISSED
};

/// Struct /Script/Engine.BlueprintComponentDelegateBinding
/// Size: 0x0018 (0x000000 - 0x000018)
struct FBlueprintComponentDelegateBinding
{ 
	FName                                              ComponentPropertyName;                                      // 0x0000   (0x0008)  
	FName                                              DelegatePropertyName;                                       // 0x0008   (0x0008)  
	FName                                              FunctionNameToBind;                                         // 0x0010   (0x0008)  
};

/// Class /Script/Engine.ComponentDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
	TArray<FBlueprintComponentDelegateBinding>         ComponentDelegateBindings;                                  // 0x0028   (0x0010)  
};

/// Class /Script/Engine.CurveTable
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UCurveTable : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0xA0];                                      // 0x0000   (0x00A0)  MISSED
};

/// Class /Script/Engine.CompositeCurveTable
/// Size: 0x0028 (0x0000A0 - 0x0000C8)
class UCompositeCurveTable : public UCurveTable
{ 
public:
	TArray<class UCurveTable*>                         ParentTables;                                               // 0x00A0   (0x0010)  
	TArray<class UCurveTable*>                         OldParentTables;                                            // 0x00B0   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Class /Script/Engine.DataTable
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class UDataTable : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UScriptStruct*                               RowStruct;                                                  // 0x0028   (0x0008)  
	unsigned char                                      UnknownData01_5[0x50];                                      // 0x0030   (0x0050)  MISSED
	bool                                               bStripFromClientBuilds : 1;                                 // 0x0080:0 (0x0001)  
	bool                                               bIgnoreExtraFields : 1;                                     // 0x0080:1 (0x0001)  
	bool                                               bIgnoreMissingFields : 1;                                   // 0x0080:2 (0x0001)  
	unsigned char                                      UnknownData02_4[0x7];                                       // 0x0081   (0x0007)  MISSED
	SDK_UNDEFINED(16,348) /* FString */                __um(ImportKeyField);                                       // 0x0088   (0x0010)  
	unsigned char                                      UnknownData03_6[0x30];                                      // 0x0098   (0x0030)  MISSED
};

/// Class /Script/Engine.CompositeDataTable
/// Size: 0x0028 (0x0000C8 - 0x0000F0)
class UCompositeDataTable : public UDataTable
{ 
public:
	TArray<class UDataTable*>                          ParentTables;                                               // 0x00C8   (0x0010)  
	TArray<class UDataTable*>                          OldParentTables;                                            // 0x00D8   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x00E8   (0x0008)  MISSED
};

/// Class /Script/Engine.Console
/// Size: 0x0108 (0x000028 - 0x000130)
class UConsole : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0000   (0x0038)  MISSED
	class ULocalPlayer*                                ConsoleTargetPlayer;                                        // 0x0038   (0x0008)  
	class UTexture2D*                                  DefaultTexture_Black;                                       // 0x0040   (0x0008)  
	class UTexture2D*                                  DefaultTexture_White;                                       // 0x0048   (0x0008)  
	unsigned char                                      UnknownData01_5[0x18];                                      // 0x0050   (0x0018)  MISSED
	SDK_UNDEFINED(16,349) /* TArray<FString> */        __um(HistoryBuffer);                                        // 0x0068   (0x0010)  
	unsigned char                                      UnknownData02_6[0xB8];                                      // 0x0078   (0x00B8)  MISSED
};

/// Class /Script/Engine.ControlChannel
/// Size: 0x0018 (0x000070 - 0x000088)
class UControlChannel : public UChannel
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0070   (0x0018)  MISSED
};

/// Class /Script/Engine.StreamingSettings
/// Size: 0x0038 (0x000038 - 0x000070)
class UStreamingSettings : public UDeveloperSettings
{ 
public:
	bool                                               AsyncLoadingThreadEnabled : 1;                              // 0x0038:0 (0x0001)  
	bool                                               WarnIfTimeLimitExceeded : 1;                                // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              TimeLimitExceededMultiplier;                                // 0x003C   (0x0004)  
	float                                              TimeLimitExceededMinTime;                                   // 0x0040   (0x0004)  
	int32_t                                            MinBulkDataSizeForAsyncLoading;                             // 0x0044   (0x0004)  
	bool                                               UseBackgroundLevelStreaming : 1;                            // 0x0048:0 (0x0001)  
	bool                                               AsyncLoadingUseFullTimeLimit : 1;                           // 0x0048:1 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              AsyncLoadingTimeLimit;                                      // 0x004C   (0x0004)  
	float                                              PriorityAsyncLoadingExtraTime;                              // 0x0050   (0x0004)  
	float                                              LevelStreamingActorsUpdateTimeLimit;                        // 0x0054   (0x0004)  
	float                                              PriorityLevelStreamingActorsUpdateExtraTime;                // 0x0058   (0x0004)  
	int32_t                                            LevelStreamingComponentsRegistrationGranularity;            // 0x005C   (0x0004)  
	float                                              LevelStreamingUnregisterComponentsTimeLimit;                // 0x0060   (0x0004)  
	int32_t                                            LevelStreamingComponentsUnregistrationGranularity;          // 0x0064   (0x0004)  
	bool                                               FlushStreamingOnExit : 1;                                   // 0x0068:0 (0x0001)  
	bool                                               EventDrivenLoaderEnabled : 1;                               // 0x0068:1 (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.GarbageCollectionSettings
/// Size: 0x0020 (0x000038 - 0x000058)
class UGarbageCollectionSettings : public UDeveloperSettings
{ 
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                       // 0x0038   (0x0004)  
	bool                                               FlushStreamingOnGC : 1;                                     // 0x003C:0 (0x0001)  
	bool                                               AllowParallelGC : 1;                                        // 0x003C:1 (0x0001)  
	bool                                               IncrementalBeginDestroyEnabled : 1;                         // 0x003C:2 (0x0001)  
	bool                                               MultithreadedDestructionEnabled : 1;                        // 0x003C:3 (0x0001)  
	bool                                               CreateGCClusters : 1;                                       // 0x003C:4 (0x0001)  
	bool                                               AssetClusteringEnabled : 1;                                 // 0x003C:5 (0x0001)  
	bool                                               ActorClusteringEnabled : 1;                                 // 0x003C:6 (0x0001)  
	bool                                               BlueprintClusteringEnabled : 1;                             // 0x003C:7 (0x0001)  
	bool                                               UseDisregardForGCOnDedicatedServers : 1;                    // 0x003D:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x2];                                       // 0x003E   (0x0002)  MISSED
	int32_t                                            MinGCClusterSize;                                           // 0x0040   (0x0004)  
	int32_t                                            NumRetriesBeforeForcingGC;                                  // 0x0044   (0x0004)  
	int32_t                                            MaxObjectsNotConsideredByGC;                                // 0x0048   (0x0004)  
	int32_t                                            SizeOfPermanentObjectPool;                                  // 0x004C   (0x0004)  
	int32_t                                            MaxObjectsInGame;                                           // 0x0050   (0x0004)  
	int32_t                                            MaxObjectsInEditor;                                         // 0x0054   (0x0004)  
};

/// Struct /Script/Engine.CullDistanceSizePair
/// Size: 0x0008 (0x000000 - 0x000008)
struct FCullDistanceSizePair
{ 
	float                                              Size;                                                       // 0x0000   (0x0004)  
	float                                              CullDistance;                                               // 0x0004   (0x0004)  
};

/// Class /Script/Engine.CullDistanceVolume
/// Size: 0x0018 (0x000258 - 0x000270)
class ACullDistanceVolume : public AVolume
{ 
public:
	TArray<FCullDistanceSizePair>                      CullDistances;                                              // 0x0258   (0x0010)  
	bool                                               bEnabled : 1;                                               // 0x0268:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0269   (0x0007)  MISSED
};

/// Class /Script/Engine.CurveBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UCurveBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0000   (0x0030)  MISSED


	/// Functions
	// Function /Script/Engine.CurveBase.GetValueRange
	// void GetValueRange(float& MinValue, float& MaxValue);                                                                 // [0x2eceb00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CurveBase.GetTimeRange
	// void GetTimeRange(float& MinTime, float& MaxTime);                                                                    // [0x2ecea20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveEdPresetCurve
/// Size: 0x0000 (0x000028 - 0x000028)
class UCurveEdPresetCurve : public UObject
{ 
public:
};

/// Class /Script/Engine.CurveFloat
/// Size: 0x0088 (0x000030 - 0x0000B8)
class UCurveFloat : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurve;                                                 // 0x0030   (0x0080)  
	bool                                               bIsEventCurve;                                              // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00B1   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.CurveFloat.GetFloatValue
	// float GetFloatValue(float InTime);                                                                                    // [0x2ece8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColor
/// Size: 0x0220 (0x000030 - 0x000250)
class UCurveLinearColor : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurves;                                                // 0x0030   (0x0200)  
	float                                              AdjustHue;                                                  // 0x0230   (0x0004)  
	float                                              AdjustSaturation;                                           // 0x0234   (0x0004)  
	float                                              AdjustBrightness;                                           // 0x0238   (0x0004)  
	float                                              AdjustBrightnessCurve;                                      // 0x023C   (0x0004)  
	float                                              AdjustVibrance;                                             // 0x0240   (0x0004)  
	float                                              AdjustMinAlpha;                                             // 0x0244   (0x0004)  
	float                                              AdjustMaxAlpha;                                             // 0x0248   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x024C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.CurveLinearColor.GetLinearColorValue
	// FLinearColor GetLinearColorValue(float InTime);                                                                       // [0x2ece980] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CurveLinearColor.GetClampedLinearColorValue
	// FLinearColor GetClampedLinearColorValue(float InTime);                                                                // [0x2ece5a0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Texture2D
/// Size: 0x0030 (0x0000B8 - 0x0000E8)
class UTexture2D : public UTexture
{ 
public:
	int32_t                                            LevelIndex;                                                 // 0x00B8   (0x0004)  
	int32_t                                            FirstResourceMemMip;                                        // 0x00BC   (0x0004)  
	bool                                               bTemporarilyDisableStreaming : 1;                           // 0x00C0:0 (0x0001)  
	SDK_UNDEFINED(1,350) /* TEnumAsByte<TextureAddress> */ __um(AddressX);                                         // 0x00C1   (0x0001)  
	SDK_UNDEFINED(1,351) /* TEnumAsByte<TextureAddress> */ __um(AddressY);                                         // 0x00C2   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x00C3   (0x0001)  MISSED
	FIntPoint                                          ImportedSize;                                               // 0x00C4   (0x0008)  
	unsigned char                                      UnknownData01_6[0x1C];                                      // 0x00CC   (0x001C)  MISSED


	/// Functions
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeY
	// int32_t Blueprint_GetSizeY();                                                                                         // [0x2fe7430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeX
	// int32_t Blueprint_GetSizeX();                                                                                         // [0x2fe7400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColorAtlas
/// Size: 0x0018 (0x0000E8 - 0x000100)
class UCurveLinearColorAtlas : public UTexture2D
{ 
public:
	uint32_t                                           textureSize;                                                // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x00EC   (0x0004)  MISSED
	TArray<class UCurveLinearColor*>                   GradientCurves;                                             // 0x00F0   (0x0010)  


	/// Functions
	// Function /Script/Engine.CurveLinearColorAtlas.GetCurvePosition
	// bool GetCurvePosition(class UCurveLinearColor* InCurve, float& Position);                                             // [0x2ece680] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.CurveSourceInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UCurveSourceInterface : public UInterface
{ 
public:


	/// Functions
	// Function /Script/Engine.CurveSourceInterface.GetCurveValue
	// float GetCurveValue(FName CurveName);                                                                                 // [0x2ece760] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.CurveSourceInterface.GetCurves
	// void GetCurves(TArray<FNamedCurveValue>& OutValues);                                                                  // [0x2ece800] Native|Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/Engine.CurveSourceInterface.GetBindingName
	// FName GetBindingName();                                                                                               // [0x2ece560] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.CurveVector
/// Size: 0x0180 (0x000030 - 0x0001B0)
class UCurveVector : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurves;                                                // 0x0030   (0x0180)  


	/// Functions
	// Function /Script/Engine.CurveVector.GetVectorValue
	// FVector GetVectorValue(float InTime);                                                                                 // [0x2ecebe0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DamageType
/// Size: 0x0018 (0x000028 - 0x000040)
class UDamageType : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bCausedByWorld : 1;                                         // 0x0028:0 (0x0001)  
	bool                                               bScaleMomentumByMass : 1;                                   // 0x0028:1 (0x0001)  
	bool                                               bRadialDamageVelChange : 1;                                 // 0x0028:2 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              DamageImpulse;                                              // 0x002C   (0x0004)  
	float                                              DestructibleImpulse;                                        // 0x0030   (0x0004)  
	float                                              DestructibleDamageSpreadScale;                              // 0x0034   (0x0004)  
	float                                              DamageFalloff;                                              // 0x0038   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.DataTableFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableRowNames
	// void GetDataTableRowNames(class UDataTable* Table, TArray<FName>& OutRowNames);                                       // [0x2ed2920] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableRowFromName
	// bool GetDataTableRowFromName(class UDataTable* Table, FName RowName, FTableRowBase& OutRow);                          // [0x2ed25a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableColumnAsString
	// TArray<FString> GetDataTableColumnAsString(class UDataTable* DataTable, FName PropertyName);                          // [0x2ed2440] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
	// void EvaluateCurveTableRow(class UCurveTable* CurveTable, FName RowName, float InXY, EEvaluateCurveTableResult& OutResult, float& OutXY, FString ContextString); // [0x2ed2250] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.DoesDataTableRowExist
	// bool DoesDataTableRowExist(class UDataTable* Table, FName RowName);                                                   // [0x2ed2190] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.DebugCameraController
/// Size: 0x0100 (0x000570 - 0x000670)
class ADebugCameraController : public APlayerController
{ 
public:
	bool                                               bShowSelectedInfo : 1;                                      // 0x0570:0 (0x0001)  
	bool                                               bIsFrozenRendering : 1;                                     // 0x0570:1 (0x0001)  
	bool                                               bIsOrbitingSelectedActor : 1;                               // 0x0570:2 (0x0001)  
	bool                                               bOrbitPivotUseCenter : 1;                                   // 0x0570:3 (0x0001)  
	bool                                               bEnableBufferVisualization : 1;                             // 0x0570:4 (0x0001)  
	bool                                               bEnableBufferVisualizationFullMode : 1;                     // 0x0570:5 (0x0001)  
	bool                                               bIsBufferVisualizationInputSetup : 1;                       // 0x0570:6 (0x0001)  
	bool                                               bLastDisplayEnabled : 1;                                    // 0x0570:7 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0571   (0x0007)  MISSED
	class UDrawFrustumComponent*                       DrawFrustum;                                                // 0x0578   (0x0008)  
	class AActor*                                      SelectedActor;                                              // 0x0580   (0x0008)  
	class UPrimitiveComponent*                         SelectedComponent;                                          // 0x0588   (0x0008)  
	FHitResult                                         SelectedHitPoint;                                           // 0x0590   (0x0088)  
	class APlayerController*                           OriginalControllerRef;                                      // 0x0618   (0x0008)  
	class UPlayer*                                     OriginalPlayer;                                             // 0x0620   (0x0008)  
	float                                              SpeedScale;                                                 // 0x0628   (0x0004)  
	float                                              InitialMaxSpeed;                                            // 0x062C   (0x0004)  
	float                                              InitialAccel;                                               // 0x0630   (0x0004)  
	float                                              InitialDecel;                                               // 0x0634   (0x0004)  
	unsigned char                                      UnknownData01_6[0x38];                                      // 0x0638   (0x0038)  MISSED


	/// Functions
	// Function /Script/Engine.DebugCameraController.ToggleDisplay
	// void ToggleDisplay();                                                                                                 // [0x2ed31c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DebugCameraController.ShowDebugSelectedInfo
	// void ShowDebugSelectedInfo();                                                                                         // [0x2ed31a0] Exec|Native|Public   
	// Function /Script/Engine.DebugCameraController.SetPawnMovementSpeedScale
	// void SetPawnMovementSpeedScale(float NewSpeedScale);                                                                  // [0x2ed30a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DebugCameraController.ReceiveOnDeactivate
	// void ReceiveOnDeactivate(class APlayerController* RestoredPC);                                                        // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActorSelected
	// void ReceiveOnActorSelected(class AActor* NewSelectedActor, FVector& SelectHitLocation, FVector& SelectHitNormal, FHitResult& Hit); // [0x15dd8c0] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActivate
	// void ReceiveOnActivate(class APlayerController* OriginalPC);                                                          // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.GetSelectedActor
	// class AActor* GetSelectedActor();                                                                                     // [0x2ed2b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.DebugCameraControllerSettingsViewModeIndex
/// Size: 0x0010 (0x000000 - 0x000010)
struct FDebugCameraControllerSettingsViewModeIndex
{ 
	SDK_UNDEFINED(1,352) /* TEnumAsByte<EViewModeIndex> */ __um(ViewModeIndex);                                    // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/Engine.DebugCameraControllerSettings
/// Size: 0x0010 (0x000038 - 0x000048)
class UDebugCameraControllerSettings : public UDeveloperSettings
{ 
public:
	TArray<FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                            // 0x0038   (0x0010)  
};

/// Class /Script/Engine.DebugCameraHUD
/// Size: 0x0000 (0x000310 - 0x000310)
class ADebugCameraHUD : public AHUD
{ 
public:
};

/// Class /Script/Engine.DebugDrawService
/// Size: 0x0000 (0x000028 - 0x000028)
class UDebugDrawService : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/Engine.DecalActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ADecalActor : public AActor
{ 
public:
	class UDecalComponent*                             DECAL;                                                      // 0x0220   (0x0008)  


	/// Functions
	// Function /Script/Engine.DecalActor.SetDecalMaterial
	// void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);                                                    // [0x2ed2d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalActor.GetDecalMaterial
	// class UMaterialInterface* GetDecalMaterial();                                                                         // [0x2ed2a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalActor.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                      // [0x2ed2130] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DecalComponent
/// Size: 0x0040 (0x0001F0 - 0x000230)
class UDecalComponent : public USceneComponent
{ 
public:
	class UMaterialInterface*                          DecalMaterial;                                              // 0x01F0   (0x0008)  
	int32_t                                            SortOrder;                                                  // 0x01F8   (0x0004)  
	float                                              FadeScreenSize;                                             // 0x01FC   (0x0004)  
	float                                              FadeStartDelay;                                             // 0x0200   (0x0004)  
	float                                              FadeDuration;                                               // 0x0204   (0x0004)  
	float                                              FadeInDuration;                                             // 0x0208   (0x0004)  
	float                                              FadeInStartDelay;                                           // 0x020C   (0x0004)  
	bool                                               bDestroyOwnerAfterFade : 1;                                 // 0x0210:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0211   (0x0003)  MISSED
	FVector                                            DecalSize;                                                  // 0x0214   (0x000C)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0220   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.DecalComponent.SetSortOrder
	// void SetSortOrder(int32_t value);                                                                                     // [0x2ed3120] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeScreenSize
	// void SetFadeScreenSize(float NewFadeScreenSize);                                                                      // [0x2ed3020] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeOut
	// void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);                                        // [0x2ed2f10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeIn
	// void SetFadeIn(float StartDelay, float Duaration);                                                                    // [0x2ed2e50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetDecalMaterial
	// void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);                                                    // [0x2ed2dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.GetFadeStartDelay
	// float GetFadeStartDelay();                                                                                            // [0x2ed2af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeInStartDelay
	// float GetFadeInStartDelay();                                                                                          // [0x2ed2ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeInDuration
	// float GetFadeInDuration();                                                                                            // [0x2ed2a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeDuration
	// float GetFadeDuration();                                                                                              // [0x2ed2a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetDecalMaterial
	// class UMaterialInterface* GetDecalMaterial();                                                                         // [0x2ed2a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                      // [0x2ed2160] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DefaultPhysicsVolume
/// Size: 0x0000 (0x000268 - 0x000268)
class ADefaultPhysicsVolume : public APhysicsVolume
{ 
public:
};

/// Class /Script/Engine.DemoNetConnection
/// Size: 0x0070 (0x001A30 - 0x001AA0)
class UDemoNetConnection : public UNetConnection
{ 
public:
	unsigned char                                      UnknownData00_1[0x70];                                      // 0x1A30   (0x0070)  MISSED
};

/// Struct /Script/Engine.MulticastRecordOptions
/// Size: 0x0018 (0x000000 - 0x000018)
struct FMulticastRecordOptions
{ 
	SDK_UNDEFINED(16,353) /* FString */                __um(FuncPathName);                                         // 0x0000   (0x0010)  
	bool                                               bServerSkip;                                                // 0x0010   (0x0001)  
	bool                                               bClientSkip;                                                // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0012   (0x0006)  MISSED
};

/// Class /Script/Engine.DemoNetDriver
/// Size: 0x09D8 (0x000748 - 0x001120)
class UDemoNetDriver : public UNetDriver
{ 
public:
	unsigned char                                      UnknownData00_3[0xF8];                                      // 0x0748   (0x00F8)  MISSED
	SDK_UNDEFINED(80,354) /* TMap<FString, FRollbackNetStartupActorInfo> */ __um(RollbackNetStartupActors);        // 0x0840   (0x0050)  
	unsigned char                                      UnknownData01_5[0x3C4];                                     // 0x0890   (0x03C4)  MISSED
	float                                              CheckpointSaveMaxMSPerFrame;                                // 0x0C54   (0x0004)  
	unsigned char                                      UnknownData02_5[0x30];                                      // 0x0C58   (0x0030)  MISSED
	TArray<FMulticastRecordOptions>                    MulticastRecordOptions;                                     // 0x0C88   (0x0010)  
	unsigned char                                      UnknownData03_5[0x50];                                      // 0x0C98   (0x0050)  MISSED
	bool                                               bIsLocalReplay;                                             // 0x0CE8   (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x0CE9   (0x0007)  MISSED
	TArray<class APlayerController*>                   SpectatorControllers;                                       // 0x0CF0   (0x0010)  
	unsigned char                                      UnknownData05_6[0x420];                                     // 0x0D00   (0x0420)  MISSED
};

/// Class /Script/Engine.PendingNetGame
/// Size: 0x0098 (0x000028 - 0x0000C0)
class UPendingNetGame : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	class UNetDriver*                                  NetDriver;                                                  // 0x0030   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_6[0x80];                                      // 0x0040   (0x0080)  MISSED
};

/// Class /Script/Engine.DemoPendingNetGame
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UDemoPendingNetGame : public UPendingNetGame
{ 
public:
};

/// Class /Script/Engine.DestructibleInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UDestructibleInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.TextureLODGroup
/// Size: 0x0054 (0x000000 - 0x000054)
struct FTextureLODGroup
{ 
	SDK_UNDEFINED(1,355) /* TEnumAsByte<TextureGroup> */ __um(Group);                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0xB];                                       // 0x0001   (0x000B)  MISSED
	int32_t                                            LODBias;                                                    // 0x000C   (0x0004)  
	int32_t                                            LODBias_Smaller;                                            // 0x0010   (0x0004)  
	int32_t                                            LODBias_Smallest;                                           // 0x0014   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0018   (0x0004)  MISSED
	int32_t                                            NumStreamedMips;                                            // 0x001C   (0x0004)  
	SDK_UNDEFINED(1,356) /* TEnumAsByte<TextureMipGenSettings> */ __um(MipGenSettings);                            // 0x0020   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0021   (0x0003)  MISSED
	int32_t                                            MinLODSize;                                                 // 0x0024   (0x0004)  
	int32_t                                            MaxLODSize;                                                 // 0x0028   (0x0004)  
	int32_t                                            MaxLODSize_Smaller;                                         // 0x002C   (0x0004)  
	int32_t                                            MaxLODSize_Smallest;                                        // 0x0030   (0x0004)  
	int32_t                                            OptionalLODBias;                                            // 0x0034   (0x0004)  
	int32_t                                            OptionalMaxLODSize;                                         // 0x0038   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FName                                              MinMagFilter;                                               // 0x0040   (0x0008)  
	FName                                              MipFilter;                                                  // 0x0048   (0x0008)  
	ETextureMipLoadOptions                             MipLoadOptions;                                             // 0x0050   (0x0001)  
	bool                                               DuplicateNonOptionalMips;                                   // 0x0051   (0x0001)  
	SDK_UNDEFINED(1,357) /* TEnumAsByte<ETextureLossyCompressionAmount> */ __um(LossyCompressionAmount);           // 0x0052   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0053   (0x0001)  MISSED
};

/// Class /Script/Engine.TextureLODSettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UTextureLODSettings : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FTextureLODGroup>                           TextureLODGroups;                                           // 0x0028   (0x0010)  
};

/// Class /Script/Engine.DeviceProfile
/// Size: 0x0060 (0x000038 - 0x000098)
class UDeviceProfile : public UTextureLODSettings
{ 
public:
	SDK_UNDEFINED(16,358) /* FString */                __um(DeviceType);                                           // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,359) /* FString */                __um(BaseProfileName);                                      // 0x0048   (0x0010)  
	class UObject*                                     Parent;                                                     // 0x0058   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x0060   (0x0018)  MISSED
	SDK_UNDEFINED(16,360) /* TArray<FString> */        __um(CVars);                                                // 0x0078   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0088   (0x0010)  MISSED
};

/// Class /Script/Engine.DeviceProfileManager
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UDeviceProfileManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<class UObject*>                             Profiles;                                                   // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_6[0x78];                                      // 0x0038   (0x0078)  MISSED
};

/// Class /Script/Engine.DialogueSoundWaveProxy
/// Size: 0x0018 (0x000160 - 0x000178)
class UDialogueSoundWaveProxy : public USoundBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0160   (0x0018)  MISSED
};

/// Class /Script/Engine.DialogueVoice
/// Size: 0x0018 (0x000028 - 0x000040)
class UDialogueVoice : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(1,361) /* TEnumAsByte<EGrammaticalGender> */ __um(Gender);                                       // 0x0028   (0x0001)  
	SDK_UNDEFINED(1,362) /* TEnumAsByte<EGrammaticalNumber> */ __um(Plurality);                                    // 0x0029   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x002A   (0x0002)  MISSED
	FGuid                                              LocalizationGUID;                                           // 0x002C   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/Engine.DialogueContext
/// Size: 0x0018 (0x000000 - 0x000018)
struct FDialogueContext
{ 
	class UDialogueVoice*                              Speaker;                                                    // 0x0000   (0x0008)  
	TArray<class UDialogueVoice*>                      Targets;                                                    // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.DialogueContextMapping
/// Size: 0x0038 (0x000000 - 0x000038)
struct FDialogueContextMapping
{ 
	FDialogueContext                                   Context;                                                    // 0x0000   (0x0018)  
	class USoundWave*                                  SoundWave;                                                  // 0x0018   (0x0008)  
	SDK_UNDEFINED(16,363) /* FString */                __um(LocalizationKeyFormat);                                // 0x0020   (0x0010)  
	class UDialogueSoundWaveProxy*                     Proxy;                                                      // 0x0030   (0x0008)  
};

/// Class /Script/Engine.DialogueWave
/// Size: 0x0048 (0x000028 - 0x000070)
class UDialogueWave : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bMature : 1;                                                // 0x0028:0 (0x0001)  
	bool                                               bOverride_SubtitleOverride : 1;                             // 0x0028:1 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0029   (0x0007)  MISSED
	SDK_UNDEFINED(16,364) /* FString */                __um(SpokenText);                                           // 0x0030   (0x0010)  
	SDK_UNDEFINED(16,365) /* FString */                __um(SubtitleOverride);                                     // 0x0040   (0x0010)  
	TArray<FDialogueContextMapping>                    ContextMappings;                                            // 0x0050   (0x0010)  
	FGuid                                              LocalizationGUID;                                           // 0x0060   (0x0010)  
};

/// Class /Script/Engine.Light
/// Size: 0x0010 (0x000220 - 0x000230)
class ALight : public AActor
{ 
public:
	class ULightComponent*                             LightComponent;                                             // 0x0220   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x0228:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0229   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.Light.ToggleEnabled
	// void ToggleEnabled();                                                                                                 // [0x2f64170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionScale
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                            // [0x2f63880] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionMaterial
	// void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);                                    // [0x2f63780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionFadeDistance
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                // [0x2f63680] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor);                                                                       // [0x2f634b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Light.SetEnabled
	// void SetEnabled(bool bSetEnabled);                                                                                    // [0x2f63110] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetCastShadows
	// void SetCastShadows(bool bNewValue);                                                                                  // [0x2f62e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetBrightness
	// void SetBrightness(float NewBrightness);                                                                              // [0x2f62db0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetAffectTranslucentLighting
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                    // [0x2f62a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                // [0xe92750] Native|Public        
	// Function /Script/Engine.Light.IsEnabled
	// bool IsEnabled();                                                                                                     // [0x2f62380] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Light.GetLightColor
	// FLinearColor GetLightColor();                                                                                         // [0x2f622e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Light.GetBrightness
	// float GetBrightness();                                                                                                // [0x2f62280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DirectionalLight
/// Size: 0x0000 (0x000230 - 0x000230)
class ADirectionalLight : public ALight
{ 
public:
};

/// Class /Script/Engine.LightComponentBase
/// Size: 0x0030 (0x0001F0 - 0x000220)
class ULightComponentBase : public USceneComponent
{ 
public:
	FGuid                                              LightGuid;                                                  // 0x01F0   (0x0010)  
	float                                              Brightness;                                                 // 0x0200   (0x0004)  
	float                                              Intensity;                                                  // 0x0204   (0x0004)  
	FColor                                             LightColor;                                                 // 0x0208   (0x0004)  
	bool                                               bAffectsWorld : 1;                                          // 0x020C:0 (0x0001)  
	bool                                               CastShadows : 1;                                            // 0x020C:1 (0x0001)  
	bool                                               CastStaticShadows : 1;                                      // 0x020C:2 (0x0001)  
	bool                                               CastDynamicShadows : 1;                                     // 0x020C:3 (0x0001)  
	bool                                               bAffectTranslucentLighting : 1;                             // 0x020C:4 (0x0001)  
	bool                                               bTransmission : 1;                                          // 0x020C:5 (0x0001)  
	bool                                               bCastVolumetricShadow : 1;                                  // 0x020C:6 (0x0001)  
	bool                                               bCastDeepShadow : 1;                                        // 0x020C:7 (0x0001)  
	bool                                               bCastRaytracedShadow : 1;                                   // 0x020D:0 (0x0001)  
	bool                                               bAffectReflection : 1;                                      // 0x020D:1 (0x0001)  
	bool                                               bAffectGlobalIllumination : 1;                              // 0x020D:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x2];                                       // 0x020E   (0x0002)  MISSED
	float                                              IndirectLightingIntensity;                                  // 0x0210   (0x0004)  
	float                                              VolumetricScatteringIntensity;                              // 0x0214   (0x0004)  
	int32_t                                            SamplesPerPixel;                                            // 0x0218   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x021C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.LightComponentBase.SetSamplesPerPixel
	// void SetSamplesPerPixel(int32_t NewValue);                                                                            // [0x2f66650] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastVolumetricShadow
	// void SetCastVolumetricShadow(bool bNewValue);                                                                         // [0x2f66540] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastShadows
	// void SetCastShadows(bool bNewValue);                                                                                  // [0x2f664b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastRaytracedShadow
	// void SetCastRaytracedShadow(bool bNewValue);                                                                          // [0x2f66420] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastDeepShadow
	// void SetCastDeepShadow(bool bNewValue);                                                                               // [0x2f66390] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetAffectReflection
	// void SetAffectReflection(bool bNewValue);                                                                             // [0x2f66280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetAffectGlobalIllumination
	// void SetAffectGlobalIllumination(bool bNewValue);                                                                     // [0x2f661f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.GetLightColor
	// FLinearColor GetLightColor();                                                                                         // [0x2f660b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.LightComponent
/// Size: 0x0120 (0x000220 - 0x000340)
#pragma pack(push, 0x1)
class alignas(0x10) ULightComponent : public ULightComponentBase
{ 
public:
	float                                              Temperature;                                                // 0x0220   (0x0004)  
	float                                              MaxDrawDistance;                                            // 0x0224   (0x0004)  
	float                                              MaxDistanceFadeRange;                                       // 0x0228   (0x0004)  
	bool                                               bUseTemperature : 1;                                        // 0x022C:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x022D   (0x0003)  MISSED
	int32_t                                            ShadowMapChannel;                                           // 0x0230   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0234   (0x0004)  MISSED
	float                                              MinRoughness;                                               // 0x0238   (0x0004)  
	float                                              SpecularScale;                                              // 0x023C   (0x0004)  
	float                                              ShadowResolutionScale;                                      // 0x0240   (0x0004)  
	float                                              ShadowBias;                                                 // 0x0244   (0x0004)  
	float                                              ShadowSlopeBias;                                            // 0x0248   (0x0004)  
	float                                              ShadowSharpen;                                              // 0x024C   (0x0004)  
	float                                              ContactShadowLength;                                        // 0x0250   (0x0004)  
	bool                                               ContactShadowLengthInWS : 1;                                // 0x0254:0 (0x0001)  
	bool                                               InverseSquaredFalloff : 1;                                  // 0x0254:1 (0x0001)  
	bool                                               CastTranslucentShadows : 1;                                 // 0x0254:2 (0x0001)  
	bool                                               bCastShadowsFromCinematicObjectsOnly : 1;                   // 0x0254:3 (0x0001)  
	bool                                               bAffectDynamicIndirectLighting : 1;                         // 0x0254:4 (0x0001)  
	bool                                               bForceCachedShadowsForMovablePrimitives : 1;                // 0x0254:5 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0255   (0x0003)  MISSED
	FLightingChannels                                  LightingChannels;                                           // 0x0258   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0259   (0x0007)  MISSED
	class UMaterialInterface*                          LightFunctionMaterial;                                      // 0x0260   (0x0008)  
	FVector                                            LightFunctionScale;                                         // 0x0268   (0x000C)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x0274   (0x0004)  MISSED
	class UTextureLightProfile*                        IESTexture;                                                 // 0x0278   (0x0008)  
	bool                                               bUseIESBrightness : 1;                                      // 0x0280:0 (0x0001)  
	unsigned char                                      UnknownData05_4[0x3];                                       // 0x0281   (0x0003)  MISSED
	float                                              IESBrightnessScale;                                         // 0x0284   (0x0004)  
	float                                              LightFunctionFadeDistance;                                  // 0x0288   (0x0004)  
	float                                              DisabledBrightness;                                         // 0x028C   (0x0004)  
	bool                                               bEnableLightShaftBloom : 1;                                 // 0x0290:0 (0x0001)  
	unsigned char                                      UnknownData06_4[0x3];                                       // 0x0291   (0x0003)  MISSED
	float                                              BloomScale;                                                 // 0x0294   (0x0004)  
	float                                              BloomThreshold;                                             // 0x0298   (0x0004)  
	float                                              BloomMaxBrightness;                                         // 0x029C   (0x0004)  
	FColor                                             BloomTint;                                                  // 0x02A0   (0x0004)  
	bool                                               bUseRayTracedDistanceFieldShadows;                          // 0x02A4   (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x02A5   (0x0003)  MISSED
	float                                              RayStartOffsetDepthScale;                                   // 0x02A8   (0x0004)  
	bool                                               bAffectMeshCaustics : 1;                                    // 0x02AC:0 (0x0001)  
	unsigned char                                      UnknownData08_4[0x3];                                       // 0x02AD   (0x0003)  MISSED
	ERayTracingMeshCausticsResolution                  MeshCausticsResolution;                                     // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x02B1   (0x0003)  MISSED
	float                                              MeshCausticsSoftness;                                       // 0x02B4   (0x0004)  
	bool                                               bAffectWaterCaustics : 1;                                   // 0x02B8:0 (0x0001)  
	unsigned char                                      UnknownData10_4[0x3];                                       // 0x02B9   (0x0003)  MISSED
	float                                              WaterCausticsPrecision;                                     // 0x02BC   (0x0004)  
	int32_t                                            NumWaterCausticsMapCascades;                                // 0x02C0   (0x0004)  
	float                                              WaterCausticsMapCascadeScale;                               // 0x02C4   (0x0004)  
	unsigned char                                      UnknownData11_6[0x70];                                      // 0x02C8   (0x0070)  MISSED


	/// Functions
	// Function /Script/Engine.LightComponent.SetWaterCausticsPrecision
	// void SetWaterCausticsPrecision(float NewValue);                                                                       // [0x2f640f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetWaterCausticsMapCascadeScale
	// void SetWaterCausticsMapCascadeScale(float NewValue);                                                                 // [0x2f64070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetVolumetricScatteringIntensity
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                            // [0x2f63ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetUseIESBrightness
	// void SetUseIESBrightness(bool bNewValue);                                                                             // [0x2f63f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetTransmission
	// void SetTransmission(bool bNewValue);                                                                                 // [0x2f63ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetTemperature
	// void SetTemperature(float NewTemperature);                                                                            // [0x2f63e50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetSpecularScale
	// void SetSpecularScale(float NewValue);                                                                                // [0x2f63dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetShadowSlopeBias
	// void SetShadowSlopeBias(float NewValue);                                                                              // [0x2f63cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetShadowBias
	// void SetShadowBias(float NewValue);                                                                                   // [0x2f63c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetNumWaterCausticsMapCascades
	// void SetNumWaterCausticsMapCascades(int32_t NewValue);                                                                // [0x2f63b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetMeshCausticsResolution
	// void SetMeshCausticsResolution(ERayTracingMeshCausticsResolution NewValue);                                           // [0x2f63ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightingChannels
	// void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);                                             // [0x2f639a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionScale
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                            // [0x2f63910] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionMaterial
	// void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);                                    // [0x2f63800] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionFadeDistance
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                // [0x2f63700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionDisabledBrightness
	// void SetLightFunctionDisabledBrightness(float NewValue);                                                              // [0x2f63600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor, bool bSRGB);                                                           // [0x2f63530] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                // [0x2f633b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIndirectLightingIntensity
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                // [0x2f63330] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIESTexture
	// void SetIESTexture(class UTextureLightProfile* NewValue);                                                             // [0x2f632b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIESBrightnessScale
	// void SetIESBrightnessScale(float NewValue);                                                                           // [0x2f63230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
	// void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);                                                       // [0x2f631a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetEnableLightShaftBloom
	// void SetEnableLightShaftBloom(bool bNewValue);                                                                        // [0x2f63080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomTint
	// void SetBloomTint(FColor NewValue);                                                                                   // [0x2f62d40] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomThreshold
	// void SetBloomThreshold(float NewValue);                                                                               // [0x2f62cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomScale
	// void SetBloomScale(float NewValue);                                                                                   // [0x2f62c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomMaxBrightness
	// void SetBloomMaxBrightness(float NewValue);                                                                           // [0x2f62bc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectWaterCaustics
	// void SetAffectWaterCaustics(bool bNewValue);                                                                          // [0x2f62b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectTranslucentLighting
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                    // [0x2f62aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectMeshCaustics
	// void SetAffectMeshCaustics(bool bNewValue);                                                                           // [0x2f62980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectDynamicIndirectLighting
	// void SetAffectDynamicIndirectLighting(bool bNewValue);                                                                // [0x2f628f0] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Struct /Script/Engine.LightmassLightSettings
/// Size: 0x000C (0x000000 - 0x00000C)
struct FLightmassLightSettings
{ 
	float                                              IndirectLightingSaturation;                                 // 0x0000   (0x0004)  
	float                                              ShadowExponent;                                             // 0x0004   (0x0004)  
	bool                                               bUseAreaShadowsForStationaryLight;                          // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.LightmassDirectionalLightSettings
/// Size: 0x0004 (0x00000C - 0x000010)
struct FLightmassDirectionalLightSettings : FLightmassLightSettings
{ 
	float                                              LightSourceAngle;                                           // 0x000C   (0x0004)  
};

/// Class /Script/Engine.DirectionalLightComponent
/// Size: 0x0080 (0x000340 - 0x0003C0)
class UDirectionalLightComponent : public ULightComponent
{ 
public:
	float                                              ShadowCascadeBiasDistribution;                              // 0x0338   (0x0004)  
	bool                                               bEnableLightShaftOcclusion : 1;                             // 0x033C:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x033D   (0x0003)  MISSED
	float                                              OcclusionMaskDarkness;                                      // 0x0340   (0x0004)  
	float                                              OcclusionDepthRange;                                        // 0x0344   (0x0004)  
	FVector                                            LightShaftOverrideDirection;                                // 0x0348   (0x000C)  
	float                                              WholeSceneDynamicShadowRadius;                              // 0x0354   (0x0004)  
	float                                              DynamicShadowDistanceMovableLight;                          // 0x0358   (0x0004)  
	float                                              DynamicShadowDistanceStationaryLight;                       // 0x035C   (0x0004)  
	int32_t                                            DynamicShadowCascades;                                      // 0x0360   (0x0004)  
	float                                              CascadeDistributionExponent;                                // 0x0364   (0x0004)  
	float                                              CascadeTransitionFraction;                                  // 0x0368   (0x0004)  
	float                                              ShadowDistanceFadeoutFraction;                              // 0x036C   (0x0004)  
	bool                                               bUseInsetShadowsForMovableObjects : 1;                      // 0x0370:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0371   (0x0003)  MISSED
	int32_t                                            FarShadowCascadeCount;                                      // 0x0374   (0x0004)  
	float                                              FarShadowDistance;                                          // 0x0378   (0x0004)  
	float                                              DistanceFieldShadowDistance;                                // 0x037C   (0x0004)  
	float                                              LightSourceAngle;                                           // 0x0380   (0x0004)  
	float                                              LightSourceSoftAngle;                                       // 0x0384   (0x0004)  
	float                                              TraceDistance;                                              // 0x0388   (0x0004)  
	FLightmassDirectionalLightSettings                 LightmassSettings;                                          // 0x038C   (0x0010)  
	bool                                               bCastModulatedShadows : 1;                                  // 0x039C:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x039D   (0x0003)  MISSED
	FColor                                             ModulatedShadowColor;                                       // 0x03A0   (0x0004)  
	float                                              ShadowAmount;                                               // 0x03A4   (0x0004)  
	bool                                               bUsedAsAtmosphereSunLight : 1;                              // 0x03A8:0 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x03A9   (0x0003)  MISSED
	int32_t                                            AtmosphereSunLightIndex;                                    // 0x03AC   (0x0004)  
	bool                                               bFixedMeshCausticsPosition : 1;                             // 0x03B0:0 (0x0001)  
	unsigned char                                      UnknownData04_4[0x3];                                       // 0x03B1   (0x0003)  MISSED
	FVector                                            MeshCausticsRange;                                          // 0x03B4   (0x000C)  


	/// Functions
	// Function /Script/Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
	// void SetShadowDistanceFadeoutFraction(float NewValue);                                                                // [0x2ed66e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetShadowAmount
	// void SetShadowAmount(float NewValue);                                                                                 // [0x2ed6660] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
	// void SetOcclusionMaskDarkness(float NewValue);                                                                        // [0x2ed65e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
	// void SetLightShaftOverrideDirection(FVector NewValue);                                                                // [0x2ed6550] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
	// void SetEnableLightShaftOcclusion(bool bNewValue);                                                                    // [0x2ed64c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
	// void SetDynamicShadowDistanceStationaryLight(float NewValue);                                                         // [0x2ed6440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
	// void SetDynamicShadowDistanceMovableLight(float NewValue);                                                            // [0x2ed63c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowCascades
	// void SetDynamicShadowCascades(int32_t NewValue);                                                                      // [0x2ed6340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeTransitionFraction
	// void SetCascadeTransitionFraction(float NewValue);                                                                    // [0x2ed62c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeDistributionExponent
	// void SetCascadeDistributionExponent(float NewValue);                                                                  // [0x2ed6240] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Distribution
/// Size: 0x0008 (0x000028 - 0x000030)
class UDistribution : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Class /Script/Engine.DistributionFloat
/// Size: 0x0008 (0x000030 - 0x000038)
class UDistributionFloat : public UDistribution
{ 
public:
	bool                                               bCanBeBaked : 1;                                            // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x0030:1 (0x0001)  MISSED
	bool                                               bBakedDataSuccesfully : 1;                                  // 0x0030:2 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionFloatConstant
/// Size: 0x0008 (0x000038 - 0x000040)
class UDistributionFloatConstant : public UDistributionFloat
{ 
public:
	float                                              Constant;                                                   // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.DistributionFloatConstantCurve
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionFloatConstantCurve : public UDistributionFloat
{ 
public:
	FInterpCurveFloat                                  ConstantCurve;                                              // 0x0038   (0x0018)  
};

/// Class /Script/Engine.DistributionFloatParameterBase
/// Size: 0x0020 (0x000040 - 0x000060)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{ 
public:
	FName                                              ParameterName;                                              // 0x0040   (0x0008)  
	float                                              MinInput;                                                   // 0x0048   (0x0004)  
	float                                              MaxInput;                                                   // 0x004C   (0x0004)  
	float                                              MinOutput;                                                  // 0x0050   (0x0004)  
	float                                              MaxOutput;                                                  // 0x0054   (0x0004)  
	SDK_UNDEFINED(1,366) /* TEnumAsByte<DistributionParamMode> */ __um(ParamMode);                                 // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionFloatParticleParameter
/// Size: 0x0000 (0x000060 - 0x000060)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{ 
public:
};

/// Class /Script/Engine.DistributionFloatUniform
/// Size: 0x0008 (0x000038 - 0x000040)
class UDistributionFloatUniform : public UDistributionFloat
{ 
public:
	float                                              Min;                                                        // 0x0038   (0x0004)  
	float                                              Max;                                                        // 0x003C   (0x0004)  
};

/// Class /Script/Engine.DistributionFloatUniformCurve
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionFloatUniformCurve : public UDistributionFloat
{ 
public:
	FInterpCurveVector2D                               ConstantCurve;                                              // 0x0038   (0x0018)  
};

/// Class /Script/Engine.DistributionVector
/// Size: 0x0008 (0x000030 - 0x000038)
class UDistributionVector : public UDistribution
{ 
public:
	bool                                               bCanBeBaked : 1;                                            // 0x0030:0 (0x0001)  
	bool                                               bIsDirty : 1;                                               // 0x0030:1 (0x0001)  
	bool                                               bBakedDataSuccesfully : 1;                                  // 0x0030:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorConstant
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionVectorConstant : public UDistributionVector
{ 
public:
	FVector                                            Constant;                                                   // 0x0038   (0x000C)  
	bool                                               bLockAxes : 1;                                              // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0045   (0x0003)  MISSED
	SDK_UNDEFINED(1,367) /* TEnumAsByte<EDistributionVectorLockFlags> */ __um(LockedAxes);                         // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorConstantCurve
/// Size: 0x0020 (0x000038 - 0x000058)
class UDistributionVectorConstantCurve : public UDistributionVector
{ 
public:
	FInterpCurveVector                                 ConstantCurve;                                              // 0x0038   (0x0018)  
	bool                                               bLockAxes : 1;                                              // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0051   (0x0003)  MISSED
	SDK_UNDEFINED(1,368) /* TEnumAsByte<EDistributionVectorLockFlags> */ __um(LockedAxes);                         // 0x0054   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.DistributionVectorParameterBase
/// Size: 0x0040 (0x000050 - 0x000090)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{ 
public:
	FName                                              ParameterName;                                              // 0x0050   (0x0008)  
	FVector                                            MinInput;                                                   // 0x0058   (0x000C)  
	FVector                                            MaxInput;                                                   // 0x0064   (0x000C)  
	FVector                                            MinOutput;                                                  // 0x0070   (0x000C)  
	FVector                                            MaxOutput;                                                  // 0x007C   (0x000C)  
	SDK_UNDEFINED(3,369) /* TEnumAsByte<DistributionParamMode> */ __um(ParamModes);                                // 0x0088   (0x0003)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x008B   (0x0005)  MISSED
};

/// Class /Script/Engine.DistributionVectorParticleParameter
/// Size: 0x0000 (0x000090 - 0x000090)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{ 
public:
};

/// Class /Script/Engine.DistributionVectorUniform
/// Size: 0x0028 (0x000038 - 0x000060)
class UDistributionVectorUniform : public UDistributionVector
{ 
public:
	FVector                                            Max;                                                        // 0x0038   (0x000C)  
	FVector                                            Min;                                                        // 0x0044   (0x000C)  
	bool                                               bLockAxes : 1;                                              // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0051   (0x0003)  MISSED
	SDK_UNDEFINED(1,370) /* TEnumAsByte<EDistributionVectorLockFlags> */ __um(LockedAxes);                         // 0x0054   (0x0001)  
	SDK_UNDEFINED(3,371) /* TEnumAsByte<EDistributionVectorMirrorFlags> */ __um(MirrorFlags);                      // 0x0055   (0x0003)  
	bool                                               bUseExtremes : 1;                                           // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorUniformCurve
/// Size: 0x0028 (0x000038 - 0x000060)
class UDistributionVectorUniformCurve : public UDistributionVector
{ 
public:
	FInterpCurveTwoVectors                             ConstantCurve;                                              // 0x0038   (0x0018)  
	bool                                               bLockAxes1 : 1;                                             // 0x0050:0 (0x0001)  
	bool                                               bLockAxes2 : 1;                                             // 0x0050:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0051   (0x0003)  MISSED
	SDK_UNDEFINED(2,372) /* TEnumAsByte<EDistributionVectorLockFlags> */ __um(LockedAxes);                         // 0x0054   (0x0002)  
	SDK_UNDEFINED(3,373) /* TEnumAsByte<EDistributionVectorMirrorFlags> */ __um(MirrorFlags);                      // 0x0056   (0x0003)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0059   (0x0003)  MISSED
	bool                                               bUseExtremes : 1;                                           // 0x005C:0 (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x005D   (0x0003)  MISSED
};

/// Class /Script/Engine.DocumentationActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ADocumentationActor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0220   (0x0008)  MISSED
};

/// Class /Script/Engine.DrawFrustumComponent
/// Size: 0x0020 (0x000410 - 0x000430)
class UDrawFrustumComponent : public UPrimitiveComponent
{ 
public:
	FColor                                             FrustumColor;                                               // 0x0408   (0x0004)  
	float                                              FrustumAngle;                                               // 0x040C   (0x0004)  
	float                                              FrustumAspectRatio;                                         // 0x0410   (0x0004)  
	float                                              FrustumStartDist;                                           // 0x0414   (0x0004)  
	float                                              FrustumEndDist;                                             // 0x0418   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x041C   (0x0004)  MISSED
	class UTexture*                                    Texture;                                                    // 0x0420   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0428   (0x0008)  MISSED
};

/// Class /Script/Engine.SphereComponent
/// Size: 0x0010 (0x000420 - 0x000430)
class USphereComponent : public UShapeComponent
{ 
public:
	float                                              SphereRadius;                                               // 0x0420   (0x0004)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0424   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.SphereComponent.SetSphereRadius
	// void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);                                                     // [0x2fdca30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SphereComponent.GetUnscaledSphereRadius
	// float GetUnscaledSphereRadius();                                                                                      // [0x2ec18b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SphereComponent.GetShapeScale
	// float GetShapeScale();                                                                                                // [0x2fdaf20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SphereComponent.GetScaledSphereRadius
	// float GetScaledSphereRadius();                                                                                        // [0x2fdaed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DrawSphereComponent
/// Size: 0x0000 (0x000430 - 0x000430)
class UDrawSphereComponent : public USphereComponent
{ 
public:
};

/// Class /Script/Engine.EdGraph
/// Size: 0x0038 (0x000028 - 0x000060)
class UEdGraph : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UClass*                                      Schema;                                                     // 0x0028   (0x0008)  
	TArray<class UEdGraphNode*>                        Nodes;                                                      // 0x0030   (0x0010)  
	bool                                               bEditable : 1;                                              // 0x0040:0 (0x0001)  
	bool                                               bAllowDeletion : 1;                                         // 0x0040:1 (0x0001)  
	bool                                               bAllowRenaming : 1;                                         // 0x0040:2 (0x0001)  
	unsigned char                                      UnknownData01_6[0x1F];                                      // 0x0041   (0x001F)  MISSED
};

/// Class /Script/Engine.GraphNodeContextMenuContext
/// Size: 0x0028 (0x000028 - 0x000050)
class UGraphNodeContextMenuContext : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UBlueprint*                                  Blueprint;                                                  // 0x0028   (0x0008)  
	class UEdGraph*                                    Graph;                                                      // 0x0030   (0x0008)  
	class UEdGraphNode*                                Node;                                                       // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0040   (0x0008)  MISSED
	bool                                               bIsDebugging;                                               // 0x0048   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.EdGraphNode
/// Size: 0x0070 (0x000028 - 0x000098)
class UEdGraphNode : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0000   (0x0038)  MISSED
	TArray<class UEdGraphPin_Deprecated*>              DeprecatedPins;                                             // 0x0038   (0x0010)  
	int32_t                                            NodePosX;                                                   // 0x0048   (0x0004)  
	int32_t                                            NodePosY;                                                   // 0x004C   (0x0004)  
	int32_t                                            NodeWidth;                                                  // 0x0050   (0x0004)  
	int32_t                                            NodeHeight;                                                 // 0x0054   (0x0004)  
	SDK_UNDEFINED(1,374) /* TEnumAsByte<ENodeAdvancedPins> */ __um(AdvancedPinDisplay);                            // 0x0058   (0x0001)  
	ENodeEnabledState                                  EnabledState;                                               // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x005A   (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x005B:0 (0x0001)  MISSED
	bool                                               bDisplayAsDisabled : 1;                                     // 0x005B:1 (0x0001)  
	bool                                               bUserSetEnabledState : 1;                                   // 0x005B:2 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x005B:3 (0x0001)  MISSED
	bool                                               bIsNodeEnabled : 1;                                         // 0x005B:4 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x005B:5 (0x0001)  MISSED
	bool                                               bHasCompilerMessage : 1;                                    // 0x005B:6 (0x0001)  
	unsigned char                                      UnknownData05_4[0x4];                                       // 0x005C   (0x0004)  MISSED
	SDK_UNDEFINED(16,375) /* FString */                __um(NodeComment);                                          // 0x0060   (0x0010)  
	int32_t                                            ErrorType;                                                  // 0x0070   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x0074   (0x0004)  MISSED
	SDK_UNDEFINED(16,376) /* FString */                __um(ErrorMsg);                                             // 0x0078   (0x0010)  
	FGuid                                              NodeGuid;                                                   // 0x0088   (0x0010)  
};

/// Class /Script/Engine.EdGraphNode_Documentation
/// Size: 0x0020 (0x000098 - 0x0000B8)
class UEdGraphNode_Documentation : public UEdGraphNode
{ 
public:
	SDK_UNDEFINED(16,377) /* FString */                __um(Link);                                                 // 0x0098   (0x0010)  
	SDK_UNDEFINED(16,378) /* FString */                __um(Excerpt);                                              // 0x00A8   (0x0010)  
};

/// Struct /Script/Engine.EdGraphTerminalType
/// Size: 0x001C (0x000000 - 0x00001C)
struct FEdGraphTerminalType
{ 
	FName                                              TerminalCategory;                                           // 0x0000   (0x0008)  
	FName                                              TerminalSubCategory;                                        // 0x0008   (0x0008)  
	SDK_UNDEFINED(8,379) /* TWeakObjectPtr<UObject*> */ __um(TerminalSubCategoryObject);                           // 0x0010   (0x0008)  
	bool                                               bTerminalIsConst;                                           // 0x0018   (0x0001)  
	bool                                               bTerminalIsWeakPointer;                                     // 0x0019   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x001A   (0x0002)  MISSED
};

/// Struct /Script/Engine.EdGraphPinType
/// Size: 0x0058 (0x000000 - 0x000058)
struct FEdGraphPinType
{ 
	FName                                              PinCategory;                                                // 0x0000   (0x0008)  
	FName                                              PinSubCategory;                                             // 0x0008   (0x0008)  
	SDK_UNDEFINED(8,380) /* TWeakObjectPtr<UObject*> */ __um(PinSubCategoryObject);                                // 0x0010   (0x0008)  
	FSimpleMemberReference                             PinSubCategoryMemberReference;                              // 0x0018   (0x0020)  
	FEdGraphTerminalType                               PinValueType;                                               // 0x0038   (0x001C)  
	EPinContainerType                                  ContainerType;                                              // 0x0054   (0x0001)  
	bool                                               bIsArray : 1;                                               // 0x0055:0 (0x0001)  
	bool                                               bIsReference : 1;                                           // 0x0055:1 (0x0001)  
	bool                                               bIsConst : 1;                                               // 0x0055:2 (0x0001)  
	bool                                               bIsWeakPointer : 1;                                         // 0x0055:3 (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.EdGraphPin_Deprecated
/// Size: 0x00F0 (0x000028 - 0x000118)
class UEdGraphPin_Deprecated : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(16,381) /* FString */                __um(PinName);                                              // 0x0028   (0x0010)  
	SDK_UNDEFINED(16,382) /* FString */                __um(PinToolTip);                                           // 0x0038   (0x0010)  
	SDK_UNDEFINED(1,383) /* TEnumAsByte<EEdGraphPinDirection> */ __um(Direction);                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0049   (0x0007)  MISSED
	FEdGraphPinType                                    PinType;                                                    // 0x0050   (0x0058)  
	SDK_UNDEFINED(16,384) /* FString */                __um(DefaultValue);                                         // 0x00A8   (0x0010)  
	SDK_UNDEFINED(16,385) /* FString */                __um(AutogeneratedDefaultValue);                            // 0x00B8   (0x0010)  
	class UObject*                                     DefaultObject;                                              // 0x00C8   (0x0008)  
	SDK_UNDEFINED(24,386) /* FText */                  __um(DefaultTextValue);                                     // 0x00D0   (0x0018)  
	TArray<class UEdGraphPin_Deprecated*>              LinkedTo;                                                   // 0x00E8   (0x0010)  
	TArray<class UEdGraphPin_Deprecated*>              SubPins;                                                    // 0x00F8   (0x0010)  
	class UEdGraphPin_Deprecated*                      ParentPin;                                                  // 0x0108   (0x0008)  
	class UEdGraphPin_Deprecated*                      ReferencePassThroughConnection;                             // 0x0110   (0x0008)  
};

/// Class /Script/Engine.EdGraphSchema
/// Size: 0x0000 (0x000028 - 0x000028)
class UEdGraphSchema : public UObject
{ 
public:
};

/// Class /Script/Engine.Emitter
/// Size: 0x0050 (0x000220 - 0x000270)
class AEmitter : public AActor
{ 
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                    // 0x0220   (0x0008)  
	bool                                               bDestroyOnSystemFinish : 1;                                 // 0x0228:0 (0x0001)  
	bool                                               bPostUpdateTickGroup : 1;                                   // 0x0228:1 (0x0001)  
	bool                                               bCurrentlyActive : 1;                                       // 0x0228:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0229   (0x0007)  MISSED
	SDK_UNDEFINED(16,387) /* FMulticastInlineDelegate */ __um(OnParticleSpawn);                                    // 0x0230   (0x0010)  
	SDK_UNDEFINED(16,388) /* FMulticastInlineDelegate */ __um(OnParticleBurst);                                    // 0x0240   (0x0010)  
	SDK_UNDEFINED(16,389) /* FMulticastInlineDelegate */ __um(OnParticleDeath);                                    // 0x0250   (0x0010)  
	SDK_UNDEFINED(16,390) /* FMulticastInlineDelegate */ __um(OnParticleCollide);                                  // 0x0260   (0x0010)  


	/// Functions
	// Function /Script/Engine.Emitter.ToggleActive
	// void ToggleActive();                                                                                                  // [0x2ed9730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetVectorParameter
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                          // [0x2ed9660] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetTemplate
	// void SetTemplate(class UParticleSystem* NewTemplate);                                                                 // [0x2ed95d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetMaterialParameter
	// void SetMaterialParameter(FName ParameterName, class UMaterialInterface* Param);                                      // [0x2ed9510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetFloatParameter
	// void SetFloatParameter(FName ParameterName, float Param);                                                             // [0x2ed9440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetColorParameter
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                      // [0x2ed9370] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetActorParameter
	// void SetActorParameter(FName ParameterName, class AActor* Param);                                                     // [0x2ed92b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.OnRep_bCurrentlyActive
	// void OnRep_bCurrentlyActive();                                                                                        // [0xe3d050] Native|Public        
	// Function /Script/Engine.Emitter.OnParticleSystemFinished
	// void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);                                     // [0x7e0040] Native|Public        
	// Function /Script/Engine.Emitter.IsActive
	// bool IsActive();                                                                                                      // [0x2ed9280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Emitter.Deactivate
	// void Deactivate();                                                                                                    // [0x2ed9260] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.Activate
	// void Activate();                                                                                                      // [0x2ed9240] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.EmitterCameraLensEffectBase
/// Size: 0x0070 (0x000270 - 0x0002E0)
class AEmitterCameraLensEffectBase : public AEmitter
{ 
public:
	class UParticleSystem*                             PS_CameraEffect;                                            // 0x0270   (0x0008)  
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                           // 0x0278   (0x0008)  
	class APlayerCameraManager*                        BaseCamera;                                                 // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0288   (0x0008)  MISSED
	FTransform                                         RelativeTransform;                                          // 0x0290   (0x0030)  
	float                                              BaseFOV;                                                    // 0x02C0   (0x0004)  
	bool                                               bAllowMultipleInstances : 1;                                // 0x02C4:0 (0x0001)  
	bool                                               bResetWhenRetriggered : 1;                                  // 0x02C4:1 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x02C5   (0x0003)  MISSED
	TArray<class UClass*>                              EmittersToTreatAsSame;                                      // 0x02C8   (0x0010)  
	float                                              DistFromCamera;                                             // 0x02D8   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02DC   (0x0004)  MISSED
};

/// Class /Script/Engine.ViewModeUtils
/// Size: 0x0000 (0x000028 - 0x000028)
class UViewModeUtils : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineBaseTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineBaseTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineHandlerComponentFactory
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{ 
public:
};

/// Class /Script/Engine.LocalMessage
/// Size: 0x0000 (0x000028 - 0x000028)
class ULocalMessage : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineMessage
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UEngineMessage : public ULocalMessage
{ 
public:
	SDK_UNDEFINED(16,391) /* FString */                __um(FailedPlaceMessage);                                   // 0x0028   (0x0010)  
	SDK_UNDEFINED(16,392) /* FString */                __um(MaxedOutMessage);                                      // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,393) /* FString */                __um(EnteredMessage);                                       // 0x0048   (0x0010)  
	SDK_UNDEFINED(16,394) /* FString */                __um(LeftMessage);                                          // 0x0058   (0x0010)  
	SDK_UNDEFINED(16,395) /* FString */                __um(GlobalNameChange);                                     // 0x0068   (0x0010)  
	SDK_UNDEFINED(16,396) /* FString */                __um(SpecEnteredMessage);                                   // 0x0078   (0x0010)  
	SDK_UNDEFINED(16,397) /* FString */                __um(NewPlayerMessage);                                     // 0x0088   (0x0010)  
	SDK_UNDEFINED(16,398) /* FString */                __um(NewSpecMessage);                                       // 0x0098   (0x0010)  
};

/// Class /Script/Engine.EngineTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.ExponentialHeightFog
/// Size: 0x0010 (0x000220 - 0x000230)
class AExponentialHeightFog : public AInfo
{ 
public:
	class UExponentialHeightFogComponent*              Component;                                                  // 0x0220   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x0228:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0229   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.ExponentialHeightFog.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                // [0xe92750] Native|Public        
};

/// Struct /Script/Engine.ExponentialHeightFogData
/// Size: 0x000C (0x000000 - 0x00000C)
struct FExponentialHeightFogData
{ 
	float                                              FogDensity;                                                 // 0x0000   (0x0004)  
	float                                              FogHeightFalloff;                                           // 0x0004   (0x0004)  
	float                                              FogHeightOffset;                                            // 0x0008   (0x0004)  
};

/// Class /Script/Engine.ExponentialHeightFogComponent
/// Size: 0x00A0 (0x0001F0 - 0x000290)
class UExponentialHeightFogComponent : public USceneComponent
{ 
public:
	float                                              FogDensity;                                                 // 0x01F0   (0x0004)  
	float                                              FogHeightFalloff;                                           // 0x01F4   (0x0004)  
	FExponentialHeightFogData                          SecondFogData;                                              // 0x01F8   (0x000C)  
	FLinearColor                                       FogInscatteringColor;                                       // 0x0204   (0x0010)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0214   (0x0004)  MISSED
	class UTextureCube*                                InscatteringColorCubemap;                                   // 0x0218   (0x0008)  
	float                                              InscatteringColorCubemapAngle;                              // 0x0220   (0x0004)  
	FLinearColor                                       InscatteringTextureTint;                                    // 0x0224   (0x0010)  
	float                                              FullyDirectionalInscatteringColorDistance;                  // 0x0234   (0x0004)  
	float                                              NonDirectionalInscatteringColorDistance;                    // 0x0238   (0x0004)  
	float                                              DirectionalInscatteringExponent;                            // 0x023C   (0x0004)  
	float                                              DirectionalInscatteringStartDistance;                       // 0x0240   (0x0004)  
	FLinearColor                                       DirectionalInscatteringColor;                               // 0x0244   (0x0010)  
	float                                              FogMaxOpacity;                                              // 0x0254   (0x0004)  
	float                                              StartDistance;                                              // 0x0258   (0x0004)  
	float                                              FogCutoffDistance;                                          // 0x025C   (0x0004)  
	bool                                               bEnableVolumetricFog;                                       // 0x0260   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0261   (0x0003)  MISSED
	float                                              VolumetricFogScatteringDistribution;                        // 0x0264   (0x0004)  
	FColor                                             VolumetricFogAlbedo;                                        // 0x0268   (0x0004)  
	FLinearColor                                       VolumetricFogEmissive;                                      // 0x026C   (0x0010)  
	float                                              VolumetricFogExtinctionScale;                               // 0x027C   (0x0004)  
	float                                              VolumetricFogDistance;                                      // 0x0280   (0x0004)  
	float                                              VolumetricFogStaticLightingScatteringIntensity;             // 0x0284   (0x0004)  
	bool                                               bOverrideLightColorsWithFogInscatteringColors;              // 0x0288   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0289   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
	// void SetVolumetricFogScatteringDistribution(float NewValue);                                                          // [0x2ee45c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
	// void SetVolumetricFogExtinctionScale(float NewValue);                                                                 // [0x2ee4540] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
	// void SetVolumetricFogEmissive(FLinearColor NewValue);                                                                 // [0x2ee44c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
	// void SetVolumetricFogDistance(float NewValue);                                                                        // [0x2ee4440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
	// void SetVolumetricFogAlbedo(FColor NewValue);                                                                         // [0x2ee43d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFog
	// void SetVolumetricFog(bool bNewValue);                                                                                // [0x2ee4340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetStartDistance
	// void SetStartDistance(float value);                                                                                   // [0x2ee42c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
	// void SetNonDirectionalInscatteringColorDistance(float value);                                                         // [0x2ee4240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
	// void SetInscatteringTextureTint(FLinearColor value);                                                                  // [0x2ee4140] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
	// void SetInscatteringColorCubemapAngle(float value);                                                                   // [0x2ee40c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
	// void SetInscatteringColorCubemap(class UTextureCube* value);                                                          // [0x2ee4040] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
	// void SetFullyDirectionalInscatteringColorDistance(float value);                                                       // [0x2ee3fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
	// void SetFogMaxOpacity(float value);                                                                                   // [0x2ee3ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
	// void SetFogInscatteringColor(FLinearColor value);                                                                     // [0x2ee3e40] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
	// void SetFogHeightFalloff(float value);                                                                                // [0x2ea9040] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogDensity
	// void SetFogDensity(float value);                                                                                      // [0x2ea9820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
	// void SetFogCutoffDistance(float value);                                                                               // [0x2ee3dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
	// void SetDirectionalInscatteringStartDistance(float value);                                                            // [0x2ee3d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
	// void SetDirectionalInscatteringExponent(float value);                                                                 // [0x2ee3cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
	// void SetDirectionalInscatteringColor(FLinearColor value);                                                             // [0x2ee3c40] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Exporter
/// Size: 0x0050 (0x000028 - 0x000078)
class UExporter : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UClass*                                      SupportedClass;                                             // 0x0028   (0x0008)  
	class UObject*                                     ExportRootScope;                                            // 0x0030   (0x0008)  
	SDK_UNDEFINED(16,399) /* TArray<FString> */        __um(FormatExtension);                                      // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,400) /* TArray<FString> */        __um(FormatDescription);                                    // 0x0048   (0x0010)  
	int32_t                                            PreferredFormatIndex;                                       // 0x0058   (0x0004)  
	int32_t                                            TextIndent;                                                 // 0x005C   (0x0004)  
	bool                                               bText : 1;                                                  // 0x0060:0 (0x0001)  
	bool                                               bSelectedOnly : 1;                                          // 0x0060:1 (0x0001)  
	bool                                               bForceFileOperations : 1;                                   // 0x0060:2 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0061   (0x0007)  MISSED
	class UAssetExportTask*                            ExportTask;                                                 // 0x0068   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0070   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.Exporter.ScriptRunAssetExportTask
	// bool ScriptRunAssetExportTask(class UAssetExportTask* task);                                                          // [0x15dd8c0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Exporter.RunAssetExportTasks
	// bool RunAssetExportTasks(TArray<UAssetExportTask*>& ExportTasks);                                                     // [0x2ee3b90] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.Exporter.RunAssetExportTask
	// bool RunAssetExportTask(class UAssetExportTask* task);                                                                // [0xe55fd0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.FloatingPawnMovement
/// Size: 0x0018 (0x000138 - 0x000150)
class UFloatingPawnMovement : public UPawnMovementComponent
{ 
public:
	float                                              MaxSpeed;                                                   // 0x0138   (0x0004)  
	float                                              Acceleration;                                               // 0x013C   (0x0004)  
	float                                              Deceleration;                                               // 0x0140   (0x0004)  
	float                                              TurningBoost;                                               // 0x0144   (0x0004)  
	bool                                               bPositionCorrected : 1;                                     // 0x0148:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0149   (0x0007)  MISSED
};

/// Struct /Script/Engine.FontCharacter
/// Size: 0x0018 (0x000000 - 0x000018)
struct FFontCharacter
{ 
	int32_t                                            StartU;                                                     // 0x0000   (0x0004)  
	int32_t                                            StartV;                                                     // 0x0004   (0x0004)  
	int32_t                                            USize;                                                      // 0x0008   (0x0004)  
	int32_t                                            VSize;                                                      // 0x000C   (0x0004)  
	char                                               TextureIndex;                                               // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            VerticalOffset;                                             // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.FontImportOptionsData
/// Size: 0x00B0 (0x000000 - 0x0000B0)
struct FFontImportOptionsData
{ 
	SDK_UNDEFINED(16,401) /* FString */                __um(FontName);                                             // 0x0000   (0x0010)  
	float                                              Height;                                                     // 0x0010   (0x0004)  
	bool                                               bEnableAntialiasing : 1;                                    // 0x0014:0 (0x0001)  
	bool                                               bEnableBold : 1;                                            // 0x0014:1 (0x0001)  
	bool                                               bEnableItalic : 1;                                          // 0x0014:2 (0x0001)  
	bool                                               bEnableUnderline : 1;                                       // 0x0014:3 (0x0001)  
	bool                                               bAlphaOnly : 1;                                             // 0x0014:4 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0015   (0x0003)  MISSED
	SDK_UNDEFINED(1,402) /* TEnumAsByte<EFontImportCharacterSet> */ __um(CharacterSet);                            // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0019   (0x0007)  MISSED
	SDK_UNDEFINED(16,403) /* FString */                __um(Chars);                                                // 0x0020   (0x0010)  
	SDK_UNDEFINED(16,404) /* FString */                __um(UnicodeRange);                                         // 0x0030   (0x0010)  
	SDK_UNDEFINED(16,405) /* FString */                __um(CharsFilePath);                                        // 0x0040   (0x0010)  
	SDK_UNDEFINED(16,406) /* FString */                __um(CharsFileWildcard);                                    // 0x0050   (0x0010)  
	bool                                               ReorderChineseCharacters;                                   // 0x0060   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	bool                                               bCreatePrintableOnly : 1;                                   // 0x0064:0 (0x0001)  
	bool                                               bIncludeASCIIRange : 1;                                     // 0x0064:1 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x0065   (0x0003)  MISSED
	FLinearColor                                       ForegroundColor;                                            // 0x0068   (0x0010)  
	bool                                               bEnableDropShadow : 1;                                      // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData04_4[0x3];                                       // 0x0079   (0x0003)  MISSED
	int32_t                                            TexturePageWidth;                                           // 0x007C   (0x0004)  
	int32_t                                            TexturePageMaxHeight;                                       // 0x0080   (0x0004)  
	int32_t                                            XPadding;                                                   // 0x0084   (0x0004)  
	int32_t                                            YPadding;                                                   // 0x0088   (0x0004)  
	int32_t                                            ExtendBoxTop;                                               // 0x008C   (0x0004)  
	int32_t                                            ExtendBoxBottom;                                            // 0x0090   (0x0004)  
	int32_t                                            ExtendBoxRight;                                             // 0x0094   (0x0004)  
	int32_t                                            ExtendBoxLeft;                                              // 0x0098   (0x0004)  
	bool                                               bEnableLegacyMode : 1;                                      // 0x009C:0 (0x0001)  
	unsigned char                                      UnknownData05_4[0x3];                                       // 0x009D   (0x0003)  MISSED
	int32_t                                            Kerning;                                                    // 0x00A0   (0x0004)  
	bool                                               bUseDistanceFieldAlpha : 1;                                 // 0x00A4:0 (0x0001)  
	unsigned char                                      UnknownData06_4[0x3];                                       // 0x00A5   (0x0003)  MISSED
	int32_t                                            DistanceFieldScaleFactor;                                   // 0x00A8   (0x0004)  
	float                                              DistanceFieldScanRadiusScale;                               // 0x00AC   (0x0004)  
};

/// Class /Script/Engine.Font
/// Size: 0x01A8 (0x000028 - 0x0001D0)
class UFont : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	EFontCacheType                                     FontCacheType;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<FFontCharacter>                             Characters;                                                 // 0x0038   (0x0010)  
	TArray<class UTexture2D*>                          Textures;                                                   // 0x0048   (0x0010)  
	int32_t                                            IsRemapped;                                                 // 0x0058   (0x0004)  
	float                                              EmScale;                                                    // 0x005C   (0x0004)  
	float                                              Ascent;                                                     // 0x0060   (0x0004)  
	float                                              Descent;                                                    // 0x0064   (0x0004)  
	float                                              Leading;                                                    // 0x0068   (0x0004)  
	int32_t                                            Kerning;                                                    // 0x006C   (0x0004)  
	FFontImportOptionsData                             ImportOptions;                                              // 0x0070   (0x00B0)  
	int32_t                                            NumCharacters;                                              // 0x0120   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0124   (0x0004)  MISSED
	TArray<int32_t>                                    MaxCharHeight;                                              // 0x0128   (0x0010)  
	float                                              ScalingFactor;                                              // 0x0138   (0x0004)  
	int32_t                                            LegacyFontSize;                                             // 0x013C   (0x0004)  
	FName                                              LegacyFontName;                                             // 0x0140   (0x0008)  
	FCompositeFont                                     CompositeFont;                                              // 0x0148   (0x0038)  
	unsigned char                                      UnknownData03_6[0x50];                                      // 0x0180   (0x0050)  MISSED
};

/// Class /Script/Engine.FontFace
/// Size: 0x0030 (0x000028 - 0x000058)
class UFontFace : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	SDK_UNDEFINED(16,407) /* FString */                __um(SourceFilename);                                       // 0x0030   (0x0010)  
	EFontHinting                                       Hinting;                                                    // 0x0040   (0x0001)  
	EFontLoadingPolicy                                 LoadingPolicy;                                              // 0x0041   (0x0001)  
	EFontLayoutMethod                                  LayoutMethod;                                               // 0x0042   (0x0001)  
	unsigned char                                      UnknownData01_6[0x15];                                      // 0x0043   (0x0015)  MISSED
};

/// Class /Script/Engine.FontImportOptions
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UFontImportOptions : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FFontImportOptionsData                             Data;                                                       // 0x0028   (0x00B0)  
};

/// Struct /Script/Engine.ForceFeedbackAttenuationSettings
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
struct FForceFeedbackAttenuationSettings : FBaseAttenuationSettings
{ 
};

/// Class /Script/Engine.ForceFeedbackAttenuation
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UForceFeedbackAttenuation : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FForceFeedbackAttenuationSettings                  Attenuation;                                                // 0x0028   (0x00B0)  
};

/// Class /Script/Engine.ForceFeedbackComponent
/// Size: 0x00E0 (0x0001F0 - 0x0002D0)
class UForceFeedbackComponent : public USceneComponent
{ 
public:
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                        // 0x01F0   (0x0008)  
	bool                                               bAutoDestroy : 1;                                           // 0x01F8:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x01F8:1 (0x0001)  
	bool                                               bLooping : 1;                                               // 0x01F8:2 (0x0001)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x01F8:3 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x01F8:4 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x01F9   (0x0003)  MISSED
	float                                              IntensityMultiplier;                                        // 0x01FC   (0x0004)  
	class UForceFeedbackAttenuation*                   AttenuationSettings;                                        // 0x0200   (0x0008)  
	FForceFeedbackAttenuationSettings                  AttenuationOverrides;                                       // 0x0208   (0x00B0)  
	SDK_UNDEFINED(16,408) /* FMulticastInlineDelegate */ __um(OnForceFeedbackFinished);                            // 0x02B8   (0x0010)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x02C8   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.ForceFeedbackComponent.Stop
	// void Stop();                                                                                                          // [0xa2f460] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.SetIntensityMultiplier
	// void SetIntensityMultiplier(float NewIntensityMultiplier);                                                            // [0x2ee41c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.SetForceFeedbackEffect
	// void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);                                      // [0x2ee3f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.Play
	// void Play(float StartTime);                                                                                           // [0x2ebc660] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
	// bool BP_GetAttenuationSettingsToApply(FForceFeedbackAttenuationSettings& OutAttenuationSettings);                     // [0x2ee3970] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ForceFeedbackComponent.AdjustAttenuation
	// void AdjustAttenuation(FForceFeedbackAttenuationSettings& InAttenuationSettings);                                     // [0x2ee3870] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.ForceFeedbackChannelDetails
/// Size: 0x0090 (0x000000 - 0x000090)
struct FForceFeedbackChannelDetails
{ 
	bool                                               bAffectsLeftLarge : 1;                                      // 0x0000:0 (0x0001)  
	bool                                               bAffectsLeftSmall : 1;                                      // 0x0000:1 (0x0001)  
	bool                                               bAffectsRightLarge : 1;                                     // 0x0000:2 (0x0001)  
	bool                                               bAffectsRightSmall : 1;                                     // 0x0000:3 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0001   (0x0007)  MISSED
	FRuntimeFloatCurve                                 Curve;                                                      // 0x0008   (0x0088)  
};

/// Class /Script/Engine.ForceFeedbackEffect
/// Size: 0x0020 (0x000028 - 0x000048)
class UForceFeedbackEffect : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FForceFeedbackChannelDetails>               ChannelDetails;                                             // 0x0028   (0x0010)  
	float                                              Duration;                                                   // 0x0038   (0x0004)  
	float                                              DurationScale;                                              // 0x003C   (0x0004)  
	float                                              ValueScale;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.GameEngine
/// Size: 0x0050 (0x000DE8 - 0x000E38)
class UGameEngine : public UEngine
{ 
public:
	float                                              MaxDeltaTime;                                               // 0x0DE8   (0x0004)  
	float                                              ServerFlushLogInterval;                                     // 0x0DEC   (0x0004)  
	class UGameInstance*                               GameInstance;                                               // 0x0DF0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x40];                                      // 0x0DF8   (0x0040)  MISSED
};

/// Class /Script/Engine.GameInstanceSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UGameInstanceSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.GameNetworkManager
/// Size: 0x00B0 (0x000220 - 0x0002D0)
class AGameNetworkManager : public AInfo
{ 
public:
	float                                              BadPacketLossThreshold;                                     // 0x0220   (0x0004)  
	float                                              SeverePacketLossThreshold;                                  // 0x0224   (0x0004)  
	int32_t                                            BadPingThreshold;                                           // 0x0228   (0x0004)  
	int32_t                                            SeverePingThreshold;                                        // 0x022C   (0x0004)  
	int32_t                                            AdjustedNetSpeed;                                           // 0x0230   (0x0004)  
	float                                              LastNetSpeedUpdateTime;                                     // 0x0234   (0x0004)  
	int32_t                                            TotalNetBandwidth;                                          // 0x0238   (0x0004)  
	int32_t                                            MinDynamicBandwidth;                                        // 0x023C   (0x0004)  
	int32_t                                            MaxDynamicBandwidth;                                        // 0x0240   (0x0004)  
	bool                                               bIsStandbyCheckingEnabled : 1;                              // 0x0244:0 (0x0001)  
	bool                                               bHasStandbyCheatTriggered : 1;                              // 0x0244:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0245   (0x0003)  MISSED
	float                                              StandbyRxCheatTime;                                         // 0x0248   (0x0004)  
	float                                              StandbyTxCheatTime;                                         // 0x024C   (0x0004)  
	float                                              PercentMissingForRxStandby;                                 // 0x0250   (0x0004)  
	float                                              PercentMissingForTxStandby;                                 // 0x0254   (0x0004)  
	float                                              PercentForBadPing;                                          // 0x0258   (0x0004)  
	float                                              JoinInProgressStandbyWaitTime;                              // 0x025C   (0x0004)  
	float                                              MoveRepSize;                                                // 0x0260   (0x0004)  
	float                                              MAXPOSITIONERRORSQUARED;                                    // 0x0264   (0x0004)  
	float                                              MAXNEARZEROVELOCITYSQUARED;                                 // 0x0268   (0x0004)  
	float                                              CLIENTADJUSTUPDATECOST;                                     // 0x026C   (0x0004)  
	float                                              MAXCLIENTUPDATEINTERVAL;                                    // 0x0270   (0x0004)  
	float                                              MaxClientForcedUpdateDuration;                              // 0x0274   (0x0004)  
	float                                              ServerForcedUpdateHitchThreshold;                           // 0x0278   (0x0004)  
	float                                              ServerForcedUpdateHitchCooldown;                            // 0x027C   (0x0004)  
	float                                              MaxMoveDeltaTime;                                           // 0x0280   (0x0004)  
	float                                              MaxClientSmoothingDeltaTime;                                // 0x0284   (0x0004)  
	float                                              ClientNetSendMoveDeltaTime;                                 // 0x0288   (0x0004)  
	float                                              ClientNetSendMoveDeltaTimeThrottled;                        // 0x028C   (0x0004)  
	float                                              ClientNetSendMoveDeltaTimeStationary;                       // 0x0290   (0x0004)  
	int32_t                                            ClientNetSendMoveThrottleAtNetSpeed;                        // 0x0294   (0x0004)  
	int32_t                                            ClientNetSendMoveThrottleOverPlayerCount;                   // 0x0298   (0x0004)  
	bool                                               ClientAuthorativePosition;                                  // 0x029C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x029D   (0x0003)  MISSED
	float                                              ClientErrorUpdateRateLimit;                                 // 0x02A0   (0x0004)  
	float                                              ClientNetCamUpdateDeltaTime;                                // 0x02A4   (0x0004)  
	float                                              ClientNetCamUpdatePositionLimit;                            // 0x02A8   (0x0004)  
	bool                                               bMovementTimeDiscrepancyDetection;                          // 0x02AC   (0x0001)  
	bool                                               bMovementTimeDiscrepancyResolution;                         // 0x02AD   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x02AE   (0x0002)  MISSED
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                       // 0x02B0   (0x0004)  
	float                                              MovementTimeDiscrepancyMinTimeMargin;                       // 0x02B4   (0x0004)  
	float                                              MovementTimeDiscrepancyResolutionRate;                      // 0x02B8   (0x0004)  
	float                                              MovementTimeDiscrepancyDriftAllowance;                      // 0x02BC   (0x0004)  
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution;   // 0x02C0   (0x0001)  
	bool                                               bUseDistanceBasedRelevancy;                                 // 0x02C1   (0x0001)  
	unsigned char                                      UnknownData03_6[0xE];                                       // 0x02C2   (0x000E)  MISSED
};

/// Class /Script/Engine.GameplayStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UGameplayStatics : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.GameplayStatics.UnloadStreamLevel
	// void UnloadStreamLevel(class UObject* WorldContextObject, FName LevelName, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // [0x2ef2810] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc
	// bool SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector StartPos, FVector EndPos, float OverrideGravityZ, float ArcParam); // [0x2ef2630] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSoundAttached
	// class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // [0x2ef2280] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSoundAtLocation
	// class UAudioComponent* SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // [0x2ef1fb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSound2D
	// class UAudioComponent* SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // [0x2ef1d80] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnObject
	// class UObject* SpawnObject(class UClass* ObjectClass, class UObject* Outer);                                          // [0x2ef1cc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnForceFeedbackAttached
	// class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x2ef1960] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnForceFeedbackAtLocation
	// class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, FVector Location, FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x2ef16d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnEmitterAttached
	// class UParticleSystemComponent* SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate); // [0x2ef13f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnEmitterAtLocation
	// class UParticleSystemComponent* SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // [0x2ef1190] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogueAttached
	// class UAudioComponent* SpawnDialogueAttached(class UDialogueWave* Dialogue, FDialogueContext& Context, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x2ef0dd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogueAtLocation
	// class UAudioComponent* SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x2ef0ae0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogue2D
	// class UAudioComponent* SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // [0x2ef08d0] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDecalAttached
	// class UDecalComponent* SpawnDecalAttached(class UMaterialInterface* DecalMaterial, FVector DecalSize, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan); // [0x2ef0480] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDecalAtLocation
	// class UDecalComponent* SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, FVector DecalSize, FVector Location, FRotator Rotation, float LifeSpan); // [0x2ef02a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetWorldOriginLocation
	// void SetWorldOriginLocation(class UObject* WorldContextObject, FIntVector NewLocation);                               // [0x2ef0140] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetViewportMouseCaptureMode
	// void SetViewportMouseCaptureMode(class UObject* WorldContextObject, EMouseCaptureMode MouseCaptureMode);              // [0x2ef0090] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSubtitlesEnabled
	// void SetSubtitlesEnabled(bool bEnabled);                                                                              // [0x2ef0010] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSoundMixClassOverride
	// void SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // [0x2eefe20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSoundClassDistanceScale
	// void SetSoundClassDistanceScale(class UObject* WorldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec); // [0x2eefcf0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetPlayerControllerID
	// void SetPlayerControllerID(class APlayerController* Player, int32_t ControllerId);                                    // [0x2eefc40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetMaxAudioChannelsScaled
	// void SetMaxAudioChannelsScaled(class UObject* WorldContextObject, float MaxChannelCountScale);                        // [0x2eefb80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalTimeDilation
	// void SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);                                    // [0x2eefac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalPitchModulation
	// void SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec);               // [0x2eef9d0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalListenerFocusParameters
	// void SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // [0x2eef750] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGamePaused
	// bool SetGamePaused(class UObject* WorldContextObject, bool bPaused);                                                  // [0x2eef690] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetForceDisableSplitscreen
	// void SetForceDisableSplitscreen(class UObject* WorldContextObject, bool bDisable);                                    // [0x2eef5d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetEnableWorldRendering
	// void SetEnableWorldRendering(class UObject* WorldContextObject, bool bEnable);                                        // [0x2eef510] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetBaseSoundMix
	// void SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);                                 // [0x2eef460] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SaveGameToSlot
	// bool SaveGameToSlot(class USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex);                            // [0x2eef230] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.RemovePlayer
	// void RemovePlayer(class APlayerController* Player, bool bDestroyPawn);                                                // [0x2eeee90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.RebaseZeroOriginOntoLocal
	// FVector RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, FVector WorldLocation);                          // [0x2eeedb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.RebaseLocalOriginOntoZero
	// FVector RebaseLocalOriginOntoZero(class UObject* WorldContextObject, FVector WorldLocation);                          // [0x2eeecd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.PushSoundMixModifier
	// void PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);                    // [0x2eeebc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ProjectWorldToScreen
	// bool ProjectWorldToScreen(class APlayerController* Player, FVector& WorldPosition, FVector2D& ScreenPosition, bool bPlayerViewportRelative); // [0x2eeea70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.PrimeSound
	// void PrimeSound(class USoundBase* InSound);                                                                           // [0x2eeea00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PopSoundMixModifier
	// void PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);                     // [0x2eee950] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayWorldCameraShake
	// void PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // [0x2eee6a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlaySoundAtLocation
	// void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor); // [0x2eee3d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlaySound2D
	// void PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor); // [0x2eee1e0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayDialogueAtLocation
	// void PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings); // [0x2eedf30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayDialogue2D
	// void PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // [0x2eedd60] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ParseOption
	// FString ParseOption(FString Options, FString Key);                                                                    // [0x2eedbe0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.OpenLevel
	// void OpenLevel(class UObject* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);                  // [0x2eeda50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.MakeHitResult
	// FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, FVector Location, FVector ImpactPoint, FVector Normal, FVector ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, FName HitBoneName, int32_t HitItem, int32_t FaceIndex, FVector TraceStart, FVector TraceEnd); // [0x2eed4a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.LoadStreamLevel
	// void LoadStreamLevel(class UObject* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // [0x2eed2f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.LoadGameFromSlot
	// class USaveGame* LoadGameFromSlot(FString SlotName, int32_t UserIndex);                                               // [0x2eed210] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.IsSplitscreenForceDisabled
	// bool IsSplitscreenForceDisabled(class UObject* WorldContextObject);                                                   // [0x2eed0a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.IsGamePaused
	// bool IsGamePaused(class UObject* WorldContextObject);                                                                 // [0x2eed020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.HasOption
	// bool HasOption(FString Options, FString InKey);                                                                       // [0x2eece10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.HasLaunchOption
	// bool HasLaunchOption(FString OptionToCheck);                                                                          // [0x2eecd10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GrassOverlappingSphereCount
	// int32_t GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, FVector CenterPosition, float Radius); // [0x2eecb30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetWorldOriginLocation
	// FIntVector GetWorldOriginLocation(class UObject* WorldContextObject);                                                 // [0x2eeca90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetWorldDeltaSeconds
	// float GetWorldDeltaSeconds(class UObject* WorldContextObject);                                                        // [0x2eeca00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetViewProjectionMatrix
	// void GetViewProjectionMatrix(FMinimalViewInfo DesiredView, FMatrix& ViewMatrix, FMatrix& ProjectionMatrix, FMatrix& ViewProjectionMatrix); // [0x2eec670] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetViewportMouseCaptureMode
	// EMouseCaptureMode GetViewportMouseCaptureMode(class UObject* WorldContextObject);                                     // [0x2eec980] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetUnpausedTimeSeconds
	// float GetUnpausedTimeSeconds(class UObject* WorldContextObject);                                                      // [0x2eec5e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetTimeSeconds
	// float GetTimeSeconds(class UObject* WorldContextObject);                                                              // [0x2eec550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetSurfaceType
	// EPhysicalSurface GetSurfaceType(FHitResult& Hit);                                                                     // [0x2eec470] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetStreamingLevel
	// class ULevelStreaming* GetStreamingLevel(class UObject* WorldContextObject, FName PackageName);                       // [0x2eec3b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetRealTimeSeconds
	// float GetRealTimeSeconds(class UObject* WorldContextObject);                                                          // [0xe58390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerPawn
	// class APawn* GetPlayerPawn(class UObject* WorldContextObject, int32_t PlayerIndex);                                   // [0x2eec2f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerControllerID
	// int32_t GetPlayerControllerID(class APlayerController* Player);                                                       // [0x2eec270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerControllerFromID
	// class APlayerController* GetPlayerControllerFromID(class UObject* WorldContextObject, int32_t ControllerId);          // [0x2eec1b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerController
	// class APlayerController* GetPlayerController(class UObject* WorldContextObject, int32_t PlayerIndex);                 // [0x2eec0f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerCharacter
	// class ACharacter* GetPlayerCharacter(class UObject* WorldContextObject, int32_t PlayerIndex);                         // [0x2eec030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerCameraManager
	// class APlayerCameraManager* GetPlayerCameraManager(class UObject* WorldContextObject, int32_t PlayerIndex);           // [0x2eebf70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlatformName
	// FString GetPlatformName();                                                                                            // [0x2eebef0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetObjectClass
	// class UClass* GetObjectClass(class UObject* Object);                                                                  // [0x2eebe70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetMaxAudioChannelCount
	// int32_t GetMaxAudioChannelCount(class UObject* WorldContextObject);                                                   // [0x2eebd90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetKeyValue
	// void GetKeyValue(FString Pair, FString& Key, FString& value);                                                         // [0x2eebc10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetIntOption
	// int32_t GetIntOption(FString Options, FString Key, int32_t DefaultValue);                                             // [0x2eebae0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGlobalTimeDilation
	// float GetGlobalTimeDilation(class UObject* WorldContextObject);                                                       // [0x2eeba50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameState
	// class AGameStateBase* GetGameState(class UObject* WorldContextObject);                                                // [0x2eeb9d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameMode
	// class AGameModeBase* GetGameMode(class UObject* WorldContextObject);                                                  // [0x2eeb950] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameInstance
	// class UGameInstance* GetGameInstance(class UObject* WorldContextObject);                                              // [0x2eeb8d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetEnableWorldRendering
	// bool GetEnableWorldRendering(class UObject* WorldContextObject);                                                      // [0x2eeb850] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetCurrentReverbEffect
	// class UReverbEffect* GetCurrentReverbEffect(class UObject* WorldContextObject);                                       // [0x2eeb730] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetCurrentLevelName
	// FString GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);                             // [0x2eeb620] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetClosestListenerLocation
	// bool GetClosestListenerLocation(class UObject* WorldContextObject, FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, FVector& ListenerPosition); // [0x2eeb460] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAudioTimeSeconds
	// float GetAudioTimeSeconds(class UObject* WorldContextObject);                                                         // [0x2eeb3d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithTag
	// void GetAllActorsWithTag(class UObject* WorldContextObject, FName Tag, TArray<AActor*>& OutActors);                   // [0x2eeb2b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithInterface
	// void GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<AActor*>& OutActors); // [0x2eeb190] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsOfClassWithTag
	// void GetAllActorsOfClassWithTag(class UObject* WorldContextObject, class UClass* ActorClass, FName Tag, TArray<AActor*>& OutActors); // [0x2eeb040] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsOfClass
	// void GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<AActor*>& OutActors);    // [0x2eeaf20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorOfClass
	// class AActor* GetActorOfClass(class UObject* WorldContextObject, class UClass* ActorClass);                           // [0x2eeae60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorArrayBounds
	// void GetActorArrayBounds(TArray<AActor*>& Actors, bool bOnlyCollidingComponents, FVector& Center, FVector& BoxExtent); // [0x2eeacd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorArrayAverageLocation
	// FVector GetActorArrayAverageLocation(TArray<AActor*>& Actors);                                                        // [0x2eeac10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAccurateRealTime
	// void GetAccurateRealTime(class UObject* WorldContextObject, int32_t& Seconds, float& PartialSeconds);                 // [0x2eeaaf0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.FlushLevelStreaming
	// void FlushLevelStreaming(class UObject* WorldContextObject);                                                          // [0x2eeaa80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.FinishSpawningActor
	// class AActor* FinishSpawningActor(class AActor* Actor, FTransform& SpawnTransform);                                   // [0x2eea960] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.FindCollisionUV
	// bool FindCollisionUV(FHitResult& Hit, int32_t UVChannel, FVector2D& UV);                                              // [0x2eea700] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.EnableLiveStreaming
	// void EnableLiveStreaming(bool Enable);                                                                                // [0x2eea660] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DoesSaveGameExist
	// bool DoesSaveGameExist(FString SlotName, int32_t UserIndex);                                                          // [0x2eea590] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DeprojectScreenToWorld
	// bool DeprojectScreenToWorld(class APlayerController* Player, FVector2D& ScreenPosition, FVector& WorldPosition, FVector& WorldDirection); // [0x2eea420] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.DeleteGameInSlot
	// bool DeleteGameInSlot(FString SlotName, int32_t UserIndex);                                                           // [0x2eea350] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DeactivateReverbEffect
	// void DeactivateReverbEffect(class UObject* WorldContextObject, FName TagName);                                        // [0x2eea2a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreateSound2D
	// class UAudioComponent* CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // [0x2eea070] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreateSaveGameObject
	// class USaveGame* CreateSaveGameObject(class UClass* SaveGameClass);                                                   // [0x2ee9ff0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreatePlayer
	// class APlayerController* CreatePlayer(class UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // [0x2ee9f00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ClearSoundMixModifiers
	// void ClearSoundMixModifiers(class UObject* WorldContextObject);                                                       // [0x2ee9e90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ClearSoundMixClassOverride
	// void ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime); // [0x2ee9d50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CancelAsyncLoading
	// void CancelAsyncLoading();                                                                                            // [0x2ee9b70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BreakHitResult
	// void BreakHitResult(FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, FVector& Location, FVector& ImpactPoint, FVector& Normal, FVector& ImpactNormal, class UPhysicalMaterial*& PhysMat, class AActor*& HitActor, class UPrimitiveComponent*& HitComponent, FName& HitBoneName, int32_t& HitItem, int32_t& FaceIndex, FVector& TraceStart, FVector& TraceEnd); // [0x2ee9470] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
	// bool BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, FVector& TossVelocity, FVector StartLocation, FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // [0x2ee84d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel
	// bool Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // [0x2ee8f40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType
	// bool Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // [0x2ee89f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced
	// bool Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, FPredictProjectilePathParams& PredictParams, FPredictProjectilePathResult& PredictResult); // [0x2ee87c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginSpawningActorFromClass
	// class AActor* BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner); // [0x2ee82d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginSpawningActorFromBlueprint
	// class AActor* BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, FTransform& SpawnTransform, bool bNoCollisionFail); // [0x2ee8130] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
	// class AActor* BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner); // [0x2ee7f40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.AreSubtitlesEnabled
	// bool AreSubtitlesEnabled();                                                                                           // [0x2ee7f10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.AreAnyListenersWithinRange
	// bool AreAnyListenersWithinRange(class UObject* WorldContextObject, FVector& Location, float MaximumRange);            // [0x2ee7e00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyRadialDamageWithFalloff
	// bool ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // [0x2ee7a90] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyRadialDamage
	// bool ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // [0x2ee77a0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyPointDamage
	// float ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, FVector& HitFromDirection, FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass); // [0x2ee7540] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyDamage
	// float ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass); // [0x2ee73c0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ActivateReverbEffect
	// void ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime); // [0x2ee7210] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.GameSession
/// Size: 0x0018 (0x000220 - 0x000238)
class AGameSession : public AInfo
{ 
public:
	int32_t                                            MaxSpectators;                                              // 0x0220   (0x0004)  
	int32_t                                            MaxPlayers;                                                 // 0x0224   (0x0004)  
	int32_t                                            MaxPartySize;                                               // 0x0228   (0x0004)  
	char                                               MaxSplitscreensPerConnection;                               // 0x022C   (0x0001)  
	bool                                               bRequiresPushToTalk;                                        // 0x022D   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x022E   (0x0002)  MISSED
	FName                                              SessionName;                                                // 0x0230   (0x0008)  
};

/// Class /Script/Engine.SpotLight
/// Size: 0x0008 (0x000230 - 0x000238)
class ASpotLight : public ALight
{ 
public:
	class USpotLightComponent*                         SpotLightComponent;                                         // 0x0230   (0x0008)  


	/// Functions
	// Function /Script/Engine.SpotLight.SetOuterConeAngle
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                      // [0x2fe09d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SpotLight.SetInnerConeAngle
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                      // [0x2fe08d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GeneratedMeshAreaLight
/// Size: 0x0000 (0x000238 - 0x000238)
class AGeneratedMeshAreaLight : public ASpotLight
{ 
public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Base
/// Size: 0x0000 (0x000028 - 0x000028)
class UHapticFeedbackEffect_Base : public UObject
{ 
public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Buffer
/// Size: 0x0040 (0x000028 - 0x000068)
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{ 
public:
	TArray<char>                                       Amplitudes;                                                 // 0x0028   (0x0010)  
	int32_t                                            SampleRate;                                                 // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_6[0x2C];                                      // 0x003C   (0x002C)  MISSED
};

/// Struct /Script/Engine.HapticFeedbackDetails_Curve
/// Size: 0x0110 (0x000000 - 0x000110)
struct FHapticFeedbackDetails_Curve
{ 
	FRuntimeFloatCurve                                 Frequency;                                                  // 0x0000   (0x0088)  
	FRuntimeFloatCurve                                 Amplitude;                                                  // 0x0088   (0x0088)  
};

/// Class /Script/Engine.HapticFeedbackEffect_Curve
/// Size: 0x0110 (0x000028 - 0x000138)
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{ 
public:
	FHapticFeedbackDetails_Curve                       HapticDetails;                                              // 0x0028   (0x0110)  
};

/// Class /Script/Engine.HapticFeedbackEffect_SoundWave
/// Size: 0x0038 (0x000028 - 0x000060)
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{ 
public:
	class USoundWave*                                  SoundWave;                                                  // 0x0028   (0x0008)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x0030   (0x0030)  MISSED
};

/// Class /Script/Engine.HealthSnapshotBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots
	// void StopPerformanceSnapshots();                                                                                      // [0x2efb6b0] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots
	// void StartPerformanceSnapshots();                                                                                     // [0x2efb690] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot
	// void LogPerformanceSnapshot(FString SnapshotTitle, bool bResetStats);                                                 // [0x2efa830] Final|Exec|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/Engine.HLODProxyMesh
/// Size: 0x0030 (0x000000 - 0x000030)
struct FHLODProxyMesh
{ 
	SDK_UNDEFINED(28,409) /* TLazyObjectPtr<ALODActor*> */ __um(LODActor);                                         // 0x0000   (0x001C)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0020   (0x0008)  
	FName                                              Key;                                                        // 0x0028   (0x0008)  
};

/// Class /Script/Engine.HLODProxy
/// Size: 0x0010 (0x000028 - 0x000038)
class UHLODProxy : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FHLODProxyMesh>                             ProxyMeshes;                                                // 0x0028   (0x0010)  
};

/// Class /Script/Engine.ImportanceSamplingLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolFloat
	// float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed);                                                 // [0x2efb1c0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolCell3D
	// FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, FVector Cell, FVector Seed);                               // [0x2efb030] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolCell2D
	// FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, FVector2D Cell, FVector2D Seed);                         // [0x2efaef0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolFloat
	// float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue);                                          // [0x2efad40] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolCell3D
	// FVector NextSobolCell3D(int32_t Index, int32_t NumCells, FVector PreviousValue);                                      // [0x2efac20] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolCell2D
	// FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, FVector2D PreviousValue);                                  // [0x2efab20] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.MakeImportanceTexture
	// FImportanceTexture MakeImportanceTexture(class UTexture2D* Texture, TEnumAsByte<EImportanceWeight> WeightingFunc);    // [0x2efa950] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.ImportanceSample
	// void ImportanceSample(FImportanceTexture& Texture, FVector2D& Rand, int32_t Samples, float Intensity, FVector2D& SamplePosition, FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // [0x2efa540] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.BreakImportanceTexture
	// void BreakImportanceTexture(FImportanceTexture& ImportanceTexture, class UTexture2D*& Texture, TEnumAsByte<EImportanceWeight>& WeightingFunc); // [0x2ef8a80] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.ImportantToggleSettingInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UImportantToggleSettingInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.InGameAdManager
/// Size: 0x0028 (0x000038 - 0x000060)
class UInGameAdManager : public UPlatformInterfaceBase
{ 
public:
	bool                                               bShouldPauseWhileAdOpen : 1;                                // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0039   (0x0007)  MISSED
	SDK_UNDEFINED(16,410) /* TArray<FDelegateProperty> */ __um(ClickedBannerDelegates);                            // 0x0040   (0x0010)  
	SDK_UNDEFINED(16,411) /* TArray<FDelegateProperty> */ __um(ClosedAdDelegates);                                 // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.ComponentKey
/// Size: 0x0020 (0x000000 - 0x000020)
struct FComponentKey
{ 
	class UClass*                                      OwnerClass;                                                 // 0x0000   (0x0008)  
	FName                                              SCSVariableName;                                            // 0x0008   (0x0008)  
	FGuid                                              AssociatedGuid;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BlueprintComponentChangedPropertyInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FBlueprintComponentChangedPropertyInfo
{ 
	FName                                              PropertyName;                                               // 0x0000   (0x0008)  
	int32_t                                            ArrayIndex;                                                 // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	class UStruct*                                     PropertyScope;                                              // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.BlueprintCookedComponentInstancingData
/// Size: 0x0048 (0x000000 - 0x000048)
struct FBlueprintCookedComponentInstancingData
{ 
	TArray<FBlueprintComponentChangedPropertyInfo>     ChangedPropertyList;                                        // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_5[0x11];                                      // 0x0010   (0x0011)  MISSED
	bool                                               bHasValidCookedData;                                        // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_6[0x26];                                      // 0x0022   (0x0026)  MISSED
};

/// Struct /Script/Engine.ComponentOverrideRecord
/// Size: 0x0078 (0x000000 - 0x000078)
struct FComponentOverrideRecord
{ 
	class UClass*                                      ComponentClass;                                             // 0x0000   (0x0008)  
	class UActorComponent*                             ComponentTemplate;                                          // 0x0008   (0x0008)  
	FComponentKey                                      ComponentKey;                                               // 0x0010   (0x0020)  
	FBlueprintCookedComponentInstancingData            CookedComponentInstancingData;                              // 0x0030   (0x0048)  
};

/// Class /Script/Engine.InheritableComponentHandler
/// Size: 0x0020 (0x000028 - 0x000048)
class UInheritableComponentHandler : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FComponentOverrideRecord>                   Records;                                                    // 0x0028   (0x0010)  
	TArray<class UActorComponent*>                     UnnecessaryComponents;                                      // 0x0038   (0x0010)  
};

/// Class /Script/Engine.InputDelegateBinding
/// Size: 0x0000 (0x000028 - 0x000028)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
};

/// Struct /Script/Engine.BlueprintInputDelegateBinding
/// Size: 0x0004 (0x000000 - 0x000004)
struct FBlueprintInputDelegateBinding
{ 
	bool                                               bConsumeInput : 1;                                          // 0x0000:0 (0x0001)  
	bool                                               bExecuteWhenPaused : 1;                                     // 0x0000:1 (0x0001)  
	bool                                               bOverrideParentBinding : 1;                                 // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/Engine.BlueprintInputActionDelegateBinding
/// Size: 0x0014 (0x000004 - 0x000018)
struct FBlueprintInputActionDelegateBinding : FBlueprintInputDelegateBinding
{ 
	FName                                              InputActionName;                                            // 0x0004   (0x0008)  
	SDK_UNDEFINED(1,412) /* TEnumAsByte<EInputEvent> */ __um(InputKeyEvent);                                       // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x0010   (0x0008)  
};

/// Class /Script/Engine.InputActionDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputActionDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputActionDelegateBinding>       InputActionDelegateBindings;                                // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.BlueprintInputAxisDelegateBinding
/// Size: 0x0010 (0x000004 - 0x000014)
struct FBlueprintInputAxisDelegateBinding : FBlueprintInputDelegateBinding
{ 
	FName                                              InputAxisName;                                              // 0x0004   (0x0008)  
	FName                                              FunctionNameToBind;                                         // 0x000C   (0x0008)  
};

/// Class /Script/Engine.InputAxisDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputAxisDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputAxisDelegateBinding>         InputAxisDelegateBindings;                                  // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.BlueprintInputAxisKeyDelegateBinding
/// Size: 0x0024 (0x000004 - 0x000028)
struct FBlueprintInputAxisKeyDelegateBinding : FBlueprintInputDelegateBinding
{ 
	unsigned char                                      UnknownData00_3[0x4];                                       // 0x0004   (0x0004)  MISSED
	FKey                                               AxisKey;                                                    // 0x0008   (0x0018)  
	FName                                              FunctionNameToBind;                                         // 0x0020   (0x0008)  
};

/// Class /Script/Engine.InputAxisKeyDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputAxisKeyDelegateBinding>      InputAxisKeyDelegateBindings;                               // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.CachedKeyToActionInfo
/// Size: 0x0070 (0x000000 - 0x000070)
struct FCachedKeyToActionInfo
{ 
	class UPlayerInput*                                PlayerInput;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x68];                                      // 0x0008   (0x0068)  MISSED
};

/// Class /Script/Engine.InputComponent
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UInputComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x70];                                      // 0x00B0   (0x0070)  MISSED
	TArray<FCachedKeyToActionInfo>                     CachedKeyToActionInfo;                                      // 0x0120   (0x0010)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0130   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.InputComponent.WasControllerKeyJustReleased
	// bool WasControllerKeyJustReleased(FKey Key);                                                                          // [0x2f00580] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.WasControllerKeyJustPressed
	// bool WasControllerKeyJustPressed(FKey Key);                                                                           // [0x2f00580] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.IsControllerKeyDown
	// bool IsControllerKeyDown(FKey Key);                                                                                   // [0x2f00580] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetTouchState
	// void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed);               // [0x2f00400] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerVectorKeyState
	// FVector GetControllerVectorKeyState(FKey Key);                                                                        // [0x2effea0] Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerMouseDelta
	// void GetControllerMouseDelta(float& DeltaX, float& DeltaY);                                                           // [0x2effdc0] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerKeyTimeDown
	// float GetControllerKeyTimeDown(FKey Key);                                                                             // [0x2effbb0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerAnalogStickState
	// void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);     // [0x2effca0] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerAnalogKeyState
	// float GetControllerAnalogKeyState(FKey Key);                                                                          // [0x2effbb0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.BlueprintInputKeyDelegateBinding
/// Size: 0x0034 (0x000004 - 0x000038)
struct FBlueprintInputKeyDelegateBinding : FBlueprintInputDelegateBinding
{ 
	unsigned char                                      UnknownData00_3[0x4];                                       // 0x0004   (0x0004)  MISSED
	FInputChord                                        InputChord;                                                 // 0x0008   (0x0020)  
	SDK_UNDEFINED(1,413) /* TEnumAsByte<EInputEvent> */ __um(InputKeyEvent);                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x002C   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.InputKeyDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputKeyDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputKeyDelegateBinding>          InputKeyDelegateBindings;                                   // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.InputAxisProperties
/// Size: 0x0010 (0x000000 - 0x000010)
struct FInputAxisProperties
{ 
	float                                              DeadZone;                                                   // 0x0000   (0x0004)  
	float                                              Sensitivity;                                                // 0x0004   (0x0004)  
	float                                              Exponent;                                                   // 0x0008   (0x0004)  
	bool                                               bInvert : 1;                                                // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.InputAxisConfigEntry
/// Size: 0x0018 (0x000000 - 0x000018)
struct FInputAxisConfigEntry
{ 
	FName                                              AxisKeyName;                                                // 0x0000   (0x0008)  
	FInputAxisProperties                               AxisProperties;                                             // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.InputActionKeyMapping
/// Size: 0x0028 (0x000000 - 0x000028)
struct FInputActionKeyMapping
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x0008)  
	bool                                               bShift : 1;                                                 // 0x0008:0 (0x0001)  
	bool                                               bCtrl : 1;                                                  // 0x0008:1 (0x0001)  
	bool                                               bAlt : 1;                                                   // 0x0008:2 (0x0001)  
	bool                                               bCmd : 1;                                                   // 0x0008:3 (0x0001)  
	bool                                               bGamepadLeftTrigger : 1;                                    // 0x0008:4 (0x0001)  
	bool                                               bGamepadRightTrigger : 1;                                   // 0x0008:5 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0009   (0x0007)  MISSED
	FKey                                               Key;                                                        // 0x0010   (0x0018)  
};

/// Struct /Script/Engine.InputAxisKeyMapping
/// Size: 0x0028 (0x000000 - 0x000028)
struct FInputAxisKeyMapping
{ 
	FName                                              AxisName;                                                   // 0x0000   (0x0008)  
	float                                              Scale;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	FKey                                               Key;                                                        // 0x0010   (0x0018)  
};

/// Struct /Script/Engine.InputActionSpeechMapping
/// Size: 0x0010 (0x000000 - 0x000010)
struct FInputActionSpeechMapping
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x0008)  
	FName                                              SpeechKeyword;                                              // 0x0008   (0x0008)  
};

/// Class /Script/Engine.InputSettings
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class UInputSettings : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FInputAxisConfigEntry>                      AxisConfig;                                                 // 0x0028   (0x0010)  
	bool                                               bAltEnterTogglesFullscreen : 1;                             // 0x0038:0 (0x0001)  
	bool                                               bF11TogglesFullscreen : 1;                                  // 0x0038:1 (0x0001)  
	bool                                               bUseMouseForTouch : 1;                                      // 0x0038:2 (0x0001)  
	bool                                               bEnableMouseSmoothing : 1;                                  // 0x0038:3 (0x0001)  
	bool                                               bEnableFOVScaling : 1;                                      // 0x0038:4 (0x0001)  
	bool                                               bCaptureMouseOnLaunch : 1;                                  // 0x0038:5 (0x0001)  
	bool                                               bDefaultViewportMouseLock : 1;                              // 0x0038:6 (0x0001)  
	bool                                               bAlwaysShowTouchInterface : 1;                              // 0x0038:7 (0x0001)  
	bool                                               bShowConsoleOnFourFingerTap : 1;                            // 0x0039:0 (0x0001)  
	bool                                               bEnableGestureRecognizer : 1;                               // 0x0039:1 (0x0001)  
	bool                                               bUseAutocorrect;                                            // 0x003A   (0x0001)  
	unsigned char                                      UnknownData01_5[0x5];                                       // 0x003B   (0x0005)  MISSED
	SDK_UNDEFINED(16,414) /* TArray<FString> */        __um(ExcludedAutocorrectOS);                                // 0x0040   (0x0010)  
	SDK_UNDEFINED(16,415) /* TArray<FString> */        __um(ExcludedAutocorrectCultures);                          // 0x0050   (0x0010)  
	SDK_UNDEFINED(16,416) /* TArray<FString> */        __um(ExcludedAutocorrectDeviceModels);                      // 0x0060   (0x0010)  
	EMouseCaptureMode                                  DefaultViewportMouseCaptureMode;                            // 0x0070   (0x0001)  
	EMouseLockMode                                     DefaultViewportMouseLockMode;                               // 0x0071   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0072   (0x0002)  MISSED
	float                                              FOVScale;                                                   // 0x0074   (0x0004)  
	float                                              DoubleClickTime;                                            // 0x0078   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FInputActionKeyMapping>                     ActionMappings;                                             // 0x0080   (0x0010)  
	TArray<FInputAxisKeyMapping>                       AxisMappings;                                               // 0x0090   (0x0010)  
	TArray<FInputActionSpeechMapping>                  SpeechMappings;                                             // 0x00A0   (0x0010)  
	FSoftObjectPath                                    DefaultTouchInterface;                                      // 0x00B0   (0x0018)  
	FKey                                               ConsoleKey;                                                 // 0x00C8   (0x0018)  
	TArray<FKey>                                       ConsoleKeys;                                                // 0x00E0   (0x0010)  


	/// Functions
	// Function /Script/Engine.InputSettings.SaveKeyMappings
	// void SaveKeyMappings();                                                                                               // [0x2f009e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputSettings.RemoveAxisMapping
	// void RemoveAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                  // [0x2f007d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.RemoveActionMapping
	// void RemoveActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                              // [0x2f00670] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.GetInputSettings
	// class UInputSettings* GetInputSettings();                                                                             // [0x2efffa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.InputSettings.GetAxisNames
	// void GetAxisNames(TArray<FName>& AxisNames);                                                                          // [0x2effb00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetAxisMappingByName
	// void GetAxisMappingByName(FName InAxisName, TArray<FInputAxisKeyMapping>& OutMappings);                               // [0x2eff9d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetActionNames
	// void GetActionNames(TArray<FName>& ActionNames);                                                                      // [0x2eff920] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetActionMappingByName
	// void GetActionMappingByName(FName InActionName, TArray<FInputActionKeyMapping>& OutMappings);                         // [0x2eff7f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.ForceRebuildKeymaps
	// void ForceRebuildKeymaps();                                                                                           // [0x2eff7d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputSettings.AddAxisMapping
	// void AddAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                     // [0x2eff080] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.AddActionMapping
	// void AddActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                 // [0x2efef20] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.BlueprintInputTouchDelegateBinding
/// Size: 0x000C (0x000004 - 0x000010)
struct FBlueprintInputTouchDelegateBinding : FBlueprintInputDelegateBinding
{ 
	SDK_UNDEFINED(1,417) /* TEnumAsByte<EInputEvent> */ __um(InputKeyEvent);                                       // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x0008   (0x0008)  
};

/// Class /Script/Engine.InputTouchDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputTouchDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputTouchDelegateBinding>        InputTouchDelegateBindings;                                 // 0x0028   (0x0010)  
};

/// Class /Script/Engine.InputVectorAxisDelegateBinding
/// Size: 0x0000 (0x000038 - 0x000038)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{ 
public:
};

/// Class /Script/Engine.Interface_AssetUserData
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_AssetUserData : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_CollisionDataProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_CollisionDataProvider : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_PostProcessVolume
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_PostProcessVolume : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_PreviewMeshProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_PreviewMeshProvider : public UInterface
{ 
public:
};

/// Struct /Script/Engine.CurveEdEntry
/// Size: 0x0038 (0x000000 - 0x000038)
struct FCurveEdEntry
{ 
	class UObject*                                     CurveObject;                                                // 0x0000   (0x0008)  
	FColor                                             CurveColor;                                                 // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	SDK_UNDEFINED(16,418) /* FString */                __um(CurveName);                                            // 0x0010   (0x0010)  
	int32_t                                            bHideCurve;                                                 // 0x0020   (0x0004)  
	int32_t                                            bColorCurve;                                                // 0x0024   (0x0004)  
	int32_t                                            bFloatingPointColorCurve;                                   // 0x0028   (0x0004)  
	int32_t                                            bClamp;                                                     // 0x002C   (0x0004)  
	float                                              ClampLow;                                                   // 0x0030   (0x0004)  
	float                                              ClampHigh;                                                  // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.CurveEdTab
/// Size: 0x0030 (0x000000 - 0x000030)
struct FCurveEdTab
{ 
	SDK_UNDEFINED(16,419) /* FString */                __um(TabName);                                              // 0x0000   (0x0010)  
	TArray<FCurveEdEntry>                              Curves;                                                     // 0x0010   (0x0010)  
	float                                              ViewStartInput;                                             // 0x0020   (0x0004)  
	float                                              ViewEndInput;                                               // 0x0024   (0x0004)  
	float                                              ViewStartOutput;                                            // 0x0028   (0x0004)  
	float                                              ViewEndOutput;                                              // 0x002C   (0x0004)  
};

/// Class /Script/Engine.InterpCurveEdSetup
/// Size: 0x0018 (0x000028 - 0x000040)
class UInterpCurveEdSetup : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FCurveEdTab>                                Tabs;                                                       // 0x0028   (0x0010)  
	int32_t                                            ActiveTab;                                                  // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpData
/// Size: 0x0048 (0x000028 - 0x000070)
class UInterpData : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	float                                              InterpLength;                                               // 0x0028   (0x0004)  
	float                                              PathBuildTime;                                              // 0x002C   (0x0004)  
	TArray<class UInterpGroup*>                        InterpGroups;                                               // 0x0030   (0x0010)  
	class UInterpCurveEdSetup*                         CurveEdSetup;                                               // 0x0040   (0x0008)  
	float                                              EdSectionStart;                                             // 0x0048   (0x0004)  
	float                                              EdSectionEnd;                                               // 0x004C   (0x0004)  
	bool                                               bShouldBakeAndPrune : 1;                                    // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0051   (0x0007)  MISSED
	class UInterpGroupDirector*                        CachedDirectorGroup;                                        // 0x0058   (0x0008)  
	TArray<FName>                                      AllEventNames;                                              // 0x0060   (0x0010)  
};

/// Class /Script/Engine.InterpFilter
/// Size: 0x0010 (0x000028 - 0x000038)
class UInterpFilter : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(16,420) /* FString */                __um(Caption);                                              // 0x0028   (0x0010)  
};

/// Class /Script/Engine.InterpFilter_Classes
/// Size: 0x0000 (0x000038 - 0x000038)
class UInterpFilter_Classes : public UInterpFilter
{ 
public:
};

/// Class /Script/Engine.InterpFilter_Custom
/// Size: 0x0000 (0x000038 - 0x000038)
class UInterpFilter_Custom : public UInterpFilter
{ 
public:
};

/// Class /Script/Engine.InterpGroup
/// Size: 0x0028 (0x000028 - 0x000050)
class UInterpGroup : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	TArray<class UInterpTrack*>                        InterpTracks;                                               // 0x0030   (0x0010)  
	FName                                              GroupName;                                                  // 0x0040   (0x0008)  
	FColor                                             GroupColor;                                                 // 0x0048   (0x0004)  
	bool                                               bCollapsed : 1;                                             // 0x004C:0 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x004C:1 (0x0001)  
	bool                                               bIsFolder : 1;                                              // 0x004C:2 (0x0001)  
	bool                                               bIsParented : 1;                                            // 0x004C:3 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x004C:4 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpGroupCamera
/// Size: 0x0010 (0x000050 - 0x000060)
class UInterpGroupCamera : public UInterpGroup
{ 
public:
	class UCameraAnim*                                 CameraAnimInst;                                             // 0x0050   (0x0008)  
	float                                              CompressTolerance;                                          // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpGroupDirector
/// Size: 0x0000 (0x000050 - 0x000050)
class UInterpGroupDirector : public UInterpGroup
{ 
public:
};

/// Class /Script/Engine.InterpGroupInst
/// Size: 0x0020 (0x000028 - 0x000048)
class UInterpGroupInst : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UInterpGroup*                                Group;                                                      // 0x0028   (0x0008)  
	class AActor*                                      GroupActor;                                                 // 0x0030   (0x0008)  
	TArray<class UInterpTrackInst*>                    TrackInst;                                                  // 0x0038   (0x0010)  
};

/// Class /Script/Engine.InterpGroupInstCamera
/// Size: 0x0000 (0x000048 - 0x000048)
class UInterpGroupInstCamera : public UInterpGroupInst
{ 
public:
};

/// Class /Script/Engine.InterpGroupInstDirector
/// Size: 0x0000 (0x000048 - 0x000048)
class UInterpGroupInstDirector : public UInterpGroupInst
{ 
public:
};

/// Struct /Script/Engine.InterpControlPoint
/// Size: 0x001C (0x000000 - 0x00001C)
struct FInterpControlPoint
{ 
	FVector                                            PositionControlPoint;                                       // 0x0000   (0x000C)  
	bool                                               bPositionIsRelative;                                        // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0xF];                                       // 0x000D   (0x000F)  MISSED
};

/// Class /Script/Engine.InterpToMovementComponent
/// Size: 0x00A0 (0x0000F0 - 0x000190)
class UInterpToMovementComponent : public UMovementComponent
{ 
public:
	float                                              Duration;                                                   // 0x00F0   (0x0004)  
	bool                                               bPauseOnImpact : 1;                                         // 0x00F4:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x00F5   (0x0003)  MISSED
	bool                                               bSweep;                                                     // 0x00F8   (0x0001)  
	ETeleportType                                      TeleportType;                                               // 0x00F9   (0x0001)  
	EInterpToBehaviourType                             BehaviourType;                                              // 0x00FA   (0x0001)  
	bool                                               bCheckIfStillInWorld;                                       // 0x00FB   (0x0001)  
	bool                                               bForceSubStepping : 1;                                      // 0x00FC:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x00FD   (0x0003)  MISSED
	SDK_UNDEFINED(16,421) /* FMulticastInlineDelegate */ __um(OnInterpToReverse);                                  // 0x0100   (0x0010)  
	SDK_UNDEFINED(16,422) /* FMulticastInlineDelegate */ __um(OnInterpToStop);                                     // 0x0110   (0x0010)  
	SDK_UNDEFINED(16,423) /* FMulticastInlineDelegate */ __um(OnWaitBeginDelegate);                                // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,424) /* FMulticastInlineDelegate */ __um(OnWaitEndDelegate);                                  // 0x0130   (0x0010)  
	SDK_UNDEFINED(16,425) /* FMulticastInlineDelegate */ __um(OnResetDelegate);                                    // 0x0140   (0x0010)  
	float                                              MaxSimulationTimeStep;                                      // 0x0150   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x0154   (0x0004)  
	TArray<FInterpControlPoint>                        ControlPoints;                                              // 0x0158   (0x0010)  
	unsigned char                                      UnknownData02_6[0x28];                                      // 0x0168   (0x0028)  MISSED


	/// Functions
	// Function /Script/Engine.InterpToMovementComponent.StopSimulating
	// void StopSimulating(FHitResult& HitResult);                                                                           // [0x2f04100] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.RestartMovement
	// void RestartMovement(float InitialDirection);                                                                         // [0x2f04080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
	// void OnInterpToWaitEndDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                              // [0x15dd8c0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
	// void OnInterpToWaitBeginDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                            // [0x15dd8c0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
	// void OnInterpToStopDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x15dd8c0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
	// void OnInterpToReverseDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                              // [0x15dd8c0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
	// void OnInterpToResetDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                // [0x15dd8c0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.FinaliseControlPoints
	// void FinaliseControlPoints();                                                                                         // [0x2f04060] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.InterpTrack
/// Size: 0x0048 (0x000028 - 0x000070)
class UInterpTrack : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0000   (0x0038)  MISSED
	TArray<class UInterpTrack*>                        SubTracks;                                                  // 0x0038   (0x0010)  
	class UClass*                                      TrackInstClass;                                             // 0x0048   (0x0008)  
	SDK_UNDEFINED(1,426) /* TEnumAsByte<ETrackActiveCondition> */ __um(ActiveCondition);                           // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0051   (0x0007)  MISSED
	SDK_UNDEFINED(16,427) /* FString */                __um(TrackTitle);                                           // 0x0058   (0x0010)  
	bool                                               bOnePerGroup : 1;                                           // 0x0068:0 (0x0001)  
	bool                                               bDirGroupOnly : 1;                                          // 0x0068:1 (0x0001)  
	bool                                               bDisableTrack : 1;                                          // 0x0068:2 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x0068:3 (0x0001)  
	bool                                               bIsAnimControlTrack : 1;                                    // 0x0068:4 (0x0001)  
	bool                                               bSubTrackOnly : 1;                                          // 0x0068:5 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x0068:6 (0x0001)  
	bool                                               bIsRecording : 1;                                           // 0x0068:7 (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatBase
/// Size: 0x0020 (0x000070 - 0x000090)
class UInterpTrackFloatBase : public UInterpTrack
{ 
public:
	FInterpCurveFloat                                  FloatTrack;                                                 // 0x0070   (0x0018)  
	float                                              CurveTension;                                               // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimControlTrackKey
/// Size: 0x0020 (0x000000 - 0x000020)
struct FAnimControlTrackKey
{ 
	float                                              StartTime;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UAnimSequence*                               AnimSeq;                                                    // 0x0008   (0x0008)  
	float                                              AnimStartOffset;                                            // 0x0010   (0x0004)  
	float                                              AnimEndOffset;                                              // 0x0014   (0x0004)  
	float                                              AnimPlayRate;                                               // 0x0018   (0x0004)  
	bool                                               bLooping : 1;                                               // 0x001C:0 (0x0001)  
	bool                                               bReverse : 1;                                               // 0x001C:1 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackAnimControl
/// Size: 0x0020 (0x000090 - 0x0000B0)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{ 
public:
	FName                                              SlotName;                                                   // 0x0090   (0x0008)  
	TArray<FAnimControlTrackKey>                       AnimSeqs;                                                   // 0x0098   (0x0010)  
	bool                                               bSkipAnimNotifiers : 1;                                     // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackVectorBase
/// Size: 0x0020 (0x000070 - 0x000090)
class UInterpTrackVectorBase : public UInterpTrack
{ 
public:
	FInterpCurveVector                                 VectorTrack;                                                // 0x0070   (0x0018)  
	float                                              CurveTension;                                               // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackAudioMaster
/// Size: 0x0000 (0x000090 - 0x000090)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{ 
public:
};

/// Struct /Script/Engine.BoolTrackKey
/// Size: 0x0008 (0x000000 - 0x000008)
struct FBoolTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	bool                                               value : 1;                                                  // 0x0004:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackBoolProp
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackBoolProp : public UInterpTrack
{ 
public:
	TArray<FBoolTrackKey>                              BoolTrack;                                                  // 0x0070   (0x0010)  
	FName                                              PropertyName;                                               // 0x0080   (0x0008)  
};

/// Class /Script/Engine.InterpTrackColorProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Class /Script/Engine.InterpTrackColorScale
/// Size: 0x0000 (0x000090 - 0x000090)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{ 
public:
};

/// Struct /Script/Engine.DirectorTrackCut
/// Size: 0x0014 (0x000000 - 0x000014)
struct FDirectorTrackCut
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              TransitionTime;                                             // 0x0004   (0x0004)  
	FName                                              TargetCamGroup;                                             // 0x0008   (0x0008)  
	int32_t                                            ShotNumber;                                                 // 0x0010   (0x0004)  
};

/// Class /Script/Engine.InterpTrackDirector
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackDirector : public UInterpTrack
{ 
public:
	TArray<FDirectorTrackCut>                          CutTrack;                                                   // 0x0070   (0x0010)  
	bool                                               bSimulateCameraCutsOnClients : 1;                           // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Struct /Script/Engine.EventTrackKey
/// Size: 0x000C (0x000000 - 0x00000C)
struct FEventTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	FName                                              EventName;                                                  // 0x0004   (0x0008)  
};

/// Class /Script/Engine.InterpTrackEvent
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackEvent : public UInterpTrack
{ 
public:
	TArray<FEventTrackKey>                             EventTrack;                                                 // 0x0070   (0x0010)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:1 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0080:2 (0x0001)  
	bool                                               bUseCustomEventName : 1;                                    // 0x0080:3 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackFade
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackFade : public UInterpTrackFloatBase
{ 
public:
	bool                                               bPersistFade : 1;                                           // 0x0090:0 (0x0001)  
	bool                                               bFadeAudio : 1;                                             // 0x0090:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0091   (0x0003)  MISSED
	FLinearColor                                       FadeColor;                                                  // 0x0094   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatAnimBPParam
/// Size: 0x0020 (0x000090 - 0x0000B0)
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{ 
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintClass;                                         // 0x0090   (0x0008)  
	class UClass*                                      AnimClass;                                                  // 0x0098   (0x0008)  
	FName                                              ParamName;                                                  // 0x00A0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x00A8   (0x0008)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatMaterialParam
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{ 
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                            // 0x0090   (0x0010)  
	FName                                              ParamName;                                                  // 0x00A0   (0x0008)  
};

/// Class /Script/Engine.InterpTrackFloatParticleParam
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{ 
public:
	FName                                              ParamName;                                                  // 0x0090   (0x0008)  
};

/// Class /Script/Engine.InterpTrackFloatProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInst
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInst : public UObject
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstAnimControl
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstAudioMaster
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstProperty
/// Size: 0x0028 (0x000028 - 0x000050)
class UInterpTrackInstProperty : public UInterpTrackInst
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0028   (0x0020)  MISSED
	class UObject*                                     PropertyOuterObjectInst;                                    // 0x0048   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstBoolProp
/// Size: 0x0018 (0x000050 - 0x000068)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0050   (0x0010)  MISSED
	bool                                               ResetBool;                                                  // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackInstColorProp
/// Size: 0x0010 (0x000050 - 0x000060)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0050   (0x0008)  MISSED
	FColor                                             ResetColor;                                                 // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstColorScale
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInstColorScale : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstDirector
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstDirector : public UInterpTrackInst
{ 
public:
	class AActor*                                      OldViewTarget;                                              // 0x0028   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstEvent
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstEvent : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFade
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInstFade : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstFloatAnimBPParam
/// Size: 0x0018 (0x000028 - 0x000040)
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{ 
public:
	class UAnimInstance*                               AnimScriptInstance;                                         // 0x0028   (0x0008)  
	float                                              ResetFloat;                                                 // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0034   (0x000C)  MISSED
};

/// Struct /Script/Engine.PrimitiveMaterialRef
/// Size: 0x0018 (0x000000 - 0x000018)
struct FPrimitiveMaterialRef
{ 
	class UPrimitiveComponent*                         Primitive;                                                  // 0x0000   (0x0008)  
	class UDecalComponent*                             DECAL;                                                      // 0x0008   (0x0008)  
	int32_t                                            ElementIndex;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFloatMaterialParam
/// Size: 0x0038 (0x000028 - 0x000060)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{ 
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                          // 0x0028   (0x0010)  
	TArray<float>                                      ResetFloats;                                                // 0x0038   (0x0010)  
	TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs;                                      // 0x0048   (0x0010)  
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                             // 0x0058   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstFloatParticleParam
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{ 
public:
	float                                              ResetFloat;                                                 // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFloatProp
/// Size: 0x0010 (0x000050 - 0x000060)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0050   (0x0008)  MISSED
	float                                              ResetFloat;                                                 // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstLinearColorProp
/// Size: 0x0018 (0x000050 - 0x000068)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0050   (0x0008)  MISSED
	FLinearColor                                       ResetColor;                                                 // 0x0058   (0x0010)  
};

/// Class /Script/Engine.InterpTrackInstMove
/// Size: 0x0018 (0x000028 - 0x000040)
class UInterpTrackInstMove : public UInterpTrackInst
{ 
public:
	FVector                                            ResetLocation;                                              // 0x0028   (0x000C)  
	FRotator                                           ResetRotation;                                              // 0x0034   (0x000C)  
};

/// Class /Script/Engine.InterpTrackInstParticleReplay
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstSlomo
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstSlomo : public UInterpTrackInst
{ 
public:
	float                                              OldTimeDilation;                                            // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstSound
/// Size: 0x0010 (0x000028 - 0x000038)
class UInterpTrackInstSound : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	class UAudioComponent*                             PlayAudioComp;                                              // 0x0030   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstToggle
/// Size: 0x0010 (0x000028 - 0x000038)
class UInterpTrackInstToggle : public UInterpTrackInst
{ 
public:
	SDK_UNDEFINED(1,428) /* TEnumAsByte<ETrackToggleAction> */ __um(Action);                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              LastUpdatePosition;                                         // 0x002C   (0x0004)  
	bool                                               bSavedActiveState : 1;                                      // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackInstVectorMaterialParam
/// Size: 0x0038 (0x000028 - 0x000060)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{ 
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                          // 0x0028   (0x0010)  
	TArray<FVector>                                    ResetVectors;                                               // 0x0038   (0x0010)  
	TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs;                                      // 0x0048   (0x0010)  
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                             // 0x0058   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstVectorProp
/// Size: 0x0018 (0x000050 - 0x000068)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0050   (0x0008)  MISSED
	FVector                                            ResetVector;                                                // 0x0058   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstVisibility
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstVisibility : public UInterpTrackInst
{ 
public:
	SDK_UNDEFINED(1,429) /* TEnumAsByte<EVisibilityTrackAction> */ __um(Action);                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              LastUpdatePosition;                                         // 0x002C   (0x0004)  
};

/// Class /Script/Engine.InterpTrackLinearColorBase
/// Size: 0x0020 (0x000070 - 0x000090)
class UInterpTrackLinearColorBase : public UInterpTrack
{ 
public:
	FInterpCurveLinearColor                            LinearColorTrack;                                           // 0x0070   (0x0018)  
	float                                              CurveTension;                                               // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackLinearColorProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Struct /Script/Engine.InterpLookupPoint
/// Size: 0x000C (0x000000 - 0x00000C)
struct FInterpLookupPoint
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.InterpLookupTrack
/// Size: 0x0010 (0x000000 - 0x000010)
struct FInterpLookupTrack
{ 
	TArray<FInterpLookupPoint>                         Points;                                                     // 0x0000   (0x0010)  
};

/// Class /Script/Engine.InterpTrackMove
/// Size: 0x0058 (0x000070 - 0x0000C8)
class UInterpTrackMove : public UInterpTrack
{ 
public:
	FInterpCurveVector                                 PosTrack;                                                   // 0x0070   (0x0018)  
	FInterpCurveVector                                 EulerTrack;                                                 // 0x0088   (0x0018)  
	FInterpLookupTrack                                 LookupTrack;                                                // 0x00A0   (0x0010)  
	FName                                              LookAtGroupName;                                            // 0x00B0   (0x0008)  
	float                                              LinCurveTension;                                            // 0x00B8   (0x0004)  
	float                                              AngCurveTension;                                            // 0x00BC   (0x0004)  
	bool                                               bUseQuatInterpolation : 1;                                  // 0x00C0:0 (0x0001)  
	bool                                               bShowArrowAtKeys : 1;                                       // 0x00C0:1 (0x0001)  
	bool                                               bDisableMovement : 1;                                       // 0x00C0:2 (0x0001)  
	bool                                               bShowTranslationOnCurveEd : 1;                              // 0x00C0:3 (0x0001)  
	bool                                               bShowRotationOnCurveEd : 1;                                 // 0x00C0:4 (0x0001)  
	bool                                               bHide3DTrack : 1;                                           // 0x00C0:5 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x00C1   (0x0003)  MISSED
	SDK_UNDEFINED(1,430) /* TEnumAsByte<EInterpTrackMoveRotMode> */ __um(RotMode);                                 // 0x00C4   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00C5   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackMoveAxis
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{ 
public:
	SDK_UNDEFINED(1,431) /* TEnumAsByte<EInterpMoveAxis> */ __um(MoveAxis);                                        // 0x0090   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0091   (0x0007)  MISSED
	FInterpLookupTrack                                 LookupTrack;                                                // 0x0098   (0x0010)  
};

/// Struct /Script/Engine.ParticleReplayTrackKey
/// Size: 0x000C (0x000000 - 0x00000C)
struct FParticleReplayTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Duration;                                                   // 0x0004   (0x0004)  
	int32_t                                            ClipIDNumber;                                               // 0x0008   (0x0004)  
};

/// Class /Script/Engine.InterpTrackParticleReplay
/// Size: 0x0010 (0x000070 - 0x000080)
class UInterpTrackParticleReplay : public UInterpTrack
{ 
public:
	TArray<FParticleReplayTrackKey>                    TrackKeys;                                                  // 0x0070   (0x0010)  
};

/// Class /Script/Engine.InterpTrackSlomo
/// Size: 0x0000 (0x000090 - 0x000090)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{ 
public:
};

/// Struct /Script/Engine.SoundTrackKey
/// Size: 0x0018 (0x000000 - 0x000018)
struct FSoundTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Volume;                                                     // 0x0004   (0x0004)  
	float                                              Pitch;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	class USoundBase*                                  Sound;                                                      // 0x0010   (0x0008)  
};

/// Class /Script/Engine.InterpTrackSound
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackSound : public UInterpTrackVectorBase
{ 
public:
	TArray<FSoundTrackKey>                             Sounds;                                                     // 0x0090   (0x0010)  
	bool                                               bPlayOnReverse : 1;                                         // 0x00A0:0 (0x0001)  
	bool                                               bContinueSoundOnMatineeEnd : 1;                             // 0x00A0:1 (0x0001)  
	bool                                               bSuppressSubtitles : 1;                                     // 0x00A0:2 (0x0001)  
	bool                                               bTreatAsDialogue : 1;                                       // 0x00A0:3 (0x0001)  
	bool                                               bAttach : 1;                                                // 0x00A0:4 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00A1   (0x0007)  MISSED
};

/// Struct /Script/Engine.ToggleTrackKey
/// Size: 0x0008 (0x000000 - 0x000008)
struct FToggleTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	SDK_UNDEFINED(1,432) /* TEnumAsByte<ETrackToggleAction> */ __um(ToggleAction);                                 // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackToggle
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackToggle : public UInterpTrack
{ 
public:
	TArray<FToggleTrackKey>                            ToggleTrack;                                                // 0x0070   (0x0010)  
	bool                                               bActivateSystemEachUpdate : 1;                              // 0x0080:0 (0x0001)  
	bool                                               bActivateWithJustAttachedFlag : 1;                          // 0x0080:1 (0x0001)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:2 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:3 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0080:4 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackVectorMaterialParam
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{ 
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                            // 0x0090   (0x0010)  
	FName                                              ParamName;                                                  // 0x00A0   (0x0008)  
};

/// Class /Script/Engine.InterpTrackVectorProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Struct /Script/Engine.VisibilityTrackKey
/// Size: 0x0008 (0x000000 - 0x000008)
struct FVisibilityTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	SDK_UNDEFINED(1,433) /* TEnumAsByte<EVisibilityTrackAction> */ __um(Action);                                   // 0x0004   (0x0001)  
	SDK_UNDEFINED(1,434) /* TEnumAsByte<EVisibilityTrackCondition> */ __um(ActiveCondition);                       // 0x0005   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0006   (0x0002)  MISSED
};

/// Class /Script/Engine.InterpTrackVisibility
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackVisibility : public UInterpTrack
{ 
public:
	TArray<FVisibilityTrackKey>                        VisibilityTrack;                                            // 0x0070   (0x0010)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:1 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0080:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.IntSerialization
/// Size: 0x0028 (0x000028 - 0x000050)
class UIntSerialization : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	uint16_t                                           UnsignedInt16Variable;                                      // 0x0028   (0x0002)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x002A   (0x0002)  MISSED
	uint32_t                                           UnsignedInt32Variable;                                      // 0x002C   (0x0004)  
	uint64_t                                           UnsignedInt64Variable;                                      // 0x0030   (0x0008)  
	int8_t                                             SignedInt8Variable;                                         // 0x0038   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x0039   (0x0001)  MISSED
	int16_t                                            SignedInt16Variable;                                        // 0x003A   (0x0002)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	int64_t                                            SignedInt64Variable;                                        // 0x0040   (0x0008)  
	char                                               UnsignedInt8Variable;                                       // 0x0048   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	int32_t                                            SignedInt32Variable;                                        // 0x004C   (0x0004)  
};

/// Class /Script/Engine.KillZVolume
/// Size: 0x0000 (0x000268 - 0x000268)
class AKillZVolume : public APhysicsVolume
{ 
public:
};

/// Class /Script/Engine.KismetArrayLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetArrayLibrary.SetArrayPropertyByName
	// void SetArrayPropertyByName(class UObject* Object, FName PropertyName, TArray<int32_t>& value);                       // [0x2f09620] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.FilterArray
	// void FilterArray(TArray<AActor*>& TargetArray, class UClass* FilterClass, TArray<AActor*>& FilteredArray);            // [0x2f094d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Swap
	// void Array_Swap(TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex);                               // [0x2f093a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Shuffle
	// void Array_Shuffle(TArray<int32_t>& TargetArray);                                                                     // [0x2f09300] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Set
	// void Array_Set(TArray<int32_t>& TargetArray, int32_t Index, int32_t& item, bool bSizeToFit);                          // [0x2f090e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Resize
	// void Array_Resize(TArray<int32_t>& TargetArray, int32_t Size);                                                        // [0x2f08ff0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_RemoveItem
	// bool Array_RemoveItem(TArray<int32_t>& TargetArray, int32_t& item);                                                   // [0x2f08e40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Remove
	// void Array_Remove(TArray<int32_t>& TargetArray, int32_t IndexToRemove);                                               // [0x2f08d50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Length
	// int32_t Array_Length(TArray<int32_t>& TargetArray);                                                                   // [0x2f08ca0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_LastIndex
	// int32_t Array_LastIndex(TArray<int32_t>& TargetArray);                                                                // [0x2f08bf0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_IsValidIndex
	// bool Array_IsValidIndex(TArray<int32_t>& TargetArray, int32_t IndexToTest);                                           // [0x76bdb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Insert
	// void Array_Insert(TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index);                                     // [0x2f08a10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Identical
	// bool Array_Identical(TArray<int32_t>& ArrayA, TArray<int32_t>& ArrayB);                                               // [0x2f08900] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Get
	// void Array_Get(TArray<int32_t>& TargetArray, int32_t Index, int32_t& item);                                           // [0x2f08710] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Find
	// int32_t Array_Find(TArray<int32_t>& TargetArray, int32_t& ItemToFind);                                                // [0x2f08560] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Contains
	// bool Array_Contains(TArray<int32_t>& TargetArray, int32_t& ItemToFind);                                               // [0x2f083a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Clear
	// void Array_Clear(TArray<int32_t>& TargetArray);                                                                       // [0x2f08300] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Append
	// void Array_Append(TArray<int32_t>& TargetArray, TArray<int32_t>& SourceArray);                                        // [0x2f08200] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_AddUnique
	// int32_t Array_AddUnique(TArray<int32_t>& TargetArray, int32_t& NewItem);                                              // [0x2f08050] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Add
	// int32_t Array_Add(TArray<int32_t>& TargetArray, int32_t& NewItem);                                                    // [0x2f07ea0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.KismetGuidLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetGuidLibrary.Parse_StringToGuid
	// void Parse_StringToGuid(FString GuidString, FGuid& OutGuid, bool& Success);                                           // [0x2f0d490] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.NotEqual_GuidGuid
	// bool NotEqual_GuidGuid(FGuid& A, FGuid& B);                                                                           // [0x2f0d390] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.NewGuid
	// FGuid NewGuid();                                                                                                      // [0x2f0d350] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.IsValid_Guid
	// bool IsValid_Guid(FGuid& InGuid);                                                                                     // [0x2f0c800] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.Invalidate_Guid
	// void Invalidate_Guid(FGuid& InGuid);                                                                                  // [0x2f0c770] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetGuidLibrary.EqualEqual_GuidGuid
	// bool EqualEqual_GuidGuid(FGuid& A, FGuid& B);                                                                         // [0x2f0ac10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.Conv_GuidToString
	// FString Conv_GuidToString(FGuid& InGuid);                                                                             // [0x2f0aa40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetInputLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
	// bool PointerEvent_IsTouchEvent(FPointerEvent& Input);                                                                 // [0x2f0e400] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
	// bool PointerEvent_IsMouseButtonDown(FPointerEvent& Input, FKey MouseButton);                                          // [0x2f0e230] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
	// float PointerEvent_GetWheelDelta(FPointerEvent& Input);                                                               // [0x2f0e100] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetUserIndex
	// int32_t PointerEvent_GetUserIndex(FPointerEvent& Input);                                                              // [0x2f0dfd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
	// int32_t PointerEvent_GetTouchpadIndex(FPointerEvent& Input);                                                          // [0x2f0dea0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
	// FVector2D PointerEvent_GetScreenSpacePosition(FPointerEvent& Input);                                                  // [0x2f0dd60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
	// int32_t PointerEvent_GetPointerIndex(FPointerEvent& Input);                                                           // [0x2f0dc30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
	// FVector2D PointerEvent_GetLastScreenSpacePosition(FPointerEvent& Input);                                              // [0x2f0daf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetGestureType
	// ESlateGesture PointerEvent_GetGestureType(FPointerEvent& Input);                                                      // [0x2f0d9c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
	// FVector2D PointerEvent_GetGestureDelta(FPointerEvent& Input);                                                         // [0x2f0d880] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
	// FKey PointerEvent_GetEffectingButton(FPointerEvent& Input);                                                           // [0x2f0d710] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
	// FVector2D PointerEvent_GetCursorDelta(FPointerEvent& Input);                                                          // [0x2f0d5d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsVectorAxis
	// bool Key_IsVectorAxis(FKey& Key);                                                                                     // [0x2f0d280] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsValid
	// bool Key_IsValid(FKey& Key);                                                                                          // [0x2f0d1b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsMouseButton
	// bool Key_IsMouseButton(FKey& Key);                                                                                    // [0x2f0d0e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsModifierKey
	// bool Key_IsModifierKey(FKey& Key);                                                                                    // [0x2f0d010] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsKeyboardKey
	// bool Key_IsKeyboardKey(FKey& Key);                                                                                    // [0x2f0cf40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsGamepadKey
	// bool Key_IsGamepadKey(FKey& Key);                                                                                     // [0x2f0ce70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsFloatAxis
	// bool Key_IsFloatAxis(FKey& Key);                                                                                      // [0x2f0cda0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey
	// EUINavigation Key_GetNavigationDirectionFromKey(FKeyEvent& InKeyEvent);                                               // [0x2f0cca0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog
	// EUINavigation Key_GetNavigationDirectionFromAnalog(FAnalogInputEvent& InAnalogEvent);                                 // [0x2f0cb90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationActionFromKey
	// EUINavigationAction Key_GetNavigationActionFromKey(FKeyEvent& InKeyEvent);                                            // [0x2f0ca90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationAction
	// EUINavigationAction Key_GetNavigationAction(FKey& InKey);                                                             // [0x2f0c9c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetDisplayName
	// FText Key_GetDisplayName(FKey& Key);                                                                                  // [0x2f0c8a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsShiftDown
	// bool InputEvent_IsShiftDown(FInputEvent& Input);                                                                      // [0x2f0c6c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
	// bool InputEvent_IsRightShiftDown(FInputEvent& Input);                                                                 // [0x2f0c610] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightControlDown
	// bool InputEvent_IsRightControlDown(FInputEvent& Input);                                                               // [0x2f0c560] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
	// bool InputEvent_IsRightCommandDown(FInputEvent& Input);                                                               // [0x2f0c4b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightAltDown
	// bool InputEvent_IsRightAltDown(FInputEvent& Input);                                                                   // [0x2f0c400] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRepeat
	// bool InputEvent_IsRepeat(FInputEvent& Input);                                                                         // [0x2f0c350] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
	// bool InputEvent_IsLeftShiftDown(FInputEvent& Input);                                                                  // [0x2f0c2a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
	// bool InputEvent_IsLeftControlDown(FInputEvent& Input);                                                                // [0x2f0c1f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
	// bool InputEvent_IsLeftCommandDown(FInputEvent& Input);                                                                // [0x2f0c140] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
	// bool InputEvent_IsLeftAltDown(FInputEvent& Input);                                                                    // [0x2f0c090] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsControlDown
	// bool InputEvent_IsControlDown(FInputEvent& Input);                                                                    // [0x2f0bfe0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsCommandDown
	// bool InputEvent_IsCommandDown(FInputEvent& Input);                                                                    // [0x2f0bf30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsAltDown
	// bool InputEvent_IsAltDown(FInputEvent& Input);                                                                        // [0x2f0be80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputChord_GetDisplayName
	// FText InputChord_GetDisplayName(FInputChord& Key);                                                                    // [0x2f0bd30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetUserIndex
	// int32_t GetUserIndex(FKeyEvent& Input);                                                                               // [0x2f0bb30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetKey
	// FKey GetKey(FKeyEvent& Input);                                                                                        // [0x2f0b480] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetAnalogValue
	// float GetAnalogValue(FAnalogInputEvent& Input);                                                                       // [0x2f0b080] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.EqualEqual_KeyKey
	// bool EqualEqual_KeyKey(FKey A, FKey B);                                                                               // [0x2f0af10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.EqualEqual_InputChordInputChord
	// bool EqualEqual_InputChordInputChord(FInputChord A, FInputChord B);                                                   // [0x2f0ad10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.CalibrateTilt
	// void CalibrateTilt();                                                                                                 // [0x2f0a960] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetInternationalizationLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLocale
	// bool SetCurrentLocale(FString Culture, bool SaveToConfig);                                                            // [0x2f0e8f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale
	// bool SetCurrentLanguageAndLocale(FString Culture, bool SaveToConfig);                                                 // [0x2f0e810] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguage
	// bool SetCurrentLanguage(FString Culture, bool SaveToConfig);                                                          // [0x2f0e730] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentCulture
	// bool SetCurrentCulture(FString Culture, bool SaveToConfig);                                                           // [0x2f0e650] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture
	// bool SetCurrentAssetGroupCulture(FName AssetGroup, FString Culture, bool SaveToConfig);                               // [0x2f0e530] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetSuitableCulture
	// FString GetSuitableCulture(TArray<FString>& AvailableCultures, FString CultureToMatch, FString FallbackCulture);      // [0x2f0b970] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetNativeCulture
	// FString GetNativeCulture(ELocalizedTextSourceCategory TextCategory);                                                  // [0x2f0b7c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetLocalizedCultures
	// TArray<FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional); // [0x2f0b5b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentLocale
	// FString GetCurrentLocale();                                                                                           // [0x2f0b400] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentLanguage
	// FString GetCurrentLanguage();                                                                                         // [0x2f0b380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentCulture
	// FString GetCurrentCulture();                                                                                          // [0x2f0b380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture
	// FString GetCurrentAssetGroupCulture(FName AssetGroup);                                                                // [0x2f0b2b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCultureDisplayName
	// FString GetCultureDisplayName(FString Culture, bool Localized);                                                       // [0x2f0b190] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture
	// void ClearCurrentAssetGroupCulture(FName AssetGroup, bool SaveToConfig);                                              // [0x2f0a980] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetMaterialLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetMaterialLibrary.SetVectorParameterValue
	// void SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName, FLinearColor& ParameterValue); // [0x2f0eb10] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.SetScalarParameterValue
	// void SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName, float ParameterValue); // [0x2f0e9d0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.GetVectorParameterValue
	// FLinearColor GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName); // [0x2f0bc30] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.GetScalarParameterValue
	// float GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName); // [0x2f0b880] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, FName OptionalName); // [0x2f0ab20] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetMathLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetMathLibrary.Xor_IntInt
	// int32_t Xor_IntInt(int32_t A, int32_t B);                                                                             // [0x2f3cf40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Xor_Int64Int64
	// int64_t Xor_Int64Int64(int64_t A, int64_t B);                                                                         // [0x2f3ce80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_FVector
	// FVector WeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float Weight);                   // [0x2f3cc30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_FRotator
	// FRotator WeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float Weight);               // [0x2f3caf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_Float
	// float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);                           // [0x2f3cd70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeXYSquared
	// float VSizeXYSquared(FVector A);                                                                                      // [0x2f38630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeXY
	// float VSizeXY(FVector A);                                                                                             // [0x2f385a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeSquared
	// float VSizeSquared(FVector A);                                                                                        // [0x2f38510] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize2DSquared
	// float VSize2DSquared(FVector2D A);                                                                                    // [0x2f383f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize2D
	// float VSize2D(FVector2D A);                                                                                           // [0x2f38360] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize
	// float VSize(FVector A);                                                                                               // [0x2f38470] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VLerp
	// FVector VLerp(FVector A, FVector B, float Alpha);                                                                     // [0x2f38230] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VInterpTo_Constant
	// FVector VInterpTo_Constant(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);                      // [0x2f380b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VInterpTo
	// FVector VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);                               // [0x2f37f30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VectorSpringInterp
	// FVector VectorSpringInterp(FVector Current, FVector Target, FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // [0x2f39f20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_Zero
	// FVector Vector_Zero();                                                                                                // [0x2f3cac0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Up
	// FVector Vector_Up();                                                                                                  // [0x2f3ca90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_UnwindEuler
	// void Vector_UnwindEuler(FVector& A);                                                                                  // [0x2f3ca10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical
	// FVector2D Vector_UnitCartesianToSpherical(FVector A);                                                                 // [0x2f3c930] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ToRadians
	// FVector Vector_ToRadians(FVector A);                                                                                  // [0x2f3c890] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ToDegrees
	// FVector Vector_ToDegrees(FVector A);                                                                                  // [0x2f3c7f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_SnappedToGrid
	// FVector Vector_SnappedToGrid(FVector InVect, float InGridSize);                                                       // [0x2f3c640] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Set
	// void Vector_Set(FVector& A, float X, float Y, float Z);                                                               // [0x2f3c4f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_Right
	// FVector Vector_Right();                                                                                               // [0x2f3c4c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Reciprocal
	// FVector Vector_Reciprocal(FVector& A);                                                                                // [0x2f3c3d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ProjectOnToNormal
	// FVector Vector_ProjectOnToNormal(FVector V, FVector InNormal);                                                        // [0x2f3c2e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_One
	// FVector Vector_One();                                                                                                 // [0x2f3c2b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_NormalUnsafe
	// FVector Vector_NormalUnsafe(FVector& A);                                                                              // [0x2f3bfe0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Normalize
	// void Vector_Normalize(FVector& A, float Tolerance);                                                                   // [0x2f3c120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_Normal2D
	// FVector Vector_Normal2D(FVector A, float Tolerance);                                                                  // [0x2f3be10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_MirrorByPlane
	// FVector Vector_MirrorByPlane(FVector A, FPlane& InPlane);                                                             // [0x2f3bcc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Left
	// FVector Vector_Left();                                                                                                // [0x2f3bc90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsZero
	// bool Vector_IsZero(FVector& A);                                                                                       // [0x2f3bbe0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsUnit
	// bool Vector_IsUnit(FVector& A, float SquaredLenthTolerance);                                                          // [0x2f3bad0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsUniform
	// bool Vector_IsUniform(FVector& A, float Tolerance);                                                                   // [0x2f3b9b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNormal
	// bool Vector_IsNormal(FVector& A);                                                                                     // [0x2f3b8e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNearlyZero
	// bool Vector_IsNearlyZero(FVector& A, float Tolerance);                                                                // [0x2f3b7d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNAN
	// bool Vector_IsNAN(FVector& A);                                                                                        // [0x2f3b700] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_HeadingAngle
	// float Vector_HeadingAngle(FVector A);                                                                                 // [0x2f3b5b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetSignVector
	// FVector Vector_GetSignVector(FVector A);                                                                              // [0x2f3b4f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetProjection
	// FVector Vector_GetProjection(FVector A);                                                                              // [0x2f3b450] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbsMin
	// float Vector_GetAbsMin(FVector A);                                                                                    // [0x2f3b3b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbsMax
	// float Vector_GetAbsMax(FVector A);                                                                                    // [0x2f3b310] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbs
	// FVector Vector_GetAbs(FVector A);                                                                                     // [0x2f3b270] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Forward
	// FVector Vector_Forward();                                                                                             // [0x2f3b240] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Down
	// FVector Vector_Down();                                                                                                // [0x2f3b210] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_DistanceSquared
	// float Vector_DistanceSquared(FVector v1, FVector v2);                                                                 // [0x2f3b130] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance2DSquared
	// float Vector_Distance2DSquared(FVector v1, FVector v2);                                                               // [0x2f3af80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance2D
	// float Vector_Distance2D(FVector v1, FVector v2);                                                                      // [0x2f3aeb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance
	// float Vector_Distance(FVector v1, FVector v2);                                                                        // [0x2f3b050] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_CosineAngle2D
	// float Vector_CosineAngle2D(FVector A, FVector B);                                                                     // [0x2f3acc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ComponentMin
	// FVector Vector_ComponentMin(FVector A, FVector B);                                                                    // [0x2f3abf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ComponentMax
	// FVector Vector_ComponentMax(FVector A, FVector B);                                                                    // [0x2f3ab20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSizeMax2D
	// FVector Vector_ClampSizeMax2D(FVector A, float Max);                                                                  // [0x2f3a7b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSizeMax
	// FVector Vector_ClampSizeMax(FVector A, float Max);                                                                    // [0x2f3a930] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSize2D
	// FVector Vector_ClampSize2D(FVector A, float Min, float Max);                                                          // [0x2f3a610] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_BoundedToCube
	// FVector Vector_BoundedToCube(FVector InVect, float InRadius);                                                         // [0x2f3a510] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_BoundedToBox
	// FVector Vector_BoundedToBox(FVector InVect, FVector InBoxMin, FVector InBoxMax);                                      // [0x2f3a3e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Backward
	// FVector Vector_Backward();                                                                                            // [0x2f3a3b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Assign
	// void Vector_Assign(FVector& A, FVector& InVector);                                                                    // [0x2f3a2d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_AddBounded
	// void Vector_AddBounded(FVector& A, FVector InAddVect, float InRadius);                                                // [0x2f3a170] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Zero
	// FVector4 Vector4_Zero();                                                                                              // [0x2f39f00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_SizeSquared3
	// float Vector4_SizeSquared3(FVector4& A);                                                                              // [0x2f39d70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_SizeSquared
	// float Vector4_SizeSquared(FVector4& A);                                                                               // [0x2f39e30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Size3
	// float Vector4_Size3(FVector4& A);                                                                                     // [0x2f39be0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Size
	// float Vector4_Size(FVector4& A);                                                                                      // [0x2f39ca0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Set
	// void Vector4_Set(FVector4& A, float X, float Y, float Z, float W);                                                    // [0x2f39a40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector4_NormalUnsafe3
	// FVector4 Vector4_NormalUnsafe3(FVector4& A);                                                                          // [0x2f39740] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Normalize3
	// void Vector4_Normalize3(FVector4& A, float Tolerance);                                                                // [0x2f39890] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Normal3
	// FVector4 Vector4_Normal3(FVector4& A, float Tolerance);                                                               // [0x2f39590] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Negated
	// FVector4 Vector4_Negated(FVector4& A);                                                                                // [0x2f394f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_MirrorByVector3
	// FVector4 Vector4_MirrorByVector3(FVector4& Direction, FVector4& SurfaceNormal);                                       // [0x2f39360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsZero
	// bool Vector4_IsZero(FVector4& A);                                                                                     // [0x2f392a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsUnit3
	// bool Vector4_IsUnit3(FVector4& A, float SquaredLenthTolerance);                                                       // [0x2f39180] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNormal3
	// bool Vector4_IsNormal3(FVector4& A);                                                                                  // [0x2f390b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNearlyZero3
	// bool Vector4_IsNearlyZero3(FVector4& A, float Tolerance);                                                             // [0x2f38f90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNAN
	// bool Vector4_IsNAN(FVector4& A);                                                                                      // [0x2f38ea0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_DotProduct3
	// float Vector4_DotProduct3(FVector4& A, FVector4& B);                                                                  // [0x2f38c50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_DotProduct
	// float Vector4_DotProduct(FVector4& A, FVector4& B);                                                                   // [0x2f38d70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_CrossProduct3
	// FVector4 Vector4_CrossProduct3(FVector4& A, FVector4& B);                                                             // [0x2f38af0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Assign
	// void Vector4_Assign(FVector4& A, FVector4& InVector);                                                                 // [0x2f38a00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector2DInterpTo_Constant
	// FVector2D Vector2DInterpTo_Constant(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);         // [0x2f38810] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2DInterpTo
	// FVector2D Vector2DInterpTo(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);                  // [0x2f386b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_Zero
	// FVector2D Vector2D_Zero();                                                                                            // [0x2f389d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_Unit45Deg
	// FVector2D Vector2D_Unit45Deg();                                                                                       // [0x2f389a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_One
	// FVector2D Vector2D_One();                                                                                             // [0x2f38970] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VEase
	// FVector VEase(FVector A, FVector B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x2f37d40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.UtcNow
	// FDateTime UtcNow();                                                                                                   // [0x2f37d00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformVector4
	// FVector4 TransformVector4(FMatrix& Matrix, FVector4& Vec4);                                                           // [0x2f37b00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformRotation
	// FRotator TransformRotation(FTransform& T, FRotator Rotation);                                                         // [0x2f379c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformLocation
	// FVector TransformLocation(FTransform& T, FVector Location);                                                           // [0x2f37820] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformDirection
	// FVector TransformDirection(FTransform& T, FVector Direction);                                                         // [0x2f37680] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Transform_Determinant
	// float Transform_Determinant(FTransform& Transform);                                                                   // [0x2f37c20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ToSign2D
	// FVector2D ToSign2D(FVector2D A);                                                                                      // [0x2f37580] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ToRounded2D
	// FVector2D ToRounded2D(FVector2D A);                                                                                   // [0x2f37480] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ToDirectionAndLength2D
	// void ToDirectionAndLength2D(FVector2D A, FVector2D& OutDir, float& OutLength);                                        // [0x2f37300] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Today
	// FDateTime Today();                                                                                                    // [0x2f37630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TLerp
	// FTransform TLerp(FTransform& A, FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode> InterpMode);          // [0x2f36de0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TInterpTo
	// FTransform TInterpTo(FTransform& Current, FTransform& Target, float DeltaTime, float InterpSpeed);                    // [0x2f36bc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanZeroValue
	// FTimespan TimespanZeroValue();                                                                                        // [0x2711da0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanRatio
	// float TimespanRatio(FTimespan A, FTimespan B);                                                                        // [0x2f37220] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanMinValue
	// FTimespan TimespanMinValue();                                                                                         // [0x2f371f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanMaxValue
	// FTimespan TimespanMaxValue();                                                                                         // [0x2f371c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanFromString
	// bool TimespanFromString(FString TimespanString, FTimespan& Result);                                                   // [0x2f37080] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TEase
	// FTransform TEase(FTransform& A, FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x2f36940] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Tan
	// float Tan(float A);                                                                                                   // [0x2f37000] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorVector
	// FVector Subtract_VectorVector(FVector A, FVector B);                                                                  // [0x2f36870] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorInt
	// FVector Subtract_VectorInt(FVector A, int32_t B);                                                                     // [0x2f36790] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorFloat
	// FVector Subtract_VectorFloat(FVector A, float B);                                                                     // [0x2f366b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector4Vector4
	// FVector4 Subtract_Vector4Vector4(FVector4& A, FVector4& B);                                                           // [0x2f36580] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector2DVector2D
	// FVector2D Subtract_Vector2DVector2D(FVector2D A, FVector2D B);                                                        // [0x2f364c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector2DFloat
	// FVector2D Subtract_Vector2DFloat(FVector2D A, float B);                                                               // [0x2f363f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_TimespanTimespan
	// FTimespan Subtract_TimespanTimespan(FTimespan A, FTimespan B);                                                        // [0x2f35d70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_QuatQuat
	// FQuat Subtract_QuatQuat(FQuat& A, FQuat& B);                                                                          // [0x2f362e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_LinearColorLinearColor
	// FLinearColor Subtract_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                         // [0x2f36200] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntPointIntPoint
	// FIntPoint Subtract_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                        // [0x2f36130] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntPointInt
	// FIntPoint Subtract_IntPointInt(FIntPoint A, int32_t B);                                                               // [0x2f36060] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntInt
	// int32_t Subtract_IntInt(int32_t A, int32_t B);                                                                        // [0x2f35fa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Int64Int64
	// int64_t Subtract_Int64Int64(int64_t A, int64_t B);                                                                    // [0x2f35ee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_FloatFloat
	// float Subtract_FloatFloat(float A, float B);                                                                          // [0x2f35e20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_DateTimeTimespan
	// FDateTime Subtract_DateTimeTimespan(FDateTime A, FTimespan B);                                                        // [0x2f35d70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_DateTimeDateTime
	// FTimespan Subtract_DateTimeDateTime(FDateTime A, FDateTime B);                                                        // [0x2f35d70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_ByteByte
	// char Subtract_ByteByte(char A, char B);                                                                               // [0x2f35cc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Square
	// float Square(float A);                                                                                                // [0x2f35c40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Sqrt
	// float Sqrt(float A);                                                                                                  // [0x2f35b90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Spherical2DToUnitCartesian
	// FVector Spherical2DToUnitCartesian(FVector2D A);                                                                      // [0x2f35ab0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Sin
	// float Sin(float A);                                                                                                   // [0x2f35a30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfInteger64
	// int64_t SignOfInteger64(int64_t A);                                                                                   // [0x2f358f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfInteger
	// int32_t SignOfInteger(int32_t A);                                                                                     // [0x2f35990] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfFloat
	// float SignOfFloat(float A);                                                                                           // [0x2f35820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SetRandomStreamSeed
	// void SetRandomStreamSeed(FRandomStream& Stream, int32_t NewSeed);                                                     // [0x2f35750] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Set2D
	// void Set2D(FVector2D& A, float X, float Y);                                                                           // [0x2f35640] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.SelectVector
	// FVector SelectVector(FVector A, FVector B, bool bPickA);                                                              // [0x2f351b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectTransform
	// FTransform SelectTransform(FTransform& A, FTransform& B, bool bPickA);                                                // [0x2f35480] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectString
	// FString SelectString(FString A, FString B, bool bPickA);                                                              // [0x2f352e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectRotator
	// FRotator SelectRotator(FRotator A, FRotator B, bool bPickA);                                                          // [0x2f351b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectObject
	// class UObject* SelectObject(class UObject* A, class UObject* B, bool bSelectA);                                       // [0x2f34db0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectInt
	// int32_t SelectInt(int32_t A, int32_t B, bool bPickA);                                                                 // [0x2f350c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectFloat
	// float SelectFloat(float A, float B, bool bPickA);                                                                     // [0x2f34fb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectColor
	// FLinearColor SelectColor(FLinearColor A, FLinearColor B, bool bPickA);                                                // [0x2f34ea0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectClass
	// class UClass* SelectClass(class UClass* A, class UClass* B, bool bSelectA);                                           // [0x2f34db0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SeedRandomStream
	// void SeedRandomStream(FRandomStream& Stream);                                                                         // [0x2f34d30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.SafeDivide
	// float SafeDivide(float A, float B);                                                                                   // [0x2f34c70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Round64
	// int64_t Round64(float A);                                                                                             // [0x2f34b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Round
	// int32_t Round(float A);                                                                                               // [0x2f34be0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RotatorFromAxisAndAngle
	// FRotator RotatorFromAxisAndAngle(FVector Axis, float Angle);                                                          // [0x2f34a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RotateAngleAxis
	// FVector RotateAngleAxis(FVector InVect, float AngleDeg, FVector Axis);                                                // [0x2f348f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RLerp
	// FRotator RLerp(FRotator A, FRotator B, float Alpha, bool bShortestPath);                                              // [0x2f32d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RInterpTo_Constant
	// FRotator RInterpTo_Constant(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);                   // [0x2f32bb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RInterpTo
	// FRotator RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);                            // [0x2f32a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBToHSV_Vector
	// void RGBToHSV_Vector(FLinearColor RGB, FLinearColor& HSV);                                                            // [0x2f32950] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBToHSV
	// void RGBToHSV(FLinearColor InColor, float& H, float& S, float& V, float& A);                                          // [0x2f32760] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBLinearToHSV
	// FLinearColor RGBLinearToHSV(FLinearColor RGB);                                                                        // [0x2f326d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ResetVectorSpringState
	// void ResetVectorSpringState(FVectorSpringState& SpringState);                                                         // [0x2f34850] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.ResetRandomStream
	// void ResetRandomStream(FRandomStream& Stream);                                                                        // [0x2f347d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.ResetFloatSpringState
	// void ResetFloatSpringState(FFloatSpringState& SpringState);                                                           // [0x2f34740] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.REase
	// FRotator REase(FRotator A, FRotator B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x2f324a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream
	// FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, FRandomStream& Stream); // [0x2f345b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians
	// FVector RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);   // [0x2f34490] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream
	// FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, FRandomStream& Stream); // [0x2f342f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees
	// FVector RandomUnitVectorInEllipticalConeInDegrees(FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);   // [0x2f341c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream
	// FVector RandomUnitVectorInConeInRadiansFromStream(FVector& ConeDir, float ConeHalfAngleInRadians, FRandomStream& Stream); // [0x2f34090] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians
	// FVector RandomUnitVectorInConeInRadians(FVector ConeDir, float ConeHalfAngleInRadians);                               // [0x2f33fb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream
	// FVector RandomUnitVectorInConeInDegreesFromStream(FVector& ConeDir, float ConeHalfAngleInDegrees, FRandomStream& Stream); // [0x2f33e70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees
	// FVector RandomUnitVectorInConeInDegrees(FVector ConeDir, float ConeHalfAngleInDegrees);                               // [0x2f33d80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorFromStream
	// FVector RandomUnitVectorFromStream(FRandomStream& Stream);                                                            // [0x2f33ce0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVector
	// FVector RandomUnitVector();                                                                                           // [0x2f33ca0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomRotatorFromStream
	// FRotator RandomRotatorFromStream(bool bRoll, FRandomStream& Stream);                                                  // [0x2f33bc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomRotator
	// FRotator RandomRotator(bool bRoll);                                                                                   // [0x2f33b20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomPointInBoundingBox
	// FVector RandomPointInBoundingBox(FVector Origin, FVector BoxExtent);                                                  // [0x2f339e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
	// int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, FRandomStream& Stream);                              // [0x2f338e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerInRange
	// int32_t RandomIntegerInRange(int32_t Min, int32_t Max);                                                               // [0x2f337e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerFromStream
	// int32_t RandomIntegerFromStream(int32_t Max, FRandomStream& Stream);                                                  // [0x2f33710] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger64InRange
	// int64_t RandomInteger64InRange(int64_t Min, int64_t Max);                                                             // [0x2f33540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger64
	// int64_t RandomInteger64(int64_t Max);                                                                                 // [0x2f33470] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger
	// int32_t RandomInteger(int32_t Max);                                                                                   // [0x2f33650] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatInRangeFromStream
	// float RandomFloatInRangeFromStream(float Min, float Max, FRandomStream& Stream);                                      // [0x2f33360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatInRange
	// float RandomFloatInRange(float Min, float Max);                                                                       // [0x2f33270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatFromStream
	// float RandomFloatFromStream(FRandomStream& Stream);                                                                   // [0x2f331e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloat
	// float RandomFloat();                                                                                                  // [0x2f331a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
	// bool RandomBoolWithWeightFromStream(float Weight, FRandomStream& RandomStream);                                       // [0x2f330c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolWithWeight
	// bool RandomBoolWithWeight(float Weight);                                                                              // [0x2f33040] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolFromStream
	// bool RandomBoolFromStream(FRandomStream& Stream);                                                                     // [0x2f32fb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBool
	// bool RandomBool();                                                                                                    // [0x2f32f50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RadiansToDegrees
	// float RadiansToDegrees(float A);                                                                                      // [0x2f32ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorUp
	// FVector Quat_VectorUp(FQuat& Q);                                                                                      // [0x2f311a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorRight
	// FVector Quat_VectorRight(FQuat& Q);                                                                                   // [0x2f310b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorForward
	// FVector Quat_VectorForward(FQuat& Q);                                                                                 // [0x2f30fb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_UnrotateVector
	// FVector Quat_UnrotateVector(FQuat& Q, FVector& V);                                                                    // [0x2f32280] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_SizeSquared
	// float Quat_SizeSquared(FQuat& Q);                                                                                     // [0x2f321c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Size
	// float Quat_Size(FQuat& Q);                                                                                            // [0x2f32100] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_SetFromEuler
	// void Quat_SetFromEuler(FQuat& Q, FVector& Euler);                                                                     // [0x2f32020] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_SetComponents
	// void Quat_SetComponents(FQuat& Q, float X, float Y, float Z, float W);                                                // [0x2f31e90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_Rotator
	// FRotator Quat_Rotator(FQuat& Q);                                                                                      // [0x2f31df0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_RotateVector
	// FVector Quat_RotateVector(FQuat& Q, FVector& V);                                                                      // [0x2f31bf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Normalized
	// FQuat Quat_Normalized(FQuat& Q, float Tolerance);                                                                     // [0x2f31aa0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Normalize
	// void Quat_Normalize(FQuat& Q, float Tolerance);                                                                       // [0x2f31960] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_MakeFromEuler
	// FQuat Quat_MakeFromEuler(FVector& Euler);                                                                             // [0x2f318c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Log
	// FQuat Quat_Log(FQuat& Q);                                                                                             // [0x2f31820] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsNormalized
	// bool Quat_IsNormalized(FQuat& Q);                                                                                     // [0x2f31750] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsNonFinite
	// bool Quat_IsNonFinite(FQuat& Q);                                                                                      // [0x2f31670] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsIdentity
	// bool Quat_IsIdentity(FQuat& Q, float Tolerance);                                                                      // [0x2f31550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsFinite
	// bool Quat_IsFinite(FQuat& Q);                                                                                         // [0x2f31470] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Inversed
	// FQuat Quat_Inversed(FQuat& Q);                                                                                        // [0x2f313b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Identity
	// FQuat Quat_Identity();                                                                                                // [0x2f31390] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetRotationAxis
	// FVector Quat_GetRotationAxis(FQuat& Q);                                                                               // [0x2f312b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisZ
	// FVector Quat_GetAxisZ(FQuat& Q);                                                                                      // [0x2f311a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisY
	// FVector Quat_GetAxisY(FQuat& Q);                                                                                      // [0x2f310b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisX
	// FVector Quat_GetAxisX(FQuat& Q);                                                                                      // [0x2f30fb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAngle
	// float Quat_GetAngle(FQuat& Q);                                                                                        // [0x2f30f00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Exp
	// FQuat Quat_Exp(FQuat& Q);                                                                                             // [0x2f30e60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Euler
	// FVector Quat_Euler(FQuat& Q);                                                                                         // [0x2f30dc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_EnforceShortestArcWith
	// void Quat_EnforceShortestArcWith(FQuat& A, FQuat& B);                                                                 // [0x2f30c90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_AngularDistance
	// float Quat_AngularDistance(FQuat& A, FQuat& B);                                                                       // [0x2f30b50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectVectorOnToVector
	// FVector ProjectVectorOnToVector(FVector V, FVector Target);                                                           // [0x2f309e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectVectorOnToPlane
	// FVector ProjectVectorOnToPlane(FVector V, FVector PlaneNormal);                                                       // [0x2f308c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectPointOnToPlane
	// FVector ProjectPointOnToPlane(FVector Point, FVector PlaneBase, FVector PlaneNormal);                                 // [0x2f30760] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.PointsAreCoplanar
	// bool PointsAreCoplanar(TArray<FVector>& Points, float Tolerance);                                                     // [0x2f30660] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.PerlinNoise1D
	// float PerlinNoise1D(float value);                                                                                     // [0x2f305e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_IntInt
	// int32_t Percent_IntInt(int32_t A, int32_t B);                                                                         // [0x2f30500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_FloatFloat
	// float Percent_FloatFloat(float A, float B);                                                                           // [0x2f30380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_ByteByte
	// char Percent_ByteByte(char A, char B);                                                                                // [0x2f302b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Or_IntInt
	// int32_t Or_IntInt(int32_t A, int32_t B);                                                                              // [0x2f301f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Or_Int64Int64
	// int64_t Or_Int64Int64(int64_t A, int64_t B);                                                                          // [0x2f30130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Now
	// FDateTime Now();                                                                                                      // [0x2f300f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_VectorVector
	// bool NotEqualExactly_VectorVector(FVector A, FVector B);                                                              // [0x2f2f0b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4
	// bool NotEqualExactly_Vector4Vector4(FVector4& A, FVector4& B);                                                        // [0x2f2ef80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D
	// bool NotEqualExactly_Vector2DVector2D(FVector2D A, FVector2D B);                                                      // [0x2f2eeb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_VectorVector
	// bool NotEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);                                               // [0x2f2fe30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Vector4Vector4
	// bool NotEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance);                                         // [0x2f2fca0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
	// bool NotEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);                                       // [0x774670] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_TimespanTimespan
	// bool NotEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                             // [0x2f2f3e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_RotatorRotator
	// bool NotEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);                                           // [0x2f2fac0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_QuatQuat
	// bool NotEqual_QuatQuat(FQuat& A, FQuat& B, float ErrorTolerance);                                                     // [0x2f2f960] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ObjectObject
	// bool NotEqual_ObjectObject(class UObject* A, class UObject* B);                                                       // [0x2f2f320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_NameName
	// bool NotEqual_NameName(FName A, FName B);                                                                             // [0x2f2f320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_MatrixMatrix
	// bool NotEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance);                                                  // [0x2f2f7d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor
	// bool NotEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                                 // [0x2f2f6f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_IntPointIntPoint
	// bool NotEqual_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                             // [0x2f2f620] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_IntInt
	// bool NotEqual_IntInt(int32_t A, int32_t B);                                                                           // [0x2f2f560] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Int64Int64
	// bool NotEqual_Int64Int64(int64_t A, int64_t B);                                                                       // [0x2f2f320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_FloatFloat
	// bool NotEqual_FloatFloat(float A, float B);                                                                           // [0x2f2f490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
	// bool NotEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                             // [0x2f2f3e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ClassClass
	// bool NotEqual_ClassClass(class UClass* A, class UClass* B);                                                           // [0x2f2f320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ByteByte
	// bool NotEqual_ByteByte(char A, char B);                                                                               // [0x2f2f260] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_BoolBool
	// bool NotEqual_BoolBool(bool A, bool B);                                                                               // [0x2f2f190] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_PreBool
	// bool Not_PreBool(bool A);                                                                                             // [0x2f30070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_Int64
	// int64_t Not_Int64(int64_t A);                                                                                         // [0x2f2ff70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_Int
	// int32_t Not_Int(int32_t A);                                                                                           // [0x2f2fff0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalSafe2D
	// FVector2D NormalSafe2D(FVector2D A, float Tolerance);                                                                 // [0x2f2e960] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizeToRange
	// float NormalizeToRange(float value, float RangeMin, float RangeMax);                                                  // [0x2f2ecb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizedDeltaRotator
	// FRotator NormalizedDeltaRotator(FRotator A, FRotator B);                                                              // [0x2f2edc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizeAxis
	// float NormalizeAxis(float Angle);                                                                                     // [0x2f2ec30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Normalize2D
	// void Normalize2D(FVector2D& A, float Tolerance);                                                                      // [0x2f2eac0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Normal2D
	// FVector2D Normal2D(FVector2D A);                                                                                      // [0x2f2e690] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Normal
	// FVector Normal(FVector A, float Tolerance);                                                                           // [0x2f2e7a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NegateVector
	// FVector NegateVector(FVector A);                                                                                      // [0x2f2e550] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NegateRotator
	// FRotator NegateRotator(FRotator A);                                                                                   // [0x2f2e4b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Negated2D
	// FVector2D Negated2D(FVector2D& A);                                                                                    // [0x2f2e5f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NearlyEqual_TransformTransform
	// bool NearlyEqual_TransformTransform(FTransform& A, FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // [0x2f2e290] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NearlyEqual_FloatFloat
	// bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);                                                  // [0x2f2e180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
	// float MultiplyMultiply_FloatFloat(float Base, float Exp);                                                             // [0x2f2cec0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MultiplyByPi
	// float MultiplyByPi(float value);                                                                                      // [0x2f2ce40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorVector
	// FVector Multiply_VectorVector(FVector A, FVector B);                                                                  // [0x2f2e0b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorInt
	// FVector Multiply_VectorInt(FVector A, int32_t B);                                                                     // [0x2f2dc40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorFloat
	// FVector Multiply_VectorFloat(FVector A, float B);                                                                     // [0x2f2db60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector4Vector4
	// FVector4 Multiply_Vector4Vector4(FVector4& A, FVector4& B);                                                           // [0x2f2df80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector2DVector2D
	// FVector2D Multiply_Vector2DVector2D(FVector2D A, FVector2D B);                                                        // [0x2f2dec0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector2DFloat
	// FVector2D Multiply_Vector2DFloat(FVector2D A, float B);                                                               // [0x2f2ddf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_TimespanFloat
	// FTimespan Multiply_TimespanFloat(FTimespan A, float Scalar);                                                          // [0x2f2dd20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_RotatorInt
	// FRotator Multiply_RotatorInt(FRotator A, int32_t B);                                                                  // [0x2f2dc40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_RotatorFloat
	// FRotator Multiply_RotatorFloat(FRotator A, float B);                                                                  // [0x2f2db60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_QuatQuat
	// FQuat Multiply_QuatQuat(FQuat& A, FQuat& B);                                                                          // [0x2f2da20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_MatrixMatrix
	// FMatrix Multiply_MatrixMatrix(FMatrix& A, FMatrix& B);                                                                // [0x2f2d810] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_MatrixFloat
	// FMatrix Multiply_MatrixFloat(FMatrix& A, float B);                                                                    // [0x2f2d6a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
	// FLinearColor Multiply_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                         // [0x2f2d5c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_LinearColorFloat
	// FLinearColor Multiply_LinearColorFloat(FLinearColor A, float B);                                                      // [0x2f2d500] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntPointIntPoint
	// FIntPoint Multiply_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                        // [0x2f2d430] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntPointInt
	// FIntPoint Multiply_IntPointInt(FIntPoint A, int32_t B);                                                               // [0x2f2d350] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntInt
	// int32_t Multiply_IntInt(int32_t A, int32_t B);                                                                        // [0x2f2d290] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntFloat
	// float Multiply_IntFloat(int32_t A, float B);                                                                          // [0x2f2d1c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Int64Int64
	// int64_t Multiply_Int64Int64(int64_t A, int64_t B);                                                                    // [0x2f2d100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_FloatFloat
	// float Multiply_FloatFloat(float A, float B);                                                                          // [0x2f2d040] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_ByteByte
	// char Multiply_ByteByte(char A, char B);                                                                               // [0x2f2cf80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MirrorVectorByNormal
	// FVector MirrorVectorByNormal(FVector InVect, FVector InNormal);                                                       // [0x2f22860] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfIntArray
	// void MinOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue);                           // [0x2f2ca50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfFloatArray
	// void MinOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue);                           // [0x2f2c910] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfByteArray
	// void MinOfByteArray(TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue);                               // [0x2f2c7d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinInt64
	// int64_t MinInt64(int64_t A, int64_t B);                                                                               // [0x2f2c710] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinimumAreaRectangle
	// void MinimumAreaRectangle(class UObject* WorldContextObject, TArray<FVector>& InVerts, FVector& SampleSurfaceNormal, FVector& OutRectCenter, FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // [0x2f2cb90] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Min
	// int32_t Min(int32_t A, int32_t B);                                                                                    // [0x2f2c650] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfIntArray
	// void MaxOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue);                           // [0x2f2c510] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfFloatArray
	// void MaxOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue);                           // [0x2f2c3d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfByteArray
	// void MaxOfByteArray(TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue);                               // [0x2f2c290] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxInt64
	// int64_t MaxInt64(int64_t A, int64_t B);                                                                               // [0x2f2c1d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Max
	// int32_t Max(int32_t A, int32_t B);                                                                                    // [0x2f2c110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformVector4
	// FVector4 Matrix_TransformVector4(FMatrix& M, FVector4 V);                                                             // [0x2f2bec0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformVector
	// FVector4 Matrix_TransformVector(FMatrix& M, FVector V);                                                               // [0x2f2bfe0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformPosition
	// FVector4 Matrix_TransformPosition(FMatrix& M, FVector V);                                                             // [0x2f2bd80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ToQuat
	// FQuat Matrix_ToQuat(FMatrix& M);                                                                                      // [0x2f2bce0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetOrigin
	// void Matrix_SetOrigin(FMatrix& M, FVector NewOrigin);                                                                 // [0x2f2bc00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetColumn
	// void Matrix_SetColumn(FMatrix& M, TEnumAsByte<EMatrixColumns> Column, FVector value);                                 // [0x2f2bad0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetAxis
	// void Matrix_SetAxis(FMatrix& M, TEnumAsByte<EAxis> Axis, FVector AxisVector);                                         // [0x2f2b9a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ScaleTranslation
	// FMatrix Matrix_ScaleTranslation(FMatrix& M, FVector Scale3D);                                                         // [0x2f2b860] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_RemoveTranslation
	// FMatrix Matrix_RemoveTranslation(FMatrix& M);                                                                         // [0x2f2b7a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_RemoveScaling
	// void Matrix_RemoveScaling(FMatrix& M, float Tolerance);                                                               // [0x2f2b6d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_Mirror
	// FMatrix Matrix_Mirror(FMatrix& M, TEnumAsByte<EAxis> MirrorAxis, TEnumAsByte<EAxis> FlipAxis);                        // [0x2f2b560] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_InverseTransformVector
	// FVector Matrix_InverseTransformVector(FMatrix& M, FVector V);                                                         // [0x2f2b3f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_InverseTransformPosition
	// FVector Matrix_InverseTransformPosition(FMatrix& M, FVector V);                                                       // [0x2f2b280] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_Identity
	// FMatrix Matrix_Identity();                                                                                            // [0x2f2b230] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetUnitAxis
	// FVector Matrix_GetUnitAxis(FMatrix& M, TEnumAsByte<EAxis> Axis);                                                      // [0x2f2b130] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetUnitAxes
	// void Matrix_GetUnitAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z);                                              // [0x2f2afa0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetTransposed
	// FMatrix Matrix_GetTransposed(FMatrix& M);                                                                             // [0x2f2adb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint
	// FMatrix Matrix_GetTransposeAdjoint(FMatrix& M);                                                                       // [0x2f2acf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaleVector
	// FVector Matrix_GetScaleVector(FMatrix& M, float Tolerance);                                                           // [0x2f2a8d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaledAxis
	// FVector Matrix_GetScaledAxis(FMatrix& M, TEnumAsByte<EAxis> Axis);                                                    // [0x2f2ab80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaledAxes
	// void Matrix_GetScaledAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z);                                            // [0x2f2a9d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetRotDeterminant
	// float Matrix_GetRotDeterminant(FMatrix& M);                                                                           // [0x2f2a7c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetRotator
	// FRotator Matrix_GetRotator(FMatrix& M);                                                                               // [0x2f1bb50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetOrigin
	// FVector Matrix_GetOrigin(FMatrix& InMatrix);                                                                          // [0x2f2a720] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale
	// float Matrix_GetMaximumAxisScale(FMatrix& M);                                                                         // [0x2f2a690] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale
	// FMatrix Matrix_GetMatrixWithoutScale(FMatrix& M, float Tolerance);                                                    // [0x2f2a550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetInverse
	// FMatrix Matrix_GetInverse(FMatrix& M);                                                                                // [0x2f2a490] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane
	// bool Matrix_GetFrustumTopPlane(FMatrix& M, FPlane& OutPlane);                                                         // [0x2f2a2a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane
	// bool Matrix_GetFrustumRightPlane(FMatrix& M, FPlane& OutPlane);                                                       // [0x2f2a0b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane
	// bool Matrix_GetFrustumNearPlane(FMatrix& M, FPlane& OutPlane);                                                        // [0x2f29f00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane
	// bool Matrix_GetFrustumLeftPlane(FMatrix& M, FPlane& OutPlane);                                                        // [0x2f29d10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane
	// bool Matrix_GetFrustumFarPlane(FMatrix& M, FPlane& OutPlane);                                                         // [0x2f29b20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane
	// bool Matrix_GetFrustumBottomPlane(FMatrix& M, FPlane& OutPlane);                                                      // [0x2f29930] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetDeterminant
	// float Matrix_GetDeterminant(FMatrix& M);                                                                              // [0x2f298a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetColumn
	// FVector Matrix_GetColumn(FMatrix& M, TEnumAsByte<EMatrixColumns> Column);                                             // [0x2f297b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ContainsNaN
	// bool Matrix_ContainsNaN(FMatrix& M);                                                                                  // [0x2f29720] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ConcatenateTranslation
	// FMatrix Matrix_ConcatenateTranslation(FMatrix& M, FVector Translation);                                               // [0x2f295c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ApplyScale
	// FMatrix Matrix_ApplyScale(FMatrix& M, float Scale);                                                                   // [0x2f29350] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MapRangeUnclamped
	// float MapRangeUnclamped(float value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);               // [0x2f291b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MapRangeClamped
	// float MapRangeClamped(float value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);                 // [0x773d90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector4
	// FVector4 MakeVector4(float X, float Y, float Z, float W);                                                             // [0x2f28f40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector2D
	// FVector2D MakeVector2D(float X, float Y);                                                                             // [0x2f28e80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector
	// FVector MakeVector(float X, float Y, float Z);                                                                        // [0x2f290a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTransform
	// FTransform MakeTransform(FVector Location, FRotator Rotation, FVector Scale);                                         // [0x2f28cf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTimespan2
	// FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano);         // [0x2f289f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTimespan
	// FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t MilliSeconds);          // [0x2f28b70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZY
	// FRotator MakeRotFromZY(FVector& Z, FVector& Y);                                                                       // [0x2f28690] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZX
	// FRotator MakeRotFromZX(FVector& Z, FVector& X);                                                                       // [0x2f28580] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZ
	// FRotator MakeRotFromZ(FVector& Z);                                                                                    // [0x2f284c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromYZ
	// FRotator MakeRotFromYZ(FVector& Y, FVector& Z);                                                                       // [0x2f283b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromYX
	// FRotator MakeRotFromYX(FVector& Y, FVector& X);                                                                       // [0x2f282a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromY
	// FRotator MakeRotFromY(FVector& Y);                                                                                    // [0x2f281e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromXZ
	// FRotator MakeRotFromXZ(FVector& X, FVector& Z);                                                                       // [0x2f280d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromXY
	// FRotator MakeRotFromXY(FVector& X, FVector& Y);                                                                       // [0x2f27fc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromX
	// FRotator MakeRotFromX(FVector& X);                                                                                    // [0x2f27f00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotator
	// FRotator MakeRotator(float Roll, float Pitch, float Yaw);                                                             // [0x2f288e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotationFromAxes
	// FRotator MakeRotationFromAxes(FVector Forward, FVector Right, FVector Up);                                            // [0x2f287a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRelativeTransform
	// FTransform MakeRelativeTransform(FTransform& A, FTransform& RelativeTo);                                              // [0x2f27d70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRandomStream
	// FRandomStream MakeRandomStream(int32_t InitialSeed);                                                                  // [0x2f27ce0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeQualifiedFrameTime
	// FQualifiedFrameTime MakeQualifiedFrameTime(FFrameNumber Frame, FFrameRate FrameRate, float SubFrame);                 // [0x2f27bd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakePulsatingValue
	// float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);                                // [0x2f27ac0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
	// FPlane MakePlaneFromPointAndNormal(FVector Point, FVector Normal);                                                    // [0x2f279e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeFrameRate
	// FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator);                                                     // [0x2f27920] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeDateTime
	// FDateTime MakeDateTime(int32_t YEar, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // [0x2f27730] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeColor
	// FLinearColor MakeColor(float R, float G, float B, float A);                                                           // [0x2f275d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeBox2D
	// FBox2D MakeBox2D(FVector2D Min, FVector2D Max);                                                                       // [0x2f27420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeBox
	// FBox MakeBox(FVector Min, FVector Max);                                                                               // [0x2f274f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Loge
	// float Loge(float A);                                                                                                  // [0x2f273a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Log
	// float Log(float A, float Base);                                                                                       // [0x2f272e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
	// bool LinePlaneIntersection_OriginNormal(FVector& LineStart, FVector& LineEnd, FVector PlaneOrigin, FVector PlaneNormal, float& T, FVector& Intersection); // [0x2f25ef0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinePlaneIntersection
	// bool LinePlaneIntersection(FVector& LineStart, FVector& LineEnd, FPlane& APlane, float& T, FVector& Intersection);    // [0x2f25d00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColorLerpUsingHSV
	// FLinearColor LinearColorLerpUsingHSV(FLinearColor A, FLinearColor B, float Alpha);                                    // [0x2f26260] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColorLerp
	// FLinearColor LinearColorLerp(FLinearColor A, FLinearColor B, float Alpha);                                            // [0x2f26110] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Yellow
	// FLinearColor LinearColor_Yellow();                                                                                    // [0x2f272c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_White
	// FLinearColor LinearColor_White();                                                                                     // [0x2f272a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Transparent
	// FLinearColor LinearColor_Transparent();                                                                               // [0x2f27280] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_ToRGBE
	// FColor LinearColor_ToRGBE(FLinearColor InLinearColor);                                                                // [0x2f271f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_ToNewOpacity
	// FLinearColor LinearColor_ToNewOpacity(FLinearColor InColor, float InOpacity);                                         // [0x2f27110] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetTemperature
	// void LinearColor_SetTemperature(FLinearColor& InOutColor, float InTemperature);                                       // [0x2f27030] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetRGBA
	// void LinearColor_SetRGBA(FLinearColor& InOutColor, float R, float G, float B, float A);                               // [0x2f26e10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetRandomHue
	// void LinearColor_SetRandomHue(FLinearColor& InOutColor);                                                              // [0x2f26fa0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromSRGB
	// void LinearColor_SetFromSRGB(FLinearColor& InOutColor, FColor& InSRGB);                                               // [0x2f26d30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromPow22
	// void LinearColor_SetFromPow22(FLinearColor& InOutColor, FColor& InColor);                                             // [0x2f26c50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromHSV
	// void LinearColor_SetFromHSV(FLinearColor& InOutColor, float H, float S, float V, float A);                            // [0x2f26ac0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Set
	// void LinearColor_Set(FLinearColor& InOutColor, FLinearColor InColor);                                                 // [0x2f26a00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Red
	// FLinearColor LinearColor_Red();                                                                                       // [0x2f269e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_QuantizeRound
	// FColor LinearColor_QuantizeRound(FLinearColor InColor);                                                               // [0x2f26950] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Quantize
	// FColor LinearColor_Quantize(FLinearColor InColor);                                                                    // [0x2f268c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_IsNearEqual
	// bool LinearColor_IsNearEqual(FLinearColor A, FLinearColor B, float Tolerance);                                        // [0x2f26770] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Green
	// FLinearColor LinearColor_Green();                                                                                     // [0x2f26750] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Gray
	// FLinearColor LinearColor_Gray();                                                                                      // [0x2f26730] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetMin
	// float LinearColor_GetMin(FLinearColor InColor);                                                                       // [0x2f266b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetMax
	// float LinearColor_GetMax(FLinearColor InColor);                                                                       // [0x2f26630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetLuminance
	// float LinearColor_GetLuminance(FLinearColor InColor);                                                                 // [0x2f26590] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Distance
	// float LinearColor_Distance(FLinearColor C1, FLinearColor C2);                                                         // [0x2f26490] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Desaturated
	// FLinearColor LinearColor_Desaturated(FLinearColor InColor, float InDesaturation);                                     // [0x2f263c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Blue
	// FLinearColor LinearColor_Blue();                                                                                      // [0x2f263a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Black
	// FLinearColor LinearColor_Black();                                                                                     // [0x2f26380] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessLess_VectorRotator
	// FVector LessLess_VectorRotator(FVector A, FRotator B);                                                                // [0x2f25860] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_TimespanTimespan
	// bool LessEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                            // [0x2f25570] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_IntInt
	// bool LessEqual_IntInt(int32_t A, int32_t B);                                                                          // [0x2f257a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_Int64Int64
	// bool LessEqual_Int64Int64(int64_t A, int64_t B);                                                                      // [0x2f256e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_FloatFloat
	// bool LessEqual_FloatFloat(float A, float B);                                                                          // [0x2f25620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
	// bool LessEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                            // [0x2f25570] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_ByteByte
	// bool LessEqual_ByteByte(char A, char B);                                                                              // [0x2f254b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_TimespanTimespan
	// bool Less_TimespanTimespan(FTimespan A, FTimespan B);                                                                 // [0x2f25a10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_IntInt
	// bool Less_IntInt(int32_t A, int32_t B);                                                                               // [0x2f25c40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_Int64Int64
	// bool Less_Int64Int64(int64_t A, int64_t B);                                                                           // [0x2f25b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_FloatFloat
	// bool Less_FloatFloat(float A, float B);                                                                               // [0x2f25ac0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_DateTimeDateTime
	// bool Less_DateTimeDateTime(FDateTime A, FDateTime B);                                                                 // [0x2f25a10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_ByteByte
	// bool Less_ByteByte(char A, char B);                                                                                   // [0x2f25950] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Lerp
	// float Lerp(float A, float B, float Alpha);                                                                            // [0x2f253a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsZero2D
	// bool IsZero2D(FVector2D& A);                                                                                          // [0x2f252f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsPointInBoxWithTransform
	// bool IsPointInBoxWithTransform(FVector Point, FTransform& BoxWorldTransform, FVector BoxExtent);                      // [0x2f25160] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsPointInBox
	// bool IsPointInBox(FVector Point, FVector BoxOrigin, FVector BoxExtent);                                               // [0x772480] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsNearlyZero2D
	// bool IsNearlyZero2D(FVector2D& A, float Tolerance);                                                                   // [0x2f25060] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsMorning
	// bool IsMorning(FDateTime A);                                                                                          // [0x2f24fb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsLeapYear
	// bool IsLeapYear(int32_t YEar);                                                                                        // [0x2f24f30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsAfternoon
	// bool IsAfternoon(FDateTime A);                                                                                        // [0x2f24e80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InvertTransform
	// FTransform InvertTransform(FTransform& T);                                                                            // [0x2f24c70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformRotation
	// FRotator InverseTransformRotation(FTransform& T, FRotator Rotation);                                                  // [0x2f24b30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformLocation
	// FVector InverseTransformLocation(FTransform& T, FVector Location);                                                    // [0x2f24940] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformDirection
	// FVector InverseTransformDirection(FTransform& T, FVector Direction);                                                  // [0x2f247a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Zero
	// FIntPoint IntPoint_Zero();                                                                                            // [0x2f24770] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Up
	// FIntPoint IntPoint_Up();                                                                                              // [0x2f24740] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Right
	// FIntPoint IntPoint_Right();                                                                                           // [0x2f24720] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_One
	// FIntPoint IntPoint_One();                                                                                             // [0x2f246f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Left
	// FIntPoint IntPoint_Left();                                                                                            // [0x2f246c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Down
	// FIntPoint IntPoint_Down();                                                                                            // [0x2f24690] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_IntInt
	// bool InRange_IntInt(int32_t value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax);                   // [0x2f24510] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_Int64Int64
	// bool InRange_Int64Int64(int64_t value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax);               // [0x2f24380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_FloatFloat
	// bool InRange_FloatFloat(float value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);                     // [0x2f241e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Hypotenuse
	// float Hypotenuse(float Width, float Height);                                                                          // [0x2f24120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGBLinear
	// FLinearColor HSVToRGBLinear(FLinearColor HSV);                                                                        // [0x2f23fb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGB_Vector
	// void HSVToRGB_Vector(FLinearColor HSV, FLinearColor& RGB);                                                            // [0x2f24040] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGB
	// FLinearColor HSVToRGB(float H, float S, float V, float A);                                                            // [0x2f23e40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GridSnap_Float
	// float GridSnap_Float(float Location, float GridSize);                                                                 // [0x2f23d10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterGreater_VectorRotator
	// FVector GreaterGreater_VectorRotator(FVector A, FRotator B);                                                          // [0x2f23870] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
	// bool GreaterEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                         // [0x2f23580] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_IntInt
	// bool GreaterEqual_IntInt(int32_t A, int32_t B);                                                                       // [0x2f237b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_Int64Int64
	// bool GreaterEqual_Int64Int64(int64_t A, int64_t B);                                                                   // [0x2f236f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_FloatFloat
	// bool GreaterEqual_FloatFloat(float A, float B);                                                                       // [0x2f23630] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
	// bool GreaterEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                         // [0x2f23580] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_ByteByte
	// bool GreaterEqual_ByteByte(char A, char B);                                                                           // [0x2f234c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_TimespanTimespan
	// bool Greater_TimespanTimespan(FTimespan A, FTimespan B);                                                              // [0x2f23a20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_IntInt
	// bool Greater_IntInt(int32_t A, int32_t B);                                                                            // [0x2f23c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_Int64Int64
	// bool Greater_Int64Int64(int64_t A, int64_t B);                                                                        // [0x2f23b90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_FloatFloat
	// bool Greater_FloatFloat(float A, float B);                                                                            // [0x2f23ad0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_DateTimeDateTime
	// bool Greater_DateTimeDateTime(FDateTime A, FDateTime B);                                                              // [0x2f23a20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_ByteByte
	// bool Greater_ByteByte(char A, char B);                                                                                // [0x2f23960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetYear
	// int32_t GetYear(FDateTime A);                                                                                         // [0x2f23440] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetYawPitchFromVector
	// void GetYawPitchFromVector(FVector InVec, float& Yaw, float& Pitch);                                                  // [0x2f23310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetVectorArrayAverage
	// FVector GetVectorArrayAverage(TArray<FVector>& Vectors);                                                              // [0x2f23250] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetUpVector
	// FVector GetUpVector(FRotator InRot);                                                                                  // [0x2f231b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalSeconds
	// float GetTotalSeconds(FTimespan A);                                                                                   // [0x2f23130] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalMinutes
	// float GetTotalMinutes(FTimespan A);                                                                                   // [0x2f230b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalMilliseconds
	// float GetTotalMilliseconds(FTimespan A);                                                                              // [0x2f23030] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalHours
	// float GetTotalHours(FTimespan A);                                                                                     // [0x2f22fb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalDays
	// float GetTotalDays(FTimespan A);                                                                                      // [0x2f22f30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTimeOfDay
	// FTimespan GetTimeOfDay(FDateTime A);                                                                                  // [0x2f22eb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTAU
	// float GetTAU();                                                                                                       // [0x2f22e90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSlopeDegreeAngles
	// void GetSlopeDegreeAngles(FVector& MyRightYAxis, FVector& FloorNormal, FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // [0x2f22cb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSeconds
	// int32_t GetSeconds(FTimespan A);                                                                                      // [0x2f22c00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSecond
	// int32_t GetSecond(FDateTime A);                                                                                       // [0x2f22c00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetRotated2D
	// FVector2D GetRotated2D(FVector2D A, float AngleDeg);                                                                  // [0x2f229f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetRightVector
	// FVector GetRightVector(FRotator InRot);                                                                               // [0x2f22950] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetReflectionVector
	// FVector GetReflectionVector(FVector Direction, FVector SurfaceNormal);                                                // [0x2f22860] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPointDistanceToSegment
	// float GetPointDistanceToSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);                             // [0x2f22730] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPointDistanceToLine
	// float GetPointDistanceToLine(FVector Point, FVector LineOrigin, FVector LineDirection);                               // [0x2f22600] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPI
	// float GetPI();                                                                                                        // [0x2f225e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMonth
	// int32_t GetMonth(FDateTime A);                                                                                        // [0x2f22560] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinutes
	// int32_t GetMinutes(FTimespan A);                                                                                      // [0x2f224b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinute
	// int32_t GetMinute(FDateTime A);                                                                                       // [0x2f224b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinElement
	// float GetMinElement(FVector A);                                                                                       // [0x2f22430] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMin2D
	// float GetMin2D(FVector2D A);                                                                                          // [0x2f223b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMilliseconds
	// int32_t GetMilliseconds(FTimespan A);                                                                                 // [0x2f22300] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMillisecond
	// int32_t GetMillisecond(FDateTime A);                                                                                  // [0x2f22250] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMaxElement
	// float GetMaxElement(FVector A);                                                                                       // [0x2f221d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMax2D
	// float GetMax2D(FVector2D A);                                                                                          // [0x2f22150] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHours
	// int32_t GetHours(FTimespan A);                                                                                        // [0x2f220a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHour12
	// int32_t GetHour12(FDateTime A);                                                                                       // [0x2f22020] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHour
	// int32_t GetHour(FDateTime A);                                                                                         // [0x2f220a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetForwardVector
	// FVector GetForwardVector(FRotator InRot);                                                                             // [0x2f21f80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDuration
	// FTimespan GetDuration(FTimespan A);                                                                                   // [0x2f21f00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDirectionUnitVector
	// FVector GetDirectionUnitVector(FVector From, FVector to);                                                             // [0x2f21d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDays
	// int32_t GetDays(FTimespan A);                                                                                         // [0x2f21cb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDayOfYear
	// int32_t GetDayOfYear(FDateTime A);                                                                                    // [0x2f21c30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDay
	// int32_t GetDay(FDateTime A);                                                                                          // [0x2f21bb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDate
	// FDateTime GetDate(FDateTime A);                                                                                       // [0x2f21b20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAzimuthAndElevation
	// void GetAzimuthAndElevation(FVector InDirection, FTransform& ReferenceFrame, float& Azimuth, float& Elevation);       // [0x2f21940] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAxes
	// void GetAxes(FRotator A, FVector& X, FVector& Y, FVector& Z);                                                         // [0x2f217c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAbsMax2D
	// float GetAbsMax2D(FVector2D A);                                                                                       // [0x2f21730] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAbs2D
	// FVector2D GetAbs2D(FVector2D A);                                                                                      // [0x2f216a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTruncVector
	// FIntVector FTruncVector(FVector& InVector);                                                                           // [0x2f209b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTrunc64
	// int64_t FTrunc64(float A);                                                                                            // [0x2f208b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTrunc
	// int32_t FTrunc(float A);                                                                                              // [0x2f20930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromSeconds
	// FTimespan FromSeconds(float Seconds);                                                                                 // [0x2f21610] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromMinutes
	// FTimespan FromMinutes(float Minutes);                                                                                 // [0x2f21580] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromMilliseconds
	// FTimespan FromMilliseconds(float MilliSeconds);                                                                       // [0x2f214f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromHours
	// FTimespan FromHours(float Hours);                                                                                     // [0x2f21460] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromDays
	// FTimespan FromDays(float Days);                                                                                       // [0x2f213d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Fraction
	// float Fraction(float A);                                                                                              // [0x2f21340] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMod
	// int32_t FMod(float Dividend, float Divisor, float& Remainder);                                                        // [0x2f207a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMin
	// float FMin(float A, float B);                                                                                         // [0x2f206e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMax
	// float FMax(float A, float B);                                                                                         // [0x2f20620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FloatSpringInterp
	// float FloatSpringInterp(float Current, float Target, FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // [0x2f21130] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.FixedTurn
	// float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);                                                 // [0x2f21020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpTo_Constant
	// float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);                            // [0x2f204d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpTo
	// float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);                                     // [0x2f20380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpEaseInOut
	// float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);                                                // [0x2f20230] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
	// void FindNearestPointsOnLineSegments(FVector Segment1Start, FVector Segment1End, FVector Segment2Start, FVector Segment2End, FVector& Segment1Point, FVector& Segment2Point); // [0x2f20e10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindLookAtRotation
	// FRotator FindLookAtRotation(FVector& Start, FVector& Target);                                                         // [0x2f20cd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindClosestPointOnSegment
	// FVector FindClosestPointOnSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);                           // [0x2f20b90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindClosestPointOnLine
	// FVector FindClosestPointOnLine(FVector Point, FVector LineOrigin, FVector LineDirection);                             // [0x2f20a50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FFloor64
	// int64_t FFloor64(float A);                                                                                            // [0x2f200e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FFloor
	// int32_t FFloor(float A);                                                                                              // [0x2f201a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FClamp
	// float FClamp(float value, float Min, float Max);                                                                      // [0x2f1ffd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FCeil64
	// int64_t FCeil64(float A);                                                                                             // [0x2f1fe70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FCeil
	// int32_t FCeil(float A);                                                                                               // [0x2f1ff30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Exp
	// float Exp(float A);                                                                                                   // [0x2f1fdf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_VectorVector
	// bool EqualExactly_VectorVector(FVector A, FVector B);                                                                 // [0x2f1fc40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_Vector4Vector4
	// bool EqualExactly_Vector4Vector4(FVector4& A, FVector4& B);                                                           // [0x2f1fb10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D
	// bool EqualExactly_Vector2DVector2D(FVector2D A, FVector2D B);                                                         // [0x2f1fa40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_VectorVector
	// bool EqualEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);                                             // [0x2f1f900] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Vector4Vector4
	// bool EqualEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance);                                       // [0x2f1f770] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
	// bool EqualEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);                                     // [0x76ef50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_TransformTransform
	// bool EqualEqual_TransformTransform(FTransform& A, FTransform& B);                                                     // [0x2f1f5f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
	// bool EqualEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                           // [0x2f1ee00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_RotatorRotator
	// bool EqualEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);                                         // [0x2f1f410] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_QuatQuat
	// bool EqualEqual_QuatQuat(FQuat& A, FQuat& B, float Tolerance);                                                        // [0x2f1f2b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ObjectObject
	// bool EqualEqual_ObjectObject(class UObject* A, class UObject* B);                                                     // [0x2f1ed40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_NameName
	// bool EqualEqual_NameName(FName A, FName B);                                                                           // [0x2f1ed40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_MatrixMatrix
	// bool EqualEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance);                                                // [0x2f1f120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor
	// bool EqualEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                               // [0x2f1f040] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_IntInt
	// bool EqualEqual_IntInt(int32_t A, int32_t B);                                                                         // [0x2f1ef80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Int64Int64
	// bool EqualEqual_Int64Int64(int64_t A, int64_t B);                                                                     // [0x2f1ed40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_FloatFloat
	// bool EqualEqual_FloatFloat(float A, float B);                                                                         // [0x2f1eeb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
	// bool EqualEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                           // [0x2f1ee00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ClassClass
	// bool EqualEqual_ClassClass(class UClass* A, class UClass* B);                                                         // [0x2f1ed40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ByteByte
	// bool EqualEqual_ByteByte(char A, char B);                                                                             // [0x2f1ec80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_BoolBool
	// bool EqualEqual_BoolBool(bool A, bool B);                                                                             // [0x2f1ebb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Equal_IntPointIntPoint
	// bool Equal_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                                // [0x2f1fd20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Ease
	// float Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps);        // [0x2f1e9f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector
	// FVector DynamicWeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x2f1e6a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator
	// FRotator DynamicWeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x2f1e4f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float
	// float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x2f1e850] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DotProduct2D
	// float DotProduct2D(FVector2D A, FVector2D B);                                                                         // [0x2f1e360] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Dot_VectorVector
	// float Dot_VectorVector(FVector A, FVector B);                                                                         // [0x2f1e420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorVector
	// FVector Divide_VectorVector(FVector A, FVector B);                                                                    // [0x2f1e230] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorInt
	// FVector Divide_VectorInt(FVector A, int32_t B);                                                                       // [0x2f1e0f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorFloat
	// FVector Divide_VectorFloat(FVector A, float B);                                                                       // [0x2f1dfc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector4Vector4
	// FVector4 Divide_Vector4Vector4(FVector4& A, FVector4& B);                                                             // [0x2f1de90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector2DVector2D
	// FVector2D Divide_Vector2DVector2D(FVector2D A, FVector2D B);                                                          // [0x2f1dd90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector2DFloat
	// FVector2D Divide_Vector2DFloat(FVector2D A, float B);                                                                 // [0x2f1dc80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_TimespanFloat
	// FTimespan Divide_TimespanFloat(FTimespan A, float Scalar);                                                            // [0x2f1dbb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_LinearColorLinearColor
	// FLinearColor Divide_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                           // [0x2f1dad0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntPointIntPoint
	// FIntPoint Divide_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                          // [0x2f1d9e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntPointInt
	// FIntPoint Divide_IntPointInt(FIntPoint A, int32_t B);                                                                 // [0x2f1d8f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntInt
	// int32_t Divide_IntInt(int32_t A, int32_t B);                                                                          // [0x2f1d810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Int64Int64
	// int64_t Divide_Int64Int64(int64_t A, int64_t B);                                                                      // [0x2f1d730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_FloatFloat
	// float Divide_FloatFloat(float A, float B);                                                                            // [0x2f1d5b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_ByteByte
	// char Divide_ByteByte(char A, char B);                                                                                 // [0x2f1d4e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DistanceSquared2D
	// float DistanceSquared2D(FVector2D v1, FVector2D v2);                                                                  // [0x2f1d410] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Distance2D
	// float Distance2D(FVector2D v1, FVector2D v2);                                                                         // [0x2f1d340] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegTan
	// float DegTan(float A);                                                                                                // [0x2f1d230] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegSin
	// float DegSin(float A);                                                                                                // [0x2f1d1a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegreesToRadians
	// float DegreesToRadians(float A);                                                                                      // [0x2f1d2c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegCos
	// float DegCos(float A);                                                                                                // [0x2f1d110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAtan2
	// float DegAtan2(float Y, float X);                                                                                     // [0x2f1cfb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAtan
	// float DegAtan(float A);                                                                                               // [0x2f1d080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAsin
	// float DegAsin(float A);                                                                                               // [0x2f1cf10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAcos
	// float DegAcos(float A);                                                                                               // [0x2f1ce70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DaysInYear
	// int32_t DaysInYear(int32_t YEar);                                                                                     // [0x2f1cdf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DaysInMonth
	// int32_t DaysInMonth(int32_t YEar, int32_t Month);                                                                     // [0x2f1cd10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeMinValue
	// FDateTime DateTimeMinValue();                                                                                         // [0x2711da0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeMaxValue
	// FDateTime DateTimeMaxValue();                                                                                         // [0x2f1cce0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeFromString
	// bool DateTimeFromString(FString DateTimeString, FDateTime& Result);                                                   // [0x2f1cba0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeFromIsoString
	// bool DateTimeFromIsoString(FString IsoString, FDateTime& Result);                                                     // [0x2f1ca60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CrossProduct2D
	// float CrossProduct2D(FVector2D A, FVector2D B);                                                                       // [0x2f1c890] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Cross_VectorVector
	// FVector Cross_VectorVector(FVector A, FVector B);                                                                     // [0x2f1c950] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CreateVectorFromYawPitch
	// FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);                                               // [0x2f1c770] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Cos
	// float Cos(float A);                                                                                                   // [0x2f1c6f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ConvertTransformToRelative
	// FTransform ConvertTransformToRelative(FTransform& Transform, FTransform& ParentTransform);                            // [0x2f1c560] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToVector2D
	// FVector2D Conv_VectorToVector2D(FVector InVector);                                                                    // [0x2f1c4e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToTransform
	// FTransform Conv_VectorToTransform(FVector InLocation);                                                                // [0x2f1c440] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToRotator
	// FRotator Conv_VectorToRotator(FVector InVec);                                                                         // [0x2f1c3a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToQuaterion
	// FQuat Conv_VectorToQuaterion(FVector InVec);                                                                          // [0x2f1c310] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToLinearColor
	// FLinearColor Conv_VectorToLinearColor(FVector InVec);                                                                 // [0x2f1c280] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToVector
	// FVector Conv_Vector4ToVector(FVector4& InVector4);                                                                    // [0x2f1c1d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToRotator
	// FRotator Conv_Vector4ToRotator(FVector4& InVec);                                                                      // [0x2f1c120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToQuaterion
	// FQuat Conv_Vector4ToQuaterion(FVector4& InVec);                                                                       // [0x2f1c080] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector2DToVector
	// FVector Conv_Vector2DToVector(FVector2D InVector2D, float Z);                                                         // [0x2f1bfb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector2DToIntPoint
	// FIntPoint Conv_Vector2DToIntPoint(FVector2D InVector2D);                                                              // [0x2f1bf00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_TransformToMatrix
	// FMatrix Conv_TransformToMatrix(FTransform& Transform);                                                                // [0x2f1bdf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_RotatorToVector
	// FVector Conv_RotatorToVector(FRotator InRot);                                                                         // [0x2f1bd50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_RotatorToTransform
	// FTransform Conv_RotatorToTransform(FRotator& InRotator);                                                              // [0x2f1bca0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_MatrixToTransform
	// FTransform Conv_MatrixToTransform(FMatrix& InMatrix);                                                                 // [0x2f1bbf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_MatrixToRotator
	// FRotator Conv_MatrixToRotator(FMatrix& InMatrix);                                                                     // [0x2f1bb50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_LinearColorToVector
	// FVector Conv_LinearColorToVector(FLinearColor InLinearColor);                                                         // [0x2f1bac0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_LinearColorToColor
	// FColor Conv_LinearColorToColor(FLinearColor InLinearColor, bool InUseSRGB);                                           // [0x2f1b9e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntVectorToVector
	// FVector Conv_IntVectorToVector(FIntVector& InIntVector);                                                              // [0x2f1b920] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToIntVector
	// FIntVector Conv_IntToIntVector(int32_t inInt);                                                                        // [0x2f1b8a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToInt64
	// int64_t Conv_IntToInt64(int32_t inInt);                                                                               // [0x2f1b820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToFloat
	// float Conv_IntToFloat(int32_t inInt);                                                                                 // [0x2f1b7a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToByte
	// char Conv_IntToByte(int32_t inInt);                                                                                   // [0x2f1b720] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToBool
	// bool Conv_IntToBool(int32_t inInt);                                                                                   // [0x2f1b160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntPointToVector2D
	// FVector2D Conv_IntPointToVector2D(FIntPoint InIntPoint);                                                              // [0x2f1b690] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Int64ToInt
	// int32_t Conv_Int64ToInt(int64_t inInt);                                                                               // [0x2f1b610] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Int64ToByte
	// char Conv_Int64ToByte(int64_t inInt);                                                                                 // [0x2f1b590] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_FloatToVector
	// FVector Conv_FloatToVector(float InFloat);                                                                            // [0x2f1b500] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_FloatToLinearColor
	// FLinearColor Conv_FloatToLinearColor(float InFloat);                                                                  // [0x2f1b470] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ColorToLinearColor
	// FLinearColor Conv_ColorToLinearColor(FColor InColor);                                                                 // [0x2f1b3e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ByteToInt
	// int32_t Conv_ByteToInt(char InByte);                                                                                  // [0x2f1b370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ByteToFloat
	// float Conv_ByteToFloat(char InByte);                                                                                  // [0x2f1b2f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToInt
	// int32_t Conv_BoolToInt(bool InBool);                                                                                  // [0x2f1b270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToFloat
	// float Conv_BoolToFloat(bool InBool);                                                                                  // [0x2f1b1e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToByte
	// char Conv_BoolToByte(bool InBool);                                                                                    // [0x2f1b160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ComposeTransforms
	// FTransform ComposeTransforms(FTransform& A, FTransform& B);                                                           // [0x2f1afd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ComposeRotators
	// FRotator ComposeRotators(FRotator A, FRotator B);                                                                     // [0x2f1aee0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClassIsChildOf
	// bool ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);                                              // [0x2f1ae20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampVectorSize
	// FVector ClampVectorSize(FVector A, float Min, float Max);                                                             // [0x2f1ac60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampInt64
	// int64_t ClampInt64(int64_t value, int64_t Min, int64_t Max);                                                          // [0x2f1ab60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAxis
	// float ClampAxis(float Angle);                                                                                         // [0x2f1aae0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAxes2D
	// FVector2D ClampAxes2D(FVector2D A, float MinAxisVal, float MaxAxisVal);                                               // [0x2f1a9c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAngle
	// float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);                                   // [0x2f1a8b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Clamp
	// int32_t Clamp(int32_t value, int32_t Min, int32_t Max);                                                               // [0x2f1a7c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CInterpTo
	// FLinearColor CInterpTo(FLinearColor Current, FLinearColor Target, float DeltaTime, float InterpSpeed);                // [0x2f1a640] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector4
	// void BreakVector4(FVector4& InVec, float& X, float& Y, float& Z, float& W);                                           // [0x2f1a2e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector2D
	// void BreakVector2D(FVector2D InVec, float& X, float& Y);                                                              // [0x2f1a1c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector
	// void BreakVector(FVector InVec, float& X, float& Y, float& Z);                                                        // [0x2f1a4d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTransform
	// void BreakTransform(FTransform& InTransform, FVector& Location, FRotator& Rotation, FVector& Scale);                  // [0x2f19fa0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTimespan2
	// void BreakTimespan2(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // [0x2f19b40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTimespan
	// void BreakTimespan(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& MilliSeconds); // [0x2f19d70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRotIntoAxes
	// void BreakRotIntoAxes(FRotator& InRot, FVector& X, FVector& Y, FVector& Z);                                           // [0x2f19850] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRotator
	// void BreakRotator(FRotator InRot, float& Roll, float& Pitch, float& Yaw);                                             // [0x2f199d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRandomStream
	// void BreakRandomStream(FRandomStream& InRandomStream, int32_t& InitialSeed);                                          // [0x2f19770] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakQualifiedFrameTime
	// void BreakQualifiedFrameTime(FQualifiedFrameTime& InFrameTime, FFrameNumber& Frame, FFrameRate& FrameRate, float& SubFrame); // [0x2f195d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakFrameRate
	// void BreakFrameRate(FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator);                               // [0x2f194a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakDateTime
	// void BreakDateTime(FDateTime InDateTime, int32_t& YEar, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // [0x2f191f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakColor
	// void BreakColor(FLinearColor InColor, float& R, float& G, float& B, float& A);                                        // [0x2f19010] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanXOR
	// bool BooleanXOR(bool A, bool B);                                                                                      // [0x2f18f50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanOR
	// bool BooleanOR(bool A, bool B);                                                                                       // [0x2f18e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanNOR
	// bool BooleanNOR(bool A, bool B);                                                                                      // [0x2f18db0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanNAND
	// bool BooleanNAND(bool A, bool B);                                                                                     // [0x2f18ce0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanAND
	// bool BooleanAND(bool A, bool B);                                                                                      // [0x2f18c10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BMin
	// char BMin(char A, char B);                                                                                            // [0x2f18b50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BMax
	// char BMax(char A, char B);                                                                                            // [0x2f18a90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Atan2
	// float Atan2(float Y, float X);                                                                                        // [0x2f18950] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Atan
	// float Atan(float A);                                                                                                  // [0x2f18a10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Asin
	// float Asin(float A);                                                                                                  // [0x2f188b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.And_IntInt
	// int32_t And_IntInt(int32_t A, int32_t B);                                                                             // [0x2f187f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.And_Int64Int64
	// int64_t And_Int64Int64(int64_t A, int64_t B);                                                                         // [0x2f18730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorVector
	// FVector Add_VectorVector(FVector A, FVector B);                                                                       // [0x2f18660] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorInt
	// FVector Add_VectorInt(FVector A, int32_t B);                                                                          // [0x2f18580] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorFloat
	// FVector Add_VectorFloat(FVector A, float B);                                                                          // [0x2f184a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector4Vector4
	// FVector4 Add_Vector4Vector4(FVector4& A, FVector4& B);                                                                // [0x2f18370] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector2DVector2D
	// FVector2D Add_Vector2DVector2D(FVector2D A, FVector2D B);                                                             // [0x2f182b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector2DFloat
	// FVector2D Add_Vector2DFloat(FVector2D A, float B);                                                                    // [0x2f181e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_TimespanTimespan
	// FTimespan Add_TimespanTimespan(FTimespan A, FTimespan B);                                                             // [0x2f179d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_QuatQuat
	// FQuat Add_QuatQuat(FQuat& A, FQuat& B);                                                                               // [0x2f180d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_MatrixMatrix
	// FMatrix Add_MatrixMatrix(FMatrix& A, FMatrix& B);                                                                     // [0x2f17f40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_LinearColorLinearColor
	// FLinearColor Add_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                              // [0x2f17e60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_IntPointIntPoint
	// FIntPoint Add_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                             // [0x2f17d90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_IntPointInt
	// FIntPoint Add_IntPointInt(FIntPoint A, int32_t B);                                                                    // [0x2f17cc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_IntInt
	// int32_t Add_IntInt(int32_t A, int32_t B);                                                                             // [0x2f17c00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Int64Int64
	// int64_t Add_Int64Int64(int64_t A, int64_t B);                                                                         // [0x2f17b40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_FloatFloat
	// float Add_FloatFloat(float A, float B);                                                                               // [0x2f17a80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_DateTimeTimespan
	// FDateTime Add_DateTimeTimespan(FDateTime A, FTimespan B);                                                             // [0x2f179d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_DateTimeDateTime
	// FDateTime Add_DateTimeDateTime(FDateTime A, FDateTime B);                                                             // [0x2f179d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_ByteByte
	// char Add_ByteByte(char A, char B);                                                                                    // [0x2f17920] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Acos
	// float Acos(float A);                                                                                                  // [0x2f17880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs_Int64
	// int64_t Abs_Int64(int64_t A);                                                                                         // [0x2f17770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs_Int
	// int32_t Abs_Int(int32_t A);                                                                                           // [0x2f17800] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs
	// float Abs(float A);                                                                                                   // [0x2f176f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetNodeHelperLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetNodeHelperLibrary.MarkBit
	// void MarkBit(int32_t& Data, int32_t Index);                                                                           // [0x2f43320] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.HasUnmarkedBit
	// bool HasUnmarkedBit(int32_t Data, int32_t NumBits);                                                                   // [0x2f42820] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.HasMarkedBit
	// bool HasMarkedBit(int32_t Data, int32_t NumBits);                                                                     // [0x2f42760] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetValidValue
	// char GetValidValue(class UEnum* Enum, char EnumeratorValue);                                                          // [0x2f426a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetUnmarkedBit
	// int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom);                                // [0x2f42570] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
	// int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);                                        // [0x2f42320] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
	// int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);                                         // [0x2f42230] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex
	// char GetEnumeratorValueFromIndex(class UEnum* Enum, char EnumeratorIndex);                                            // [0x2f42170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
	// FString GetEnumeratorUserFriendlyName(class UEnum* Enum, char EnumeratorValue);                                       // [0x2f42060] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorName
	// FName GetEnumeratorName(class UEnum* Enum, char EnumeratorValue);                                                     // [0x2f41fa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.ClearBit
	// void ClearBit(int32_t& Data, int32_t Index);                                                                          // [0x2f3fed0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.ClearAllBits
	// void ClearAllBits(int32_t& Data);                                                                                     // [0x2f3fe50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.BitIsMarked
	// bool BitIsMarked(int32_t Data, int32_t Index);                                                                        // [0x2f3e850] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetRenderingLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments
	// void SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // [0x2f44720] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly
	// class UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, FString Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings); // [0x2f43e10] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReleaseRenderTarget2D
	// void ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);                                        // [0x2f43da0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetUV
	// FColor ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // [0x2f43c60] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetRawUV
	// FLinearColor ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // [0x2f43b00] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel
	// FLinearColor ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // [0x2f439b0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetPixel
	// FColor ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // [0x2f43870] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.MakeSkinWeightInfo
	// FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // [0x2f430c0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetRenderingLibrary.ImportFileAsTexture2D
	// class UTexture2D* ImportFileAsTexture2D(class UObject* WorldContextObject, FString Filename);                         // [0x2f429d0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ImportBufferAsTexture2D
	// class UTexture2D* ImportBufferAsTexture2D(class UObject* WorldContextObject, TArray<char>& Buffer);                   // [0x2f428e0] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ExportTexture2D
	// void ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, FString FilePath, FString Filename); // [0x2f41ae0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ExportRenderTarget
	// void ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename); // [0x2f41980] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
	// void EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, FDrawToRenderTargetContext& Context);             // [0x2f415a0] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
	// void DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material); // [0x2f414b0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTarget2D
	// class UTextureRenderTarget2D* CreateRenderTarget2D(class UObject* WorldContextObject, int32_t Width, int32_t Height, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps); // [0x2f411e0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly
	// void ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture); // [0x2f410f0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ClearRenderTarget2D
	// void ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, FLinearColor ClearColor); // [0x2f3ffa0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.BreakSkinWeightInfo
	// void BreakSkinWeightInfo(FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // [0x2f3e910] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
	// void BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas*& Canvas, FVector2D& Size, FDrawToRenderTargetContext& Context); // [0x2f3e690] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.KismetStringLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetStringLibrary.TrimTrailing
	// FString TrimTrailing(FString SourceString);                                                                           // [0x2f44ef0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Trim
	// FString Trim(FString SourceString);                                                                                   // [0x2f44e10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ToUpper
	// FString ToUpper(FString SourceString);                                                                                // [0x2f44d30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ToLower
	// FString ToLower(FString SourceString);                                                                                // [0x2f44c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.TimeSecondsToString
	// FString TimeSecondsToString(float InSeconds);                                                                         // [0x2f44b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.StartsWith
	// bool StartsWith(FString SourceString, FString InPrefix, TEnumAsByte<ESearchCase> SearchCase);                         // [0x2f44a50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Split
	// bool Split(FString SourceString, FString InStr, FString& LeftS, FString& RightS, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir); // [0x2f44830] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.RightPad
	// FString RightPad(FString SourceString, int32_t ChCount);                                                              // [0x2f44600] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.RightChop
	// FString RightChop(FString SourceString, int32_t Count);                                                               // [0x2f444e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Right
	// FString Right(FString SourceString, int32_t Count);                                                                   // [0x2f443c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Reverse
	// FString Reverse(FString SourceString);                                                                                // [0x2f442e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ReplaceInline
	// int32_t ReplaceInline(FString& SourceString, FString SearchText, FString ReplacementText, TEnumAsByte<ESearchCase> SearchCase); // [0x2f44150] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetStringLibrary.Replace
	// FString Replace(FString SourceString, FString From, FString to, TEnumAsByte<ESearchCase> SearchCase);                 // [0x2f43f90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ParseIntoArray
	// TArray<FString> ParseIntoArray(FString SourceString, FString Delimiter, bool CullEmptyStrings);                       // [0x2f43700] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.NotEqual_StrStr
	// bool NotEqual_StrStr(FString A, FString B);                                                                           // [0x2f43520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.NotEqual_StriStri
	// bool NotEqual_StriStri(FString A, FString B);                                                                         // [0x2f43610] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Mid
	// FString Mid(FString SourceString, int32_t Start, int32_t Count);                                                      // [0x2f42410] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.MatchesWildcard
	// bool MatchesWildcard(FString SourceString, FString Wildcard, TEnumAsByte<ESearchCase> SearchCase);                    // [0x2f433f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Len
	// int32_t Len(FString S);                                                                                               // [0x2f43020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.LeftPad
	// FString LeftPad(FString SourceString, int32_t ChCount);                                                               // [0x2f42f00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.LeftChop
	// FString LeftChop(FString SourceString, int32_t Count);                                                                // [0x2f42de0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Left
	// FString Left(FString SourceString, int32_t Count);                                                                    // [0x2f42cc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.JoinStringArray
	// FString JoinStringArray(TArray<FString>& SourceArray, FString Separator);                                             // [0x2f42b50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.IsNumeric
	// bool IsNumeric(FString SourceString);                                                                                 // [0x2f42ab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.IsEmpty
	// bool IsEmpty(FString inString);                                                                                       // [0x777aa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetSubstring
	// FString GetSubstring(FString SourceString, int32_t StartIndex, int32_t Length);                                       // [0x2f42410] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetCharacterAsNumber
	// int32_t GetCharacterAsNumber(FString SourceString, int32_t Index);                                                    // [0x2f41ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetCharacterArrayFromString
	// TArray<FString> GetCharacterArrayFromString(FString SourceString);                                                    // [0x2f41df0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.FindSubstring
	// int32_t FindSubstring(FString SearchIn, FString SubString, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition); // [0x2f41c40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EqualEqual_StrStr
	// bool EqualEqual_StrStr(FString A, FString B);                                                                         // [0x2f417a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EqualEqual_StriStri
	// bool EqualEqual_StriStri(FString A, FString B);                                                                       // [0x2f41890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EndsWith
	// bool EndsWith(FString SourceString, FString InSuffix, TEnumAsByte<ESearchCase> SearchCase);                           // [0x2f41670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.CullArray
	// int32_t CullArray(FString SourceString, TArray<FString>& inArray);                                                    // [0x2f41390] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_VectorToString
	// FString Conv_VectorToString(FVector InVec);                                                                           // [0x2f41020] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_Vector2dToString
	// FString Conv_Vector2dToString(FVector2D InVec);                                                                       // [0x2f40f60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_TransformToString
	// FString Conv_TransformToString(FTransform& InTrans);                                                                  // [0x2f40e40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToVector2D
	// void Conv_StringToVector2D(FString inString, FVector2D& OutConvertedVector2D, bool& OutIsValid);                      // [0x2f40d10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToVector
	// void Conv_StringToVector(FString inString, FVector& OutConvertedVector, bool& OutIsValid);                            // [0x76d7b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToRotator
	// void Conv_StringToRotator(FString inString, FRotator& OutConvertedRotator, bool& OutIsValid);                         // [0x76d680] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToName
	// FName Conv_StringToName(FString inString);                                                                            // [0x2f40c70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToInt
	// int32_t Conv_StringToInt(FString inString);                                                                           // [0x2f40bd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToFloat
	// float Conv_StringToFloat(FString inString);                                                                           // [0x2f40b30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToColor
	// void Conv_StringToColor(FString inString, FLinearColor& OutConvertedColor, bool& OutIsValid);                         // [0x76d550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_RotatorToString
	// FString Conv_RotatorToString(FRotator InRot);                                                                         // [0x2f40a60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ObjectToString
	// FString Conv_ObjectToString(class UObject* InObj);                                                                    // [0x2f40990] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_NameToString
	// FString Conv_NameToString(FName InName);                                                                              // [0x265ea60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_MatrixToString
	// FString Conv_MatrixToString(FMatrix& InMatrix);                                                                       // [0x2f408c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntVectorToString
	// FString Conv_IntVectorToString(FIntVector InIntVec);                                                                  // [0x2f407f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntToString
	// FString Conv_IntToString(int32_t inInt);                                                                              // [0x2f40730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntPointToString
	// FString Conv_IntPointToString(FIntPoint InIntPoint);                                                                  // [0x2f40670] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_FloatToString
	// FString Conv_FloatToString(float InFloat);                                                                            // [0x2f405a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ColorToString
	// FString Conv_ColorToString(FLinearColor InColor);                                                                     // [0x2f404d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ByteToString
	// FString Conv_ByteToString(char InByte);                                                                               // [0x2f40410] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_BoolToString
	// FString Conv_BoolToString(bool InBool);                                                                               // [0x2f40340] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Contains
	// bool Contains(FString SearchIn, FString SubString, bool bUseCase, bool bSearchFromEnd);                               // [0x2f401d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Concat_StrStr
	// FString Concat_StrStr(FString A, FString B);                                                                          // [0x2f400a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Vector2d
	// FString BuildString_Vector2d(FString AppendTo, FString Prefix, FVector2D InVector2D, FString Suffix);                 // [0x2f3fac0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Vector
	// FString BuildString_Vector(FString AppendTo, FString Prefix, FVector InVector, FString Suffix);                       // [0x2f3fc80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Rotator
	// FString BuildString_Rotator(FString AppendTo, FString Prefix, FRotator InRot, FString Suffix);                        // [0x2f3f8f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Object
	// FString BuildString_Object(FString AppendTo, FString Prefix, class UObject* InObj, FString Suffix);                   // [0x2f3f730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Name
	// FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);                             // [0x2f3f570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_IntVector
	// FString BuildString_IntVector(FString AppendTo, FString Prefix, FIntVector InIntVector, FString Suffix);              // [0x2f3f3a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Int
	// FString BuildString_Int(FString AppendTo, FString Prefix, int32_t inInt, FString Suffix);                             // [0x2f3f1e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Float
	// FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);                           // [0x2f3f020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Color
	// FString BuildString_Color(FString AppendTo, FString Prefix, FLinearColor InColor, FString Suffix);                    // [0x2f3ee50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Bool
	// FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);                              // [0x2f3ec90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetStringTableLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetStringTableLibrary.IsRegisteredTableId
	// bool IsRegisteredTableId(FName TableId);                                                                              // [0x2f52390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.IsRegisteredTableEntry
	// bool IsRegisteredTableEntry(FName TableId, FString Key);                                                              // [0x2f522b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableNamespace
	// FString GetTableNamespace(FName TableId);                                                                             // [0x2f51f60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableEntrySourceString
	// FString GetTableEntrySourceString(FName TableId, FString Key);                                                        // [0x2f51e40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableEntryMetaData
	// FString GetTableEntryMetaData(FName TableId, FString Key, FName MetaDataId);                                          // [0x2f51ce0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetRegisteredStringTables
	// TArray<FName> GetRegisteredStringTables();                                                                            // [0x2f519d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry
	// TArray<FName> GetMetaDataIdsFromStringTableEntry(FName TableId, FString Key);                                         // [0x2f50e70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetKeysFromStringTable
	// TArray<FString> GetKeysFromStringTable(FName TableId);                                                                // [0x2f50d20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetSystemLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetSystemLibrary.UnregisterForRemoteNotifications
	// void UnregisterForRemoteNotifications();                                                                              // [0x773d70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.UnloadPrimaryAssetList
	// void UnloadPrimaryAssetList(TArray<FPrimaryAssetId>& PrimaryAssetIdList);                                             // [0x2f5a8f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.UnloadPrimaryAsset
	// void UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId);                                                              // [0x2f5a870] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.TransactObject
	// void TransactObject(class UObject* Object);                                                                           // [0xaa6b40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.StackTrace
	// void StackTrace();                                                                                                    // [0x2f5a850] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingleForObjects
	// bool SphereTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f5a3e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingleByProfile
	// bool SphereTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f59f90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingle
	// bool SphereTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f59b40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMultiForObjects
	// bool SphereTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f59700] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMultiByProfile
	// bool SphereTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f592e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMulti
	// bool SphereTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f58ec0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereOverlapComponents
	// bool SphereOverlapComponents(class UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x2f58c40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereOverlapActors
	// bool SphereOverlapActors(class UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x2f589c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SnapshotObject
	// void SnapshotObject(class UObject* Object);                                                                           // [0xaa6b40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
	// void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);                                                     // [0x2f58930] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
	// void ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);                                 // [0x2f588c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowInterstitialAd
	// void ShowInterstitialAd();                                                                                            // [0x2f588a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowAdBanner
	// void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen);                                                     // [0x2f587f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetWindowTitle
	// void SetWindowTitle(FText& Title);                                                                                    // [0x2f58730] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
	// void SetVolumeButtonsHandledBySystem(bool bEnabled);                                                                  // [0x782050] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetVectorPropertyByName
	// void SetVectorPropertyByName(class UObject* Object, FName PropertyName, FVector& value);                              // [0x2f58630] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetUserActivity
	// void SetUserActivity(FUserActivity& UserActivity);                                                                    // [0x2f58590] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetTransformPropertyByName
	// void SetTransformPropertyByName(class UObject* Object, FName PropertyName, FTransform& value);                        // [0x2f58440] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetTextPropertyByName
	// void SetTextPropertyByName(class UObject* Object, FName PropertyName, FText& value);                                  // [0x2f58300] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage
	// void SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);                            // [0x2f58240] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetStructurePropertyByName
	// void SetStructurePropertyByName(class UObject* Object, FName PropertyName, FGenericStruct& value);                    // [0x2f574d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetStringPropertyByName
	// void SetStringPropertyByName(class UObject* Object, FName PropertyName, FString value);                               // [0x2f58130] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSoftObjectPropertyByName
	// void SetSoftObjectPropertyByName(class UObject* Object, FName PropertyName, TWeakObjectPtr<UObject*>& value);         // [0x2f58000] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSoftClassPropertyByName
	// void SetSoftClassPropertyByName(class UObject* Object, FName PropertyName, TWeakObjectPtr<UClass*>& value);           // [0x2f57ed0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetRotatorPropertyByName
	// void SetRotatorPropertyByName(class UObject* Object, FName PropertyName, FRotator& value);                            // [0x2f57dd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetObjectPropertyByName
	// void SetObjectPropertyByName(class UObject* Object, FName PropertyName, class UObject* value);                        // [0x2f57ce0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetNamePropertyByName
	// void SetNamePropertyByName(class UObject* Object, FName PropertyName, FName& value);                                  // [0x2f57be0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetLinearColorPropertyByName
	// void SetLinearColorPropertyByName(class UObject* Object, FName PropertyName, FLinearColor& value);                    // [0x2f57ae0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetIntPropertyByName
	// void SetIntPropertyByName(class UObject* Object, FName PropertyName, int32_t value);                                  // [0x2f578e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetInterfacePropertyByName
	// void SetInterfacePropertyByName(class UObject* Object, FName PropertyName, TScriptInterface<Class>& value);           // [0x2f579d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetInt64PropertyByName
	// void SetInt64PropertyByName(class UObject* Object, FName PropertyName, int64_t value);                                // [0x2f577f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback
	// void SetGamepadsBlockDeviceFeedback(bool bBlock);                                                                     // [0x782050] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetFloatPropertyByName
	// void SetFloatPropertyByName(class UObject* Object, FName PropertyName, float value);                                  // [0x2f576f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetFieldPathPropertyByName
	// void SetFieldPathPropertyByName(class UObject* Object, FName PropertyName, value& value);                             // [0x2f575c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
	// void SetCollisionProfileNameProperty(class UObject* Object, FName PropertyName, FCollisionProfileName& value);        // [0x2f574d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetClassPropertyByName
	// void SetClassPropertyByName(class UObject* Object, FName PropertyName, class UClass* value);                          // [0x2f573e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetBytePropertyByName
	// void SetBytePropertyByName(class UObject* Object, FName PropertyName, char value);                                    // [0x2f572f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetBoolPropertyByName
	// void SetBoolPropertyByName(class UObject* Object, FName PropertyName, bool value);                                    // [0x2f571f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.RetriggerableDelay
	// void RetriggerableDelay(class UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);             // [0x2f570d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
	// void ResetGamepadAssignmentToController(int32_t ControllerId);                                                        // [0x2f4a930] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ResetGamepadAssignments
	// void ResetGamepadAssignments();                                                                                       // [0xe5c690] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.RegisterForRemoteNotifications
	// void RegisterForRemoteNotifications();                                                                                // [0x773d70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.QuitGame
	// void QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions); // [0x2f56f90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintWarning
	// void PrintWarning(FString inString);                                                                                  // [0x2f56f00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintText
	// void PrintText(class UObject* WorldContextObject, FText InText, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x2f56cd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintString
	// void PrintString(class UObject* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x2f56af0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
	// void OnAssetLoaded__DelegateSignature(class UObject* Loaded);                                                         // [0x15dd8c0] Public|Delegate      
	// Function /Script/Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
	// void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);                                                     // [0x15dd8c0] Public|Delegate      
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_SoftObjectReference
	// bool NotEqual_SoftObjectReference(TWeakObjectPtr<UObject*>& A, TWeakObjectPtr<UObject*>& B);                          // [0x2f569a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_SoftClassReference
	// bool NotEqual_SoftClassReference(TWeakObjectPtr<UClass*>& A, TWeakObjectPtr<UClass*>& B);                             // [0x2f569a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType
	// bool NotEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);                                             // [0x265fdd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId
	// bool NotEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);                                                   // [0x2f568c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NormalizeFilename
	// FString NormalizeFilename(FString InFilename);                                                                        // [0x2f567e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MoveComponentTo
	// void MoveComponentTo(class USceneComponent* Component, FVector TargetRelativeLocation, FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, FLatentActionInfo LatentInfo); // [0x2f56520] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.MakeSoftObjectPath
	// FSoftObjectPath MakeSoftObjectPath(FString PathString);                                                               // [0x2f56440] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeSoftClassPath
	// FSoftClassPath MakeSoftClassPath(FString PathString);                                                                 // [0x2f56390] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralText
	// FText MakeLiteralText(FText value);                                                                                   // [0x2f56230] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralString
	// FString MakeLiteralString(FString value);                                                                             // [0x2f56120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralName
	// FName MakeLiteralName(FName value);                                                                                   // [0x2f560a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralInt
	// int32_t MakeLiteralInt(int32_t value);                                                                                // [0xbf6e30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralFloat
	// float MakeLiteralFloat(float value);                                                                                  // [0x2f56020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralByte
	// char MakeLiteralByte(char value);                                                                                     // [0x2f55fb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralBool
	// bool MakeLiteralBool(bool value);                                                                                     // [0x2f1b160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.LoadInterstitialAd
	// void LoadInterstitialAd(int32_t AdIdIndex);                                                                           // [0x2f55f40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadClassAsset_Blocking
	// class UClass* LoadClassAsset_Blocking(TWeakObjectPtr<UClass*> AssetClass);                                            // [0x2f55e40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAssetClass
	// void LoadAssetClass(class UObject* WorldContextObject, TWeakObjectPtr<UClass*> AssetClass, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // [0x2f55b60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAsset_Blocking
	// class UObject* LoadAsset_Blocking(TWeakObjectPtr<UObject*> Asset);                                                    // [0x2f55d40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAsset
	// void LoadAsset(class UObject* WorldContextObject, TWeakObjectPtr<UObject*> Asset, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // [0x2f55980] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingleForObjects
	// bool LineTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f55540] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingleByProfile
	// bool LineTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f55120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingle
	// bool LineTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f54d10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMultiForObjects
	// bool LineTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f54920] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMultiByProfile
	// bool LineTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f54550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMulti
	// bool LineTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f54180] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LaunchURL
	// void LaunchURL(FString URL);                                                                                          // [0x2f540f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
	// void K2_UnPauseTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                   // [0x2f54040] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
	// void K2_UnPauseTimerDelegate(FDelegateProperty Delegate);                                                             // [0x2f53fb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimer
	// void K2_UnPauseTimer(class UObject* Object, FString FunctionName);                                                    // [0x2f53ea0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExistsHandle
	// bool K2_TimerExistsHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                    // [0x2f53de0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExistsDelegate
	// bool K2_TimerExistsDelegate(FDelegateProperty Delegate);                                                              // [0x2f53d40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExists
	// bool K2_TimerExists(class UObject* Object, FString FunctionName);                                                     // [0x2f53c20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_SetTimerDelegate
	// FTimerHandle K2_SetTimerDelegate(FDelegateProperty Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // [0x2f53a90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_SetTimer
	// FTimerHandle K2_SetTimer(class UObject* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // [0x2f53870] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimerHandle
	// void K2_PauseTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                     // [0x2f537c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimerDelegate
	// void K2_PauseTimerDelegate(FDelegateProperty Delegate);                                                               // [0x2f53730] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimer
	// void K2_PauseTimer(class UObject* Object, FString FunctionName);                                                      // [0x2f53620] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsValidTimerHandle
	// bool K2_IsValidTimerHandle(FTimerHandle Handle);                                                                      // [0x2f535a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
	// bool K2_IsTimerPausedHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                  // [0x2f534e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
	// bool K2_IsTimerPausedDelegate(FDelegateProperty Delegate);                                                            // [0x2f53440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPaused
	// bool K2_IsTimerPaused(class UObject* Object, FString FunctionName);                                                   // [0x2f53320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
	// bool K2_IsTimerActiveHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                  // [0x2f53260] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
	// bool K2_IsTimerActiveDelegate(FDelegateProperty Delegate);                                                            // [0x2f531c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActive
	// bool K2_IsTimerActive(class UObject* Object, FString FunctionName);                                                   // [0x2f530a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
	// FTimerHandle K2_InvalidateTimerHandle(FTimerHandle& Handle);                                                          // [0x2f53000] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
	// float K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, FTimerHandle Handle);                         // [0x2f52f40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
	// float K2_GetTimerRemainingTimeDelegate(FDelegateProperty Delegate);                                                   // [0x2f52ea0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
	// float K2_GetTimerRemainingTime(class UObject* Object, FString FunctionName);                                          // [0x2f52d80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
	// float K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, FTimerHandle Handle);                           // [0x2f52cc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
	// float K2_GetTimerElapsedTimeDelegate(FDelegateProperty Delegate);                                                     // [0x2f52c20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
	// float K2_GetTimerElapsedTime(class UObject* Object, FString FunctionName);                                            // [0x2f52b00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimerHandle
	// void K2_ClearTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                     // [0x2f52a50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimerDelegate
	// void K2_ClearTimerDelegate(FDelegateProperty Delegate);                                                               // [0x2f529c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimer
	// void K2_ClearTimer(class UObject* Object, FString FunctionName);                                                      // [0x2f528b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle
	// void K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, FTimerHandle& Handle);                       // [0x2f527f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsValidSoftObjectReference
	// bool IsValidSoftObjectReference(TWeakObjectPtr<UObject*>& SoftObjectReference);                                       // [0x2f52730] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidSoftClassReference
	// bool IsValidSoftClassReference(TWeakObjectPtr<UClass*>& SoftClassReference);                                          // [0x2f52730] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetType
	// bool IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType);                                                     // [0x265f5f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetId
	// bool IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                                           // [0x2f526a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidClass
	// bool IsValidClass(class UClass* Class);                                                                               // [0x2f525c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValid
	// bool IsValid(class UObject* Object);                                                                                  // [0x2f525c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsUnattended
	// bool IsUnattended();                                                                                                  // [0x2f52590] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsStandAlone
	// bool IsStandAlone(class UObject* WorldContextObject);                                                                 // [0x2f52510] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsSplitScreen
	// bool IsSplitScreen(class UObject* WorldContextObject);                                                                // [0x2f52490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsServer
	// bool IsServer(class UObject* WorldContextObject);                                                                     // [0x2f52410] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsScreensaverEnabled
	// bool IsScreensaverEnabled();                                                                                          // [0x780e50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsPackagedForDistribution
	// bool IsPackagedForDistribution();                                                                                     // [0xe599e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsLoggedIn
	// bool IsLoggedIn(class APlayerController* SpecificPlayer);                                                             // [0x2f52230] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsInterstitialAdRequested
	// bool IsInterstitialAdRequested();                                                                                     // [0x2f52200] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsInterstitialAdAvailable
	// bool IsInterstitialAdAvailable();                                                                                     // [0x2f521d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsDedicatedServer
	// bool IsDedicatedServer(class UObject* WorldContextObject);                                                            // [0x2f52150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
	// bool IsControllerAssignedToGamepad(int32_t ControllerId);                                                             // [0x2f520d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.HideAdBanner
	// void HideAdBanner();                                                                                                  // [0x2f520b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
	// bool GetVolumeButtonsHandledBySystem();                                                                               // [0xe599e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetUniqueDeviceId
	// FString GetUniqueDeviceId();                                                                                          // [0x2f52030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
	// bool GetSupportedFullscreenResolutions(TArray<FIntPoint>& Resolutions);                                               // [0x2f51c30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId
	// TWeakObjectPtr<UObject*> GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                    // [0x2f51b70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId
	// TWeakObjectPtr<UClass*> GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                      // [0x2f51ab0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
	// int32_t GetRenderingMaterialQualityLevel();                                                                           // [0x2f51a80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetRenderingDetailMode
	// int32_t GetRenderingDetailMode();                                                                                     // [0x2f51a50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectSavedDirectory
	// FString GetProjectSavedDirectory();                                                                                   // [0x77c020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectDirectory
	// FString GetProjectDirectory();                                                                                        // [0x77bf20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectContentDirectory
	// FString GetProjectContentDirectory();                                                                                 // [0x2f51950] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState
	// void GetPrimaryAssetsWithBundleState(TArray<FName>& RequiredBundles, TArray<FName>& ExcludedBundles, TArray<FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList); // [0x2f51740] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdList
	// void GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList);       // [0x2f51660] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference
	// FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(TWeakObjectPtr<UObject*> SoftObjectReference);               // [0x2f51540] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference
	// FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(TWeakObjectPtr<UClass*> SoftClassReference);                  // [0x2f51540] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject
	// FPrimaryAssetId GetPrimaryAssetIdFromObject(class UObject* Object);                                                   // [0x2f514b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass
	// FPrimaryAssetId GetPrimaryAssetIdFromClass(class UClass* Class);                                                      // [0x2f51420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPreferredLanguages
	// TArray<FString> GetPreferredLanguages();                                                                              // [0x2f513a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPlatformUserName
	// FString GetPlatformUserName();                                                                                        // [0x2f51320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPlatformUserDir
	// FString GetPlatformUserDir();                                                                                         // [0x2f512a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPathName
	// FString GetPathName(class UObject* Object);                                                                           // [0x2f511d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetOuterObject
	// class UObject* GetOuterObject(class UObject* Object);                                                                 // [0x2f51150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetObjectName
	// FString GetObjectName(class UObject* Object);                                                                         // [0x2f51080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId
	// class UObject* GetObjectFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                           // [0x2f50ff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetMinYResolutionForUI
	// int32_t GetMinYResolutionForUI();                                                                                     // [0x2f50fc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetMinYResolutionFor3DView
	// int32_t GetMinYResolutionFor3DView();                                                                                 // [0x2f50f90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetLocalCurrencySymbol
	// FString GetLocalCurrencySymbol();                                                                                     // [0x2f50df0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetLocalCurrencyCode
	// FString GetLocalCurrencyCode();                                                                                       // [0x2f50df0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetGameTimeInSeconds
	// float GetGameTimeInSeconds(class UObject* WorldContextObject);                                                        // [0x2eec550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGamepadControllerName
	// FString GetGamepadControllerName(int32_t ControllerId);                                                               // [0x2f50c60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGameName
	// FString GetGameName();                                                                                                // [0x2f50be0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGameBundleId
	// FString GetGameBundleId();                                                                                            // [0x2f50b60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetFrameCount
	// int64_t GetFrameCount();                                                                                              // [0x2f50b30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetEngineVersion
	// FString GetEngineVersion();                                                                                           // [0x2f50ab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDisplayName
	// FString GetDisplayName(class UObject* Object);                                                                        // [0x2f509e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDeviceId
	// FString GetDeviceId();                                                                                                // [0x2f50960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDefaultLocale
	// FString GetDefaultLocale();                                                                                           // [0x2f508e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDefaultLanguage
	// FString GetDefaultLanguage();                                                                                         // [0x2f50860] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetCurrentBundleState
	// bool GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, TArray<FName>& OutBundles);       // [0x2f50710] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConvenientWindowedResolutions
	// bool GetConvenientWindowedResolutions(TArray<FIntPoint>& Resolutions);                                                // [0x2f50660] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableIntValue
	// int32_t GetConsoleVariableIntValue(FString VariableName);                                                             // [0x2f505c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableFloatValue
	// float GetConsoleVariableFloatValue(FString VariableName);                                                             // [0x2f50520] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableBoolValue
	// bool GetConsoleVariableBoolValue(FString VariableName);                                                               // [0x2f50480] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetComponentBounds
	// void GetComponentBounds(class USceneComponent* Component, FVector& Origin, FVector& BoxExtent, float& SphereRadius);  // [0x2f50320] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetCommandLine
	// FString GetCommandLine();                                                                                             // [0x2f502a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId
	// class UClass* GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                             // [0x2f50200] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetClassDisplayName
	// FString GetClassDisplayName(class UClass* Class);                                                                     // [0x2f50130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetAdIDCount
	// int32_t GetAdIDCount();                                                                                               // [0x2f50100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetActorListFromComponentList
	// void GetActorListFromComponentList(TArray<UPrimitiveComponent*>& ComponentList, class UClass* ActorClassFilter, TArray<AActor*>& OutActorList); // [0x2f4ffb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetActorBounds
	// void GetActorBounds(class AActor* Actor, FVector& Origin, FVector& BoxExtent);                                        // [0x2f4fea0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ForceCloseAdBanner
	// void ForceCloseAdBanner();                                                                                            // [0x2f4fe80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.FlushPersistentDebugLines
	// void FlushPersistentDebugLines(class UObject* WorldContextObject);                                                    // [0xaa6b40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.FlushDebugStrings
	// void FlushDebugStrings(class UObject* WorldContextObject);                                                            // [0xaa6b40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ExecuteConsoleCommand
	// void ExecuteConsoleCommand(class UObject* WorldContextObject, FString Command, class APlayerController* SpecificPlayer); // [0x2f4fd70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference
	// bool EqualEqual_SoftObjectReference(TWeakObjectPtr<UObject*>& A, TWeakObjectPtr<UObject*>& B);                        // [0x2f4fc20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_SoftClassReference
	// bool EqualEqual_SoftClassReference(TWeakObjectPtr<UClass*>& A, TWeakObjectPtr<UClass*>& B);                           // [0x2f4fc20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType
	// bool EqualEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);                                           // [0x265e680] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId
	// bool EqualEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);                                                 // [0x2f4fb40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EndTransaction
	// int32_t EndTransaction();                                                                                             // [0x2f4fb10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugString
	// void DrawDebugString(class UObject* WorldContextObject, FVector TextLocation, FString Text, class AActor* TestBaseActor, FLinearColor TextColor, float Duration); // [0x2f4f930] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugSphere
	// void DrawDebugSphere(class UObject* WorldContextObject, FVector Center, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness); // [0x2f4f720] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugPoint
	// void DrawDebugPoint(class UObject* WorldContextObject, FVector Position, float Size, FLinearColor PointColor, float Duration); // [0x2f4f590] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugPlane
	// void DrawDebugPlane(class UObject* WorldContextObject, FPlane& PlaneCoordinates, FVector Location, float Size, FLinearColor PlaneColor, float Duration); // [0x2f4f3c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugLine
	// void DrawDebugLine(class UObject* WorldContextObject, FVector LineStart, FVector LineEnd, FLinearColor LineColor, float Duration, float Thickness); // [0x2f4f1e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFrustum
	// void DrawDebugFrustum(class UObject* WorldContextObject, FTransform& FrustumTransform, FLinearColor FrustumColor, float Duration, float Thickness); // [0x2f4eff0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
	// void DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FTransform& DrawTransform, FVector2D DrawSize, FLinearColor DrawColor, float Duration); // [0x2f4eda0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
	// void DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FVector DrawLocation, FVector2D DrawSize, FLinearColor DrawColor, float Duration); // [0x2f4eba0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCylinder
	// void DrawDebugCylinder(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness); // [0x2f4e950] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
	// void DrawDebugCoordinateSystem(class UObject* WorldContextObject, FVector AxisLoc, FRotator AxisRot, float Scale, float Duration, float Thickness); // [0x2f4e780] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugConeInDegrees
	// void DrawDebugConeInDegrees(class UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness); // [0x2f4e4a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCone
	// void DrawDebugCone(class UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness); // [0x2f4e4a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCircle
	// void DrawDebugCircle(class UObject* WorldContextObject, FVector Center, float Radius, int32_t NumSegments, FLinearColor LineColor, float Duration, float Thickness, FVector YAxis, FVector ZAxis, bool bDrawAxis); // [0x2f4e1c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCapsule
	// void DrawDebugCapsule(class UObject* WorldContextObject, FVector Center, float HalfHeight, float Radius, FRotator Rotation, FLinearColor LineColor, float Duration, float Thickness); // [0x2f4df60] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCamera
	// void DrawDebugCamera(class ACameraActor* CameraActor, FLinearColor CameraColor, float Duration);                      // [0x2f4de60] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugBox
	// void DrawDebugBox(class UObject* WorldContextObject, FVector Center, FVector Extent, FLinearColor LineColor, FRotator Rotation, float Duration, float Thickness); // [0x2f4dc40] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugArrow
	// void DrawDebugArrow(class UObject* WorldContextObject, FVector LineStart, FVector LineEnd, float ArrowSize, FLinearColor LineColor, float Duration, float Thickness); // [0x2f4da20] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DoesImplementInterface
	// bool DoesImplementInterface(class UObject* TestObject, class UClass* Interface);                                      // [0x2f4d960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Delay
	// void Delay(class UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);                          // [0x2f4d840] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
	// void CreateCopyForUndoBuffer(class UObject* ObjectToModify);                                                          // [0xaa6b40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ConvertToRelativePath
	// FString ConvertToRelativePath(FString Filename);                                                                      // [0x2f4d760] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ConvertToAbsolutePath
	// FString ConvertToAbsolutePath(FString Filename);                                                                      // [0x2f4d680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef
	// TWeakObjectPtr<UObject*> Conv_SoftObjPathToSoftObjRef(FSoftObjectPath& SoftObjectPath);                               // [0x2f4d4e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString
	// FString Conv_SoftObjectReferenceToString(TWeakObjectPtr<UObject*>& SoftObjectReference);                              // [0x2f4d3e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject
	// class UObject* Conv_SoftObjectReferenceToObject(TWeakObjectPtr<UObject*>& SoftObject);                                // [0x2f4d5c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString
	// FString Conv_SoftClassReferenceToString(TWeakObjectPtr<UClass*>& SoftClassReference);                                 // [0x2f4d3e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass
	// class UClass* Conv_SoftClassReferenceToClass(TWeakObjectPtr<UClass*>& SoftClass);                                     // [0x2f4d320] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef
	// TWeakObjectPtr<UClass*> Conv_SoftClassPathToSoftClassRef(FSoftClassPath& SoftClassPath);                              // [0x2f4d240] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString
	// FString Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType);                                            // [0x265ea60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString
	// FString Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId);                                                  // [0x2f4d160] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference
	// TWeakObjectPtr<UObject*> Conv_ObjectToSoftObjectReference(class UObject* Object);                                     // [0x2f4d0b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_InterfaceToObject
	// class UObject* Conv_InterfaceToObject(TScriptInterface<Class>& Interface);                                            // [0x2f4d010] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference
	// TWeakObjectPtr<UClass*> Conv_ClassToSoftClassReference(class UClass*& Class);                                         // [0x2f4cf50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ControlScreensaver
	// void ControlScreensaver(bool bAllowScreenSaver);                                                                      // [0x782050] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ComponentOverlapComponents
	// bool ComponentOverlapComponents(class UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x2f4ccc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ComponentOverlapActors
	// bool ComponentOverlapActors(class UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x2f4ca30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CollectGarbage
	// void CollectGarbage();                                                                                                // [0x2f4ca10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
	// bool CapsuleTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f4c560] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile
	// bool CapsuleTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f4c0d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingle
	// bool CapsuleTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f4bc40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
	// bool CapsuleTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f4b7c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile
	// bool CapsuleTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f4b360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMulti
	// bool CapsuleTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f4af00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleOverlapComponents
	// bool CapsuleOverlapComponents(class UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x2f4ac50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleOverlapActors
	// bool CapsuleOverlapActors(class UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x2f4a9a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CanLaunchURL
	// bool CanLaunchURL(FString URL);                                                                                       // [0x2f4a890] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CancelTransaction
	// void CancelTransaction(int32_t Index);                                                                                // [0x2f4a930] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BreakSoftObjectPath
	// void BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath, FString& PathString);                                      // [0x2f4a740] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.BreakSoftClassPath
	// void BreakSoftClassPath(FSoftClassPath InSoftClassPath, FString& PathString);                                         // [0x2f4a740] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingleForObjects
	// bool BoxTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f4a270] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingleByProfile
	// bool BoxTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f49dc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingle
	// bool BoxTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f49910] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMultiForObjects
	// bool BoxTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f49470] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMultiByProfile
	// bool BoxTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f48ff0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMulti
	// bool BoxTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x2f48b70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxOverlapComponents
	// bool BoxOverlapComponents(class UObject* WorldContextObject, FVector BoxPos, FVector Extent, TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x2f488f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxOverlapActors
	// bool BoxOverlapActors(class UObject* WorldContextObject, FVector BoxPos, FVector BoxExtent, TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x2f48670] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BeginTransaction
	// int32_t BeginTransaction(FString Context, FText Description, class UObject* PrimaryObject);                           // [0x2f484f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.AddFloatHistorySample
	// FDebugFloatHistory AddFloatHistorySample(float value, FDebugFloatHistory& FloatHistory);                              // [0x2f48390] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.KismetTextLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetTextLibrary.TextTrimTrailing
	// FText TextTrimTrailing(FText& InText);                                                                                // [0x2f60210] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
	// FText TextTrimPrecedingAndTrailing(FText& InText);                                                                    // [0x2f600e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextTrimPreceding
	// FText TextTrimPreceding(FText& InText);                                                                               // [0x2f5ffb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextToUpper
	// FText TextToUpper(FText& InText);                                                                                     // [0x2f5fe80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextToLower
	// FText TextToLower(FText& InText);                                                                                     // [0x2f5fd50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsTransient
	// bool TextIsTransient(FText& InText);                                                                                  // [0x2f5fc80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsFromStringTable
	// bool TextIsFromStringTable(FText& Text);                                                                              // [0x2f5fbb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsEmpty
	// bool TextIsEmpty(FText& InText);                                                                                      // [0x2f5fae0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsCultureInvariant
	// bool TextIsCultureInvariant(FText& InText);                                                                           // [0x2f5fa10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextFromStringTable
	// FText TextFromStringTable(FName TableId, FString Key);                                                                // [0x2f5f8e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.StringTableIdAndKeyFromText
	// bool StringTableIdAndKeyFromText(FText Text, FName& OutTableId, FString& OutKey);                                     // [0x2f5f730] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.PolyglotDataToText
	// FText PolyglotDataToText(FPolyglotTextData& PolyglotData);                                                            // [0x2f5f520] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.NotEqual_TextText
	// bool NotEqual_TextText(FText& A, FText& B);                                                                           // [0x2f5f3b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
	// bool NotEqual_IgnoreCase_TextText(FText& A, FText& B);                                                                // [0x2f5f240] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.IsPolyglotDataValid
	// void IsPolyglotDataValid(FPolyglotTextData& PolyglotData, bool& IsValid, FText& ErrorMessage);                        // [0x2f5efb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.GetEmptyText
	// FText GetEmptyText();                                                                                                 // [0x2f5ef20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Format
	// FText Format(FText InPattern, TArray<FFormatArgumentData> InArgs);                                                    // [0x2f5ed00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.FindTextInLocalizationTable
	// bool FindTextInLocalizationTable(FString Namespace, FString Key, FText& OutText);                                     // [0x2f5eb80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.EqualEqual_TextText
	// bool EqualEqual_TextText(FText& A, FText& B);                                                                         // [0x2f5ea10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
	// bool EqualEqual_IgnoreCase_TextText(FText& A, FText& B);                                                              // [0x2f5e8a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_VectorToText
	// FText Conv_VectorToText(FVector InVec);                                                                               // [0x2f5e7b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_Vector2dToText
	// FText Conv_Vector2dToText(FVector2D InVec);                                                                           // [0x2f5e6e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_TransformToText
	// FText Conv_TransformToText(FTransform& InTrans);                                                                      // [0x2f5e5a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_TextToString
	// FString Conv_TextToString(FText& InText);                                                                             // [0x2f5e490] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_StringToText
	// FText Conv_StringToText(FString inString);                                                                            // [0x2f5e3a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_RotatorToText
	// FText Conv_RotatorToText(FRotator InRot);                                                                             // [0x2f5e2b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ObjectToText
	// FText Conv_ObjectToText(class UObject* InObj);                                                                        // [0x2f5e1d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_NameToText
	// FText Conv_NameToText(FName InName);                                                                                  // [0x2f5e0f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_IntToText
	// FText Conv_IntToText(int32_t value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // [0x2f5dee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_Int64ToText
	// FText Conv_Int64ToText(int64_t value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // [0x2f5dcd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_FloatToText
	// FText Conv_FloatToText(float value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // [0x2f5da30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ColorToText
	// FText Conv_ColorToText(FLinearColor InColor);                                                                         // [0x2f5d950] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ByteToText
	// FText Conv_ByteToText(char value);                                                                                    // [0x2f5d870] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_BoolToText
	// FText Conv_BoolToText(bool InBool);                                                                                   // [0x2f5d790] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneTime_DateTime
	// FText AsTimeZoneTime_DateTime(FDateTime& InDateTime, FString InTimeZone);                                             // [0x2f5d460] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime
	// FText AsTimeZoneDateTime_DateTime(FDateTime& InDateTime, FString InTimeZone);                                         // [0x2f5d1c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneDate_DateTime
	// FText AsTimeZoneDate_DateTime(FDateTime& InDateTime, FString InTimeZone);                                             // [0x2f5d310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimespan_Timespan
	// FText AsTimespan_Timespan(FTimespan& InTimespan);                                                                     // [0x2f5d6a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTime_DateTime
	// FText AsTime_DateTime(FDateTime& In);                                                                                 // [0x2f5d5b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsPercent_Float
	// FText AsPercent_Float(float value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // [0x2f5cf20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsDateTime_DateTime
	// FText AsDateTime_DateTime(FDateTime& In);                                                                             // [0x2f5cd40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsDate_DateTime
	// FText AsDate_DateTime(FDateTime& InDateTime);                                                                         // [0x2f5ce30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrencyBase
	// FText AsCurrencyBase(int32_t BaseValue, FString CurrencyCode);                                                        // [0x2f5c620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrency_Integer
	// FText AsCurrency_Integer(int32_t value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // [0x2f5ca50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrency_Float
	// FText AsCurrency_Float(float value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // [0x2f5c750] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/Engine.LayerActorStats
/// Size: 0x0010 (0x000000 - 0x000010)
struct FLayerActorStats
{ 
	class UClass*                                      Type;                                                       // 0x0000   (0x0008)  
	int32_t                                            Total;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Engine.Layer
/// Size: 0x0020 (0x000028 - 0x000048)
class ULayer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FName                                              LayerName;                                                  // 0x0028   (0x0008)  
	bool                                               bIsVisible : 1;                                             // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<FLayerActorStats>                           ActorStats;                                                 // 0x0038   (0x0010)  
};

/// Class /Script/Engine.LevelPartitionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class ULevelPartitionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.ReplicatedStaticActorDestructionInfo
/// Size: 0x0038 (0x000000 - 0x000038)
struct FReplicatedStaticActorDestructionInfo
{ 
	class UClass*                                      ObjClass;                                                   // 0x0030   (0x0008)  
};

/// Class /Script/Engine.Level
/// Size: 0x0258 (0x000028 - 0x000280)
class ULevel : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0xB8];                                      // 0x0000   (0x00B8)  MISSED
	class UWorld*                                      OwningWorld;                                                // 0x00B8   (0x0008)  
	class UModel*                                      Model;                                                      // 0x00C0   (0x0008)  
	TArray<class UModelComponent*>                     ModelComponents;                                            // 0x00C8   (0x0010)  
	class ULevelActorContainer*                        ActorCluster;                                               // 0x00D8   (0x0008)  
	int32_t                                            NumTextureStreamingUnbuiltComponents;                       // 0x00E0   (0x0004)  
	int32_t                                            NumTextureStreamingDirtyResources;                          // 0x00E4   (0x0004)  
	class ALevelScriptActor*                           LevelScriptActor;                                           // 0x00E8   (0x0008)  
	class ANavigationObjectBase*                       NavListStart;                                               // 0x00F0   (0x0008)  
	class ANavigationObjectBase*                       NavListEnd;                                                 // 0x00F8   (0x0008)  
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                              // 0x0100   (0x0010)  
	float                                              LightmapTotalSize;                                          // 0x0110   (0x0004)  
	float                                              ShadowmapTotalSize;                                         // 0x0114   (0x0004)  
	TArray<FVector>                                    StaticNavigableGeometry;                                    // 0x0118   (0x0010)  
	TArray<FGuid>                                      StreamingTextureGuids;                                      // 0x0128   (0x0010)  
	unsigned char                                      UnknownData01_5[0x98];                                      // 0x0138   (0x0098)  MISSED
	FGuid                                              LevelBuildDataId;                                           // 0x01D0   (0x0010)  
	class UMapBuildDataRegistry*                       MapBuildData;                                               // 0x01E0   (0x0008)  
	FIntVector                                         LightBuildLevelOffset;                                      // 0x01E8   (0x000C)  
	bool                                               bIsLightingScenario : 1;                                    // 0x01F4:0 (0x0001)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x01F4:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x01F4:2 (0x0001)  MISSED
	bool                                               bTextureStreamingRotationChanged : 1;                       // 0x01F4:3 (0x0001)  
	bool                                               bStaticComponentsRegisteredInStreamingManager : 1;          // 0x01F4:4 (0x0001)  
	bool                                               bIsVisible : 1;                                             // 0x01F4:5 (0x0001)  
	unsigned char                                      UnknownData04_4[0x4B];                                      // 0x01F5   (0x004B)  MISSED
	class AWorldSettings*                              WorldSettings;                                              // 0x0240   (0x0008)  
	unsigned char                                      UnknownData05_5[0x8];                                       // 0x0248   (0x0008)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0250   (0x0010)  
	unsigned char                                      UnknownData06_5[0x10];                                      // 0x0260   (0x0010)  MISSED
	TArray<FReplicatedStaticActorDestructionInfo>      DestroyedReplicatedStaticActors;                            // 0x0270   (0x0010)  
};

/// Class /Script/Engine.LevelActorContainer
/// Size: 0x0010 (0x000028 - 0x000038)
class ULevelActorContainer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<class AActor*>                              Actors;                                                     // 0x0028   (0x0010)  
};

/// Class /Script/Engine.LevelBounds
/// Size: 0x0010 (0x000220 - 0x000230)
class ALevelBounds : public AActor
{ 
public:
	class UBoxComponent*                               BoxComponent;                                               // 0x0220   (0x0008)  
	bool                                               bAutoUpdateBounds;                                          // 0x0228   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0229   (0x0007)  MISSED
};

/// Class /Script/Engine.LevelScriptActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ALevelScriptActor : public AActor
{ 
public:
	bool                                               bInputEnabled : 1;                                          // 0x0220:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0221   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.LevelScriptActor.WorldOriginLocationChanged
	// void WorldOriginLocationChanged(FIntVector OldOriginLocation, FIntVector NewOriginLocation);                          // [0x15dd8c0] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.LevelScriptActor.SetCinematicMode
	// void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x2f62ec0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelScriptActor.RemoteEvent
	// bool RemoteEvent(FName EventName);                                                                                    // [0x2f62850] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelScriptActor.LevelReset
	// void LevelReset();                                                                                                    // [0x15dd8c0] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.LevelScriptBlueprint
/// Size: 0x0000 (0x0000A0 - 0x0000A0)
class ULevelScriptBlueprint : public UBlueprint
{ 
public:
};

/// Struct /Script/Engine.LevelStreamingWrapper
/// Size: 0x0008 (0x000000 - 0x000008)
struct FLevelStreamingWrapper
{ 
	class ULevelStreaming*                             StreamingLevel;                                             // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.StreamingLevelsToConsider
/// Size: 0x0028 (0x000000 - 0x000028)
struct FStreamingLevelsToConsider
{ 
	TArray<FLevelStreamingWrapper>                     StreamingLevels;                                            // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0010   (0x0018)  MISSED
};

/// Struct /Script/Engine.LevelCollection
/// Size: 0x0078 (0x000000 - 0x000078)
struct FLevelCollection
{ 
	class AGameStateBase*                              GameState;                                                  // 0x0008   (0x0008)  
	class UNetDriver*                                  NetDriver;                                                  // 0x0010   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x0018   (0x0008)  
	class ULevel*                                      PersistentLevel;                                            // 0x0020   (0x0008)  
	SDK_UNDEFINED(80,435) /* TSet<ULevel*> */          __um(Levels);                                               // 0x0028   (0x0050)  
};

/// Struct /Script/Engine.WorldPSCPool
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWorldPSCPool
{ 
	SDK_UNDEFINED(80,436) /* TMap<UParticleSystem*, FPSCPool> */ __um(WorldParticleSystemPools);                   // 0x0000   (0x0050)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.World
/// Size: 0x06E8 (0x000028 - 0x000710)
class UWorld : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	class ULevel*                                      PersistentLevel;                                            // 0x0030   (0x0008)  
	class UNetDriver*                                  NetDriver;                                                  // 0x0038   (0x0008)  
	class ULineBatchComponent*                         LineBatcher;                                                // 0x0040   (0x0008)  
	class ULineBatchComponent*                         PersistentLineBatcher;                                      // 0x0048   (0x0008)  
	class ULineBatchComponent*                         ForegroundLineBatcher;                                      // 0x0050   (0x0008)  
	class AGameNetworkManager*                         NetworkManager;                                             // 0x0058   (0x0008)  
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                    // 0x0060   (0x0008)  
	TArray<class UObject*>                             ExtraReferencedObjects;                                     // 0x0068   (0x0010)  
	TArray<class UObject*>                             PerModuleDataObjects;                                       // 0x0078   (0x0010)  
	TArray<class AActor*>                              LevelSequenceActors;                                        // 0x0088   (0x0010)  
	TArray<class ULevelStreaming*>                     StreamingLevels;                                            // 0x0098   (0x0010)  
	FStreamingLevelsToConsider                         StreamingLevelsToConsider;                                  // 0x00A8   (0x0028)  
	SDK_UNDEFINED(16,437) /* FString */                __um(StreamingLevelsPrefix);                                // 0x00D0   (0x0010)  
	class ULevel*                                      CurrentLevelPendingVisibility;                              // 0x00E0   (0x0008)  
	class ULevel*                                      CurrentLevelPendingInvisibility;                            // 0x00E8   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x00F0   (0x0008)  
	class AParticleEventManager*                       MyParticleEventManager;                                     // 0x00F8   (0x0008)  
	class APhysicsVolume*                              DefaultPhysicsVolume;                                       // 0x0100   (0x0008)  
	unsigned char                                      UnknownData01_5[0x16];                                      // 0x0108   (0x0016)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x011E:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x011E:1 (0x0001)  MISSED
	bool                                               bAreConstraintsDirty : 1;                                   // 0x011E:2 (0x0001)  
	unsigned char                                      UnknownData04_4[0x1];                                       // 0x011F   (0x0001)  MISSED
	class UNavigationSystemBase*                       NavigationSystem;                                           // 0x0120   (0x0008)  
	class AGameModeBase*                               AuthorityGameMode;                                          // 0x0128   (0x0008)  
	class AGameStateBase*                              GameState;                                                  // 0x0130   (0x0008)  
	class UAISystemBase*                               AISystem;                                                   // 0x0138   (0x0008)  
	class UAvoidanceManager*                           AvoidanceManager;                                           // 0x0140   (0x0008)  
	TArray<class ULevel*>                              Levels;                                                     // 0x0148   (0x0010)  
	TArray<FLevelCollection>                           LevelCollections;                                           // 0x0158   (0x0010)  
	unsigned char                                      UnknownData05_5[0x20];                                      // 0x0168   (0x0020)  MISSED
	class UGameInstance*                               OwningGameInstance;                                         // 0x0188   (0x0008)  
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                              // 0x0190   (0x0010)  
	class UCanvas*                                     CanvasForRenderingToTarget;                                 // 0x01A0   (0x0008)  
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;                        // 0x01A8   (0x0008)  
	unsigned char                                      UnknownData06_5[0x50];                                      // 0x01B0   (0x0050)  MISSED
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate;                         // 0x0200   (0x0010)  
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate_OnGameThread;            // 0x0210   (0x0010)  
	unsigned char                                      UnknownData07_5[0x340];                                     // 0x0220   (0x0340)  MISSED
	class UWorldComposition*                           WorldComposition;                                           // 0x0560   (0x0008)  
	unsigned char                                      UnknownData08_5[0x88];                                      // 0x0568   (0x0088)  MISSED
	FWorldPSCPool                                      PSCPool;                                                    // 0x05F0   (0x0058)  
	unsigned char                                      UnknownData09_6[0xC8];                                      // 0x0648   (0x00C8)  MISSED


	/// Functions
	// Function /Script/Engine.World.K2_GetWorldSettings
	// class AWorldSettings* K2_GetWorldSettings();                                                                          // [0x2ff1ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.World.HandleTimelineScrubbed
	// void HandleTimelineScrubbed();                                                                                        // [0x2ff1fd0] Final|Native|Public  
};

/// Class /Script/Engine.LevelStreaming
/// Size: 0x0128 (0x000028 - 0x000150)
class ULevelStreaming : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(40,438) /* TWeakObjectPtr<UWorld*> */ __um(WorldAsset);                                          // 0x0028   (0x0028)  
	FName                                              PackageNameToLoad;                                          // 0x0050   (0x0008)  
	TArray<FName>                                      LODPackageNames;                                            // 0x0058   (0x0010)  
	unsigned char                                      UnknownData01_5[0x18];                                      // 0x0068   (0x0018)  MISSED
	FTransform                                         LevelTransform;                                             // 0x0080   (0x0030)  
	int32_t                                            LevelLODIndex;                                              // 0x00B0   (0x0004)  
	int32_t                                            StreamingPriority;                                          // 0x00B4   (0x0004)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x00B8   (0x0002)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x00BA:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x00BA:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x00BA:2 (0x0001)  MISSED
	bool                                               bShouldBeVisible : 1;                                       // 0x00BA:3 (0x0001)  
	bool                                               bShouldBeLoaded : 1;                                        // 0x00BA:4 (0x0001)  
	bool                                               bLocked : 1;                                                // 0x00BA:5 (0x0001)  
	bool                                               bIsStatic : 1;                                              // 0x00BA:6 (0x0001)  
	bool                                               bShouldBlockOnLoad : 1;                                     // 0x00BA:7 (0x0001)  
	bool                                               bShouldBlockOnUnload : 1;                                   // 0x00BB:0 (0x0001)  
	bool                                               bDisableDistanceStreaming : 1;                              // 0x00BB:1 (0x0001)  
	bool                                               bDrawOnLevelStatusMap : 1;                                  // 0x00BB:2 (0x0001)  
	FLinearColor                                       LevelColor;                                                 // 0x00BC   (0x0010)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x00CC   (0x0004)  MISSED
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                     // 0x00D0   (0x0010)  
	float                                              MinTimeBetweenVolumeUnloadRequests;                         // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData07_5[0x4];                                       // 0x00E4   (0x0004)  MISSED
	SDK_UNDEFINED(16,439) /* FMulticastInlineDelegate */ __um(OnLevelLoaded);                                      // 0x00E8   (0x0010)  
	SDK_UNDEFINED(16,440) /* FMulticastInlineDelegate */ __um(OnLevelUnloaded);                                    // 0x00F8   (0x0010)  
	SDK_UNDEFINED(16,441) /* FMulticastInlineDelegate */ __um(OnLevelShown);                                       // 0x0108   (0x0010)  
	SDK_UNDEFINED(16,442) /* FMulticastInlineDelegate */ __um(OnLevelHidden);                                      // 0x0118   (0x0010)  
	class ULevel*                                      LoadedLevel;                                                // 0x0128   (0x0008)  
	class ULevel*                                      PendingUnloadLevel;                                         // 0x0130   (0x0008)  
	unsigned char                                      UnknownData08_6[0x18];                                      // 0x0138   (0x0018)  MISSED


	/// Functions
	// Function /Script/Engine.LevelStreaming.ShouldBeLoaded
	// bool ShouldBeLoaded();                                                                                                // [0xe9bf30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.SetShouldBeVisible
	// void SetShouldBeVisible(bool bInShouldBeVisible);                                                                     // [0x2f63d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetShouldBeLoaded
	// void SetShouldBeLoaded(bool bInShouldBeLoaded);                                                                       // [0x2ef4880] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetPriority
	// void SetPriority(int32_t NewPriority);                                                                                // [0x2f63bc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetLevelLODIndex
	// void SetLevelLODIndex(int32_t LODIndex);                                                                              // [0x2f63430] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.IsStreamingStatePending
	// bool IsStreamingStatePending();                                                                                       // [0x2f62410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.IsLevelVisible
	// bool IsLevelVisible();                                                                                                // [0x2f623e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.IsLevelLoaded
	// bool IsLevelLoaded();                                                                                                 // [0x2f623b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetWorldAssetPackageFName
	// FName GetWorldAssetPackageFName();                                                                                    // [0x2f62340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetLoadedLevel
	// class ULevel* GetLoadedLevel();                                                                                       // [0x2f62320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetLevelScriptActor
	// class ALevelScriptActor* GetLevelScriptActor();                                                                       // [0x2f622b0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.LevelStreaming.CreateInstance
	// class ULevelStreaming* CreateInstance(FString UniqueInstanceName);                                                    // [0x2f621d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.LevelStreamingAlwaysLoaded
/// Size: 0x0000 (0x000150 - 0x000150)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{ 
public:
};

/// Class /Script/Engine.LevelStreamingDynamic
/// Size: 0x0010 (0x000150 - 0x000160)
class ULevelStreamingDynamic : public ULevelStreaming
{ 
public:
	bool                                               bInitiallyLoaded : 1;                                       // 0x0150:0 (0x0001)  
	bool                                               bInitiallyVisible : 1;                                      // 0x0150:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0xF];                                       // 0x0151   (0x000F)  MISSED


	/// Functions
	// Function /Script/Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
	// class ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, FVector Location, FRotator Rotation, bool& bOutSuccess); // [0x2f62640] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LevelStreamingDynamic.LoadLevelInstance
	// class ULevelStreamingDynamic* LoadLevelInstance(class UObject* WorldContextObject, FString LevelName, FVector Location, FRotator Rotation, bool& bOutSuccess); // [0x2f62440] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.LevelStreamingPersistent
/// Size: 0x0000 (0x000150 - 0x000150)
class ULevelStreamingPersistent : public ULevelStreaming
{ 
public:
};

/// Class /Script/Engine.LightmappedSurfaceCollection
/// Size: 0x0018 (0x000028 - 0x000040)
class ULightmappedSurfaceCollection : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UModel*                                      SourceModel;                                                // 0x0028   (0x0008)  
	TArray<int32_t>                                    Surfaces;                                                   // 0x0030   (0x0010)  
};

/// Class /Script/Engine.LightMapTexture2D
/// Size: 0x0008 (0x0000E8 - 0x0000F0)
class ULightMapTexture2D : public UTexture2D
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00E8   (0x0008)  MISSED
};

/// Class /Script/Engine.LightmassCharacterIndirectDetailVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.LightmassImportanceVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class ALightmassImportanceVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.LightmassPortal
/// Size: 0x0008 (0x000220 - 0x000228)
class ALightmassPortal : public AActor
{ 
public:
	class ULightmassPortalComponent*                   PortalComponent;                                            // 0x0220   (0x0008)  
};

/// Class /Script/Engine.LightmassPortalComponent
/// Size: 0x0010 (0x0001F0 - 0x000200)
class ULightmassPortalComponent : public USceneComponent
{ 
public:
	class UBoxComponent*                               PreviewBox;                                                 // 0x01F0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x01F8   (0x0008)  MISSED
};

/// Class /Script/Engine.LightmassPrimitiveSettingsObject
/// Size: 0x0018 (0x000028 - 0x000040)
class ULightmassPrimitiveSettingsObject : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FLightmassPrimitiveSettings                        LightmassSettings;                                          // 0x0028   (0x0018)  
};

/// Class /Script/Engine.LineBatchComponent
/// Size: 0x0040 (0x000410 - 0x000450)
class ULineBatchComponent : public UPrimitiveComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x48];                                      // 0x0408   (0x0048)  MISSED
};

/// Struct /Script/Engine.LightmassPointLightSettings
/// Size: 0x0000 (0x00000C - 0x00000C)
struct FLightmassPointLightSettings : FLightmassLightSettings
{ 
};

/// Class /Script/Engine.LocalLightComponent
/// Size: 0x0010 (0x000340 - 0x000350)
class ULocalLightComponent : public ULightComponent
{ 
public:
	ELightUnits                                        IntensityUnits;                                             // 0x0338   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0339   (0x0003)  MISSED
	float                                              Radius;                                                     // 0x033C   (0x0004)  
	float                                              AttenuationRadius;                                          // 0x0340   (0x0004)  
	FLightmassPointLightSettings                       LightmassSettings;                                          // 0x0344   (0x000C)  


	/// Functions
	// Function /Script/Engine.LocalLightComponent.SetIntensityUnits
	// void SetIntensityUnits(ELightUnits NewIntensityUnits);                                                                // [0x2f665d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalLightComponent.SetAttenuationRadius
	// void SetAttenuationRadius(float NewRadius);                                                                           // [0x2f66310] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalLightComponent.GetUnitsConversionFactor
	// float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle);                // [0x2f660f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.LocalPlayerSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class ULocalPlayerSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.LODActor
/// Size: 0x0088 (0x000220 - 0x0002A8)
class ALODActor : public AActor
{ 
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                        // 0x0220   (0x0008)  
	SDK_UNDEFINED(80,443) /* TMap<UMaterialInterface*, UInstancedStaticMeshComponent*> */ __um(ImpostersStaticMeshComponents); // 0x0228   (0x0050)  
	class UHLODProxy*                                  Proxy;                                                      // 0x0278   (0x0008)  
	FName                                              Key;                                                        // 0x0280   (0x0008)  
	float                                              LODDrawDistance;                                            // 0x0288   (0x0004)  
	int32_t                                            LODLevel;                                                   // 0x028C   (0x0004)  
	TArray<class AActor*>                              SubActors;                                                  // 0x0290   (0x0010)  
	char                                               CachedNumHLODLevels;                                        // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02A1   (0x0007)  MISSED
};

/// Class /Script/Engine.MapBuildDataRegistry
/// Size: 0x0210 (0x000028 - 0x000238)
class UMapBuildDataRegistry : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(1,444) /* TEnumAsByte<ELightingBuildQuality> */ __um(LevelLightingQuality);                      // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_6[0x20F];                                     // 0x0029   (0x020F)  MISSED
};

/// Struct /Script/Engine.MaterialInput
/// Size: 0x000C (0x000000 - 0x00000C)
struct FMaterialInput
{ 
	int32_t                                            OutputIndex;                                                // 0x0000   (0x0004)  
	FName                                              ExpressionName;                                             // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.ScalarMaterialInput
/// Size: 0x0000 (0x00000C - 0x00000C)
struct FScalarMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.VectorMaterialInput
/// Size: 0x0000 (0x00000C - 0x00000C)
struct FVectorMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.ColorMaterialInput
/// Size: 0x0000 (0x00000C - 0x00000C)
struct FColorMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.MaterialShadingModelField
/// Size: 0x0002 (0x000000 - 0x000002)
struct FMaterialShadingModelField
{ 
	uint16_t                                           ShadingModelField;                                          // 0x0000   (0x0002)  
};

/// Struct /Script/Engine.MaterialAttributesInput
/// Size: 0x0004 (0x00000C - 0x000010)
struct FMaterialAttributesInput : FExpressionInput
{ 
	int32_t                                            PropertyConnectedBitmask;                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.ShadingModelMaterialInput
/// Size: 0x0000 (0x00000C - 0x00000C)
struct FShadingModelMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.MaterialFunctionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FMaterialFunctionInfo
{ 
	FGuid                                              StateId;                                                    // 0x0000   (0x0010)  
	class UMaterialFunctionInterface*                  Function;                                                   // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MaterialParameterCollectionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FMaterialParameterCollectionInfo
{ 
	FGuid                                              StateId;                                                    // 0x0000   (0x0010)  
	class UMaterialParameterCollection*                ParameterCollection;                                        // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MaterialCachedExpressionData
/// Size: 0x0228 (0x000000 - 0x000228)
struct FMaterialCachedExpressionData
{ 
	FMaterialCachedParameters                          Parameters;                                                 // 0x0000   (0x01A0)  
	TArray<class UObject*>                             ReferencedTextures;                                         // 0x01A0   (0x0010)  
	TArray<FMaterialFunctionInfo>                      FunctionInfos;                                              // 0x01B0   (0x0010)  
	TArray<FMaterialParameterCollectionInfo>           ParameterCollectionInfos;                                   // 0x01C0   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          DefaultLayers;                                              // 0x01D0   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          DefaultLayerBlends;                                         // 0x01E0   (0x0010)  
	TArray<class ULandscapeGrassType*>                 GrassTypes;                                                 // 0x01F0   (0x0010)  
	TArray<FName>                                      DynamicParameterNames;                                      // 0x0200   (0x0010)  
	TArray<bool>                                       QualityLevelsUsed;                                          // 0x0210   (0x0010)  
	bool                                               bHasRuntimeVirtualTextureOutput : 1;                        // 0x0220:0 (0x0001)  
	bool                                               bHasSceneColor : 1;                                         // 0x0220:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0221   (0x0007)  MISSED
};

/// Class /Script/Engine.Material
/// Size: 0x0470 (0x000088 - 0x0004F8)
class UMaterial : public UMaterialInterface
{ 
public:
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0088   (0x0008)  
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                           // 0x0090   (0x0008)  
	class UPhysicalMaterial*                           PhysicalMaterialMap;                                        // 0x0098   (0x0040)  
	FScalarMaterialInput                               Metallic;                                                   // 0x00D8   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x00E4   (0x0008)  MISSED
	FScalarMaterialInput                               Specular;                                                   // 0x00EC   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x00F8   (0x0008)  MISSED
	FScalarMaterialInput                               Anisotropy;                                                 // 0x0100   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x010C   (0x0008)  MISSED
	FVectorMaterialInput                               Normal;                                                     // 0x0114   (0x000C)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0120   (0x0008)  MISSED
	FVectorMaterialInput                               Tangent;                                                    // 0x0128   (0x000C)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x0134   (0x0008)  MISSED
	FColorMaterialInput                                EmissiveColor;                                              // 0x013C   (0x000C)  
	unsigned char                                      UnknownData05_5[0x8];                                       // 0x0148   (0x0008)  MISSED
	SDK_UNDEFINED(1,445) /* TEnumAsByte<EMaterialDomain> */ __um(MaterialDomain);                                  // 0x0150   (0x0001)  
	SDK_UNDEFINED(1,446) /* TEnumAsByte<EBlendMode> */ __um(BlendMode);                                            // 0x0151   (0x0001)  
	SDK_UNDEFINED(1,447) /* TEnumAsByte<EDecalBlendMode> */ __um(DecalBlendMode);                                  // 0x0152   (0x0001)  
	SDK_UNDEFINED(1,448) /* TEnumAsByte<EMaterialDecalResponse> */ __um(MaterialDecalResponse);                    // 0x0153   (0x0001)  
	SDK_UNDEFINED(1,449) /* TEnumAsByte<EMaterialShadingModel> */ __um(ShadingModel);                              // 0x0154   (0x0001)  
	bool                                               bCastDynamicShadowAsMasked : 1;                             // 0x0155:0 (0x0001)  
	FMaterialShadingModelField                         ShadingModels;                                              // 0x0156   (0x0002)  
	float                                              OpacityMaskClipValue;                                       // 0x0158   (0x0004)  
	FVectorMaterialInput                               WorldPositionOffset;                                        // 0x015C   (0x000C)  
	unsigned char                                      UnknownData06_5[0x8];                                       // 0x0168   (0x0008)  MISSED
	FScalarMaterialInput                               Refraction;                                                 // 0x0170   (0x000C)  
	unsigned char                                      UnknownData07_5[0x8];                                       // 0x017C   (0x0008)  MISSED
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0184   (0x0010)  
	unsigned char                                      UnknownData08_5[0x8];                                       // 0x0194   (0x0008)  MISSED
	FScalarMaterialInput                               PixelDepthOffset;                                           // 0x019C   (0x000C)  
	unsigned char                                      UnknownData09_5[0x8];                                       // 0x01A8   (0x0008)  MISSED
	FShadingModelMaterialInput                         ShadingModelFromMaterialExpression;                         // 0x01B0   (0x000C)  
	unsigned char                                      UnknownData10_5[0x8];                                       // 0x01BC   (0x0008)  MISSED
	bool                                               bEnableSeparateTranslucency : 1;                            // 0x01C4:0 (0x0001)  
	bool                                               bEnableResponsiveAA : 1;                                    // 0x01C4:1 (0x0001)  
	bool                                               bScreenSpaceReflections : 1;                                // 0x01C4:2 (0x0001)  
	bool                                               bReflectionCaustics : 1;                                    // 0x01C4:3 (0x0001)  
	bool                                               bRefractionCaustics : 1;                                    // 0x01C4:4 (0x0001)  
	unsigned char                                      UnknownData11_4[0x3];                                       // 0x01C5   (0x0003)  MISSED
	uint32_t                                           CausticsNormalMapResolution;                                // 0x01C8   (0x0004)  
	float                                              DispersionAmount;                                           // 0x01CC   (0x0004)  
	bool                                               bUseRefractionAsDispersionAmount : 1;                       // 0x01D0:0 (0x0001)  
	bool                                               bDispersionJitter : 1;                                      // 0x01D0:1 (0x0001)  
	bool                                               bContactShadows : 1;                                        // 0x01D0:2 (0x0001)  
	bool                                               TwoSided : 1;                                               // 0x01D0:3 (0x0001)  
	bool                                               DitheredLODTransition : 1;                                  // 0x01D0:4 (0x0001)  
	bool                                               DitherOpacityMask : 1;                                      // 0x01D0:5 (0x0001)  
	bool                                               bAllowNegativeEmissiveColor : 1;                            // 0x01D0:6 (0x0001)  
	SDK_UNDEFINED(1,450) /* TEnumAsByte<ETranslucencyLightingMode> */ __um(TranslucencyLightingMode);              // 0x01D1   (0x0001)  
	bool                                               bEnableMobileSeparateTranslucency : 1;                      // 0x01D2:0 (0x0001)  
	unsigned char                                      UnknownData12_4[0x1];                                       // 0x01D3   (0x0001)  MISSED
	int32_t                                            NumCustomizedUVs;                                           // 0x01D4   (0x0004)  
	float                                              TranslucencyDirectionalLightingIntensity;                   // 0x01D8   (0x0004)  
	float                                              TranslucentShadowDensityScale;                              // 0x01DC   (0x0004)  
	float                                              TranslucentSelfShadowDensityScale;                          // 0x01E0   (0x0004)  
	float                                              TranslucentSelfShadowSecondDensityScale;                    // 0x01E4   (0x0004)  
	float                                              TranslucentSelfShadowSecondOpacity;                         // 0x01E8   (0x0004)  
	float                                              TranslucentBackscatteringExponent;                          // 0x01EC   (0x0004)  
	FLinearColor                                       TranslucentMultipleScatteringExtinction;                    // 0x01F0   (0x0010)  
	float                                              TranslucentShadowStartOffset;                               // 0x0200   (0x0004)  
	bool                                               bDisableDepthTest : 1;                                      // 0x0204:0 (0x0001)  
	bool                                               bWriteOnlyAlpha : 1;                                        // 0x0204:1 (0x0001)  
	bool                                               bGenerateSphericalParticleNormals : 1;                      // 0x0204:2 (0x0001)  
	bool                                               bTangentSpaceNormal : 1;                                    // 0x0204:3 (0x0001)  
	bool                                               bUseEmissiveForDynamicAreaLighting : 1;                     // 0x0204:4 (0x0001)  
	bool                                               bBlockGI : 1;                                               // 0x0204:5 (0x0001)  
	bool                                               bUsedAsSpecialEngineMaterial : 1;                           // 0x0204:6 (0x0001)  
	bool                                               bUsedWithSkeletalMesh : 1;                                  // 0x0204:7 (0x0001)  
	bool                                               bUsedWithEditorCompositing : 1;                             // 0x0205:0 (0x0001)  
	bool                                               bUsedWithParticleSprites : 1;                               // 0x0205:1 (0x0001)  
	bool                                               bUsedWithBeamTrails : 1;                                    // 0x0205:2 (0x0001)  
	bool                                               bUsedWithMeshParticles : 1;                                 // 0x0205:3 (0x0001)  
	bool                                               bUsedWithNiagaraSprites : 1;                                // 0x0205:4 (0x0001)  
	bool                                               bUsedWithNiagaraRibbons : 1;                                // 0x0205:5 (0x0001)  
	bool                                               bUsedWithNiagaraMeshParticles : 1;                          // 0x0205:6 (0x0001)  
	bool                                               bUsedWithGeometryCache : 1;                                 // 0x0205:7 (0x0001)  
	bool                                               bUsedWithStaticLighting : 1;                                // 0x0206:0 (0x0001)  
	bool                                               bUsedWithMorphTargets : 1;                                  // 0x0206:1 (0x0001)  
	bool                                               bUsedWithSplineMeshes : 1;                                  // 0x0206:2 (0x0001)  
	bool                                               bUsedWithInstancedStaticMeshes : 1;                         // 0x0206:3 (0x0001)  
	bool                                               bUsedWithGeometryCollections : 1;                           // 0x0206:4 (0x0001)  
	bool                                               bUsesDistortion : 1;                                        // 0x0206:5 (0x0001)  
	bool                                               bUsedWithClothing : 1;                                      // 0x0206:6 (0x0001)  
	unsigned char                                      UnknownData13_3[0x1];                                       // 0x0207   (0x0001)  MISSED
	bool                                               bUsedWithWater : 1;                                         // 0x0208:0 (0x0001)  
	bool                                               bUsedWithHairStrands : 1;                                   // 0x0208:1 (0x0001)  
	bool                                               bUsedWithLidarPointCloud : 1;                               // 0x0208:2 (0x0001)  
	unsigned char                                      UnknownData14_3[0x3];                                       // 0x0209   (0x0003)  MISSED
	bool                                               bUsedWithUI : 1;                                            // 0x020C:0 (0x0001)  
	bool                                               bAutomaticallySetUsageInEditor : 1;                         // 0x020C:1 (0x0001)  
	bool                                               bFullyRough : 1;                                            // 0x020C:2 (0x0001)  
	bool                                               bUseFullPrecision : 1;                                      // 0x020C:3 (0x0001)  
	bool                                               bUseLightmapDirectionality : 1;                             // 0x020C:4 (0x0001)  
	unsigned char                                      UnknownData15_3[0x3];                                       // 0x020D   (0x0003)  MISSED
	bool                                               bForwardRenderUsePreintegratedGFForSimpleIBL : 1;           // 0x0210:0 (0x0001)  
	unsigned char                                      UnknownData16_3[0x3];                                       // 0x0211   (0x0003)  MISSED
	bool                                               bUseHQForwardReflections : 1;                               // 0x0214:0 (0x0001)  
	bool                                               bUsePlanarForwardReflections : 1;                           // 0x0214:1 (0x0001)  
	bool                                               bNormalCurvatureToRoughness : 1;                            // 0x0214:2 (0x0001)  
	SDK_UNDEFINED(1,451) /* TEnumAsByte<EMaterialTessellationMode> */ __um(D3D11TessellationMode);                 // 0x0215   (0x0001)  
	bool                                               bEnableCrackFreeDisplacement : 1;                           // 0x0216:0 (0x0001)  
	bool                                               bEnableAdaptiveTessellation : 1;                            // 0x0216:1 (0x0001)  
	bool                                               AllowTranslucentCustomDepthWrites : 1;                      // 0x0216:2 (0x0001)  
	bool                                               Wireframe : 1;                                              // 0x0216:3 (0x0001)  
	bool                                               bCanMaskedBeAssumedOpaque : 1;                              // 0x0216:4 (0x0001)  
	bool                                               bIsMasked : 1;                                              // 0x0216:5 (0x0001)  
	bool                                               bIsPreviewMaterial : 1;                                     // 0x0216:6 (0x0001)  
	bool                                               bIsFunctionPreviewMaterial : 1;                             // 0x0216:7 (0x0001)  
	bool                                               bUseMaterialAttributes : 1;                                 // 0x0217:0 (0x0001)  
	bool                                               bCastRayTracedShadows : 1;                                  // 0x0217:1 (0x0001)  
	bool                                               bUseTranslucencyVertexFog : 1;                              // 0x0217:2 (0x0001)  
	bool                                               bRayTracedTranslucencyAbsorption : 1;                       // 0x0217:3 (0x0001)  
	bool                                               bIsSky : 1;                                                 // 0x0217:4 (0x0001)  
	bool                                               bComputeFogPerPixel : 1;                                    // 0x0217:5 (0x0001)  
	bool                                               bOutputTranslucentVelocity : 1;                             // 0x0217:6 (0x0001)  
	bool                                               bAllowDevelopmentShaderCompile : 1;                         // 0x0217:7 (0x0001)  
	bool                                               bIsMaterialEditorStatsMaterial : 1;                         // 0x0218:0 (0x0001)  
	SDK_UNDEFINED(1,452) /* TEnumAsByte<EBlendableLocation> */ __um(BlendableLocation);                            // 0x0219   (0x0001)  
	bool                                               BlendableOutputAlpha : 1;                                   // 0x021A:0 (0x0001)  
	bool                                               bEnableStencilTest : 1;                                     // 0x021A:1 (0x0001)  
	SDK_UNDEFINED(1,453) /* TEnumAsByte<EMaterialStencilCompare> */ __um(StencilCompare);                          // 0x021B   (0x0001)  
	char                                               StencilRefValue;                                            // 0x021C   (0x0001)  
	SDK_UNDEFINED(1,454) /* TEnumAsByte<ERefractionMode> */ __um(RefractionMode);                                  // 0x021D   (0x0001)  
	unsigned char                                      UnknownData17_5[0x2];                                       // 0x021E   (0x0002)  MISSED
	int32_t                                            BlendablePriority;                                          // 0x0220   (0x0004)  
	bool                                               bIsBlendable : 1;                                           // 0x0224:0 (0x0001)  
	unsigned char                                      UnknownData18_4[0x3];                                       // 0x0225   (0x0003)  MISSED
	uint32_t                                           UsageFlagWarnings;                                          // 0x0228   (0x0004)  
	float                                              RefractionDepthBias;                                        // 0x022C   (0x0004)  
	FGuid                                              StateId;                                                    // 0x0230   (0x0010)  
	float                                              MaxDisplacement;                                            // 0x0240   (0x0004)  
	unsigned char                                      UnknownData19_5[0x8C];                                      // 0x0244   (0x008C)  MISSED
	FMaterialCachedExpressionData                      CachedExpressionData;                                       // 0x02D0   (0x0228)  
};

/// Struct /Script/Engine.MaterialSpriteElement
/// Size: 0x0028 (0x000000 - 0x000028)
struct FMaterialSpriteElement
{ 
	class UMaterialInterface*                          Material;                                                   // 0x0000   (0x0008)  
	class UCurveFloat*                                 DistanceToOpacityCurve;                                     // 0x0008   (0x0008)  
	bool                                               bSizeIsInScreenSpace : 1;                                   // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              BaseSizeX;                                                  // 0x0014   (0x0004)  
	float                                              BaseSizeY;                                                  // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UCurveFloat*                                 DistanceToSizeCurve;                                        // 0x0020   (0x0008)  
};

/// Class /Script/Engine.MaterialBillboardComponent
/// Size: 0x0010 (0x000410 - 0x000420)
class UMaterialBillboardComponent : public UPrimitiveComponent
{ 
public:
	TArray<FMaterialSpriteElement>                     Elements;                                                   // 0x0408   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0418   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.MaterialBillboardComponent.SetElements
	// void SetElements(TArray<FMaterialSpriteElement>& NewElements);                                                        // [0x2f6a6a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialBillboardComponent.AddElement
	// void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve); // [0x2f6a4d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpressionAbs
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionAbs : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionActorPositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionAdd
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionAdd : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionAntialiasedTextureMask
/// Size: 0x0008 (0x0000F0 - 0x0000F8)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{ 
public:
	float                                              Threshold;                                                  // 0x00F0   (0x0004)  
	SDK_UNDEFINED(1,455) /* TEnumAsByte<ETextureColorChannel> */ __um(Channel);                                    // 0x00F4   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00F5   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAppendVector
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionAppendVector : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArccosine
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArccosine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArccosineFast
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArccosineFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArcsine
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArcsine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArcsineFast
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArcsineFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArctangent : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent2
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionArctangent2 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   X;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent2Fast
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   X;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangentFast
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArctangentFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAtmosphericFogColor
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightColor
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightVector
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionBentNormalCustomOutput
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBlackBody
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionBlackBody : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Temp;                                                       // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBlendMaterialAttributes
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           A;                                                          // 0x0040   (0x0010)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0050   (0x0008)  MISSED
	FMaterialAttributesInput                           B;                                                          // 0x0058   (0x0010)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0068   (0x0008)  MISSED
	FExpressionInput                                   Alpha;                                                      // 0x0070   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x007C   (0x0008)  MISSED
	SDK_UNDEFINED(1,456) /* TEnumAsByte<EMaterialAttributeBlend> */ __um(PixelAttributeBlendType);                 // 0x0084   (0x0001)  
	SDK_UNDEFINED(1,457) /* TEnumAsByte<EMaterialAttributeBlend> */ __um(VertexAttributeBlendType);                // 0x0085   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0086   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBreakMaterialAttributes
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0040   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBumpOffset
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Height;                                                     // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   HeightRatioInput;                                           // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	float                                              HeightRatio;                                                // 0x007C   (0x0004)  
	float                                              ReferencePlane;                                             // 0x0080   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionCameraPositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCameraVectorWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCeil
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionCeil : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParameter
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionParameter : public UMaterialExpression
{ 
public:
	FName                                              ParameterName;                                              // 0x0040   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0048   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionVectorParameter
/// Size: 0x0018 (0x000058 - 0x000070)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{ 
public:
	FLinearColor                                       DefaultValue;                                               // 0x0058   (0x0010)  
	bool                                               bUseCustomPrimitiveData;                                    // 0x0068   (0x0001)  
	char                                               PrimitiveDataIndex;                                         // 0x0069   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x006A   (0x0006)  MISSED
};

/// Class /Script/Engine.MaterialExpressionChannelMaskParameter
/// Size: 0x0018 (0x000070 - 0x000088)
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{ 
public:
	SDK_UNDEFINED(1,458) /* TEnumAsByte<EChannelMaskParameterColor> */ __um(MaskChannel);                          // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0071   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x0074   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0080   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionClamp
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionClamp : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Min;                                                        // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Max;                                                        // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	SDK_UNDEFINED(1,459) /* TEnumAsByte<EClampMode> */ __um(ClampMode);                                            // 0x007C   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x007D   (0x0003)  MISSED
	float                                              MinDefault;                                                 // 0x0080   (0x0004)  
	float                                              MaxDefault;                                                 // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionClearCoatNormalCustomOutput
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCollectionParameter
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{ 
public:
	class UMaterialParameterCollection*                Collection;                                                 // 0x0040   (0x0008)  
	FName                                              ParameterName;                                              // 0x0048   (0x0008)  
	FGuid                                              ParameterId;                                                // 0x0050   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionComment
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionComment : public UMaterialExpression
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0040   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x0044   (0x0004)  
	SDK_UNDEFINED(16,460) /* FString */                __um(Text);                                                 // 0x0048   (0x0010)  
	FLinearColor                                       CommentColor;                                               // 0x0058   (0x0010)  
	int32_t                                            FontSize;                                                   // 0x0068   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionComponentMask
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionComponentMask : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	bool                                               R : 1;                                                      // 0x0054:0 (0x0001)  
	bool                                               G : 1;                                                      // 0x0054:1 (0x0001)  
	bool                                               B : 1;                                                      // 0x0054:2 (0x0001)  
	bool                                               A : 1;                                                      // 0x0054:3 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionConstant
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionConstant : public UMaterialExpression
{ 
public:
	float                                              R;                                                          // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionConstant2Vector
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{ 
public:
	float                                              R;                                                          // 0x0040   (0x0004)  
	float                                              G;                                                          // 0x0044   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionConstant3Vector
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{ 
public:
	FLinearColor                                       Constant;                                                   // 0x0040   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionConstant4Vector
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{ 
public:
	FLinearColor                                       Constant;                                                   // 0x0040   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionConstantBiasScale
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              Bias;                                                       // 0x0054   (0x0004)  
	float                                              Scale;                                                      // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCosine
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionCosine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              Period;                                                     // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionCrossProduct
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionScalarParameter
/// Size: 0x0008 (0x000058 - 0x000060)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{ 
public:
	float                                              DefaultValue;                                               // 0x0058   (0x0004)  
	bool                                               bUseCustomPrimitiveData;                                    // 0x005C   (0x0001)  
	char                                               PrimitiveDataIndex;                                         // 0x005D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x005E   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCurveAtlasRowParameter
/// Size: 0x0028 (0x000060 - 0x000088)
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{ 
public:
	class UCurveLinearColor*                           Curve;                                                      // 0x0060   (0x0008)  
	class UCurveLinearColorAtlas*                      Atlas;                                                      // 0x0068   (0x0008)  
	FExpressionInput                                   InputTime;                                                  // 0x0070   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x007C   (0x000C)  MISSED
};

/// Struct /Script/Engine.CustomInput
/// Size: 0x001C (0x000000 - 0x00001C)
struct FCustomInput
{ 
	FName                                              InputName;                                                  // 0x0000   (0x0008)  
	FExpressionInput                                   Input;                                                      // 0x0008   (0x000C)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0014   (0x0008)  MISSED
};

/// Struct /Script/Engine.CustomDefine
/// Size: 0x0020 (0x000000 - 0x000020)
struct FCustomDefine
{ 
	SDK_UNDEFINED(16,461) /* FString */                __um(DefineName);                                           // 0x0000   (0x0010)  
	SDK_UNDEFINED(16,462) /* FString */                __um(DefineValue);                                          // 0x0010   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionCustom
/// Size: 0x0058 (0x000040 - 0x000098)
class UMaterialExpressionCustom : public UMaterialExpression
{ 
public:
	SDK_UNDEFINED(16,463) /* FString */                __um(Code);                                                 // 0x0040   (0x0010)  
	SDK_UNDEFINED(1,464) /* TEnumAsByte<ECustomMaterialOutputType> */ __um(OutputType);                            // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0051   (0x0007)  MISSED
	SDK_UNDEFINED(16,465) /* FString */                __um(Description);                                          // 0x0058   (0x0010)  
	TArray<FCustomInput>                               Inputs;                                                     // 0x0068   (0x0010)  
	TArray<FCustomDefine>                              AdditionalDefines;                                          // 0x0078   (0x0010)  
	SDK_UNDEFINED(16,466) /* TArray<FString> */        __um(IncludeFilePaths);                                     // 0x0088   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionDDX
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDDX : public UMaterialExpression
{ 
public:
	FExpressionInput                                   value;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDDY
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDDY : public UMaterialExpression
{ 
public:
	FExpressionInput                                   value;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDecalDerivative
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDecalLifetimeOpacity
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDecalMipmapLevel
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{ 
public:
	FExpressionInput                                   textureSize;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              ConstWidth;                                                 // 0x0054   (0x0004)  
	float                                              ConstHeight;                                                // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDeltaTime
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDeltaTime : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDepthFade
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionDepthFade : public UMaterialExpression
{ 
public:
	FExpressionInput                                   InOpacity;                                                  // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   FadeDistance;                                               // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              OpacityDefault;                                             // 0x0068   (0x0004)  
	float                                              FadeDistanceDefault;                                        // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionDepthOfFieldFunction
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{ 
public:
	SDK_UNDEFINED(1,467) /* TEnumAsByte<EDepthOfFieldFunctionValue> */ __um(FunctionValue);                        // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Depth;                                                      // 0x0044   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDeriveNormalZ
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{ 
public:
	FExpressionInput                                   InXY;                                                       // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDesaturation
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionDesaturation : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Fraction;                                                   // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FLinearColor                                       LuminanceFactors;                                           // 0x0068   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionDistance
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionDistance : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDistanceCullFade
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDistanceFieldGradient
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Position;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDistanceToNearestSurface
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Position;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDivide
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionDivide : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionDotProduct
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionDotProduct : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDynamicParameter
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{ 
public:
	SDK_UNDEFINED(16,468) /* TArray<FString> */        __um(ParamNames);                                           // 0x0040   (0x0010)  
	FLinearColor                                       DefaultValue;                                               // 0x0050   (0x0010)  
	uint32_t                                           ParameterIndex;                                             // 0x0060   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionEyeAdaptation
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionFeatureLevelSwitch
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Inputs;                                                     // 0x0054   (0x0030)  
	unsigned char                                      UnknownData01_6[0x24];                                      // 0x0084   (0x0024)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFloor
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionFloor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFmod
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionFmod : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFontSample
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionFontSample : public UMaterialExpression
{ 
public:
	class UFont*                                       Font;                                                       // 0x0040   (0x0008)  
	int32_t                                            FontTexturePage;                                            // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFontSampleParameter
/// Size: 0x0020 (0x000050 - 0x000070)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{ 
public:
	FName                                              ParameterName;                                              // 0x0050   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0058   (0x0010)  
	FName                                              Group;                                                      // 0x0068   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionFrac
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionFrac : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFresnel
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionFresnel : public UMaterialExpression
{ 
public:
	FExpressionInput                                   ExponentIn;                                                 // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              Exponent;                                                   // 0x0054   (0x0004)  
	FExpressionInput                                   BaseReflectFractionIn;                                      // 0x0058   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0064   (0x0008)  MISSED
	float                                              BaseReflectFraction;                                        // 0x006C   (0x0004)  
	FExpressionInput                                   Normal;                                                     // 0x0070   (0x000C)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x007C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFunctionInput
/// Size: 0x0080 (0x000040 - 0x0000C0)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Preview;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FName                                              InputName;                                                  // 0x0054   (0x0008)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	SDK_UNDEFINED(16,469) /* FString */                __um(Description);                                          // 0x0060   (0x0010)  
	FGuid                                              ID;                                                         // 0x0070   (0x0010)  
	SDK_UNDEFINED(1,470) /* TEnumAsByte<EFunctionInputType> */ __um(InputType);                                    // 0x0080   (0x0001)  
	unsigned char                                      UnknownData02_5[0xF];                                       // 0x0081   (0x000F)  MISSED
	FVector4                                           PreviewValue;                                               // 0x0090   (0x0010)  
	bool                                               bUsePreviewValueAsDefault : 1;                              // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x00A1   (0x0003)  MISSED
	int32_t                                            SortPriority;                                               // 0x00A4   (0x0004)  
	bool                                               bCompilingFunctionPreview : 1;                              // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData04_6[0x17];                                      // 0x00A9   (0x0017)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFunctionOutput
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{ 
public:
	FName                                              OutputName;                                                 // 0x0040   (0x0008)  
	SDK_UNDEFINED(16,471) /* FString */                __um(Description);                                          // 0x0048   (0x0010)  
	int32_t                                            SortPriority;                                               // 0x0058   (0x0004)  
	FExpressionInput                                   A;                                                          // 0x005C   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0068   (0x0008)  MISSED
	bool                                               bLastPreviewed : 1;                                         // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0071   (0x0003)  MISSED
	FGuid                                              ID;                                                         // 0x0074   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionGetMaterialAttributes
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0040   (0x0010)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0050   (0x0008)  MISSED
	TArray<FGuid>                                      AttributeGetTypes;                                          // 0x0058   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionGIReplace
/// Size: 0x0040 (0x000040 - 0x000080)
class UMaterialExpressionGIReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   StaticIndirect;                                             // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   DynamicIndirect;                                            // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionHairAttributes
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionHairAttributes : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionIf
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UMaterialExpressionIf : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   AGreaterThanB;                                              // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   AEqualsB;                                                   // 0x007C   (0x000C)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0088   (0x0008)  MISSED
	FExpressionInput                                   ALessThanB;                                                 // 0x0090   (0x000C)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x009C   (0x0008)  MISSED
	float                                              EqualsThreshold;                                            // 0x00A4   (0x0004)  
	float                                              ConstB;                                                     // 0x00A8   (0x0004)  
	float                                              ConstAEqualsB;                                              // 0x00AC   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionLightmapUVs
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionLightmassReplace
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Realtime;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Lightmass;                                                  // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLightVector
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionLightVector : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionLinearInterpolate
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Alpha;                                                      // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x007C   (0x0004)  
	float                                              ConstB;                                                     // 0x0080   (0x0004)  
	float                                              ConstAlpha;                                                 // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionLogarithm10
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   X;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLogarithm2
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   X;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMakeMaterialAttributes
/// Size: 0x0230 (0x000040 - 0x000270)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{ 
public:
	FExpressionInput                                   BaseColor;                                                  // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Metallic;                                                   // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Specular;                                                   // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   Roughness;                                                  // 0x007C   (0x000C)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0088   (0x0008)  MISSED
	FExpressionInput                                   Anisotropy;                                                 // 0x0090   (0x000C)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x009C   (0x0008)  MISSED
	FExpressionInput                                   EmissiveColor;                                              // 0x00A4   (0x000C)  
	unsigned char                                      UnknownData05_5[0x8];                                       // 0x00B0   (0x0008)  MISSED
	FExpressionInput                                   Opacity;                                                    // 0x00B8   (0x000C)  
	unsigned char                                      UnknownData06_5[0x8];                                       // 0x00C4   (0x0008)  MISSED
	FExpressionInput                                   OpacityMask;                                                // 0x00CC   (0x000C)  
	unsigned char                                      UnknownData07_5[0x8];                                       // 0x00D8   (0x0008)  MISSED
	FExpressionInput                                   Normal;                                                     // 0x00E0   (0x000C)  
	unsigned char                                      UnknownData08_5[0x8];                                       // 0x00EC   (0x0008)  MISSED
	FExpressionInput                                   Tangent;                                                    // 0x00F4   (0x000C)  
	unsigned char                                      UnknownData09_5[0x8];                                       // 0x0100   (0x0008)  MISSED
	FExpressionInput                                   WorldPositionOffset;                                        // 0x0108   (0x000C)  
	unsigned char                                      UnknownData10_5[0x8];                                       // 0x0114   (0x0008)  MISSED
	FExpressionInput                                   WorldDisplacement;                                          // 0x011C   (0x000C)  
	unsigned char                                      UnknownData11_5[0x8];                                       // 0x0128   (0x0008)  MISSED
	FExpressionInput                                   TessellationMultiplier;                                     // 0x0130   (0x000C)  
	unsigned char                                      UnknownData12_5[0x8];                                       // 0x013C   (0x0008)  MISSED
	FExpressionInput                                   SubsurfaceColor;                                            // 0x0144   (0x000C)  
	unsigned char                                      UnknownData13_5[0x8];                                       // 0x0150   (0x0008)  MISSED
	FExpressionInput                                   ClearCoat;                                                  // 0x0158   (0x000C)  
	unsigned char                                      UnknownData14_5[0x8];                                       // 0x0164   (0x0008)  MISSED
	FExpressionInput                                   ClearCoatRoughness;                                         // 0x016C   (0x000C)  
	unsigned char                                      UnknownData15_5[0x8];                                       // 0x0178   (0x0008)  MISSED
	FExpressionInput                                   AmbientOcclusion;                                           // 0x0180   (0x000C)  
	unsigned char                                      UnknownData16_5[0x8];                                       // 0x018C   (0x0008)  MISSED
	FExpressionInput                                   Refraction;                                                 // 0x0194   (0x000C)  
	unsigned char                                      UnknownData17_5[0x8];                                       // 0x01A0   (0x0008)  MISSED
	FExpressionInput                                   CustomizedUVs;                                              // 0x01A8   (0x0060)  
	unsigned char                                      UnknownData18_5[0x40];                                      // 0x0208   (0x0040)  MISSED
	FExpressionInput                                   PixelDepthOffset;                                           // 0x0248   (0x000C)  
	unsigned char                                      UnknownData19_5[0x8];                                       // 0x0254   (0x0008)  MISSED
	FExpressionInput                                   ShadingModel;                                               // 0x025C   (0x000C)  
	unsigned char                                      UnknownData20_6[0x8];                                       // 0x0268   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMapARPassthroughCameraUV
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMaterialAttributeLayers
/// Size: 0x00A8 (0x000040 - 0x0000E8)
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{ 
public:
	FName                                              ParameterName;                                              // 0x0040   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0048   (0x0010)  
	FMaterialAttributesInput                           Input;                                                      // 0x0058   (0x0010)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0068   (0x0008)  MISSED
	FMaterialLayersFunctions                           DefaultLayers;                                              // 0x0070   (0x0040)  
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                                           // 0x00B0   (0x0010)  
	int32_t                                            NumActiveLayerCallers;                                      // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x00C4   (0x0004)  MISSED
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                                           // 0x00C8   (0x0010)  
	int32_t                                            NumActiveBlendCallers;                                      // 0x00D8   (0x0004)  
	bool                                               bIsLayerGraphBuilt;                                         // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData02_6[0xB];                                       // 0x00DD   (0x000B)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMaterialFunctionCall
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{ 
public:
	class UMaterialFunctionInterface*                  MaterialFunction;                                           // 0x0040   (0x0008)  
	FMaterialParameterInfo                             FunctionParameterInfo;                                      // 0x0048   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionMaterialLayerOutput
/// Size: 0x0000 (0x000088 - 0x000088)
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionMaterialProxyReplace
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Realtime;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   MaterialProxy;                                              // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMax
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionMax : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionMin
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionMin : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionMultiply
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionMultiply : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionNoise
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionNoise : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Position;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   FilterWidth;                                                // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              Scale;                                                      // 0x0068   (0x0004)  
	int32_t                                            Quality;                                                    // 0x006C   (0x0004)  
	SDK_UNDEFINED(1,472) /* TEnumAsByte<ENoiseFunction> */ __um(NoiseFunction);                                    // 0x0070   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0071   (0x0003)  MISSED
	bool                                               bTurbulence : 1;                                            // 0x0074:0 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x0075   (0x0003)  MISSED
	int32_t                                            Levels;                                                     // 0x0078   (0x0004)  
	float                                              OutputMin;                                                  // 0x007C   (0x0004)  
	float                                              OutputMax;                                                  // 0x0080   (0x0004)  
	float                                              LevelScale;                                                 // 0x0084   (0x0004)  
	bool                                               bTiling : 1;                                                // 0x0088:0 (0x0001)  
	unsigned char                                      UnknownData04_4[0x3];                                       // 0x0089   (0x0003)  MISSED
	uint32_t                                           RepeatSize;                                                 // 0x008C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionNormalize
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionNormalize : public UMaterialExpression
{ 
public:
	FExpressionInput                                   VectorInput;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionObjectBounds
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectBounds : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectOrientation
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectPositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectRadius
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionOneMinus
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionOneMinus : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPanner
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionPanner : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Time;                                                       // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Speed;                                                      // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	float                                              SpeedX;                                                     // 0x007C   (0x0004)  
	float                                              SpeedY;                                                     // 0x0080   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x0084   (0x0004)  
	bool                                               bFractionalPart;                                            // 0x0088   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParticleColor
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleDirection
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleDirection : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleMacroUV
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleMotionBlurFade
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticlePositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRadius
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleRadius : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRandom
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleRandom : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRelativeTime
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSize
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSpeed
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSubUV
/// Size: 0x0008 (0x0000D0 - 0x0000D8)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{ 
public:
	bool                                               bBlend : 1;                                                 // 0x00D0:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParticleSubUVProperties
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceCustomData
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{ 
public:
	FExpressionInput                                   DefaultValue;                                               // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              ConstDefaultValue;                                          // 0x0054   (0x0004)  
	uint32_t                                           DataIndex;                                                  // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPerInstanceFadeAmount
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceRandom
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPixelDepth
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPixelNormalWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPower
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionPower : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Base;                                                       // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Exponent;                                                   // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstExponent;                                              // 0x0068   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPrecomputedAOMask
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedLocalBounds
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedNormal
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedPosition
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreviousFrameSwitch
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   CurrentFrame;                                               // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   PreviousFrame;                                              // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionQualitySwitch
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Inputs;                                                     // 0x0054   (0x0024)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0078   (0x0018)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRayTracingQualitySwitch
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Normal;                                                     // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   RayTraced;                                                  // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionReflectionVectorWS
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{ 
public:
	FExpressionInput                                   CustomWorldNormal;                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	bool                                               bNormalizeCustomWorldNormal : 1;                            // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionReroute
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionReroute : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRotateAboutAxis
/// Size: 0x0058 (0x000040 - 0x000098)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{ 
public:
	FExpressionInput                                   NormalizedRotationAxis;                                     // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   RotationAngle;                                              // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   PivotPoint;                                                 // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   Position;                                                   // 0x007C   (0x000C)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0088   (0x0008)  MISSED
	float                                              Period;                                                     // 0x0090   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRotator
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionRotator : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Time;                                                       // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              CenterX;                                                    // 0x0068   (0x0004)  
	float                                              CenterY;                                                    // 0x006C   (0x0004)  
	float                                              Speed;                                                      // 0x0070   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x0074   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionRound
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionRound : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureOutput
/// Size: 0x0090 (0x000040 - 0x0000D0)
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   BaseColor;                                                  // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Specular;                                                   // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Roughness;                                                  // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   Normal;                                                     // 0x007C   (0x000C)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0088   (0x0008)  MISSED
	FExpressionInput                                   WorldHeight;                                                // 0x0090   (0x000C)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x009C   (0x0008)  MISSED
	FExpressionInput                                   Opacity;                                                    // 0x00A4   (0x000C)  
	unsigned char                                      UnknownData05_5[0x8];                                       // 0x00B0   (0x0008)  MISSED
	FExpressionInput                                   Mask;                                                       // 0x00B8   (0x000C)  
	unsigned char                                      UnknownData06_6[0xC];                                       // 0x00C4   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureReplace
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   VirtualTextureOutput;                                       // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSample
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   WorldPosition;                                              // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   MipValue;                                                   // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0xC];                                       // 0x0074   (0x000C)  MISSED
	class URuntimeVirtualTexture*                      VirtualTexture;                                             // 0x0080   (0x0008)  
	ERuntimeVirtualTextureMaterialType                 MaterialType;                                               // 0x0088   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x0089   (0x0001)  
	SDK_UNDEFINED(1,473) /* TEnumAsByte<ERuntimeVirtualTextureMipValueMode> */ __um(MipValueMode);                 // 0x008A   (0x0001)  
	unsigned char                                      UnknownData03_6[0x5];                                       // 0x008B   (0x0005)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
/// Size: 0x0020 (0x000090 - 0x0000B0)
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{ 
public:
	FName                                              ParameterName;                                              // 0x0090   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0098   (0x0010)  
	FName                                              Group;                                                      // 0x00A8   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionSaturate
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSaturate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneColor
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionSceneColor : public UMaterialExpression
{ 
public:
	SDK_UNDEFINED(1,474) /* TEnumAsByte<EMaterialSceneAttributeInputMode> */ __um(InputMode);                      // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x0044   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0050   (0x0008)  MISSED
	FExpressionInput                                   OffsetFraction;                                             // 0x0058   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0064   (0x0008)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x006C   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneDepth
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{ 
public:
	SDK_UNDEFINED(1,475) /* TEnumAsByte<EMaterialSceneAttributeInputMode> */ __um(InputMode);                      // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x0044   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0050   (0x0008)  MISSED
	FExpressionInput                                   Coordinates;                                                // 0x0058   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0064   (0x0008)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x006C   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneTexelSize
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSceneTexture
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	SDK_UNDEFINED(1,476) /* TEnumAsByte<ESceneTextureId> */ __um(SceneTextureId);                                  // 0x0054   (0x0001)  
	bool                                               bFiltered;                                                  // 0x0055   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionScreenPosition
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSetMaterialAttributes
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{ 
public:
	TArray<FExpressionInput>                           Inputs;                                                     // 0x0040   (0x0010)  
	TArray<FGuid>                                      AttributeSetTypes;                                          // 0x0050   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionShaderStageSwitch
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   PixelShader;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   VertexShader;                                               // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionShadingModel
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionShadingModel : public UMaterialExpression
{ 
public:
	SDK_UNDEFINED(1,477) /* TEnumAsByte<EMaterialShadingModel> */ __um(ShadingModel);                              // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionShadingPathSwitch
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Inputs;                                                     // 0x0054   (0x0024)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0078   (0x0018)  MISSED
};

/// Class /Script/Engine.MaterialExpressionShadowReplace
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionShadowReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Shadow;                                                     // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSign
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSign : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSine
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              Period;                                                     // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSingleLayerWaterMaterialOutput
/// Size: 0x0040 (0x000040 - 0x000080)
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   ScatteringCoefficients;                                     // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   AbsorptionCoefficients;                                     // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   PhaseG;                                                     // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDirection
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightIlluminance
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0040   (0x0004)  
	FExpressionInput                                   WorldPosition;                                              // 0x0044   (0x000C)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereAerialPerspective
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereViewLuminance
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSobol
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionSobol : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Cell;                                                       // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Index;                                                      // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Seed;                                                       // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	uint32_t                                           ConstIndex;                                                 // 0x007C   (0x0004)  
	FVector2D                                          ConstSeed;                                                  // 0x0080   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionSpeedTree
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionSpeedTree : public UMaterialExpression
{ 
public:
	FExpressionInput                                   GeometryInput;                                              // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   WindInput;                                                  // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   LODInput;                                                   // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   ExtraBendWS;                                                // 0x007C   (0x000C)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0088   (0x0008)  MISSED
	SDK_UNDEFINED(1,478) /* TEnumAsByte<ESpeedTreeGeometryType> */ __um(GeometryType);                             // 0x0090   (0x0001)  
	SDK_UNDEFINED(1,479) /* TEnumAsByte<ESpeedTreeWindType> */ __um(WindType);                                     // 0x0091   (0x0001)  
	SDK_UNDEFINED(1,480) /* TEnumAsByte<ESpeedTreeLODType> */ __um(LODType);                                       // 0x0092   (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x0093   (0x0001)  MISSED
	float                                              BillboardThreshold;                                         // 0x0094   (0x0004)  
	bool                                               bAccurateWindVelocities;                                    // 0x0098   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0099   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSphereMask
/// Size: 0x0058 (0x000040 - 0x000098)
class UMaterialExpressionSphereMask : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Radius;                                                     // 0x0068   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   Hardness;                                                   // 0x007C   (0x000C)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0088   (0x0008)  MISSED
	float                                              AttenuationRadius;                                          // 0x0090   (0x0004)  
	float                                              HardnessPercent;                                            // 0x0094   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSphericalParticleOpacity
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Density;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              ConstantDensity;                                            // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSquareRoot
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticBool
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionStaticBool : public UMaterialExpression
{ 
public:
	bool                                               value : 1;                                                  // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticBoolParameter
/// Size: 0x0008 (0x000058 - 0x000060)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{ 
public:
	bool                                               DefaultValue : 1;                                           // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticComponentMaskParameter
/// Size: 0x0018 (0x000058 - 0x000070)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0058   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0064   (0x0008)  MISSED
	bool                                               DefaultR : 1;                                               // 0x006C:0 (0x0001)  
	bool                                               DefaultG : 1;                                               // 0x006C:1 (0x0001)  
	bool                                               DefaultB : 1;                                               // 0x006C:2 (0x0001)  
	bool                                               DefaultA : 1;                                               // 0x006C:3 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticSwitch
/// Size: 0x0040 (0x000040 - 0x000080)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{ 
public:
	bool                                               DefaultValue : 1;                                           // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   A;                                                          // 0x0044   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0050   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0058   (0x000C)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0064   (0x0008)  MISSED
	FExpressionInput                                   value;                                                      // 0x006C   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0078   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticSwitchParameter
/// Size: 0x0028 (0x000060 - 0x000088)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0060   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x006C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0074   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0080   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSubtract
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionSubtract : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTangent
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTangent : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              Period;                                                     // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTangentOutput
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTemporalSobol
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Index;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Seed;                                                       // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0060   (0x0008)  MISSED
	uint32_t                                           ConstIndex;                                                 // 0x0068   (0x0004)  
	FVector2D                                          ConstSeed;                                                  // 0x006C   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureCoordinate
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{ 
public:
	int32_t                                            CoordinateIndex;                                            // 0x0040   (0x0004)  
	float                                              UTiling;                                                    // 0x0044   (0x0004)  
	float                                              VTiling;                                                    // 0x0048   (0x0004)  
	bool                                               UnMirrorU : 1;                                              // 0x004C:0 (0x0001)  
	bool                                               UnMirrorV : 1;                                              // 0x004C:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureObject
/// Size: 0x0000 (0x000050 - 0x000050)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureObjectParameter
/// Size: 0x0000 (0x0000F0 - 0x0000F0)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureProperty
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTextureProperty : public UMaterialExpression
{ 
public:
	FExpressionInput                                   TextureObject;                                              // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	SDK_UNDEFINED(1,481) /* TEnumAsByte<EMaterialExposedTextureProperty> */ __um(Property);                        // 0x0054   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2DArray
/// Size: 0x0000 (0x0000F0 - 0x0000F0)
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterCube
/// Size: 0x0000 (0x0000F0 - 0x0000F0)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterSubUV
/// Size: 0x0008 (0x0000F0 - 0x0000F8)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{ 
public:
	bool                                               bBlend : 1;                                                 // 0x00F0:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00F1   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterVolume
/// Size: 0x0000 (0x0000F0 - 0x0000F0)
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionThinTranslucentMaterialOutput
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   TransmittanceColor;                                         // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTime
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionTime : public UMaterialExpression
{ 
public:
	bool                                               bIgnorePause : 1;                                           // 0x0040:0 (0x0001)  
	bool                                               bOverride_Period : 1;                                       // 0x0040:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              Period;                                                     // 0x0044   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTransform
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTransform : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	SDK_UNDEFINED(1,482) /* TEnumAsByte<EMaterialVectorCoordTransformSource> */ __um(TransformSourceType);         // 0x0054   (0x0001)  
	SDK_UNDEFINED(1,483) /* TEnumAsByte<EMaterialVectorCoordTransform> */ __um(TransformType);                     // 0x0055   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTransformPosition
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	SDK_UNDEFINED(1,484) /* TEnumAsByte<EMaterialPositionTransformSource> */ __um(TransformSourceType);            // 0x0054   (0x0001)  
	SDK_UNDEFINED(1,485) /* TEnumAsByte<EMaterialPositionTransformSource> */ __um(TransformType);                  // 0x0055   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTruncate
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTruncate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTwoSidedSign
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVectorNoise
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionVectorNoise : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Position;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	SDK_UNDEFINED(1,486) /* TEnumAsByte<EVectorNoiseFunction> */ __um(NoiseFunction);                              // 0x0054   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	int32_t                                            Quality;                                                    // 0x0058   (0x0004)  
	bool                                               bTiling : 1;                                                // 0x005C:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x005D   (0x0003)  MISSED
	uint32_t                                           TileSize;                                                   // 0x0060   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVertexColor
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionVertexColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVertexInterpolator
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0x14];                                      // 0x004C   (0x0014)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVertexNormalWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVertexTangentWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionViewProperty
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionViewProperty : public UMaterialExpression
{ 
public:
	SDK_UNDEFINED(1,487) /* TEnumAsByte<EMaterialExposedViewProperty> */ __um(Property);                           // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionViewSize
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionViewSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVirtualTextureFeatureSwitch
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   No;                                                         // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Yes;                                                        // 0x0054   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionWorldPosition
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{ 
public:
	SDK_UNDEFINED(1,488) /* TEnumAsByte<EWorldPositionIncludedOffsets> */ __um(WorldPositionShaderOffset);         // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunctionInterface
/// Size: 0x0018 (0x000028 - 0x000040)
class UMaterialFunctionInterface : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FGuid                                              StateId;                                                    // 0x0028   (0x0010)  
	EMaterialFunctionUsage                             MaterialFunctionUsage;                                      // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunction
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialFunction : public UMaterialFunctionInterface
{ 
public:
	SDK_UNDEFINED(16,489) /* FString */                __um(Description);                                          // 0x0040   (0x0010)  
	bool                                               bExposeToLibrary : 1;                                       // 0x0050:0 (0x0001)  
	bool                                               bPrefixParameterNames : 1;                                  // 0x0050:1 (0x0001)  
	bool                                               bReentrantFlag : 1;                                         // 0x0050:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunctionInstance
/// Size: 0x0080 (0x000040 - 0x0000C0)
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{ 
public:
	class UMaterialFunctionInterface*                  Parent;                                                     // 0x0040   (0x0008)  
	class UMaterialFunctionInterface*                  Base;                                                       // 0x0048   (0x0008)  
	TArray<FScalarParameterValue>                      ScalarParameterValues;                                      // 0x0050   (0x0010)  
	TArray<FVectorParameterValue>                      VectorParameterValues;                                      // 0x0060   (0x0010)  
	TArray<FTextureParameterValue>                     TextureParameterValues;                                     // 0x0070   (0x0010)  
	TArray<FFontParameterValue>                        FontParameterValues;                                        // 0x0080   (0x0010)  
	TArray<FStaticSwitchParameter>                     StaticSwitchParameterValues;                                // 0x0090   (0x0010)  
	TArray<FStaticComponentMaskParameter>              StaticComponentMaskParameterValues;                         // 0x00A0   (0x0010)  
	TArray<FRuntimeVirtualTextureParameterValue>       RuntimeVirtualTextureParameterValues;                       // 0x00B0   (0x0010)  
};

/// Class /Script/Engine.MaterialFunctionMaterialLayer
/// Size: 0x0000 (0x000058 - 0x000058)
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerInstance
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlend
/// Size: 0x0000 (0x000058 - 0x000058)
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlendInstance
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{ 
public:
};

/// Class /Script/Engine.MaterialInstanceActor
/// Size: 0x0010 (0x000220 - 0x000230)
class AMaterialInstanceActor : public AActor
{ 
public:
	TArray<class AActor*>                              TargetActors;                                               // 0x0220   (0x0010)  
};

/// Class /Script/Engine.MaterialInstanceDynamic
/// Size: 0x0050 (0x000408 - 0x000458)
class UMaterialInstanceDynamic : public UMaterialInstance
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x0408   (0x0050)  MISSED


	/// Functions
	// Function /Script/Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo
	// void SetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, FLinearColor value);                        // [0x2f79120] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetVectorParameterValue
	// void SetVectorParameterValue(FName ParameterName, FLinearColor value);                                                // [0x2f79050] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo
	// void SetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, class UTexture* value);                    // [0x2f78f60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetTextureParameterValue
	// void SetTextureParameterValue(FName ParameterName, class UTexture* value);                                            // [0x2f78ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo
	// void SetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, float value);                               // [0x2f78db0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetScalarParameterValue
	// void SetScalarParameterValue(FName ParameterName, float value);                                                       // [0x2f78ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
	// void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha); // [0x2f78a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo
	// FLinearColor K2_GetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                 // [0x2f78980] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                         // [0x2f788e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo
	// class UTexture* K2_GetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                             // [0x2f78790] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
	// class UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                     // [0x2f78700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo
	// float K2_GetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                        // [0x2f785c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                // [0x2f78520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
	// void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly);                  // [0x2f783b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.CopyParameterOverrides
	// void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);                                               // [0x2f78150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.CopyInterpParameters
	// void CopyInterpParameters(class UMaterialInstance* Source);                                                           // [0x2f780d0] Final|Native|Public  
};

/// Struct /Script/Engine.CollectionParameterBase
/// Size: 0x0018 (0x000000 - 0x000018)
struct FCollectionParameterBase
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FGuid                                              ID;                                                         // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.CollectionScalarParameter
/// Size: 0x0004 (0x000018 - 0x00001C)
struct FCollectionScalarParameter : FCollectionParameterBase
{ 
	float                                              DefaultValue;                                               // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.CollectionVectorParameter
/// Size: 0x0010 (0x000018 - 0x000028)
struct FCollectionVectorParameter : FCollectionParameterBase
{ 
	FLinearColor                                       DefaultValue;                                               // 0x0018   (0x0010)  
};

/// Class /Script/Engine.MaterialParameterCollection
/// Size: 0x0050 (0x000028 - 0x000078)
class UMaterialParameterCollection : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FGuid                                              StateId;                                                    // 0x0028   (0x0010)  
	TArray<FCollectionScalarParameter>                 ScalarParameters;                                           // 0x0038   (0x0010)  
	TArray<FCollectionVectorParameter>                 VectorParameters;                                           // 0x0048   (0x0010)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0058   (0x0020)  MISSED
};

/// Class /Script/Engine.MaterialParameterCollectionInstance
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class UMaterialParameterCollectionInstance : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	class UMaterialParameterCollection*                Collection;                                                 // 0x0030   (0x0008)  
	unsigned char                                      UnknownData01_6[0xB8];                                      // 0x0038   (0x00B8)  MISSED
};

/// Struct /Script/Engine.InterpGroupActorInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FInterpGroupActorInfo
{ 
	FName                                              ObjectName;                                                 // 0x0000   (0x0008)  
	TArray<class AActor*>                              Actors;                                                     // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.CameraCutInfo
/// Size: 0x0010 (0x000000 - 0x000010)
struct FCameraCutInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	float                                              Timestamp;                                                  // 0x000C   (0x0004)  
};

/// Class /Script/Engine.MatineeActor
/// Size: 0x00A8 (0x000220 - 0x0002C8)
class AMatineeActor : public AActor
{ 
public:
	class UInterpData*                                 MatineeData;                                                // 0x0220   (0x0008)  
	FName                                              MatineeControllerName;                                      // 0x0228   (0x0008)  
	float                                              PlayRate;                                                   // 0x0230   (0x0004)  
	bool                                               bPlayOnLevelLoad : 1;                                       // 0x0234:0 (0x0001)  
	bool                                               bForceStartPos : 1;                                         // 0x0234:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0235   (0x0003)  MISSED
	float                                              ForceStartPosition;                                         // 0x0238   (0x0004)  
	bool                                               bLooping : 1;                                               // 0x023C:0 (0x0001)  
	bool                                               bRewindOnPlay : 1;                                          // 0x023C:1 (0x0001)  
	bool                                               bNoResetOnRewind : 1;                                       // 0x023C:2 (0x0001)  
	bool                                               bRewindIfAlreadyPlaying : 1;                                // 0x023C:3 (0x0001)  
	bool                                               bDisableRadioFilter : 1;                                    // 0x023C:4 (0x0001)  
	bool                                               bClientSideOnly : 1;                                        // 0x023C:5 (0x0001)  
	bool                                               bSkipUpdateIfNotVisible : 1;                                // 0x023C:6 (0x0001)  
	bool                                               bIsSkippable : 1;                                           // 0x023C:7 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x023D   (0x0003)  MISSED
	int32_t                                            PreferredSplitScreenNum;                                    // 0x0240   (0x0004)  
	bool                                               bDisableMovementInput : 1;                                  // 0x0244:0 (0x0001)  
	bool                                               bDisableLookAtInput : 1;                                    // 0x0244:1 (0x0001)  
	bool                                               bHidePlayer : 1;                                            // 0x0244:2 (0x0001)  
	bool                                               bHideHud : 1;                                               // 0x0244:3 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0245   (0x0003)  MISSED
	TArray<FInterpGroupActorInfo>                      GroupActorInfos;                                            // 0x0248   (0x0010)  
	bool                                               bShouldShowGore : 1;                                        // 0x0258:0 (0x0001)  
	unsigned char                                      UnknownData03_4[0x7];                                       // 0x0259   (0x0007)  MISSED
	TArray<class UInterpGroupInst*>                    GroupInst;                                                  // 0x0260   (0x0010)  
	TArray<FCameraCutInfo>                             CameraCuts;                                                 // 0x0270   (0x0010)  
	bool                                               bIsPlaying : 1;                                             // 0x0280:0 (0x0001)  
	bool                                               bReversePlayback : 1;                                       // 0x0280:1 (0x0001)  
	bool                                               bPaused : 1;                                                // 0x0280:2 (0x0001)  
	bool                                               bPendingStop : 1;                                           // 0x0280:3 (0x0001)  
	unsigned char                                      UnknownData04_4[0x3];                                       // 0x0281   (0x0003)  MISSED
	float                                              InterpPosition;                                             // 0x0284   (0x0004)  
	unsigned char                                      UnknownData05_5[0x4];                                       // 0x0288   (0x0004)  MISSED
	char                                               ReplicationForceIsPlaying;                                  // 0x028C   (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x028D   (0x0003)  MISSED
	SDK_UNDEFINED(16,490) /* FMulticastInlineDelegate */ __um(OnPlay);                                             // 0x0290   (0x0010)  
	SDK_UNDEFINED(16,491) /* FMulticastInlineDelegate */ __um(OnStop);                                             // 0x02A0   (0x0010)  
	SDK_UNDEFINED(16,492) /* FMulticastInlineDelegate */ __um(OnPause);                                            // 0x02B0   (0x0010)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x02C0   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.MatineeActor.Stop
	// void Stop();                                                                                                          // [0xec6f20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.SetPosition
	// void SetPosition(float NewPosition, bool bJump);                                                                      // [0x2f7c520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.SetLoopingState
	// void SetLoopingState(bool bNewLooping);                                                                               // [0x2f7c490] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Reverse
	// void Reverse();                                                                                                       // [0x6971e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Play
	// void Play();                                                                                                          // [0xe3d050] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Pause
	// void Pause();                                                                                                         // [0x6971c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.EnableGroupByName
	// void EnableGroupByName(FString GroupName, bool bEnable);                                                              // [0x2f7c010] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.ChangePlaybackDirection
	// void ChangePlaybackDirection();                                                                                       // [0xa97060] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MatineeActorCameraAnim
/// Size: 0x0008 (0x0002C8 - 0x0002D0)
class AMatineeActorCameraAnim : public AMatineeActor
{ 
public:
	class UCameraAnim*                                 CameraAnim;                                                 // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.MatineeAnimInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UMatineeAnimInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MatineeInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UMatineeInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MeshMergeCullingVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class AMeshMergeCullingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.MeshSimplificationSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class UMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              MeshReductionModuleName;                                    // 0x0038   (0x0008)  
};

/// Class /Script/Engine.MeshVertexPainterKismetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices
	// void RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);                                          // [0x2f80000] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor
	// void PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, FLinearColor& FillColor, bool bConvertToSRGB); // [0x2f7fe60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis
	// void PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, FLinearColor& StartColor, FLinearColor& EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB); // [0x2f7fcb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.PurchaseInfo
/// Size: 0x0040 (0x000000 - 0x000040)
struct FPurchaseInfo
{ 
	SDK_UNDEFINED(16,493) /* FString */                __um(Identifier);                                           // 0x0000   (0x0010)  
	SDK_UNDEFINED(16,494) /* FString */                __um(DisplayName);                                          // 0x0010   (0x0010)  
	SDK_UNDEFINED(16,495) /* FString */                __um(DisplayDescription);                                   // 0x0020   (0x0010)  
	SDK_UNDEFINED(16,496) /* FString */                __um(DisplayPrice);                                         // 0x0030   (0x0010)  
};

/// Class /Script/Engine.MicroTransactionBase
/// Size: 0x0030 (0x000038 - 0x000068)
class UMicroTransactionBase : public UPlatformInterfaceBase
{ 
public:
	TArray<FPurchaseInfo>                              AvailableProducts;                                          // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,497) /* FString */                __um(LastError);                                            // 0x0048   (0x0010)  
	SDK_UNDEFINED(16,498) /* FString */                __um(LastErrorSolution);                                    // 0x0058   (0x0010)  
};

/// Class /Script/Engine.ModelComponent
/// Size: 0x0040 (0x000410 - 0x000450)
class UModelComponent : public UPrimitiveComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x18];                                      // 0x0408   (0x0018)  MISSED
	class UBodySetup*                                  ModelBodySetup;                                             // 0x0420   (0x0008)  
	unsigned char                                      UnknownData01_6[0x28];                                      // 0x0428   (0x0028)  MISSED
};

/// Class /Script/Engine.MorphTarget
/// Size: 0x0018 (0x000028 - 0x000040)
class UMorphTarget : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class USkeletalMesh*                               BaseSkelMesh;                                               // 0x0028   (0x0008)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/Engine.NavAgentInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavAgentInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavAreaBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UNavAreaBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Class /Script/Engine.NavCollisionBase
/// Size: 0x0048 (0x000028 - 0x000070)
class UNavCollisionBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bIsDynamicObstacle : 1;                                     // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x47];                                      // 0x0029   (0x0047)  MISSED
};

/// Class /Script/Engine.NavEdgeProviderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavEdgeProviderInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavigationDataChunk
/// Size: 0x0008 (0x000028 - 0x000030)
class UNavigationDataChunk : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FName                                              NavigationDataName;                                         // 0x0028   (0x0008)  
};

/// Class /Script/Engine.NavigationDataInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavigationDataInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavigationSystemBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavigationSystemBase : public UObject
{ 
public:
};

/// Struct /Script/Engine.NavAgentSelector
/// Size: 0x0004 (0x000000 - 0x000004)
struct FNavAgentSelector
{ 
	bool                                               bSupportsAgent0 : 1;                                        // 0x0000:0 (0x0001)  
	bool                                               bSupportsAgent1 : 1;                                        // 0x0000:1 (0x0001)  
	bool                                               bSupportsAgent2 : 1;                                        // 0x0000:2 (0x0001)  
	bool                                               bSupportsAgent3 : 1;                                        // 0x0000:3 (0x0001)  
	bool                                               bSupportsAgent4 : 1;                                        // 0x0000:4 (0x0001)  
	bool                                               bSupportsAgent5 : 1;                                        // 0x0000:5 (0x0001)  
	bool                                               bSupportsAgent6 : 1;                                        // 0x0000:6 (0x0001)  
	bool                                               bSupportsAgent7 : 1;                                        // 0x0000:7 (0x0001)  
	bool                                               bSupportsAgent8 : 1;                                        // 0x0001:0 (0x0001)  
	bool                                               bSupportsAgent9 : 1;                                        // 0x0001:1 (0x0001)  
	bool                                               bSupportsAgent10 : 1;                                       // 0x0001:2 (0x0001)  
	bool                                               bSupportsAgent11 : 1;                                       // 0x0001:3 (0x0001)  
	bool                                               bSupportsAgent12 : 1;                                       // 0x0001:4 (0x0001)  
	bool                                               bSupportsAgent13 : 1;                                       // 0x0001:5 (0x0001)  
	bool                                               bSupportsAgent14 : 1;                                       // 0x0001:6 (0x0001)  
	bool                                               bSupportsAgent15 : 1;                                       // 0x0001:7 (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0002   (0x0002)  MISSED
};

/// Class /Script/Engine.NavigationSystemConfig
/// Size: 0x0028 (0x000028 - 0x000050)
class UNavigationSystemConfig : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FSoftClassPath                                     NavigationSystemClass;                                      // 0x0028   (0x0018)  
	FNavAgentSelector                                  SupportedAgentsMask;                                        // 0x0040   (0x0004)  
	FName                                              DefaultAgentName;                                           // 0x0044   (0x0008)  
	bool                                               bIsOverriden : 1;                                           // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.NullNavSysConfig
/// Size: 0x0000 (0x000050 - 0x000050)
class UNullNavSysConfig : public UNavigationSystemConfig
{ 
public:
};

/// Struct /Script/Engine.NavigationLinkBase
/// Size: 0x0030 (0x000000 - 0x000030)
struct FNavigationLinkBase
{ 
	float                                              LeftProjectHeight;                                          // 0x0000   (0x0004)  
	float                                              MaxFallDownLength;                                          // 0x0004   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0008   (0x0004)  MISSED
	float                                              SnapRadius;                                                 // 0x000C   (0x0004)  
	float                                              SnapHeight;                                                 // 0x0010   (0x0004)  
	FNavAgentSelector                                  SupportedAgents;                                            // 0x0014   (0x0004)  
	bool                                               bSupportsAgent0 : 1;                                        // 0x0018:0 (0x0001)  
	bool                                               bSupportsAgent1 : 1;                                        // 0x0018:1 (0x0001)  
	bool                                               bSupportsAgent2 : 1;                                        // 0x0018:2 (0x0001)  
	bool                                               bSupportsAgent3 : 1;                                        // 0x0018:3 (0x0001)  
	bool                                               bSupportsAgent4 : 1;                                        // 0x0018:4 (0x0001)  
	bool                                               bSupportsAgent5 : 1;                                        // 0x0018:5 (0x0001)  
	bool                                               bSupportsAgent6 : 1;                                        // 0x0018:6 (0x0001)  
	bool                                               bSupportsAgent7 : 1;                                        // 0x0018:7 (0x0001)  
	bool                                               bSupportsAgent8 : 1;                                        // 0x0019:0 (0x0001)  
	bool                                               bSupportsAgent9 : 1;                                        // 0x0019:1 (0x0001)  
	bool                                               bSupportsAgent10 : 1;                                       // 0x0019:2 (0x0001)  
	bool                                               bSupportsAgent11 : 1;                                       // 0x0019:3 (0x0001)  
	bool                                               bSupportsAgent12 : 1;                                       // 0x0019:4 (0x0001)  
	bool                                               bSupportsAgent13 : 1;                                       // 0x0019:5 (0x0001)  
	bool                                               bSupportsAgent14 : 1;                                       // 0x0019:6 (0x0001)  
	bool                                               bSupportsAgent15 : 1;                                       // 0x0019:7 (0x0001)  
	unsigned char                                      UnknownData01_4[0x2];                                       // 0x001A   (0x0002)  MISSED
	SDK_UNDEFINED(1,499) /* TEnumAsByte<ENavLinkDirection> */ __um(Direction);                                     // 0x001C   (0x0001)  
	bool                                               bUseSnapHeight : 1;                                         // 0x001D:0 (0x0001)  
	bool                                               bSnapToCheapestArea : 1;                                    // 0x001D:1 (0x0001)  
	bool                                               bCustomFlag0 : 1;                                           // 0x001D:2 (0x0001)  
	bool                                               bCustomFlag1 : 1;                                           // 0x001D:3 (0x0001)  
	bool                                               bCustomFlag2 : 1;                                           // 0x001D:4 (0x0001)  
	bool                                               bCustomFlag3 : 1;                                           // 0x001D:5 (0x0001)  
	bool                                               bCustomFlag4 : 1;                                           // 0x001D:6 (0x0001)  
	bool                                               bCustomFlag5 : 1;                                           // 0x001D:7 (0x0001)  
	bool                                               bCustomFlag6 : 1;                                           // 0x001E:0 (0x0001)  
	bool                                               bCustomFlag7 : 1;                                           // 0x001E:1 (0x0001)  
	unsigned char                                      UnknownData02_4[0x1];                                       // 0x001F   (0x0001)  MISSED
	class UClass*                                      AreaClass;                                                  // 0x0020   (0x0008)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.NavigationLink
/// Size: 0x0018 (0x000030 - 0x000048)
struct FNavigationLink : FNavigationLinkBase
{ 
	FVector                                            Left;                                                       // 0x0030   (0x000C)  
	FVector                                            Right;                                                      // 0x003C   (0x000C)  
};

/// Struct /Script/Engine.NavigationSegmentLink
/// Size: 0x0030 (0x000030 - 0x000060)
struct FNavigationSegmentLink : FNavigationLinkBase
{ 
	FVector                                            LeftStart;                                                  // 0x0030   (0x000C)  
	FVector                                            LeftEnd;                                                    // 0x003C   (0x000C)  
	FVector                                            RightStart;                                                 // 0x0048   (0x000C)  
	FVector                                            RightEnd;                                                   // 0x0054   (0x000C)  
};

/// Class /Script/Engine.NavLinkDefinition
/// Size: 0x0028 (0x000028 - 0x000050)
class UNavLinkDefinition : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FNavigationLink>                            Links;                                                      // 0x0028   (0x0010)  
	TArray<FNavigationSegmentLink>                     SegmentLinks;                                               // 0x0038   (0x0010)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0048   (0x0008)  MISSED
};

/// Class /Script/Engine.NavPathObserverInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavPathObserverInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavRelevantInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavRelevantInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.SimulatedClientNetConnection
/// Size: 0x0000 (0x001A30 - 0x001A30)
class USimulatedClientNetConnection : public UNetConnection
{ 
public:
};

/// Class /Script/Engine.NetPushModelHelpers
/// Size: 0x0000 (0x000028 - 0x000028)
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex
	// void MarkPropertyDirtyFromRepIndex(class UObject* Object, int32_t RepIndex, FName PropertyName);                      // [0x2f83a00] Final|Native|Static|Private|BlueprintCallable 
	// Function /Script/Engine.NetPushModelHelpers.MarkPropertyDirty
	// void MarkPropertyDirty(class UObject* Object, FName PropertyName);                                                    // [0xe5c020] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.NetworkPredictionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNetworkPredictionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.NetworkEmulationProfileDescription
/// Size: 0x0020 (0x000000 - 0x000020)
struct FNetworkEmulationProfileDescription
{ 
	SDK_UNDEFINED(16,500) /* FString */                __um(ProfileName);                                          // 0x0000   (0x0010)  
	SDK_UNDEFINED(16,501) /* FString */                __um(Tooltip);                                              // 0x0010   (0x0010)  
};

/// Class /Script/Engine.NetworkSettings
/// Size: 0x0020 (0x000038 - 0x000058)
class UNetworkSettings : public UDeveloperSettings
{ 
public:
	bool                                               bVerifyPeer : 1;                                            // 0x0038:0 (0x0001)  
	bool                                               bEnableMultiplayerWorldOriginRebasing : 1;                  // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            MaxRepArraySize;                                            // 0x003C   (0x0004)  
	int32_t                                            MaxRepArrayMemory;                                          // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<FNetworkEmulationProfileDescription>        NetworkEmulationProfiles;                                   // 0x0048   (0x0010)  
};

/// Class /Script/Engine.NodeMappingContainer
/// Size: 0x0140 (0x000028 - 0x000168)
class UNodeMappingContainer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(80,502) /* TMap<FName, FNodeItem> */ __um(SourceItems);                                          // 0x0028   (0x0050)  
	SDK_UNDEFINED(80,503) /* TMap<FName, FNodeItem> */ __um(TargetItems);                                          // 0x0078   (0x0050)  
	SDK_UNDEFINED(80,504) /* TMap<FName, FName> */     __um(SourceToTarget);                                       // 0x00C8   (0x0050)  
	SDK_UNDEFINED(40,505) /* TWeakObjectPtr<UObject*> */ __um(SourceAsset);                                        // 0x0118   (0x0028)  
	SDK_UNDEFINED(40,506) /* TWeakObjectPtr<UObject*> */ __um(TargetAsset);                                        // 0x0140   (0x0028)  
};

/// Class /Script/Engine.NodeMappingProviderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNodeMappingProviderInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.Note
/// Size: 0x0000 (0x000220 - 0x000220)
class ANote : public AActor
{ 
public:
};

/// Class /Script/Engine.ObjectLibrary
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UObjectLibrary : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UClass*                                      ObjectBaseClass;                                            // 0x0028   (0x0008)  
	bool                                               bHasBlueprintClasses;                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<class UObject*>                             Objects;                                                    // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,507) /* TArray<TWeakObjectPtr<UObject*>> */ __um(WeakObjects);                                // 0x0048   (0x0010)  
	bool                                               bUseWeakReferences;                                         // 0x0058   (0x0001)  
	bool                                               bIsFullyLoaded;                                             // 0x0059   (0x0001)  
	unsigned char                                      UnknownData02_6[0x4E];                                      // 0x005A   (0x004E)  MISSED
};

/// Class /Script/Engine.ObjectReferencer
/// Size: 0x0010 (0x000028 - 0x000038)
class UObjectReferencer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0028   (0x0010)  
};

/// Class /Script/Engine.ObjectTraceWorldSubsystem
/// Size: 0x0008 (0x000030 - 0x000038)
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Engine.PackageMapClient
/// Size: 0x0318 (0x0000E0 - 0x0003F8)
class UPackageMapClient : public UPackageMap
{ 
public:
	unsigned char                                      UnknownData00_1[0x318];                                     // 0x00E0   (0x0318)  MISSED
};

/// Class /Script/Engine.PainCausingVolume
/// Size: 0x0028 (0x000268 - 0x000290)
class APainCausingVolume : public APhysicsVolume
{ 
public:
	bool                                               bPainCausing : 1;                                           // 0x0268:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0269   (0x0003)  MISSED
	float                                              DamagePerSec;                                               // 0x026C   (0x0004)  
	class UClass*                                      DamageType;                                                 // 0x0270   (0x0008)  
	float                                              PainInterval;                                               // 0x0278   (0x0004)  
	bool                                               bEntryPain : 1;                                             // 0x027C:0 (0x0001)  
	bool                                               BACKUP_bPainCausing : 1;                                    // 0x027C:1 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x027D   (0x0003)  MISSED
	class AController*                                 DamageInstigator;                                           // 0x0280   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0288   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleEmitter
/// Size: 0x0190 (0x000028 - 0x0001B8)
class UParticleEmitter : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FName                                              EmitterName;                                                // 0x0028   (0x0008)  
	int32_t                                            SubUVDataOffset;                                            // 0x0030   (0x0004)  
	SDK_UNDEFINED(1,508) /* TEnumAsByte<EEmitterBloodMode> */ __um(EmitterBloodMode);                              // 0x0034   (0x0001)  
	SDK_UNDEFINED(1,509) /* TEnumAsByte<EEmitterRenderMode> */ __um(EmitterRenderMode);                            // 0x0035   (0x0001)  
	EParticleSignificanceLevel                         SignificanceLevel;                                          // 0x0036   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0037   (0x0001)  MISSED
	bool                                               bUseLegacySpawningBehavior : 1;                             // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0038:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0038:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0038:3 (0x0001)  MISSED
	bool                                               ConvertedModules : 1;                                       // 0x0038:4 (0x0001)  
	bool                                               bIsSoloing : 1;                                             // 0x0038:5 (0x0001)  
	bool                                               bCookedOut : 1;                                             // 0x0038:6 (0x0001)  
	bool                                               bDisabledLODsKeepEmitterAlive : 1;                          // 0x0038:7 (0x0001)  
	bool                                               bDisableWhenInsignficant : 1;                               // 0x0039:0 (0x0001)  
	unsigned char                                      UnknownData05_4[0x6];                                       // 0x003A   (0x0006)  MISSED
	TArray<class UParticleLODLevel*>                   LODLevels;                                                  // 0x0040   (0x0010)  
	int32_t                                            PeakActiveParticles;                                        // 0x0050   (0x0004)  
	int32_t                                            InitialAllocationCount;                                     // 0x0054   (0x0004)  
	float                                              QualityLevelSpawnRateScale;                                 // 0x0058   (0x0004)  
	uint32_t                                           DetailModeBitmask;                                          // 0x005C   (0x0004)  
	unsigned char                                      UnknownData06_6[0x158];                                     // 0x0060   (0x0158)  MISSED
};

/// Class /Script/Engine.ParticleEventManager
/// Size: 0x0000 (0x000220 - 0x000220)
class AParticleEventManager : public AActor
{ 
public:
};

/// Class /Script/Engine.ParticleLODLevel
/// Size: 0x0090 (0x000028 - 0x0000B8)
class UParticleLODLevel : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	int32_t                                            Level;                                                      // 0x0028   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x002D   (0x0003)  MISSED
	class UParticleModuleRequired*                     RequiredModule;                                             // 0x0030   (0x0008)  
	TArray<class UParticleModule*>                     Modules;                                                    // 0x0038   (0x0010)  
	class UParticleModuleTypeDataBase*                 TypeDataModule;                                             // 0x0048   (0x0008)  
	class UParticleModuleSpawn*                        SpawnModule;                                                // 0x0050   (0x0008)  
	class UParticleModuleEventGenerator*               EventGenerator;                                             // 0x0058   (0x0008)  
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                            // 0x0060   (0x0010)  
	TArray<class UParticleModule*>                     SpawnModules;                                               // 0x0070   (0x0010)  
	TArray<class UParticleModule*>                     UpdateModules;                                              // 0x0080   (0x0010)  
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                               // 0x0090   (0x0010)  
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                       // 0x00A0   (0x0010)  
	bool                                               ConvertedModules : 1;                                       // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x00B1   (0x0003)  MISSED
	int32_t                                            PeakActiveParticles;                                        // 0x00B4   (0x0004)  
};

/// Class /Script/Engine.ParticleModule
/// Size: 0x0008 (0x000028 - 0x000030)
class UParticleModule : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bSpawnModule : 1;                                           // 0x0028:0 (0x0001)  
	bool                                               bUpdateModule : 1;                                          // 0x0028:1 (0x0001)  
	bool                                               bFinalUpdateModule : 1;                                     // 0x0028:2 (0x0001)  
	bool                                               bUpdateForGPUEmitter : 1;                                   // 0x0028:3 (0x0001)  
	bool                                               bCurvesAsColor : 1;                                         // 0x0028:4 (0x0001)  
	bool                                               b3DDrawMode : 1;                                            // 0x0028:5 (0x0001)  
	bool                                               bSupported3DDrawMode : 1;                                   // 0x0028:6 (0x0001)  
	bool                                               bEnabled : 1;                                               // 0x0028:7 (0x0001)  
	bool                                               bEditable : 1;                                              // 0x0029:0 (0x0001)  
	bool                                               LODDuplicate : 1;                                           // 0x0029:1 (0x0001)  
	bool                                               bSupportsRandomSeed : 1;                                    // 0x0029:2 (0x0001)  
	bool                                               bRequiresLoopingNotification : 1;                           // 0x0029:3 (0x0001)  
	char                                               LODValidity;                                                // 0x002A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x002B   (0x0005)  MISSED
};

/// Class /Script/Engine.ParticleModuleAccelerationBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleAccelerationBase : public UParticleModule
{ 
public:
	bool                                               bAlwaysInWorldSpace : 1;                                    // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/Engine.DistributionLookupTable
/// Size: 0x0020 (0x000000 - 0x000020)
struct FDistributionLookupTable
{ 
	float                                              Timescale;                                                  // 0x0000   (0x0004)  
	float                                              TimeBias;                                                   // 0x0004   (0x0004)  
	TArray<float>                                      Values;                                                     // 0x0008   (0x0010)  
	char                                               Op;                                                         // 0x0018   (0x0001)  
	char                                               EntryCount;                                                 // 0x0019   (0x0001)  
	char                                               EntryStride;                                                // 0x001A   (0x0001)  
	char                                               SubEntryStride;                                             // 0x001B   (0x0001)  
	char                                               LockFlag;                                                   // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.RawDistribution
/// Size: 0x0020 (0x000000 - 0x000020)
struct FRawDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.RawDistributionVector
/// Size: 0x0028 (0x000020 - 0x000048)
struct FRawDistributionVector : FRawDistribution
{ 
	float                                              MinValue;                                                   // 0x0020   (0x0004)  
	float                                              MaxValue;                                                   // 0x0024   (0x0004)  
	FVector                                            MinValueVec;                                                // 0x0028   (0x000C)  
	FVector                                            MaxValueVec;                                                // 0x0034   (0x000C)  
	class UDistributionVector*                         Distribution;                                               // 0x0040   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleAcceleration
/// Size: 0x0050 (0x000038 - 0x000088)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{ 
public:
	FRawDistributionVector                             Acceleration;                                               // 0x0038   (0x0048)  
	bool                                               bApplyOwnerScale : 1;                                       // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleAccelerationConstant
/// Size: 0x0010 (0x000038 - 0x000048)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{ 
public:
	FVector                                            Acceleration;                                               // 0x0038   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.RawDistributionFloat
/// Size: 0x0010 (0x000020 - 0x000030)
struct FRawDistributionFloat : FRawDistribution
{ 
	float                                              MinValue;                                                   // 0x0020   (0x0004)  
	float                                              MaxValue;                                                   // 0x0024   (0x0004)  
	class UDistributionFloat*                          Distribution;                                               // 0x0028   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleAccelerationDrag
/// Size: 0x0038 (0x000038 - 0x000070)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{ 
public:
	class UDistributionFloat*                          DragCoefficient;                                            // 0x0038   (0x0008)  
	FRawDistributionFloat                              DragCoefficientRaw;                                         // 0x0040   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAccelerationDragScaleOverLife
/// Size: 0x0038 (0x000038 - 0x000070)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{ 
public:
	class UDistributionFloat*                          DragScale;                                                  // 0x0038   (0x0008)  
	FRawDistributionFloat                              DragScaleRaw;                                               // 0x0040   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAccelerationOverLifetime
/// Size: 0x0048 (0x000038 - 0x000080)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{ 
public:
	FRawDistributionVector                             AccelOverLife;                                              // 0x0038   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleAttractorBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleAttractorBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleAttractorLine
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{ 
public:
	FVector                                            EndPoint0;                                                  // 0x0030   (0x000C)  
	FVector                                            EndPoint1;                                                  // 0x003C   (0x000C)  
	FRawDistributionFloat                              Range;                                                      // 0x0048   (0x0030)  
	FRawDistributionFloat                              Strength;                                                   // 0x0078   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAttractorParticle
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0030   (0x0008)  
	FRawDistributionFloat                              Range;                                                      // 0x0038   (0x0030)  
	bool                                               bStrengthByDistance : 1;                                    // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0069   (0x0007)  MISSED
	FRawDistributionFloat                              Strength;                                                   // 0x0070   (0x0030)  
	bool                                               bAffectBaseVelocity : 1;                                    // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x00A1   (0x0003)  MISSED
	SDK_UNDEFINED(1,510) /* TEnumAsByte<EAttractorParticleSelectionMethod> */ __um(SelectionMethod);               // 0x00A4   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00A5   (0x0003)  MISSED
	bool                                               bRenewSource : 1;                                           // 0x00A8:0 (0x0001)  
	bool                                               bInheritSourceVel : 1;                                      // 0x00A8:1 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x00A9   (0x0003)  MISSED
	int32_t                                            LastSelIndex;                                               // 0x00AC   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleAttractorPoint
/// Size: 0x00B0 (0x000030 - 0x0000E0)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{ 
public:
	FRawDistributionVector                             Position;                                                   // 0x0030   (0x0048)  
	FRawDistributionFloat                              Range;                                                      // 0x0078   (0x0030)  
	FRawDistributionFloat                              Strength;                                                   // 0x00A8   (0x0030)  
	bool                                               StrengthByDistance : 1;                                     // 0x00D8:0 (0x0001)  
	bool                                               bAffectBaseVelocity : 1;                                    // 0x00D8:1 (0x0001)  
	bool                                               bOverrideVelocity : 1;                                      // 0x00D8:2 (0x0001)  
	bool                                               bUseWorldSpacePosition : 1;                                 // 0x00D8:3 (0x0001)  
	bool                                               Positive_X : 1;                                             // 0x00D8:4 (0x0001)  
	bool                                               Positive_Y : 1;                                             // 0x00D8:5 (0x0001)  
	bool                                               Positive_Z : 1;                                             // 0x00D8:6 (0x0001)  
	bool                                               Negative_X : 1;                                             // 0x00D8:7 (0x0001)  
	bool                                               Negative_Y : 1;                                             // 0x00D9:0 (0x0001)  
	bool                                               Negative_Z : 1;                                             // 0x00D9:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x00DA   (0x0006)  MISSED
};

/// Class /Script/Engine.ParticleModuleAttractorPointGravity
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{ 
public:
	FVector                                            Position;                                                   // 0x0030   (0x000C)  
	float                                              Radius;                                                     // 0x003C   (0x0004)  
	class UDistributionFloat*                          Strength;                                                   // 0x0040   (0x0008)  
	FRawDistributionFloat                              StrengthRaw;                                                // 0x0048   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleBeamBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.BeamModifierOptions
/// Size: 0x0004 (0x000000 - 0x000004)
struct FBeamModifierOptions
{ 
	bool                                               bModify : 1;                                                // 0x0000:0 (0x0001)  
	bool                                               bScale : 1;                                                 // 0x0000:1 (0x0001)  
	bool                                               bLock : 1;                                                  // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleBeamModifier
/// Size: 0x00D8 (0x000030 - 0x000108)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{ 
public:
	SDK_UNDEFINED(1,511) /* TEnumAsByte<BeamModifierType> */ __um(ModifierType);                                   // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	FBeamModifierOptions                               PositionOptions;                                            // 0x0034   (0x0004)  
	FRawDistributionVector                             Position;                                                   // 0x0038   (0x0048)  
	FBeamModifierOptions                               TangentOptions;                                             // 0x0080   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0084   (0x0004)  MISSED
	FRawDistributionVector                             Tangent;                                                    // 0x0088   (0x0048)  
	bool                                               bAbsoluteTangent : 1;                                       // 0x00D0:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x00D1   (0x0003)  MISSED
	FBeamModifierOptions                               StrengthOptions;                                            // 0x00D4   (0x0004)  
	FRawDistributionFloat                              Strength;                                                   // 0x00D8   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamNoise
/// Size: 0x0160 (0x000030 - 0x000190)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{ 
public:
	bool                                               bLowFreq_Enabled : 1;                                       // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            Frequency;                                                  // 0x0034   (0x0004)  
	int32_t                                            Frequency_LowRange;                                         // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FRawDistributionVector                             NoiseRange;                                                 // 0x0040   (0x0048)  
	FRawDistributionFloat                              NoiseRangeScale;                                            // 0x0088   (0x0030)  
	bool                                               bNRScaleEmitterTime : 1;                                    // 0x00B8:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x7];                                       // 0x00B9   (0x0007)  MISSED
	FRawDistributionVector                             NoiseSpeed;                                                 // 0x00C0   (0x0048)  
	bool                                               bSmooth : 1;                                                // 0x0108:0 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x0109   (0x0003)  MISSED
	float                                              NoiseLockRadius;                                            // 0x010C   (0x0004)  
	bool                                               bNoiseLock : 1;                                             // 0x0110:0 (0x0001)  
	bool                                               bOscillate : 1;                                             // 0x0110:1 (0x0001)  
	unsigned char                                      UnknownData04_4[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              NoiseLockTime;                                              // 0x0114   (0x0004)  
	float                                              NoiseTension;                                               // 0x0118   (0x0004)  
	bool                                               bUseNoiseTangents : 1;                                      // 0x011C:0 (0x0001)  
	unsigned char                                      UnknownData05_4[0x3];                                       // 0x011D   (0x0003)  MISSED
	FRawDistributionFloat                              NoiseTangentStrength;                                       // 0x0120   (0x0030)  
	int32_t                                            NoiseTessellation;                                          // 0x0150   (0x0004)  
	bool                                               bTargetNoise : 1;                                           // 0x0154:0 (0x0001)  
	unsigned char                                      UnknownData06_4[0x3];                                       // 0x0155   (0x0003)  MISSED
	float                                              FrequencyDistance;                                          // 0x0158   (0x0004)  
	bool                                               bApplyNoiseScale : 1;                                       // 0x015C:0 (0x0001)  
	unsigned char                                      UnknownData07_4[0x3];                                       // 0x015D   (0x0003)  MISSED
	FRawDistributionFloat                              NoiseScale;                                                 // 0x0160   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamSource
/// Size: 0x00E8 (0x000030 - 0x000118)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{ 
public:
	SDK_UNDEFINED(1,512) /* TEnumAsByte<Beam2SourceTargetMethod> */ __um(SourceMethod);                            // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              SourceName;                                                 // 0x0034   (0x0008)  
	bool                                               bSourceAbsolute : 1;                                        // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x003D   (0x0003)  MISSED
	FRawDistributionVector                             Source;                                                     // 0x0040   (0x0048)  
	bool                                               bLockSource : 1;                                            // 0x0088:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0089   (0x0003)  MISSED
	SDK_UNDEFINED(1,513) /* TEnumAsByte<Beam2SourceTargetTangentMethod> */ __um(SourceTangentMethod);              // 0x008C   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x008D   (0x0003)  MISSED
	FRawDistributionVector                             SourceTangent;                                              // 0x0090   (0x0048)  
	bool                                               bLockSourceTangent : 1;                                     // 0x00D8:0 (0x0001)  
	unsigned char                                      UnknownData04_4[0x7];                                       // 0x00D9   (0x0007)  MISSED
	FRawDistributionFloat                              SourceStrength;                                             // 0x00E0   (0x0030)  
	bool                                               bLockSourceStength : 1;                                     // 0x0110:0 (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0111   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleBeamTarget
/// Size: 0x00F0 (0x000030 - 0x000120)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{ 
public:
	SDK_UNDEFINED(1,514) /* TEnumAsByte<Beam2SourceTargetMethod> */ __um(TargetMethod);                            // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              TargetName;                                                 // 0x0034   (0x0008)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FRawDistributionVector                             Target;                                                     // 0x0040   (0x0048)  
	bool                                               bTargetAbsolute : 1;                                        // 0x0088:0 (0x0001)  
	bool                                               bLockTarget : 1;                                            // 0x0088:1 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0089   (0x0003)  MISSED
	SDK_UNDEFINED(1,515) /* TEnumAsByte<Beam2SourceTargetTangentMethod> */ __um(TargetTangentMethod);              // 0x008C   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x008D   (0x0003)  MISSED
	FRawDistributionVector                             TargetTangent;                                              // 0x0090   (0x0048)  
	bool                                               bLockTargetTangent : 1;                                     // 0x00D8:0 (0x0001)  
	unsigned char                                      UnknownData04_4[0x7];                                       // 0x00D9   (0x0007)  MISSED
	FRawDistributionFloat                              TargetStrength;                                             // 0x00E0   (0x0030)  
	bool                                               bLockTargetStength : 1;                                     // 0x0110:0 (0x0001)  
	unsigned char                                      UnknownData05_4[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              LockRadius;                                                 // 0x0114   (0x0004)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0118   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleModuleCameraBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleCameraBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleCameraOffset
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{ 
public:
	FRawDistributionFloat                              CameraOffset;                                               // 0x0030   (0x0030)  
	bool                                               bSpawnTimeOnly : 1;                                         // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0061   (0x0003)  MISSED
	SDK_UNDEFINED(1,516) /* TEnumAsByte<EParticleCameraOffsetUpdateMethod> */ __um(UpdateMethod);                  // 0x0064   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleCollisionBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleCollisionBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleCollision
/// Size: 0x0160 (0x000030 - 0x000190)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{ 
public:
	FRawDistributionVector                             DampingFactor;                                              // 0x0030   (0x0048)  
	FRawDistributionVector                             DampingFactorRotation;                                      // 0x0078   (0x0048)  
	FRawDistributionFloat                              MaxCollisions;                                              // 0x00C0   (0x0030)  
	SDK_UNDEFINED(1,517) /* TEnumAsByte<EParticleCollisionComplete> */ __um(CollisionCompletionOption);            // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00F1   (0x0007)  MISSED
	TArray<EObjectTypeQuery>                           CollisionTypes;                                             // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0108   (0x0008)  MISSED
	bool                                               bApplyPhysics : 1;                                          // 0x0110:0 (0x0001)  
	bool                                               bIgnoreTriggerVolumes : 1;                                  // 0x0110:1 (0x0001)  
	unsigned char                                      UnknownData02_4[0x7];                                       // 0x0111   (0x0007)  MISSED
	FRawDistributionFloat                              ParticleMass;                                               // 0x0118   (0x0030)  
	float                                              DirScalar;                                                  // 0x0148   (0x0004)  
	bool                                               bPawnsDoNotDecrementCount : 1;                              // 0x014C:0 (0x0001)  
	bool                                               bOnlyVerticalNormalsDecrementCount : 1;                     // 0x014C:1 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x014D   (0x0003)  MISSED
	float                                              VerticalFudgeFactor;                                        // 0x0150   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x0154   (0x0004)  MISSED
	FRawDistributionFloat                              DelayAmount;                                                // 0x0158   (0x0030)  
	bool                                               bDropDetail : 1;                                            // 0x0188:0 (0x0001)  
	bool                                               bCollideOnlyIfVisible : 1;                                  // 0x0188:1 (0x0001)  
	bool                                               bIgnoreSourceActor : 1;                                     // 0x0188:2 (0x0001)  
	unsigned char                                      UnknownData05_4[0x3];                                       // 0x0189   (0x0003)  MISSED
	float                                              MaxCollisionDistance;                                       // 0x018C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleCollisionGPU
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{ 
public:
	FRawDistributionFloat                              Resilience;                                                 // 0x0030   (0x0030)  
	FRawDistributionFloat                              ResilienceScaleOverLife;                                    // 0x0060   (0x0030)  
	float                                              Friction;                                                   // 0x0090   (0x0004)  
	float                                              RandomSpread;                                               // 0x0094   (0x0004)  
	float                                              RandomDistribution;                                         // 0x0098   (0x0004)  
	float                                              RadiusScale;                                                // 0x009C   (0x0004)  
	float                                              RadiusBias;                                                 // 0x00A0   (0x0004)  
	SDK_UNDEFINED(1,518) /* TEnumAsByte<EParticleCollisionResponse> */ __um(Response);                             // 0x00A4   (0x0001)  
	SDK_UNDEFINED(1,519) /* TEnumAsByte<EParticleCollisionMode> */ __um(CollisionMode);                            // 0x00A5   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x00A6   (0x0002)  MISSED
};

/// Class /Script/Engine.ParticleModuleColorBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleColorBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleColor
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleColor : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             StartColor;                                                 // 0x0030   (0x0048)  
	FRawDistributionFloat                              StartAlpha;                                                 // 0x0078   (0x0030)  
	bool                                               bClampAlpha : 1;                                            // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Struct /Script/Engine.ParticleRandomSeedInfo
/// Size: 0x0020 (0x000000 - 0x000020)
struct FParticleRandomSeedInfo
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	bool                                               bGetSeedFromInstance : 1;                                   // 0x0008:0 (0x0001)  
	bool                                               bInstanceSeedIsIndex : 1;                                   // 0x0008:1 (0x0001)  
	bool                                               bResetSeedOnEmitterLooping : 1;                             // 0x0008:2 (0x0001)  
	bool                                               bRandomlySelectSeedArray : 1;                               // 0x0008:3 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<int32_t>                                    RandomSeeds;                                                // 0x0010   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleColor_Seeded
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00B0   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleColorOverLife
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             ColorOverLife;                                              // 0x0030   (0x0048)  
	FRawDistributionFloat                              AlphaOverLife;                                              // 0x0078   (0x0030)  
	bool                                               bClampAlpha : 1;                                            // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleColorScaleOverLife
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             ColorScaleOverLife;                                         // 0x0030   (0x0048)  
	FRawDistributionFloat                              AlphaScaleOverLife;                                         // 0x0078   (0x0030)  
	bool                                               bEmitterTime : 1;                                           // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleEventBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.ParticleEvent_GenerateInfo
/// Size: 0x0028 (0x000000 - 0x000028)
struct FParticleEvent_GenerateInfo
{ 
	SDK_UNDEFINED(1,520) /* TEnumAsByte<EParticleEventType> */ __um(Type);                                         // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            Frequency;                                                  // 0x0004   (0x0004)  
	int32_t                                            ParticleFrequency;                                          // 0x0008   (0x0004)  
	bool                                               FirstTimeOnly : 1;                                          // 0x000C:0 (0x0001)  
	bool                                               LastTimeOnly : 1;                                           // 0x000C:1 (0x0001)  
	bool                                               UseReflectedImpactVector : 1;                               // 0x000C:2 (0x0001)  
	bool                                               bUseOrbitOffset : 1;                                        // 0x000C:3 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x000D   (0x0003)  MISSED
	FName                                              CustomName;                                                 // 0x0010   (0x0008)  
	TArray<class UParticleModuleEventSendToGame*>      ParticleModuleEventsToSendToGame;                           // 0x0018   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleEventGenerator
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{ 
public:
	TArray<FParticleEvent_GenerateInfo>                Events;                                                     // 0x0030   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleEventReceiverBase
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{ 
public:
	SDK_UNDEFINED(1,521) /* TEnumAsByte<EParticleEventType> */ __um(EventGeneratorType);                           // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              EventName;                                                  // 0x0034   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventReceiverKillParticles
/// Size: 0x0008 (0x000040 - 0x000048)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{ 
public:
	bool                                               bStopSpawning : 1;                                          // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventReceiverSpawn
/// Size: 0x0098 (0x000040 - 0x0000D8)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{ 
public:
	FRawDistributionFloat                              SpawnCount;                                                 // 0x0040   (0x0030)  
	bool                                               bUseParticleTime : 1;                                       // 0x0070:0 (0x0001)  
	bool                                               bUsePSysLocation : 1;                                       // 0x0070:1 (0x0001)  
	bool                                               bInheritVelocity : 1;                                       // 0x0070:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0071   (0x0007)  MISSED
	FRawDistributionVector                             InheritVelocityScale;                                       // 0x0078   (0x0048)  
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                          // 0x00C0   (0x0010)  
	bool                                               bBanPhysicalMaterials : 1;                                  // 0x00D0:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventSendToGame
/// Size: 0x0000 (0x000028 - 0x000028)
class UParticleModuleEventSendToGame : public UObject
{ 
public:
};

/// Class /Script/Engine.ParticleModuleKillBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleKillBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleKillBox
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UParticleModuleKillBox : public UParticleModuleKillBase
{ 
public:
	FRawDistributionVector                             LowerLeftCorner;                                            // 0x0030   (0x0048)  
	FRawDistributionVector                             UpperRightCorner;                                           // 0x0078   (0x0048)  
	bool                                               bAbsolute : 1;                                              // 0x00C0:0 (0x0001)  
	bool                                               bKillInside : 1;                                            // 0x00C0:1 (0x0001)  
	bool                                               bAxisAlignedAndFixedSize : 1;                               // 0x00C0:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00C1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleKillHeight
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{ 
public:
	FRawDistributionFloat                              Height;                                                     // 0x0030   (0x0030)  
	bool                                               bAbsolute : 1;                                              // 0x0060:0 (0x0001)  
	bool                                               bFloor : 1;                                                 // 0x0060:1 (0x0001)  
	bool                                               bApplyPSysScale : 1;                                        // 0x0060:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleLifetimeBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLifetimeBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLifetime
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{ 
public:
	FRawDistributionFloat                              LifeTime;                                                   // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLifetime_Seeded
/// Size: 0x0020 (0x000060 - 0x000080)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0060   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLightBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLightBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLight
/// Size: 0x00F0 (0x000030 - 0x000120)
class UParticleModuleLight : public UParticleModuleLightBase
{ 
public:
	bool                                               bUseInverseSquaredFalloff;                                  // 0x0030   (0x0001)  
	bool                                               bAffectsTranslucency;                                       // 0x0031   (0x0001)  
	bool                                               bPreviewLightRadius;                                        // 0x0032   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0033   (0x0001)  MISSED
	float                                              SpawnFraction;                                              // 0x0034   (0x0004)  
	FRawDistributionVector                             ColorScaleOverLife;                                         // 0x0038   (0x0048)  
	FRawDistributionFloat                              BrightnessOverLife;                                         // 0x0080   (0x0030)  
	FRawDistributionFloat                              RadiusScale;                                                // 0x00B0   (0x0030)  
	FRawDistributionFloat                              LightExponent;                                              // 0x00E0   (0x0030)  
	FLightingChannels                                  LightingChannels;                                           // 0x0110   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              VolumetricScatteringIntensity;                              // 0x0114   (0x0004)  
	bool                                               bHighQualityLights;                                         // 0x0118   (0x0001)  
	bool                                               bShadowCastingLights;                                       // 0x0119   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x011A   (0x0006)  MISSED
};

/// Class /Script/Engine.ParticleModuleLight_Seeded
/// Size: 0x0020 (0x000120 - 0x000140)
class UParticleModuleLight_Seeded : public UParticleModuleLight
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0120   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLocationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLocation
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleLocation : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             StartLocation;                                              // 0x0030   (0x0048)  
	float                                              DistributeOverNPoints;                                      // 0x0078   (0x0004)  
	float                                              DistributeThreshold;                                        // 0x007C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleLocation_Seeded
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Struct /Script/Engine.LocationBoneSocketInfo
/// Size: 0x0014 (0x000000 - 0x000014)
struct FLocationBoneSocketInfo
{ 
	FName                                              BoneSocketName;                                             // 0x0000   (0x0008)  
	FVector                                            Offset;                                                     // 0x0008   (0x000C)  
};

/// Class /Script/Engine.ParticleModuleLocationBoneSocket
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{ 
public:
	SDK_UNDEFINED(1,522) /* TEnumAsByte<ELocationBoneSocketSource> */ __um(SourceType);                            // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	FVector                                            UniversalOffset;                                            // 0x0034   (0x000C)  
	TArray<FLocationBoneSocketInfo>                    SourceLocations;                                            // 0x0040   (0x0010)  
	SDK_UNDEFINED(1,523) /* TEnumAsByte<ELocationBoneSocketSelectionMethod> */ __um(SelectionMethod);              // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	bool                                               bUpdatePositionEachFrame : 1;                               // 0x0054:0 (0x0001)  
	bool                                               bOrientMeshEmitters : 1;                                    // 0x0054:1 (0x0001)  
	bool                                               bInheritBoneVelocity : 1;                                   // 0x0054:2 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              InheritVelocityScale;                                       // 0x0058   (0x0004)  
	FName                                              SkelMeshActorParamName;                                     // 0x005C   (0x0008)  
	int32_t                                            NumPreSelectedIndices;                                      // 0x0064   (0x0004)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0068   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationDirect
/// Size: 0x0120 (0x000030 - 0x000150)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             Location;                                                   // 0x0030   (0x0048)  
	FRawDistributionVector                             LocationOffset;                                             // 0x0078   (0x0048)  
	FRawDistributionVector                             ScaleFactor;                                                // 0x00C0   (0x0048)  
	FRawDistributionVector                             Direction;                                                  // 0x0108   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleLocationEmitter
/// Size: 0x0020 (0x000030 - 0x000050)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0030   (0x0008)  
	SDK_UNDEFINED(1,524) /* TEnumAsByte<ELocationEmitterSelectionMethod> */ __um(SelectionMethod);                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	bool                                               InheritSourceVelocity : 1;                                  // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x003D   (0x0003)  MISSED
	float                                              InheritSourceVelocityScale;                                 // 0x0040   (0x0004)  
	bool                                               bInheritSourceRotation : 1;                                 // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              InheritSourceRotationScale;                                 // 0x0048   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationEmitterDirect
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0030   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveBase
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{ 
public:
	bool                                               Positive_X : 1;                                             // 0x0030:0 (0x0001)  
	bool                                               Positive_Y : 1;                                             // 0x0030:1 (0x0001)  
	bool                                               Positive_Z : 1;                                             // 0x0030:2 (0x0001)  
	bool                                               Negative_X : 1;                                             // 0x0030:3 (0x0001)  
	bool                                               Negative_Y : 1;                                             // 0x0030:4 (0x0001)  
	bool                                               Negative_Z : 1;                                             // 0x0030:5 (0x0001)  
	bool                                               SurfaceOnly : 1;                                            // 0x0030:6 (0x0001)  
	bool                                               Velocity : 1;                                               // 0x0030:7 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0031   (0x0007)  MISSED
	FRawDistributionFloat                              VelocityScale;                                              // 0x0038   (0x0030)  
	FRawDistributionVector                             StartLocation;                                              // 0x0068   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder
/// Size: 0x0070 (0x0000B0 - 0x000120)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{ 
public:
	bool                                               RadialVelocity : 1;                                         // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x00B1   (0x0007)  MISSED
	FRawDistributionFloat                              StartRadius;                                                // 0x00B8   (0x0030)  
	FRawDistributionFloat                              StartHeight;                                                // 0x00E8   (0x0030)  
	SDK_UNDEFINED(1,525) /* TEnumAsByte<CylinderHeightAxis> */ __um(HeightAxis);                                   // 0x0118   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0119   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
/// Size: 0x0020 (0x000120 - 0x000140)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0120   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{ 
public:
	FRawDistributionFloat                              StartRadius;                                                // 0x00B0   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere_Seeded
/// Size: 0x0020 (0x0000E0 - 0x000100)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00E0   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveTriangle
/// Size: 0x00D8 (0x000030 - 0x000108)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             StartOffset;                                                // 0x0030   (0x0048)  
	FRawDistributionFloat                              Height;                                                     // 0x0078   (0x0030)  
	FRawDistributionFloat                              Angle;                                                      // 0x00A8   (0x0030)  
	FRawDistributionFloat                              Thickness;                                                  // 0x00D8   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLocationSkelVertSurface
/// Size: 0x0060 (0x000030 - 0x000090)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{ 
public:
	SDK_UNDEFINED(1,526) /* TEnumAsByte<ELocationSkelVertSurfaceSource> */ __um(SourceType);                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	FVector                                            UniversalOffset;                                            // 0x0034   (0x000C)  
	bool                                               bUpdatePositionEachFrame : 1;                               // 0x0040:0 (0x0001)  
	bool                                               bOrientMeshEmitters : 1;                                    // 0x0040:1 (0x0001)  
	bool                                               bInheritBoneVelocity : 1;                                   // 0x0040:2 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              InheritVelocityScale;                                       // 0x0044   (0x0004)  
	FName                                              SkelMeshActorParamName;                                     // 0x0048   (0x0008)  
	TArray<FName>                                      ValidAssociatedBones;                                       // 0x0050   (0x0010)  
	bool                                               bEnforceNormalCheck : 1;                                    // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0061   (0x0003)  MISSED
	FVector                                            NormalToCompare;                                            // 0x0064   (0x000C)  
	float                                              NormalCheckToleranceDegrees;                                // 0x0070   (0x0004)  
	float                                              NormalCheckTolerance;                                       // 0x0074   (0x0004)  
	TArray<int32_t>                                    ValidMaterialIndices;                                       // 0x0078   (0x0010)  
	bool                                               bInheritVertexColor : 1;                                    // 0x0088:0 (0x0001)  
	bool                                               bInheritUV : 1;                                             // 0x0088:1 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x0089   (0x0003)  MISSED
	uint32_t                                           InheritUVChannel;                                           // 0x008C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset
/// Size: 0x0000 (0x000080 - 0x000080)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset_Seeded
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleMaterialBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleMaterialBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshMaterial
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{ 
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                              // 0x0030   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleRotationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleRotationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshRotation
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionVector                             StartRotation;                                              // 0x0030   (0x0048)  
	bool                                               bInheritParent : 1;                                         // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleMeshRotation_Seeded
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationRateBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleRotationRateBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             StartRotationRate;                                          // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate_Seeded
/// Size: 0x0020 (0x000078 - 0x000098)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0078   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateMultiplyLife
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             LifeMultiplier;                                             // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateOverLife
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             RotRate;                                                    // 0x0030   (0x0048)  
	bool                                               bScaleRotRate : 1;                                          // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrbitBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleOrbitBase : public UParticleModule
{ 
public:
	bool                                               bUseEmitterTime : 1;                                        // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/Engine.OrbitOptions
/// Size: 0x0004 (0x000000 - 0x000004)
struct FOrbitOptions
{ 
	bool                                               bProcessDuringSpawn : 1;                                    // 0x0000:0 (0x0001)  
	bool                                               bProcessDuringUpdate : 1;                                   // 0x0000:1 (0x0001)  
	bool                                               bUseEmitterTime : 1;                                        // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrbit
/// Size: 0x00F8 (0x000038 - 0x000130)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{ 
public:
	SDK_UNDEFINED(1,527) /* TEnumAsByte<EOrbitChainMode> */ __um(ChainMode);                                       // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	FRawDistributionVector                             OffsetAmount;                                               // 0x0040   (0x0048)  
	FOrbitOptions                                      OffsetOptions;                                              // 0x0088   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x008C   (0x0004)  MISSED
	FRawDistributionVector                             RotationAmount;                                             // 0x0090   (0x0048)  
	FOrbitOptions                                      RotationOptions;                                            // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x00DC   (0x0004)  MISSED
	FRawDistributionVector                             RotationRateAmount;                                         // 0x00E0   (0x0048)  
	FOrbitOptions                                      RotationRateOptions;                                        // 0x0128   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x012C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrientationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleOrientationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleOrientationAxisLock
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{ 
public:
	SDK_UNDEFINED(1,528) /* TEnumAsByte<EParticleAxisLock> */ __um(LockAxisFlags);                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleParameterBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleParameterBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.EmitterDynamicParameter
/// Size: 0x0048 (0x000000 - 0x000048)
struct FEmitterDynamicParameter
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	bool                                               bUseEmitterTime : 1;                                        // 0x0008:0 (0x0001)  
	bool                                               bSpawnTimeOnly : 1;                                         // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0009   (0x0003)  MISSED
	SDK_UNDEFINED(1,529) /* TEnumAsByte<EEmitterDynamicParameterValue> */ __um(ValueMethod);                       // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	bool                                               bScaleVelocityByParamValue : 1;                             // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x7];                                       // 0x0011   (0x0007)  MISSED
	FRawDistributionFloat                              paramValue;                                                 // 0x0018   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleParameterDynamic
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{ 
public:
	TArray<FEmitterDynamicParameter>                   DynamicParams;                                              // 0x0030   (0x0010)  
	int32_t                                            UpdateFlags;                                                // 0x0040   (0x0004)  
	bool                                               bUsesVelocity : 1;                                          // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleParameterDynamic_Seeded
/// Size: 0x0020 (0x000048 - 0x000068)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0048   (0x0020)  
};

/// Class /Script/Engine.ParticleModulePivotOffset
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{ 
public:
	FVector2D                                          PivotOffset;                                                // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.ParticleBurst
/// Size: 0x000C (0x000000 - 0x00000C)
struct FParticleBurst
{ 
	int32_t                                            Count;                                                      // 0x0000   (0x0004)  
	int32_t                                            CountLow;                                                   // 0x0004   (0x0004)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleRequired
/// Size: 0x0110 (0x000030 - 0x000140)
class UParticleModuleRequired : public UParticleModule
{ 
public:
	class UMaterialInterface*                          Material;                                                   // 0x0030   (0x0008)  
	float                                              MinFacingCameraBlendDistance;                               // 0x0038   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x003C   (0x0004)  
	FVector                                            EmitterOrigin;                                              // 0x0040   (0x000C)  
	FRotator                                           EmitterRotation;                                            // 0x004C   (0x000C)  
	SDK_UNDEFINED(1,530) /* TEnumAsByte<EParticleScreenAlignment> */ __um(ScreenAlignment);                        // 0x0058   (0x0001)  
	bool                                               bUseLocalSpace : 1;                                         // 0x0059:0 (0x0001)  
	bool                                               bKillOnDeactivate : 1;                                      // 0x0059:1 (0x0001)  
	bool                                               bKillOnCompleted : 1;                                       // 0x0059:2 (0x0001)  
	SDK_UNDEFINED(1,531) /* TEnumAsByte<EParticleSortMode> */ __um(SortMode);                                      // 0x005A   (0x0001)  
	bool                                               bUseLegacyEmitterTime : 1;                                  // 0x005B:0 (0x0001)  
	bool                                               bRemoveHMDRoll : 1;                                         // 0x005B:1 (0x0001)  
	bool                                               bEmitterDurationUseRange : 1;                               // 0x005B:2 (0x0001)  
	float                                              EmitterDuration;                                            // 0x005C   (0x0004)  
	FRawDistributionFloat                              SpawnRate;                                                  // 0x0060   (0x0030)  
	TArray<FParticleBurst>                             BurstList;                                                  // 0x0090   (0x0010)  
	float                                              EmitterDelay;                                               // 0x00A0   (0x0004)  
	float                                              EmitterDelayLow;                                            // 0x00A4   (0x0004)  
	bool                                               bDelayFirstLoopOnly : 1;                                    // 0x00A8:0 (0x0001)  
	SDK_UNDEFINED(1,532) /* TEnumAsByte<EParticleSubUVInterpMethod> */ __um(InterpolationMethod);                  // 0x00A9   (0x0001)  
	bool                                               bScaleUV : 1;                                               // 0x00AA:0 (0x0001)  
	bool                                               bEmitterDelayUseRange : 1;                                  // 0x00AA:1 (0x0001)  
	SDK_UNDEFINED(1,533) /* TEnumAsByte<EParticleBurstMethod> */ __um(ParticleBurstMethod);                        // 0x00AB   (0x0001)  
	bool                                               bOverrideSystemMacroUV : 1;                                 // 0x00AC:0 (0x0001)  
	bool                                               bUseMaxDrawCount : 1;                                       // 0x00AC:1 (0x0001)  
	SDK_UNDEFINED(1,534) /* TEnumAsByte<EOpacitySourceMode> */ __um(OpacitySourceMode);                            // 0x00AD   (0x0001)  
	SDK_UNDEFINED(1,535) /* TEnumAsByte<EEmitterNormalsMode> */ __um(EmitterNormalsMode);                          // 0x00AE   (0x0001)  
	bool                                               bOrbitModuleAffectsVelocityAlignment : 1;                   // 0x00AF:0 (0x0001)  
	int32_t                                            SubImages_Horizontal;                                       // 0x00B0   (0x0004)  
	int32_t                                            SubImages_Vertical;                                         // 0x00B4   (0x0004)  
	float                                              RandomImageTime;                                            // 0x00B8   (0x0004)  
	int32_t                                            RandomImageChanges;                                         // 0x00BC   (0x0004)  
	FVector                                            MacroUVPosition;                                            // 0x00C0   (0x000C)  
	float                                              MacroUVRadius;                                              // 0x00CC   (0x0004)  
	EParticleUVFlipMode                                UVFlippingMode;                                             // 0x00D0   (0x0001)  
	SDK_UNDEFINED(1,536) /* TEnumAsByte<ESubUVBoundingVertexCount> */ __um(BoundingMode);                          // 0x00D1   (0x0001)  
	bool                                               bDurationRecalcEachLoop : 1;                                // 0x00D2:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x1];                                       // 0x00D3   (0x0001)  MISSED
	FVector                                            NormalsSphereCenter;                                        // 0x00D4   (0x000C)  
	float                                              AlphaThreshold;                                             // 0x00E0   (0x0004)  
	int32_t                                            EmitterLoops;                                               // 0x00E4   (0x0004)  
	class UTexture2D*                                  CutoutTexture;                                              // 0x00E8   (0x0008)  
	int32_t                                            MaxDrawCount;                                               // 0x00F0   (0x0004)  
	float                                              EmitterDurationLow;                                         // 0x00F4   (0x0004)  
	FVector                                            NormalsCylinderDirection;                                   // 0x00F8   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0104   (0x0004)  MISSED
	TArray<FName>                                      NamedMaterialOverrides;                                     // 0x0108   (0x0010)  
	unsigned char                                      UnknownData02_6[0x28];                                      // 0x0118   (0x0028)  MISSED
};

/// Class /Script/Engine.ParticleModuleRotation
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleRotation : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionFloat                              StartRotation;                                              // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleRotation_Seeded
/// Size: 0x0020 (0x000060 - 0x000080)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0060   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationOverLifetime
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionFloat                              RotationOverLife;                                           // 0x0030   (0x0030)  
	bool                                               Scale : 1;                                                  // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleRotationRate
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionFloat                              StartRotationRate;                                          // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleRotationRate_Seeded
/// Size: 0x0020 (0x000060 - 0x000080)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0060   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationRateMultiplyLife
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionFloat                              LifeMultiplier;                                             // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleSizeBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleSizeBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleSize
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleSize : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             StartSize;                                                  // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleSize_Seeded
/// Size: 0x0020 (0x000078 - 0x000098)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0078   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleSizeMultiplyLife
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             LifeMultiplier;                                             // 0x0030   (0x0048)  
	bool                                               MultiplyX : 1;                                              // 0x0078:0 (0x0001)  
	bool                                               MultiplyY : 1;                                              // 0x0078:1 (0x0001)  
	bool                                               MultiplyZ : 1;                                              // 0x0078:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSizeScale
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             SizeScale;                                                  // 0x0030   (0x0048)  
	bool                                               EnableX : 1;                                                // 0x0078:0 (0x0001)  
	bool                                               EnableY : 1;                                                // 0x0078:1 (0x0001)  
	bool                                               EnableZ : 1;                                                // 0x0078:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSizeScaleBySpeed
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{ 
public:
	FVector2D                                          SpeedScale;                                                 // 0x0030   (0x0008)  
	FVector2D                                          MaxScale;                                                   // 0x0038   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleSourceMovement
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             SourceMovementScale;                                        // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleSpawnBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleSpawnBase : public UParticleModule
{ 
public:
	bool                                               bProcessSpawnRate : 1;                                      // 0x0030:0 (0x0001)  
	bool                                               bProcessBurstList : 1;                                      // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSpawn
/// Size: 0x00B0 (0x000038 - 0x0000E8)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{ 
public:
	FRawDistributionFloat                              Rate;                                                       // 0x0038   (0x0030)  
	FRawDistributionFloat                              RateScale;                                                  // 0x0068   (0x0030)  
	SDK_UNDEFINED(1,537) /* TEnumAsByte<EParticleBurstMethod> */ __um(ParticleBurstMethod);                        // 0x0098   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0099   (0x0007)  MISSED
	TArray<FParticleBurst>                             BurstList;                                                  // 0x00A0   (0x0010)  
	FRawDistributionFloat                              BurstScale;                                                 // 0x00B0   (0x0030)  
	bool                                               bApplyGlobalSpawnRateScale : 1;                             // 0x00E0:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00E1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSpawnPerUnit
/// Size: 0x0040 (0x000038 - 0x000078)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{ 
public:
	float                                              UnitScalar;                                                 // 0x0038   (0x0004)  
	float                                              MovementTolerance;                                          // 0x003C   (0x0004)  
	FRawDistributionFloat                              SpawnPerUnit;                                               // 0x0040   (0x0030)  
	float                                              MaxFrameDistance;                                           // 0x0070   (0x0004)  
	bool                                               bIgnoreSpawnRateWhenMoving : 1;                             // 0x0074:0 (0x0001)  
	bool                                               bIgnoreMovementAlongX : 1;                                  // 0x0074:1 (0x0001)  
	bool                                               bIgnoreMovementAlongY : 1;                                  // 0x0074:2 (0x0001)  
	bool                                               bIgnoreMovementAlongZ : 1;                                  // 0x0074:3 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0075   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleSubUVBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleSubUVBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleSubUV
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{ 
public:
	class USubUVAnimation*                             Animation;                                                  // 0x0030   (0x0008)  
	FRawDistributionFloat                              SubImageIndex;                                              // 0x0038   (0x0030)  
	bool                                               bUseRealTime : 1;                                           // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSubUVMovie
/// Size: 0x0040 (0x000070 - 0x0000B0)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{ 
public:
	bool                                               bUseEmitterTime : 1;                                        // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0071   (0x0007)  MISSED
	FRawDistributionFloat                              FrameRate;                                                  // 0x0078   (0x0030)  
	int32_t                                            StartingFrame;                                              // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTrailBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleTrailBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleTrailSource
/// Size: 0x0060 (0x000030 - 0x000090)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{ 
public:
	SDK_UNDEFINED(1,538) /* TEnumAsByte<ETrail2SourceMethod> */ __um(SourceMethod);                                // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              SourceName;                                                 // 0x0034   (0x0008)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FRawDistributionFloat                              SourceStrength;                                             // 0x0040   (0x0030)  
	bool                                               bLockSourceStength : 1;                                     // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0071   (0x0003)  MISSED
	int32_t                                            SourceOffsetCount;                                          // 0x0074   (0x0004)  
	TArray<FVector>                                    SourceOffsetDefaults;                                       // 0x0078   (0x0010)  
	SDK_UNDEFINED(1,539) /* TEnumAsByte<EParticleSourceSelectionMethod> */ __um(SelectionMethod);                  // 0x0088   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	bool                                               bInheritRotation : 1;                                       // 0x008C:0 (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x008D   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleTypeDataBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleTypeDataAnimTrail
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{ 
public:
	bool                                               bDeadTrailsOnDeactivate : 1;                                // 0x0030:0 (0x0001)  
	bool                                               bEnablePreviousTangentRecalculation : 1;                    // 0x0030:1 (0x0001)  
	bool                                               bTangentRecalculationEveryFrame : 1;                        // 0x0030:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              TilingDistance;                                             // 0x0034   (0x0004)  
	float                                              DistanceTessellationStepSize;                               // 0x0038   (0x0004)  
	float                                              TangentTessellationStepSize;                                // 0x003C   (0x0004)  
	float                                              WidthTessellationStepSize;                                  // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataBeam2
/// Size: 0x0120 (0x000030 - 0x000150)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{ 
public:
	SDK_UNDEFINED(1,540) /* TEnumAsByte<EBeam2Method> */ __um(BeamMethod);                                         // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            TextureTile;                                                // 0x0034   (0x0004)  
	float                                              TextureTileDistance;                                        // 0x0038   (0x0004)  
	int32_t                                            Sheets;                                                     // 0x003C   (0x0004)  
	int32_t                                            MaxBeamCount;                                               // 0x0040   (0x0004)  
	float                                              Speed;                                                      // 0x0044   (0x0004)  
	int32_t                                            InterpolationPoints;                                        // 0x0048   (0x0004)  
	bool                                               bAlwaysOn : 1;                                              // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x004D   (0x0003)  MISSED
	int32_t                                            UpVectorStepSize;                                           // 0x0050   (0x0004)  
	FName                                              BranchParentName;                                           // 0x0054   (0x0008)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	FRawDistributionFloat                              Distance;                                                   // 0x0060   (0x0030)  
	SDK_UNDEFINED(1,541) /* TEnumAsByte<EBeamTaperMethod> */ __um(TaperMethod);                                    // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0091   (0x0007)  MISSED
	FRawDistributionFloat                              TaperFactor;                                                // 0x0098   (0x0030)  
	FRawDistributionFloat                              TaperScale;                                                 // 0x00C8   (0x0030)  
	bool                                               RenderGeometry : 1;                                         // 0x00F8:0 (0x0001)  
	bool                                               RenderDirectLine : 1;                                       // 0x00F8:1 (0x0001)  
	bool                                               RenderLines : 1;                                            // 0x00F8:2 (0x0001)  
	bool                                               RenderTessellation : 1;                                     // 0x00F8:3 (0x0001)  
	unsigned char                                      UnknownData04_6[0x57];                                      // 0x00F9   (0x0057)  MISSED
};

/// Struct /Script/Engine.GPUSpriteLocalVectorFieldInfo
/// Size: 0x0070 (0x000000 - 0x000070)
struct FGPUSpriteLocalVectorFieldInfo
{ 
	class UVectorField*                                Field;                                                      // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
	FRotator                                           MinInitialRotation;                                         // 0x0040   (0x000C)  
	FRotator                                           MaxInitialRotation;                                         // 0x004C   (0x000C)  
	FRotator                                           RotationRate;                                               // 0x0058   (0x000C)  
	float                                              Intensity;                                                  // 0x0064   (0x0004)  
	float                                              Tightness;                                                  // 0x0068   (0x0004)  
	bool                                               bIgnoreComponentTransform : 1;                              // 0x006C:0 (0x0001)  
	bool                                               bTileX : 1;                                                 // 0x006C:1 (0x0001)  
	bool                                               bTileY : 1;                                                 // 0x006C:2 (0x0001)  
	bool                                               bTileZ : 1;                                                 // 0x006C:3 (0x0001)  
	bool                                               bUseFixDT : 1;                                              // 0x006C:4 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Struct /Script/Engine.FloatDistribution
/// Size: 0x0020 (0x000000 - 0x000020)
struct FFloatDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.GPUSpriteEmitterInfo
/// Size: 0x0280 (0x000000 - 0x000280)
struct FGPUSpriteEmitterInfo
{ 
	class UParticleModuleRequired*                     RequiredModule;                                             // 0x0000   (0x0008)  
	class UParticleModuleSpawn*                        SpawnModule;                                                // 0x0008   (0x0008)  
	class UParticleModuleSpawnPerUnit*                 SpawnPerUnitModule;                                         // 0x0010   (0x0008)  
	TArray<class UParticleModule*>                     SpawnModules;                                               // 0x0018   (0x0010)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0028   (0x0008)  MISSED
	FGPUSpriteLocalVectorFieldInfo                     LocalVectorField;                                           // 0x0030   (0x0070)  
	FFloatDistribution                                 VectorFieldScale;                                           // 0x00A0   (0x0020)  
	FFloatDistribution                                 DragCoefficient;                                            // 0x00C0   (0x0020)  
	FFloatDistribution                                 PointAttractorStrength;                                     // 0x00E0   (0x0020)  
	FFloatDistribution                                 Resilience;                                                 // 0x0100   (0x0020)  
	FVector                                            ConstantAcceleration;                                       // 0x0120   (0x000C)  
	FVector                                            PointAttractorPosition;                                     // 0x012C   (0x000C)  
	float                                              PointAttractorRadiusSq;                                     // 0x0138   (0x0004)  
	FVector                                            OrbitOffsetBase;                                            // 0x013C   (0x000C)  
	FVector                                            OrbitOffsetRange;                                           // 0x0148   (0x000C)  
	FVector2D                                          InvMaxSize;                                                 // 0x0154   (0x0008)  
	float                                              InvRotationRateScale;                                       // 0x015C   (0x0004)  
	float                                              MaxLifetime;                                                // 0x0160   (0x0004)  
	int32_t                                            MaxParticleCount;                                           // 0x0164   (0x0004)  
	SDK_UNDEFINED(1,542) /* TEnumAsByte<EParticleScreenAlignment> */ __um(ScreenAlignment);                        // 0x0168   (0x0001)  
	SDK_UNDEFINED(1,543) /* TEnumAsByte<EParticleAxisLock> */ __um(LockAxisFlag);                                  // 0x0169   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x016A   (0x0002)  MISSED
	bool                                               bEnableCollision : 1;                                       // 0x016C:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x016D   (0x0003)  MISSED
	SDK_UNDEFINED(1,544) /* TEnumAsByte<EParticleCollisionMode> */ __um(CollisionMode);                            // 0x0170   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0171   (0x0003)  MISSED
	bool                                               bRemoveHMDRoll : 1;                                         // 0x0174:0 (0x0001)  
	unsigned char                                      UnknownData04_4[0x3];                                       // 0x0175   (0x0003)  MISSED
	float                                              MinFacingCameraBlendDistance;                               // 0x0178   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x017C   (0x0004)  
	FRawDistributionVector                             DynamicColor;                                               // 0x0180   (0x0048)  
	FRawDistributionFloat                              DynamicAlpha;                                               // 0x01C8   (0x0030)  
	FRawDistributionVector                             DynamicColorScale;                                          // 0x01F8   (0x0048)  
	FRawDistributionFloat                              DynamicAlphaScale;                                          // 0x0240   (0x0030)  
	unsigned char                                      UnknownData05_6[0x10];                                      // 0x0270   (0x0010)  MISSED
};

/// Struct /Script/Engine.GPUSpriteResourceData
/// Size: 0x0160 (0x000000 - 0x000160)
struct FGPUSpriteResourceData
{ 
	TArray<FColor>                                     QuantizedColorSamples;                                      // 0x0000   (0x0010)  
	TArray<FColor>                                     QuantizedMiscSamples;                                       // 0x0010   (0x0010)  
	TArray<FColor>                                     QuantizedSimulationAttrSamples;                             // 0x0020   (0x0010)  
	FVector4                                           ColorScale;                                                 // 0x0030   (0x0010)  
	FVector4                                           ColorBias;                                                  // 0x0040   (0x0010)  
	FVector4                                           MiscScale;                                                  // 0x0050   (0x0010)  
	FVector4                                           MiscBias;                                                   // 0x0060   (0x0010)  
	FVector4                                           SimulationAttrCurveScale;                                   // 0x0070   (0x0010)  
	FVector4                                           SimulationAttrCurveBias;                                    // 0x0080   (0x0010)  
	FVector4                                           SubImageSize;                                               // 0x0090   (0x0010)  
	FVector4                                           SizeBySpeed;                                                // 0x00A0   (0x0010)  
	FVector                                            ConstantAcceleration;                                       // 0x00B0   (0x000C)  
	FVector                                            OrbitOffsetBase;                                            // 0x00BC   (0x000C)  
	FVector                                            OrbitOffsetRange;                                           // 0x00C8   (0x000C)  
	FVector                                            OrbitFrequencyBase;                                         // 0x00D4   (0x000C)  
	FVector                                            OrbitFrequencyRange;                                        // 0x00E0   (0x000C)  
	FVector                                            OrbitPhaseBase;                                             // 0x00EC   (0x000C)  
	FVector                                            OrbitPhaseRange;                                            // 0x00F8   (0x000C)  
	float                                              GlobalVectorFieldScale;                                     // 0x0104   (0x0004)  
	float                                              GlobalVectorFieldTightness;                                 // 0x0108   (0x0004)  
	float                                              PerParticleVectorFieldScale;                                // 0x010C   (0x0004)  
	float                                              PerParticleVectorFieldBias;                                 // 0x0110   (0x0004)  
	float                                              DragCoefficientScale;                                       // 0x0114   (0x0004)  
	float                                              DragCoefficientBias;                                        // 0x0118   (0x0004)  
	float                                              ResilienceScale;                                            // 0x011C   (0x0004)  
	float                                              ResilienceBias;                                             // 0x0120   (0x0004)  
	float                                              CollisionRadiusScale;                                       // 0x0124   (0x0004)  
	float                                              CollisionRadiusBias;                                        // 0x0128   (0x0004)  
	float                                              CollisionTimeBias;                                          // 0x012C   (0x0004)  
	float                                              CollisionRandomSpread;                                      // 0x0130   (0x0004)  
	float                                              CollisionRandomDistribution;                                // 0x0134   (0x0004)  
	float                                              OneMinusFriction;                                           // 0x0138   (0x0004)  
	float                                              RotationRateScale;                                          // 0x013C   (0x0004)  
	float                                              CameraMotionBlurAmount;                                     // 0x0140   (0x0004)  
	SDK_UNDEFINED(1,545) /* TEnumAsByte<EParticleScreenAlignment> */ __um(ScreenAlignment);                        // 0x0144   (0x0001)  
	SDK_UNDEFINED(1,546) /* TEnumAsByte<EParticleAxisLock> */ __um(LockAxisFlag);                                  // 0x0145   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0146   (0x0002)  MISSED
	FVector2D                                          PivotOffset;                                                // 0x0148   (0x0008)  
	bool                                               bRemoveHMDRoll : 1;                                         // 0x0150:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0151   (0x0003)  MISSED
	float                                              MinFacingCameraBlendDistance;                               // 0x0154   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x0158   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x015C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataGpu
/// Size: 0x03F0 (0x000030 - 0x000420)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{ 
public:
	FGPUSpriteEmitterInfo                              EmitterInfo;                                                // 0x0030   (0x0280)  
	FGPUSpriteResourceData                             ResourceData;                                               // 0x02B0   (0x0160)  
	float                                              CameraMotionBlurAmount;                                     // 0x0410   (0x0004)  
	bool                                               bClearExistingParticlesOnInit : 1;                          // 0x0414:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0xB];                                       // 0x0415   (0x000B)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataMesh
/// Size: 0x0068 (0x000030 - 0x000098)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{ 
public:
	class UStaticMesh*                                 Mesh;                                                       // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0038   (0x0008)  MISSED
	float                                              LODSizeScale;                                               // 0x0040   (0x0004)  
	bool                                               bUseStaticMeshLODs : 1;                                     // 0x0044:0 (0x0001)  
	bool                                               CastShadows : 1;                                            // 0x0044:1 (0x0001)  
	bool                                               DoCollisions : 1;                                           // 0x0044:2 (0x0001)  
	SDK_UNDEFINED(1,547) /* TEnumAsByte<EMeshScreenAlignment> */ __um(MeshAlignment);                              // 0x0045   (0x0001)  
	bool                                               bOverrideMaterial : 1;                                      // 0x0046:0 (0x0001)  
	bool                                               bOverrideDefaultMotionBlurSettings : 1;                     // 0x0046:1 (0x0001)  
	bool                                               bEnableMotionBlur : 1;                                      // 0x0046:2 (0x0001)  
	unsigned char                                      UnknownData01_4[0x1];                                       // 0x0047   (0x0001)  MISSED
	FRawDistributionVector                             RollPitchYawRange;                                          // 0x0048   (0x0048)  
	SDK_UNDEFINED(1,548) /* TEnumAsByte<EParticleAxisLock> */ __um(AxisLockOption);                                // 0x0090   (0x0001)  
	bool                                               bCameraFacing : 1;                                          // 0x0091:0 (0x0001)  
	SDK_UNDEFINED(1,549) /* TEnumAsByte<EMeshCameraFacingUpAxis> */ __um(CameraFacingUpAxisOption);                // 0x0092   (0x0001)  
	SDK_UNDEFINED(1,550) /* TEnumAsByte<EMeshCameraFacingOptions> */ __um(CameraFacingOption);                     // 0x0093   (0x0001)  
	bool                                               bApplyParticleRotationAsSpin : 1;                           // 0x0094:0 (0x0001)  
	bool                                               bFaceCameraDirectionRatherThanPosition : 1;                 // 0x0094:1 (0x0001)  
	bool                                               bCollisionsConsiderPartilceSize : 1;                        // 0x0094:2 (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0095   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataRibbon
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{ 
public:
	int32_t                                            MaxTessellationBetweenParticles;                            // 0x0030   (0x0004)  
	int32_t                                            SheetsPerTrail;                                             // 0x0034   (0x0004)  
	int32_t                                            MaxTrailCount;                                              // 0x0038   (0x0004)  
	int32_t                                            MaxParticleInTrailCount;                                    // 0x003C   (0x0004)  
	bool                                               bDeadTrailsOnDeactivate : 1;                                // 0x0040:0 (0x0001)  
	bool                                               bDeadTrailsOnSourceLoss : 1;                                // 0x0040:1 (0x0001)  
	bool                                               bClipSourceSegement : 1;                                    // 0x0040:2 (0x0001)  
	bool                                               bEnablePreviousTangentRecalculation : 1;                    // 0x0040:3 (0x0001)  
	bool                                               bTangentRecalculationEveryFrame : 1;                        // 0x0040:4 (0x0001)  
	bool                                               bSpawnInitialParticle : 1;                                  // 0x0040:5 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0041   (0x0003)  MISSED
	SDK_UNDEFINED(1,551) /* TEnumAsByte<ETrailsRenderAxisOption> */ __um(RenderAxis);                              // 0x0044   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              TangentSpawningScalar;                                      // 0x0048   (0x0004)  
	bool                                               bRenderGeometry : 1;                                        // 0x004C:0 (0x0001)  
	bool                                               bRenderSpawnPoints : 1;                                     // 0x004C:1 (0x0001)  
	bool                                               bRenderTangents : 1;                                        // 0x004C:2 (0x0001)  
	bool                                               bRenderTessellation : 1;                                    // 0x004C:3 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              TilingDistance;                                             // 0x0050   (0x0004)  
	float                                              DistanceTessellationStepSize;                               // 0x0054   (0x0004)  
	bool                                               bEnableTangentDiffInterpScale : 1;                          // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              TangentTessellationScalar;                                  // 0x005C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleVectorFieldBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleVectorFieldGlobal
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{ 
public:
	bool                                               bOverrideGlobalVectorFieldTightness : 1;                    // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              GlobalVectorFieldScale;                                     // 0x0034   (0x0004)  
	float                                              GlobalVectorFieldTightness;                                 // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldLocal
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{ 
public:
	class UVectorField*                                VectorField;                                                // 0x0030   (0x0008)  
	FVector                                            RelativeTranslation;                                        // 0x0038   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0044   (0x000C)  
	FVector                                            RelativeScale3D;                                            // 0x0050   (0x000C)  
	float                                              Intensity;                                                  // 0x005C   (0x0004)  
	float                                              Tightness;                                                  // 0x0060   (0x0004)  
	bool                                               bIgnoreComponentTransform : 1;                              // 0x0064:0 (0x0001)  
	bool                                               bTileX : 1;                                                 // 0x0064:1 (0x0001)  
	bool                                               bTileY : 1;                                                 // 0x0064:2 (0x0001)  
	bool                                               bTileZ : 1;                                                 // 0x0064:3 (0x0001)  
	bool                                               bUseFixDT : 1;                                              // 0x0064:4 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotation
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{ 
public:
	FVector                                            MinInitialRotation;                                         // 0x0030   (0x000C)  
	FVector                                            MaxInitialRotation;                                         // 0x003C   (0x000C)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotationRate
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{ 
public:
	FVector                                            RotationRate;                                               // 0x0030   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldScale
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{ 
public:
	class UDistributionFloat*                          VectorFieldScale;                                           // 0x0030   (0x0008)  
	FRawDistributionFloat                              VectorFieldScaleRaw;                                        // 0x0038   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldScaleOverLife
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{ 
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                   // 0x0030   (0x0008)  
	FRawDistributionFloat                              VectorFieldScaleOverLifeRaw;                                // 0x0038   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVelocityBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleVelocityBase : public UParticleModule
{ 
public:
	bool                                               bInWorldSpace : 1;                                          // 0x0030:0 (0x0001)  
	bool                                               bApplyOwnerScale : 1;                                       // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleVelocity
/// Size: 0x0078 (0x000038 - 0x0000B0)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             StartVelocity;                                              // 0x0038   (0x0048)  
	FRawDistributionFloat                              StartVelocityRadial;                                        // 0x0080   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVelocity_Seeded
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00B0   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleVelocityCone
/// Size: 0x0070 (0x000038 - 0x0000A8)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionFloat                              Angle;                                                      // 0x0038   (0x0030)  
	FRawDistributionFloat                              Velocity;                                                   // 0x0068   (0x0030)  
	FVector                                            Direction;                                                  // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVelocityInheritParent
/// Size: 0x0048 (0x000038 - 0x000080)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             Scale;                                                      // 0x0038   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleVelocityOverLifetime
/// Size: 0x0050 (0x000038 - 0x000088)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             VelOverLife;                                                // 0x0038   (0x0048)  
	bool                                               Absolute : 1;                                               // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleSpriteEmitter
/// Size: 0x0000 (0x0001B8 - 0x0001B8)
class UParticleSpriteEmitter : public UParticleEmitter
{ 
public:
};

/// Class /Script/Engine.FXSystemAsset
/// Size: 0x0008 (0x000028 - 0x000030)
class UFXSystemAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	uint32_t                                           MaxPoolSize;                                                // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.ParticleSystemLOD
/// Size: 0x0001 (0x000000 - 0x000001)
struct FParticleSystemLOD
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.LODSoloTrack
/// Size: 0x0010 (0x000000 - 0x000010)
struct FLODSoloTrack
{ 
	TArray<char>                                       SoloEnableSetting;                                          // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.NamedEmitterMaterial
/// Size: 0x0010 (0x000000 - 0x000010)
struct FNamedEmitterMaterial
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0008   (0x0008)  
};

/// Class /Script/Engine.ParticleSystem
/// Size: 0x00E0 (0x000030 - 0x000110)
class UParticleSystem : public UFXSystemAsset
{ 
public:
	float                                              UpdateTime_FPS;                                             // 0x0030   (0x0004)  
	float                                              UpdateTime_Delta;                                           // 0x0034   (0x0004)  
	float                                              WarmupTime;                                                 // 0x0038   (0x0004)  
	float                                              WarmupTickRate;                                             // 0x003C   (0x0004)  
	TArray<class UParticleEmitter*>                    Emitters;                                                   // 0x0040   (0x0010)  
	class UParticleSystemComponent*                    PreviewComponent;                                           // 0x0050   (0x0008)  
	class UInterpCurveEdSetup*                         CurveEdSetup;                                               // 0x0058   (0x0008)  
	float                                              LODDistanceCheckTime;                                       // 0x0060   (0x0004)  
	float                                              MacroUVRadius;                                              // 0x0064   (0x0004)  
	TArray<float>                                      LODDistances;                                               // 0x0068   (0x0010)  
	TArray<FParticleSystemLOD>                         LODSettings;                                                // 0x0078   (0x0010)  
	FBox                                               FixedRelativeBoundingBox;                                   // 0x0088   (0x001C)  
	float                                              SecondsBeforeInactive;                                      // 0x00A4   (0x0004)  
	float                                              Delay;                                                      // 0x00A8   (0x0004)  
	float                                              DelayLow;                                                   // 0x00AC   (0x0004)  
	bool                                               bOrientZAxisTowardCamera : 1;                               // 0x00B0:0 (0x0001)  
	bool                                               bUseFixedRelativeBoundingBox : 1;                           // 0x00B0:1 (0x0001)  
	bool                                               bShouldResetPeakCounts : 1;                                 // 0x00B0:2 (0x0001)  
	bool                                               bHasPhysics : 1;                                            // 0x00B0:3 (0x0001)  
	bool                                               bUseRealtimeThumbnail : 1;                                  // 0x00B0:4 (0x0001)  
	bool                                               ThumbnailImageOutOfDate : 1;                                // 0x00B0:5 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x00B0:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x00B0:7 (0x0001)  MISSED
	bool                                               bUseDelayRange : 1;                                         // 0x00B1:0 (0x0001)  
	bool                                               bAllowManagedTicking : 1;                                   // 0x00B1:1 (0x0001)  
	bool                                               bAutoDeactivate : 1;                                        // 0x00B1:2 (0x0001)  
	bool                                               bRegenerateLODDuplicate : 1;                                // 0x00B1:3 (0x0001)  
	SDK_UNDEFINED(1,552) /* TEnumAsByte<EParticleSystemUpdateMode> */ __um(SystemUpdateMode);                      // 0x00B2   (0x0001)  
	SDK_UNDEFINED(1,553) /* TEnumAsByte<ParticleSystemLODMethod> */ __um(LODMethod);                               // 0x00B3   (0x0001)  
	EParticleSystemInsignificanceReaction              InsignificantReaction;                                      // 0x00B4   (0x0001)  
	SDK_UNDEFINED(1,554) /* TEnumAsByte<EParticleSystemOcclusionBoundsMethod> */ __um(OcclusionBoundsMethod);      // 0x00B5   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x00B6   (0x0001)  MISSED
	EParticleSignificanceLevel                         MaxSignificanceLevel;                                       // 0x00B7   (0x0001)  
	uint32_t                                           MinTimeBetweenTicks;                                        // 0x00B8   (0x0004)  
	float                                              InsignificanceDelay;                                        // 0x00BC   (0x0004)  
	FVector                                            MacroUVPosition;                                            // 0x00C0   (0x000C)  
	FBox                                               CustomOcclusionBounds;                                      // 0x00CC   (0x001C)  
	TArray<FLODSoloTrack>                              SoloTracking;                                               // 0x00E8   (0x0010)  
	TArray<FNamedEmitterMaterial>                      NamedMaterialSlots;                                         // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0108   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.ParticleSystem.ContainsEmitterType
	// bool ContainsEmitterType(class UClass* TypeData);                                                                     // [0x2f8eb60] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.FXSystemComponent
/// Size: 0x0000 (0x000410 - 0x000410)
class UFXSystemComponent : public UPrimitiveComponent
{ 
public:


	/// Functions
	// Function /Script/Engine.FXSystemComponent.SetVectorParameter
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                          // [0x2f92d40] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetUseAutoManageAttachment
	// void SetUseAutoManageAttachment(bool bAutoManage);                                                                    // [0x2f92cb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetFloatParameter
	// void SetFloatParameter(FName ParameterName, float Param);                                                             // [0x2f92950] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetEmitterEnable
	// void SetEmitterEnable(FName EmitterName, bool bNewEnableState);                                                       // [0x2f92880] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetColorParameter
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                      // [0x2f927b0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetBoolParameter
	// void SetBoolParameter(FName ParameterName, bool Param);                                                               // [0x2f92610] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetAutoAttachmentParameters
	// void SetAutoAttachmentParameters(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule); // [0x2f91d80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetActorParameter
	// void SetActorParameter(FName ParameterName, class AActor* Param);                                                     // [0x2f91b90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.ReleaseToPool
	// void ReleaseToPool();                                                                                                 // [0xeb2230] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.GetFXSystemAsset
	// class UFXSystemAsset* GetFXSystemAsset();                                                                             // [0x2f915a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.ParticleSysParam
/// Size: 0x0080 (0x000000 - 0x000080)
struct FParticleSysParam
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	SDK_UNDEFINED(1,555) /* TEnumAsByte<EParticleSysParamType> */ __um(ParamType);                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              Scalar;                                                     // 0x000C   (0x0004)  
	float                                              Scalar_Low;                                                 // 0x0010   (0x0004)  
	FVector                                            Vector;                                                     // 0x0014   (0x000C)  
	FVector                                            Vector_Low;                                                 // 0x0020   (0x000C)  
	FColor                                             Color;                                                      // 0x002C   (0x0004)  
	class AActor*                                      Actor;                                                      // 0x0030   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_6[0x40];                                      // 0x0040   (0x0040)  MISSED
};

/// Class /Script/Engine.ParticleSystemComponent
/// Size: 0x0260 (0x000410 - 0x000670)
class UParticleSystemComponent : public UFXSystemComponent
{ 
public:
	class UParticleSystem*                             Template;                                                   // 0x0408   (0x0008)  
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                           // 0x0410   (0x0010)  
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                         // 0x0420   (0x0010)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0430   (0x0001)  MISSED
	bool                                               bRenderAfterDLSS : 1;                                       // 0x0431:0 (0x0001)  
	bool                                               bResetOnDetach : 1;                                         // 0x0431:1 (0x0001)  
	bool                                               bUpdateOnDedicatedServer : 1;                               // 0x0431:2 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0431:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0431:4 (0x0001)  MISSED
	bool                                               bAllowRecycling : 1;                                        // 0x0431:5 (0x0001)  
	bool                                               bAutoManageAttachment : 1;                                  // 0x0431:6 (0x0001)  
	bool                                               bAutoAttachWeldSimulatedBodies : 1;                         // 0x0431:7 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0432:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0432:1 (0x0001)  MISSED
	bool                                               bWarmingUp : 1;                                             // 0x0432:2 (0x0001)  
	bool                                               bOverrideLODMethod : 1;                                     // 0x0432:3 (0x0001)  
	bool                                               bSkipUpdateDynamicDataDuringTick : 1;                       // 0x0432:4 (0x0001)  
	unsigned char                                      UnknownData05_4[0xA];                                       // 0x0433   (0x000A)  MISSED
	SDK_UNDEFINED(1,556) /* TEnumAsByte<ParticleSystemLODMethod> */ __um(LODMethod);                               // 0x043D   (0x0001)  
	EParticleSignificanceLevel                         RequiredSignificance;                                       // 0x043E   (0x0001)  
	unsigned char                                      UnknownData06_5[0x1];                                       // 0x043F   (0x0001)  MISSED
	TArray<FParticleSysParam>                          InstanceParameters;                                         // 0x0440   (0x0010)  
	SDK_UNDEFINED(16,557) /* FMulticastInlineDelegate */ __um(OnParticleSpawn);                                    // 0x0450   (0x0010)  
	SDK_UNDEFINED(16,558) /* FMulticastInlineDelegate */ __um(OnParticleBurst);                                    // 0x0460   (0x0010)  
	SDK_UNDEFINED(16,559) /* FMulticastInlineDelegate */ __um(OnParticleDeath);                                    // 0x0470   (0x0010)  
	SDK_UNDEFINED(16,560) /* FMulticastInlineDelegate */ __um(OnParticleCollide);                                  // 0x0480   (0x0010)  
	bool                                               bOldPositionValid;                                          // 0x0490   (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0491   (0x0003)  MISSED
	FVector                                            OldPosition;                                                // 0x0494   (0x000C)  
	FVector                                            PartSysVelocity;                                            // 0x04A0   (0x000C)  
	float                                              WarmupTime;                                                 // 0x04AC   (0x0004)  
	float                                              WarmupTickRate;                                             // 0x04B0   (0x0004)  
	unsigned char                                      UnknownData08_5[0x4];                                       // 0x04B4   (0x0004)  MISSED
	float                                              SecondsBeforeInactive;                                      // 0x04B8   (0x0004)  
	unsigned char                                      UnknownData09_5[0x4];                                       // 0x04BC   (0x0004)  MISSED
	float                                              MaxTimeBeforeForceUpdateTransform;                          // 0x04C0   (0x0004)  
	unsigned char                                      UnknownData10_5[0x1C];                                      // 0x04C4   (0x001C)  MISSED
	TArray<class UParticleSystemReplay*>               ReplayClips;                                                // 0x04E0   (0x0010)  
	unsigned char                                      UnknownData11_5[0x8];                                       // 0x04F0   (0x0008)  MISSED
	float                                              CustomTimeDilation;                                         // 0x04F8   (0x0004)  
	unsigned char                                      UnknownData12_5[0x54];                                      // 0x04FC   (0x0054)  MISSED
	SDK_UNDEFINED(8,561) /* TWeakObjectPtr<USceneComponent*> */ __um(AutoAttachParent);                            // 0x0550   (0x0008)  
	FName                                              AutoAttachSocketName;                                       // 0x0558   (0x0008)  
	EAttachmentRule                                    AutoAttachLocationRule;                                     // 0x0560   (0x0001)  
	EAttachmentRule                                    AutoAttachRotationRule;                                     // 0x0561   (0x0001)  
	EAttachmentRule                                    AutoAttachScaleRule;                                        // 0x0562   (0x0001)  
	unsigned char                                      UnknownData13_5[0x2D];                                      // 0x0563   (0x002D)  MISSED
	SDK_UNDEFINED(16,562) /* FMulticastInlineDelegate */ __um(OnSystemFinished);                                   // 0x0590   (0x0010)  
	unsigned char                                      UnknownData14_6[0xD0];                                      // 0x05A0   (0x00D0)  MISSED


	/// Functions
	// Function /Script/Engine.ParticleSystemComponent.SetTrailSourceData
	// void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x2f92b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetTemplate
	// void SetTemplate(class UParticleSystem* NewTemplate);                                                                 // [0x2f92ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetMaterialParameter
	// void SetMaterialParameter(FName ParameterName, class UMaterialInterface* Param);                                      // [0x2f92a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetTangent
	// void SetBeamTargetTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t TargetIndex);                        // [0x2f92500] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetStrength
	// void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex);                       // [0x2f92400] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetPoint
	// void SetBeamTargetPoint(int32_t EmitterIndex, FVector NewTargetPoint, int32_t TargetIndex);                           // [0x2f922f0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceTangent
	// void SetBeamSourceTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t SourceIndex);                        // [0x2f921e0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceStrength
	// void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex);                       // [0x2f920e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourcePoint
	// void SetBeamSourcePoint(int32_t EmitterIndex, FVector NewSourcePoint, int32_t SourceIndex);                           // [0x2f91fd0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamEndPoint
	// void SetBeamEndPoint(int32_t EmitterIndex, FVector NewEndPoint);                                                      // [0x2f91f00] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetAutoAttachParams
	// void SetAutoAttachParams(class USceneComponent* Parent, FName SocketName, TEnumAsByte<EAttachLocation> LocationType); // [0x2f91c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.GetNumActiveParticles
	// int32_t GetNumActiveParticles();                                                                                      // [0x2f91780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetNamedMaterial
	// class UMaterialInterface* GetNamedMaterial(FName InName);                                                             // [0x2f91690] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetTangent
	// bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTangentPoint);                       // [0x2f91430] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetStrength
	// bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength);                      // [0x2f91310] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetPoint
	// bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTargetPoint);                          // [0x2f91200] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceTangent
	// bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutTangentPoint);                       // [0x2f910f0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceStrength
	// bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength);                      // [0x2f90fd0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourcePoint
	// bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutSourcePoint);                          // [0x2f90ec0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamEndPoint
	// bool GetBeamEndPoint(int32_t EmitterIndex, FVector& OutEndPoint);                                                     // [0x2f90de0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GenerateParticleEvent
	// void GenerateParticleEvent(FName InEventName, float InEmitterTime, FVector InLocation, FVector InDirection, FVector InVelocity); // [0x2f90bf0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.EndTrails
	// void EndTrails();                                                                                                     // [0x2f90bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, class UMaterialInterface* SourceMaterial); // [0x2f90ae0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.BeginTrails
	// void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x2f90950] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ParticleSystemReplay
/// Size: 0x0018 (0x000028 - 0x000040)
class UParticleSystemReplay : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	int32_t                                            ClipIDNumber;                                               // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_6[0x14];                                      // 0x002C   (0x0014)  MISSED
};

/// Class /Script/Engine.PathFollowingAgentInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UPathFollowingAgentInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.PawnNoiseEmitterComponent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UPawnNoiseEmitterComponent : public UActorComponent
{ 
public:
	bool                                               bAIPerceptionSystemCompatibilityMode : 1;                   // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x00B1   (0x0003)  MISSED
	FVector                                            LastRemoteNoisePosition;                                    // 0x00B4   (0x000C)  
	float                                              NoiseLifetime;                                              // 0x00C0   (0x0004)  
	float                                              LastRemoteNoiseVolume;                                      // 0x00C4   (0x0004)  
	float                                              LastRemoteNoiseTime;                                        // 0x00C8   (0x0004)  
	float                                              LastLocalNoiseVolume;                                       // 0x00CC   (0x0004)  
	float                                              LastLocalNoiseTime;                                         // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00D4   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.PawnNoiseEmitterComponent.MakeNoise
	// void MakeNoise(class AActor* NoiseMaker, float Loudness, FVector& NoiseLocation);                                     // [0x2f95790] BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalAnimationComponent
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UPhysicalAnimationComponent : public UActorComponent
{ 
public:
	float                                              StrengthMultiplyer;                                         // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x00B4   (0x0004)  MISSED
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData01_6[0x30];                                      // 0x00C0   (0x0030)  MISSED


	/// Functions
	// Function /Script/Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
	// void SetStrengthMultiplyer(float InStrengthMultiplyer);                                                               // [0x2f96fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
	// void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);                                 // [0x2f96f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.GetBodyTargetTransform
	// FTransform GetBodyTargetTransform(FName BodyName);                                                                    // [0x2f95450] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
	// void ApplyPhysicalAnimationSettingsBelow(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // [0x2f952c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
	// void ApplyPhysicalAnimationSettings(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData);                   // [0x2f951e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
	// void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);   // [0x2f95090] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalMaterialMask
/// Size: 0x0008 (0x000028 - 0x000030)
class UPhysicalMaterialMask : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	int32_t                                            UVChannelIndex;                                             // 0x0028   (0x0004)  
	SDK_UNDEFINED(1,563) /* TEnumAsByte<TextureAddress> */ __um(AddressX);                                         // 0x002C   (0x0001)  
	SDK_UNDEFINED(1,564) /* TEnumAsByte<TextureAddress> */ __um(AddressY);                                         // 0x002D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x002E   (0x0002)  MISSED
};

/// Class /Script/Engine.PhysicalMaterialPropertyBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UPhysicalMaterialPropertyBase : public UObject
{ 
public:
};

/// Struct /Script/Engine.SolverIterations
/// Size: 0x0018 (0x000000 - 0x000018)
struct FSolverIterations
{ 
	int32_t                                            SolverIterations;                                           // 0x0000   (0x0004)  
	int32_t                                            JointIterations;                                            // 0x0004   (0x0004)  
	int32_t                                            CollisionIterations;                                        // 0x0008   (0x0004)  
	int32_t                                            SolverPushOutIterations;                                    // 0x000C   (0x0004)  
	int32_t                                            JointPushOutIterations;                                     // 0x0010   (0x0004)  
	int32_t                                            CollisionPushOutIterations;                                 // 0x0014   (0x0004)  
};

/// Class /Script/Engine.PhysicsAsset
/// Size: 0x0110 (0x000028 - 0x000138)
class UPhysicsAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	TArray<int32_t>                                    BoundsBodies;                                               // 0x0030   (0x0010)  
	TArray<class USkeletalBodySetup*>                  SkeletalBodySetups;                                         // 0x0040   (0x0010)  
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                            // 0x0050   (0x0010)  
	FSolverIterations                                  SolverIterations;                                           // 0x0060   (0x0018)  
	bool                                               bNotForDedicatedServer : 1;                                 // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0xA7];                                      // 0x0079   (0x00A7)  MISSED
	class UThumbnailInfo*                              ThumbnailInfo;                                              // 0x0120   (0x0008)  
	TArray<class UBodySetup*>                          BodySetup;                                                  // 0x0128   (0x0010)  
};

/// Struct /Script/Engine.PhysicalAnimationData
/// Size: 0x0024 (0x000000 - 0x000024)
struct FPhysicalAnimationData
{ 
	FName                                              BodyName;                                                   // 0x0000   (0x0008)  
	bool                                               bIsLocalSimulation : 1;                                     // 0x0008:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              OrientationStrength;                                        // 0x000C   (0x0004)  
	float                                              AngularVelocityStrength;                                    // 0x0010   (0x0004)  
	float                                              PositionStrength;                                           // 0x0014   (0x0004)  
	float                                              VelocityStrength;                                           // 0x0018   (0x0004)  
	float                                              MaxLinearForce;                                             // 0x001C   (0x0004)  
	float                                              MaxAngularForce;                                            // 0x0020   (0x0004)  
};

/// Struct /Script/Engine.PhysicalAnimationProfile
/// Size: 0x002C (0x000000 - 0x00002C)
struct FPhysicalAnimationProfile
{ 
	FName                                              ProfileName;                                                // 0x0000   (0x0008)  
	FPhysicalAnimationData                             PhysicalAnimationData;                                      // 0x0008   (0x0024)  
};

/// Class /Script/Engine.SkeletalBodySetup
/// Size: 0x0018 (0x000270 - 0x000288)
class USkeletalBodySetup : public UBodySetup
{ 
public:
	bool                                               bSkipScaleFromAnimation;                                    // 0x0270   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0271   (0x0007)  MISSED
	TArray<FPhysicalAnimationProfile>                  PhysicalAnimationData;                                      // 0x0278   (0x0010)  
};

/// Class /Script/Engine.PhysicsCollisionHandler
/// Size: 0x0018 (0x000028 - 0x000040)
class UPhysicsCollisionHandler : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	float                                              ImpactThreshold;                                            // 0x0028   (0x0004)  
	float                                              ImpactReFireDelay;                                          // 0x002C   (0x0004)  
	class USoundBase*                                  DefaultImpactSound;                                         // 0x0030   (0x0008)  
	float                                              LastImpactSoundTime;                                        // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.RigidBodyBase
/// Size: 0x0000 (0x000220 - 0x000220)
class ARigidBodyBase : public AActor
{ 
public:
};

/// Class /Script/Engine.PhysicsConstraintActor
/// Size: 0x0020 (0x000220 - 0x000240)
class APhysicsConstraintActor : public ARigidBodyBase
{ 
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                             // 0x0220   (0x0008)  
	class AActor*                                      ConstraintActor1;                                           // 0x0228   (0x0008)  
	class AActor*                                      ConstraintActor2;                                           // 0x0230   (0x0008)  
	bool                                               bDisableCollision : 1;                                      // 0x0238:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0239   (0x0007)  MISSED
};

/// Struct /Script/Engine.ConstrainComponentPropName
/// Size: 0x0008 (0x000000 - 0x000008)
struct FConstrainComponentPropName
{ 
	FName                                              ComponentName;                                              // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.ConstraintBaseParams
/// Size: 0x0014 (0x000000 - 0x000014)
struct FConstraintBaseParams
{ 
	float                                              Stiffness;                                                  // 0x0000   (0x0004)  
	float                                              Damping;                                                    // 0x0004   (0x0004)  
	float                                              Restitution;                                                // 0x0008   (0x0004)  
	float                                              ContactDistance;                                            // 0x000C   (0x0004)  
	bool                                               bSoftConstraint : 1;                                        // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.LinearConstraint
/// Size: 0x0008 (0x000014 - 0x00001C)
struct FLinearConstraint : FConstraintBaseParams
{ 
	float                                              Limit;                                                      // 0x0014   (0x0004)  
	SDK_UNDEFINED(1,565) /* TEnumAsByte<ELinearConstraintMotion> */ __um(XMotion);                                 // 0x0018   (0x0001)  
	SDK_UNDEFINED(1,566) /* TEnumAsByte<ELinearConstraintMotion> */ __um(YMotion);                                 // 0x0019   (0x0001)  
	SDK_UNDEFINED(1,567) /* TEnumAsByte<ELinearConstraintMotion> */ __um(ZMotion);                                 // 0x001A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/Engine.ConeConstraint
/// Size: 0x000C (0x000014 - 0x000020)
struct FConeConstraint : FConstraintBaseParams
{ 
	float                                              Swing1LimitDegrees;                                         // 0x0014   (0x0004)  
	float                                              Swing2LimitDegrees;                                         // 0x0018   (0x0004)  
	SDK_UNDEFINED(1,568) /* TEnumAsByte<EAngularConstraintMotion> */ __um(Swing1Motion);                           // 0x001C   (0x0001)  
	SDK_UNDEFINED(1,569) /* TEnumAsByte<EAngularConstraintMotion> */ __um(Swing2Motion);                           // 0x001D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x001E   (0x0002)  MISSED
};

/// Struct /Script/Engine.TwistConstraint
/// Size: 0x0008 (0x000014 - 0x00001C)
struct FTwistConstraint : FConstraintBaseParams
{ 
	float                                              TwistLimitDegrees;                                          // 0x0014   (0x0004)  
	SDK_UNDEFINED(1,570) /* TEnumAsByte<EAngularConstraintMotion> */ __um(TwistMotion);                            // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintDrive
/// Size: 0x0010 (0x000000 - 0x000010)
struct FConstraintDrive
{ 
	float                                              Stiffness;                                                  // 0x0000   (0x0004)  
	float                                              Damping;                                                    // 0x0004   (0x0004)  
	float                                              MaxForce;                                                   // 0x0008   (0x0004)  
	bool                                               bEnablePositionDrive : 1;                                   // 0x000C:0 (0x0001)  
	bool                                               bEnableVelocityDrive : 1;                                   // 0x000C:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.LinearDriveConstraint
/// Size: 0x004C (0x000000 - 0x00004C)
struct FLinearDriveConstraint
{ 
	FVector                                            PositionTarget;                                             // 0x0000   (0x000C)  
	FVector                                            VelocityTarget;                                             // 0x000C   (0x000C)  
	FConstraintDrive                                   XDrive;                                                     // 0x0018   (0x0010)  
	FConstraintDrive                                   YDrive;                                                     // 0x0028   (0x0010)  
	FConstraintDrive                                   ZDrive;                                                     // 0x0038   (0x0010)  
	bool                                               bEnablePositionDrive : 1;                                   // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
};

/// Struct /Script/Engine.AngularDriveConstraint
/// Size: 0x004C (0x000000 - 0x00004C)
struct FAngularDriveConstraint
{ 
	FConstraintDrive                                   TwistDrive;                                                 // 0x0000   (0x0010)  
	FConstraintDrive                                   SwingDrive;                                                 // 0x0010   (0x0010)  
	FConstraintDrive                                   SlerpDrive;                                                 // 0x0020   (0x0010)  
	FRotator                                           OrientationTarget;                                          // 0x0030   (0x000C)  
	FVector                                            AngularVelocityTarget;                                      // 0x003C   (0x000C)  
	SDK_UNDEFINED(1,571) /* TEnumAsByte<EAngularDriveMode> */ __um(AngularDriveMode);                              // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintProfileProperties
/// Size: 0x0104 (0x000000 - 0x000104)
struct FConstraintProfileProperties
{ 
	float                                              ProjectionLinearTolerance;                                  // 0x0000   (0x0004)  
	float                                              ProjectionAngularTolerance;                                 // 0x0004   (0x0004)  
	float                                              LinearBreakThreshold;                                       // 0x0008   (0x0004)  
	float                                              AngularBreakThreshold;                                      // 0x000C   (0x0004)  
	FLinearConstraint                                  LinearLimit;                                                // 0x0010   (0x001C)  
	FConeConstraint                                    ConeLimit;                                                  // 0x002C   (0x0020)  
	FTwistConstraint                                   TwistLimit;                                                 // 0x004C   (0x001C)  
	FLinearDriveConstraint                             LinearDrive;                                                // 0x0068   (0x004C)  
	FAngularDriveConstraint                            AngularDrive;                                               // 0x00B4   (0x004C)  
	bool                                               bDisableCollision : 1;                                      // 0x0100:0 (0x0001)  
	bool                                               bParentDominates : 1;                                       // 0x0100:1 (0x0001)  
	bool                                               bEnableProjection : 1;                                      // 0x0100:2 (0x0001)  
	bool                                               bAngularBreakable : 1;                                      // 0x0100:3 (0x0001)  
	bool                                               bLinearBreakable : 1;                                       // 0x0100:4 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0101   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintInstance
/// Size: 0x01B8 (0x000000 - 0x0001B8)
struct FConstraintInstance
{ 
	FName                                              JointName;                                                  // 0x0018   (0x0008)  
	FName                                              ConstraintBone1;                                            // 0x0020   (0x0008)  
	FName                                              ConstraintBone2;                                            // 0x0028   (0x0008)  
	FVector                                            Pos1;                                                       // 0x0030   (0x000C)  
	FVector                                            PriAxis1;                                                   // 0x003C   (0x000C)  
	FVector                                            SecAxis1;                                                   // 0x0048   (0x000C)  
	FVector                                            Pos2;                                                       // 0x0054   (0x000C)  
	FVector                                            PriAxis2;                                                   // 0x0060   (0x000C)  
	FVector                                            SecAxis2;                                                   // 0x006C   (0x000C)  
	FRotator                                           AngularRotationOffset;                                      // 0x0078   (0x000C)  
	bool                                               bScaleLinearLimits : 1;                                     // 0x0084:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0085   (0x0007)  MISSED
	FConstraintProfileProperties                       ProfileInstance;                                            // 0x008C   (0x0104)  
	unsigned char                                      UnknownData01_6[0x28];                                      // 0x0190   (0x0028)  MISSED
};

/// Class /Script/Engine.PhysicsConstraintComponent
/// Size: 0x0200 (0x0001F0 - 0x0003F0)
class UPhysicsConstraintComponent : public USceneComponent
{ 
public:
	class AActor*                                      ConstraintActor1;                                           // 0x01F0   (0x0008)  
	FConstrainComponentPropName                        ComponentName1;                                             // 0x01F8   (0x0008)  
	class AActor*                                      ConstraintActor2;                                           // 0x0200   (0x0008)  
	FConstrainComponentPropName                        ComponentName2;                                             // 0x0208   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0210   (0x0010)  MISSED
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                            // 0x0220   (0x0008)  
	SDK_UNDEFINED(16,572) /* FMulticastInlineDelegate */ __um(OnConstraintBroken);                                 // 0x0228   (0x0010)  
	FConstraintInstance                                ConstraintInstance;                                         // 0x0238   (0x01B8)  


	/// Functions
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
	// void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                                // [0x2f96e70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
	// void SetOrientationDriveSLERP(bool bEnableSLERP);                                                                     // [0x2f96de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearZLimit
	// void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                           // [0x2f96d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearYLimit
	// void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                           // [0x2f96c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearXLimit
	// void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                           // [0x2f96ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
	// void SetLinearVelocityTarget(FVector& InVelTarget);                                                                   // [0x2f96b10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
	// void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                              // [0x2f969f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionTarget
	// void SetLinearPositionTarget(FVector& InPosTarget);                                                                   // [0x2f96960] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionDrive
	// void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                              // [0x2f96840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearDriveParams
	// void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                        // [0x2f96730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearBreakable
	// void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);                                           // [0x2f96660] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetDisableCollision
	// void SetDisableCollision(bool bDisableCollision);                                                                     // [0x2f965d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
	// void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, FVector& RefPosition);                       // [0x2f96500] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
	// void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, FVector& PriAxis, FVector& SecAxis);      // [0x2f963e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
	// void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, FTransform& RefFrame);                          // [0x2f962c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstrainedComponents
	// void SetConstrainedComponents(class UPrimitiveComponent* Component1, FName BoneName1, class UPrimitiveComponent* Component2, FName BoneName2); // [0x2f96170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
	// void SetAngularVelocityTarget(FVector& InVelTarget);                                                                  // [0x2f960e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
	// void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                            // [0x2f96010] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
	// void SetAngularVelocityDriveSLERP(bool bEnableSLERP);                                                                 // [0x2f95f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
	// void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                         // [0x2f95eb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularTwistLimit
	// void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);               // [0x2f95df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
	// void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle);                 // [0x2f95d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
	// void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle);                 // [0x2f95c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
	// void SetAngularOrientationTarget(FRotator& InPosTarget);                                                              // [0x2f95be0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
	// void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                      // [0x2f95b10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveParams
	// void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                       // [0x2f95a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveMode
	// void SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode);                                                   // [0x2f95980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularBreakable
	// void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);                                        // [0x2f958b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.IsBroken
	// bool IsBroken();                                                                                                      // [0x2f95730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentTwist
	// float GetCurrentTwist();                                                                                              // [0x2f95650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing2
	// float GetCurrentSwing2();                                                                                             // [0x2f95620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing1
	// float GetCurrentSwing1();                                                                                             // [0x2f955f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetConstraintForce
	// void GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce);                                           // [0x2f95510] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.BreakConstraint
	// void BreakConstraint();                                                                                               // [0x2f953f0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.PhysicsConstraintProfileHandle
/// Size: 0x010C (0x000000 - 0x00010C)
struct FPhysicsConstraintProfileHandle
{ 
	FConstraintProfileProperties                       ProfileProperties;                                          // 0x0000   (0x0104)  
	FName                                              ProfileName;                                                // 0x0104   (0x0008)  
};

/// Class /Script/Engine.PhysicsConstraintTemplate
/// Size: 0x02D0 (0x000028 - 0x0002F8)
class UPhysicsConstraintTemplate : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FConstraintInstance                                DefaultInstance;                                            // 0x0028   (0x01B8)  
	TArray<FPhysicsConstraintProfileHandle>            ProfileHandles;                                             // 0x01E0   (0x0010)  
	FConstraintProfileProperties                       DefaultProfile;                                             // 0x01F0   (0x0104)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02F4   (0x0004)  MISSED
};

/// Class /Script/Engine.PhysicsHandleComponent
/// Size: 0x00B0 (0x0000B0 - 0x000160)
class UPhysicsHandleComponent : public UActorComponent
{ 
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                           // 0x00B0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x00B8   (0x0008)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x00C0:0 (0x0001)  MISSED
	bool                                               bSoftAngularConstraint : 1;                                 // 0x00C0:1 (0x0001)  
	bool                                               bSoftLinearConstraint : 1;                                  // 0x00C0:2 (0x0001)  
	bool                                               bInterpolateTarget : 1;                                     // 0x00C0:3 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x00C1   (0x0003)  MISSED
	float                                              LinearDamping;                                              // 0x00C4   (0x0004)  
	float                                              LinearStiffness;                                            // 0x00C8   (0x0004)  
	float                                              AngularDamping;                                             // 0x00CC   (0x0004)  
	float                                              AngularStiffness;                                           // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData03_5[0x6C];                                      // 0x00D4   (0x006C)  MISSED
	float                                              InterpolationSpeed;                                         // 0x0140   (0x0004)  
	unsigned char                                      UnknownData04_6[0x1C];                                      // 0x0144   (0x001C)  MISSED


	/// Functions
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetRotation
	// void SetTargetRotation(FRotator NewRotation);                                                                         // [0x2f99910] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
	// void SetTargetLocationAndRotation(FVector NewLocation, FRotator NewRotation);                                         // [0x2f99830] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocation
	// void SetTargetLocation(FVector NewLocation);                                                                          // [0x2f997a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearStiffness
	// void SetLinearStiffness(float NewLinearStiffness);                                                                    // [0x2f99720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearDamping
	// void SetLinearDamping(float NewLinearDamping);                                                                        // [0x2f996a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetInterpolationSpeed
	// void SetInterpolationSpeed(float NewInterpolationSpeed);                                                              // [0x2f99620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularStiffness
	// void SetAngularStiffness(float NewAngularStiffness);                                                                  // [0x2f995a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularDamping
	// void SetAngularDamping(float NewAngularDamping);                                                                      // [0x2f99520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.ReleaseComponent
	// void ReleaseComponent();                                                                                              // [0x718bc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
	// void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, FName InBoneName, FVector Location, FRotator Rotation); // [0x2f992b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocation
	// void GrabComponentAtLocation(class UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation);           // [0x2f991a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponent
	// void GrabComponent(class UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation, bool bConstrainRotation); // [0x2f99050] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
	// void GetTargetLocationAndRotation(FVector& TargetLocation, FRotator& TargetRotation);                                 // [0x2f98f70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsHandleComponent.GetGrabbedComponent
	// class UPrimitiveComponent* GetGrabbedComponent();                                                                     // [0xaa1a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.RigidBodyErrorCorrection
/// Size: 0x0034 (0x000000 - 0x000034)
struct FRigidBodyErrorCorrection
{ 
	float                                              PingExtrapolation;                                          // 0x0000   (0x0004)  
	float                                              PingLimit;                                                  // 0x0004   (0x0004)  
	float                                              ErrorPerLinearDifference;                                   // 0x0008   (0x0004)  
	float                                              ErrorPerAngularDifference;                                  // 0x000C   (0x0004)  
	float                                              MaxRestoredStateError;                                      // 0x0010   (0x0004)  
	float                                              MaxLinearHardSnapDistance;                                  // 0x0014   (0x0004)  
	float                                              PositionLerp;                                               // 0x0018   (0x0004)  
	float                                              AngleLerp;                                                  // 0x001C   (0x0004)  
	float                                              LinearVelocityCoefficient;                                  // 0x0020   (0x0004)  
	float                                              AngularVelocityCoefficient;                                 // 0x0024   (0x0004)  
	float                                              ErrorAccumulationSeconds;                                   // 0x0028   (0x0004)  
	float                                              ErrorAccumulationDistanceSq;                                // 0x002C   (0x0004)  
	float                                              ErrorAccumulationSimilarity;                                // 0x0030   (0x0004)  
};

/// Struct /Script/Engine.PhysicalSurfaceName
/// Size: 0x000C (0x000000 - 0x00000C)
struct FPhysicalSurfaceName
{ 
	EPhysicalSurface                                   Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.BroadphaseSettings
/// Size: 0x0040 (0x000000 - 0x000040)
struct FBroadphaseSettings
{ 
	bool                                               bUseMBPOnClient;                                            // 0x0000   (0x0001)  
	bool                                               bUseMBPOnServer;                                            // 0x0001   (0x0001)  
	bool                                               bUseMBPOuterBounds;                                         // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0003   (0x0001)  MISSED
	FBox                                               MBPBounds;                                                  // 0x0004   (0x001C)  
	FBox                                               MBPOuterBounds;                                             // 0x0020   (0x001C)  
	uint32_t                                           MBPNumSubdivs;                                              // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.ChaosPhysicsSettings
/// Size: 0x0003 (0x000000 - 0x000003)
struct FChaosPhysicsSettings
{ 
	EChaosThreadingMode                                DefaultThreadingModel;                                      // 0x0000   (0x0001)  
	EChaosSolverTickMode                               DedicatedThreadTickMode;                                    // 0x0001   (0x0001)  
	EChaosBufferMode                                   DedicatedThreadBufferMode;                                  // 0x0002   (0x0001)  
};

/// Class /Script/Engine.PhysicsSettings
/// Size: 0x0100 (0x000038 - 0x000138)
class UPhysicsSettings : public UDeveloperSettings
{ 
public:
	float                                              DefaultGravityZ;                                            // 0x0038   (0x0004)  
	float                                              DefaultTerminalVelocity;                                    // 0x003C   (0x0004)  
	float                                              DefaultFluidFriction;                                       // 0x0040   (0x0004)  
	int32_t                                            SimulateScratchMemorySize;                                  // 0x0044   (0x0004)  
	int32_t                                            RagdollAggregateThreshold;                                  // 0x0048   (0x0004)  
	float                                              TriangleMeshTriangleMinAreaThreshold;                       // 0x004C   (0x0004)  
	bool                                               bEnableShapeSharing;                                        // 0x0050   (0x0001)  
	bool                                               bEnablePCM;                                                 // 0x0051   (0x0001)  
	bool                                               bEnableStabilization;                                       // 0x0052   (0x0001)  
	bool                                               bWarnMissingLocks;                                          // 0x0053   (0x0001)  
	bool                                               bEnable2DPhysics;                                           // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	FRigidBodyErrorCorrection                          PhysicErrorCorrection;                                      // 0x0058   (0x0034)  
	SDK_UNDEFINED(1,573) /* TEnumAsByte<ESettingsLockedAxis> */ __um(LockedAxis);                                  // 0x008C   (0x0001)  
	SDK_UNDEFINED(1,574) /* TEnumAsByte<ESettingsDOF> */ __um(DefaultDegreesOfFreedom);                            // 0x008D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x008E   (0x0002)  MISSED
	float                                              BounceThresholdVelocity;                                    // 0x0090   (0x0004)  
	SDK_UNDEFINED(1,575) /* TEnumAsByte<EFrictionCombineMode> */ __um(FrictionCombineMode);                        // 0x0094   (0x0001)  
	SDK_UNDEFINED(1,576) /* TEnumAsByte<EFrictionCombineMode> */ __um(RestitutionCombineMode);                     // 0x0095   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0096   (0x0002)  MISSED
	float                                              MaxAngularVelocity;                                         // 0x0098   (0x0004)  
	float                                              MaxDepenetrationVelocity;                                   // 0x009C   (0x0004)  
	float                                              ContactOffsetMultiplier;                                    // 0x00A0   (0x0004)  
	float                                              MinContactOffset;                                           // 0x00A4   (0x0004)  
	float                                              MaxContactOffset;                                           // 0x00A8   (0x0004)  
	bool                                               bSimulateSkeletalMeshOnDedicatedServer;                     // 0x00AC   (0x0001)  
	SDK_UNDEFINED(1,577) /* TEnumAsByte<ECollisionTraceFlag> */ __um(DefaultShapeComplexity);                      // 0x00AD   (0x0001)  
	bool                                               bDefaultHasComplexCollision;                                // 0x00AE   (0x0001)  
	bool                                               bSuppressFaceRemapTable;                                    // 0x00AF   (0x0001)  
	bool                                               bSupportUVFromHitResults;                                   // 0x00B0   (0x0001)  
	bool                                               bDisableActiveActors;                                       // 0x00B1   (0x0001)  
	bool                                               bDisableKinematicStaticPairs;                               // 0x00B2   (0x0001)  
	bool                                               bDisableKinematicKinematicPairs;                            // 0x00B3   (0x0001)  
	bool                                               bDisableCCD;                                                // 0x00B4   (0x0001)  
	bool                                               bEnableEnhancedDeterminism;                                 // 0x00B5   (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x00B6   (0x0002)  MISSED
	float                                              AnimPhysicsMinDeltaTime;                                    // 0x00B8   (0x0004)  
	bool                                               bSimulateAnimPhysicsAfterReset;                             // 0x00BC   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x00BD   (0x0003)  MISSED
	float                                              MaxPhysicsDeltaTime;                                        // 0x00C0   (0x0004)  
	bool                                               bSubstepping;                                               // 0x00C4   (0x0001)  
	bool                                               bSubsteppingAsync;                                          // 0x00C5   (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x00C6   (0x0002)  MISSED
	float                                              MaxSubstepDeltaTime;                                        // 0x00C8   (0x0004)  
	int32_t                                            MaxSubsteps;                                                // 0x00CC   (0x0004)  
	float                                              SyncSceneSmoothingFactor;                                   // 0x00D0   (0x0004)  
	float                                              InitialAverageFrameRate;                                    // 0x00D4   (0x0004)  
	int32_t                                            PhysXTreeRebuildRate;                                       // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x00DC   (0x0004)  MISSED
	TArray<FPhysicalSurfaceName>                       PhysicalSurfaces;                                           // 0x00E0   (0x0010)  
	FBroadphaseSettings                                DefaultBroadphaseSettings;                                  // 0x00F0   (0x0040)  
	FChaosPhysicsSettings                              ChaosSettings;                                              // 0x0130   (0x0003)  
	unsigned char                                      UnknownData07_6[0x5];                                       // 0x0133   (0x0005)  MISSED
};

/// Class /Script/Engine.PhysicsSpringComponent
/// Size: 0x0030 (0x0001F0 - 0x000220)
class UPhysicsSpringComponent : public USceneComponent
{ 
public:
	float                                              SpringStiffness;                                            // 0x01F0   (0x0004)  
	float                                              SpringDamping;                                              // 0x01F4   (0x0004)  
	float                                              SpringLengthAtRest;                                         // 0x01F8   (0x0004)  
	float                                              SpringRadius;                                               // 0x01FC   (0x0004)  
	SDK_UNDEFINED(1,578) /* TEnumAsByte<ECollisionChannel> */ __um(SpringChannel);                                 // 0x0200   (0x0001)  
	bool                                               bIgnoreSelf;                                                // 0x0201   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0202   (0x0002)  MISSED
	float                                              SpringCompression;                                          // 0x0204   (0x0004)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0208   (0x0018)  MISSED


	/// Functions
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringRestingPoint
	// FVector GetSpringRestingPoint();                                                                                      // [0x2f98f30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringDirection
	// FVector GetSpringDirection();                                                                                         // [0x2f98ef0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
	// FVector GetSpringCurrentEndPoint();                                                                                   // [0x2f98eb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
	// float GetNormalizedCompressionScalar();                                                                               // [0x2f98e80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PhysicsThruster
/// Size: 0x0008 (0x000220 - 0x000228)
class APhysicsThruster : public ARigidBodyBase
{ 
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                          // 0x0220   (0x0008)  
};

/// Class /Script/Engine.PhysicsThrusterComponent
/// Size: 0x0010 (0x0001F0 - 0x000200)
class UPhysicsThrusterComponent : public USceneComponent
{ 
public:
	float                                              ThrustStrength;                                             // 0x01F0   (0x0004)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x01F4   (0x000C)  MISSED
};

/// Class /Script/Engine.SceneCapture
/// Size: 0x0010 (0x000220 - 0x000230)
class ASceneCapture : public AActor
{ 
public:
	class UStaticMeshComponent*                        MeshComp;                                                   // 0x0220   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x0228   (0x0008)  
};

/// Class /Script/Engine.PlanarReflection
/// Size: 0x0010 (0x000230 - 0x000240)
class APlanarReflection : public ASceneCapture
{ 
public:
	class UPlanarReflectionComponent*                  PlanarReflectionComponent;                                  // 0x0230   (0x0008)  
	bool                                               bShowPreviewPlane;                                          // 0x0238   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0239   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.PlanarReflection.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                    // [0x2f99490] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.EngineShowFlagsSetting
/// Size: 0x0018 (0x000000 - 0x000018)
struct FEngineShowFlagsSetting
{ 
	SDK_UNDEFINED(16,579) /* FString */                __um(ShowFlagName);                                         // 0x0000   (0x0010)  
	bool                                               Enabled;                                                    // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Class /Script/Engine.SceneCaptureComponent
/// Size: 0x00B0 (0x0001F0 - 0x0002A0)
#pragma pack(push, 0x1)
class alignas(0x10) USceneCaptureComponent : public USceneComponent
{ 
public:
	ESceneCapturePrimitiveRenderMode                   PrimitiveRenderMode;                                        // 0x01F0   (0x0001)  
	SDK_UNDEFINED(1,580) /* TEnumAsByte<ESceneCaptureSource> */ __um(CaptureSource);                               // 0x01F1   (0x0001)  
	bool                                               bCaptureEveryFrame : 1;                                     // 0x01F2:0 (0x0001)  
	bool                                               bCaptureOnMovement : 1;                                     // 0x01F2:1 (0x0001)  
	bool                                               bAlwaysPersistRenderingState;                               // 0x01F3   (0x0001)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x01F4   (0x0004)  MISSED
	SDK_UNDEFINED(16,581) /* TArray<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(HiddenComponents);               // 0x01F8   (0x0010)  
	TArray<class AActor*>                              HiddenActors;                                               // 0x0208   (0x0010)  
	SDK_UNDEFINED(16,582) /* TArray<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(ShowOnlyComponents);             // 0x0218   (0x0010)  
	TArray<class AActor*>                              ShowOnlyActors;                                             // 0x0228   (0x0010)  
	float                                              LODDistanceFactor;                                          // 0x0238   (0x0004)  
	float                                              MaxViewDistanceOverride;                                    // 0x023C   (0x0004)  
	int32_t                                            CaptureSortPriority;                                        // 0x0240   (0x0004)  
	bool                                               bUseRayTracingIfEnabled;                                    // 0x0244   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0245   (0x0003)  MISSED
	TArray<FEngineShowFlagsSetting>                    ShowFlagSettings;                                           // 0x0248   (0x0010)  
	unsigned char                                      UnknownData02_5[0x20];                                      // 0x0258   (0x0020)  MISSED
	SDK_UNDEFINED(16,583) /* FString */                __um(ProfilingEventName);                                   // 0x0278   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0288   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyComponent
	// void ShowOnlyComponent(class UPrimitiveComponent* InComponent);                                                       // [0x2fbf9c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyActorComponents
	// void ShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                    // [0x2fbf8f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.SetCaptureSortPriority
	// void SetCaptureSortPriority(int32_t NewCaptureSortPriority);                                                          // [0x2fbf4a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyComponent
	// void RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent);                                                 // [0x2fbf2e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
	// void RemoveShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                              // [0x2fbf210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.HideComponent
	// void HideComponent(class UPrimitiveComponent* InComponent);                                                           // [0x2fbce10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.HideActorComponents
	// void HideActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                        // [0x2fbcd40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ClearShowOnlyComponents
	// void ClearShowOnlyComponents();                                                                                       // [0x2fbc440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ClearHiddenComponents
	// void ClearHiddenComponents();                                                                                         // [0x2fbc420] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.PlanarReflectionComponent
/// Size: 0x00E0 (0x0002A0 - 0x000380)
class UPlanarReflectionComponent : public USceneCaptureComponent
{ 
public:
	class UBoxComponent*                               PreviewBox;                                                 // 0x0298   (0x0008)  
	float                                              NormalDistortionStrength;                                   // 0x02A0   (0x0004)  
	float                                              PrefilterRoughness;                                         // 0x02A4   (0x0004)  
	float                                              PrefilterRoughnessDistance;                                 // 0x02A8   (0x0004)  
	int32_t                                            ScreenPercentage;                                           // 0x02AC   (0x0004)  
	float                                              ExtraFOV;                                                   // 0x02B0   (0x0004)  
	float                                              DistanceFromPlaneFadeStart;                                 // 0x02B4   (0x0004)  
	float                                              DistanceFromPlaneFadeEnd;                                   // 0x02B8   (0x0004)  
	float                                              DistanceFromPlaneFadeoutStart;                              // 0x02BC   (0x0004)  
	float                                              DistanceFromPlaneFadeoutEnd;                                // 0x02C0   (0x0004)  
	float                                              AngleFromPlaneFadeStart;                                    // 0x02C4   (0x0004)  
	float                                              AngleFromPlaneFadeEnd;                                      // 0x02C8   (0x0004)  
	bool                                               bShowPreviewPlane;                                          // 0x02CC   (0x0001)  
	bool                                               bRenderSceneTwoSided;                                       // 0x02CD   (0x0001)  
	unsigned char                                      UnknownData00_6[0xB2];                                      // 0x02CE   (0x00B2)  MISSED
};

/// Class /Script/Engine.PlaneReflectionCapture
/// Size: 0x0000 (0x000228 - 0x000228)
class APlaneReflectionCapture : public AReflectionCapture
{ 
public:
};

/// Class /Script/Engine.PlaneReflectionCaptureComponent
/// Size: 0x0010 (0x000270 - 0x000280)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              InfluenceRadiusScale;                                       // 0x0268   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x026C   (0x0004)  MISSED
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                     // 0x0270   (0x0008)  
	class UBoxComponent*                               PreviewCaptureBox;                                          // 0x0278   (0x0008)  
};

/// Class /Script/Engine.PlatformEventsComponent
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UPlatformEventsComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,584) /* FMulticastInlineDelegate */ __um(PlatformChangedToLaptopModeDelegate);                // 0x00B0   (0x0010)  
	SDK_UNDEFINED(16,585) /* FMulticastInlineDelegate */ __um(PlatformChangedToTabletModeDelegate);                // 0x00C0   (0x0010)  


	/// Functions
	// Function /Script/Engine.PlatformEventsComponent.SupportsConvertibleLaptops
	// bool SupportsConvertibleLaptops();                                                                                    // [0x2f999a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
	// void PlatformEventDelegate__DelegateSignature();                                                                      // [0x15dd8c0] MulticastDelegate|Public|Delegate 
	// Function /Script/Engine.PlatformEventsComponent.IsInTabletMode
	// bool IsInTabletMode();                                                                                                // [0x2f99460] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlatformEventsComponent.IsInLaptopMode
	// bool IsInLaptopMode();                                                                                                // [0x2f99430] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PlatformInterfaceWebResponse
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UPlatformInterfaceWebResponse : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(16,586) /* FString */                __um(OriginalURL);                                          // 0x0028   (0x0010)  
	int32_t                                            ResponseCode;                                               // 0x0038   (0x0004)  
	int32_t                                            Tag;                                                        // 0x003C   (0x0004)  
	SDK_UNDEFINED(16,587) /* FString */                __um(StringResponse);                                       // 0x0040   (0x0010)  
	TArray<char>                                       BinaryResponse;                                             // 0x0050   (0x0010)  
	unsigned char                                      UnknownData01_6[0x50];                                      // 0x0060   (0x0050)  MISSED


	/// Functions
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetNumHeaders
	// int32_t GetNumHeaders();                                                                                              // [0x2fa2390] Native|Public        
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeaderValue
	// FString GetHeaderValue(FString HeaderName);                                                                           // [0x2fa1040] Native|Public        
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeader
	// void GetHeader(int32_t HeaderIndex, FString& Header, FString& value);                                                 // [0x2fa0ee0] Native|Public|HasOutParms 
};

/// Struct /Script/Engine.KeyBind
/// Size: 0x0030 (0x000000 - 0x000030)
struct FKeyBind
{ 
	FKey                                               Key;                                                        // 0x0000   (0x0018)  
	SDK_UNDEFINED(16,588) /* FString */                __um(Command);                                              // 0x0018   (0x0010)  
	bool                                               Control : 1;                                                // 0x0028:0 (0x0001)  
	bool                                               Shift : 1;                                                  // 0x0028:1 (0x0001)  
	bool                                               Alt : 1;                                                    // 0x0028:2 (0x0001)  
	bool                                               Cmd : 1;                                                    // 0x0028:3 (0x0001)  
	bool                                               bIgnoreCtrl : 1;                                            // 0x0028:4 (0x0001)  
	bool                                               bIgnoreShift : 1;                                           // 0x0028:5 (0x0001)  
	bool                                               bIgnoreAlt : 1;                                             // 0x0028:6 (0x0001)  
	bool                                               bIgnoreCmd : 1;                                             // 0x0028:7 (0x0001)  
	bool                                               bDisabled : 1;                                              // 0x0029:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x002A   (0x0006)  MISSED
};

/// Class /Script/Engine.PlayerInput
/// Size: 0x0380 (0x000028 - 0x0003A8)
class UPlayerInput : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x120];                                     // 0x0000   (0x0120)  MISSED
	TArray<FKeyBind>                                   DebugExecBindings;                                          // 0x0120   (0x0010)  
	unsigned char                                      UnknownData01_5[0x30];                                      // 0x0130   (0x0030)  MISSED
	TArray<FName>                                      InvertedAxis;                                               // 0x0160   (0x0010)  
	unsigned char                                      UnknownData02_6[0x238];                                     // 0x0170   (0x0238)  MISSED


	/// Functions
	// Function /Script/Engine.PlayerInput.SetMouseSensitivity
	// void SetMouseSensitivity(float Sensitivity);                                                                          // [0x2faa5e0] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.SetBind
	// void SetBind(FName BindName, FString Command);                                                                        // [0x2fa9f70] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.InvertAxisKey
	// void InvertAxisKey(FKey AxisKey);                                                                                     // [0x2fa9e10] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.InvertAxis
	// void InvertAxis(FName AxisName);                                                                                      // [0x2fa9d90] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.ClearSmoothing
	// void ClearSmoothing();                                                                                                // [0x2fa9900] Final|Exec|Native|Public 
};

/// Class /Script/Engine.PlayerStartPIE
/// Size: 0x0000 (0x000250 - 0x000250)
class APlayerStartPIE : public APlayerStart
{ 
public:
};

/// Class /Script/Engine.PluginCommandlet
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UPluginCommandlet : public UCommandlet
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0080   (0x0020)  MISSED
};

/// Class /Script/Engine.PointLight
/// Size: 0x0008 (0x000230 - 0x000238)
class APointLight : public ALight
{ 
public:
	class UPointLightComponent*                        PointLightComponent;                                        // 0x0230   (0x0008)  


	/// Functions
	// Function /Script/Engine.PointLight.SetRadius
	// void SetRadius(float NewRadius);                                                                                      // [0x2faa660] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLight.SetLightFalloffExponent
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                          // [0x2faa4e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PointLightComponent
/// Size: 0x0020 (0x000350 - 0x000370)
#pragma pack(push, 0x1)
class alignas(0x10) UPointLightComponent : public ULocalLightComponent
{ 
public:
	bool                                               bUseInverseSquaredFalloff : 1;                              // 0x0350:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0351   (0x0003)  MISSED
	float                                              LightFalloffExponent;                                       // 0x0354   (0x0004)  
	float                                              SourceRadius;                                               // 0x0358   (0x0004)  
	float                                              SoftSourceRadius;                                           // 0x035C   (0x0004)  
	float                                              SourceLength;                                               // 0x0360   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0364   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.PointLightComponent.SetSourceRadius
	// void SetSourceRadius(float bNewValue);                                                                                // [0x2faa7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSourceLength
	// void SetSourceLength(float NewValue);                                                                                 // [0x2faa760] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSoftSourceRadius
	// void SetSoftSourceRadius(float bNewValue);                                                                            // [0x2faa6e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetLightFalloffExponent
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                          // [0x2faa560] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.Polys
/// Size: 0x0010 (0x000028 - 0x000038)
class UPolys : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Class /Script/Engine.PoseableMeshComponent
/// Size: 0x0160 (0x000640 - 0x0007A0)
class UPoseableMeshComponent : public USkinnedMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x160];                                     // 0x0640   (0x0160)  MISSED


	/// Functions
	// Function /Script/Engine.PoseableMeshComponent.SetBoneTransformByName
	// void SetBoneTransformByName(FName BoneName, FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace);             // [0x2faa380] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneScaleByName
	// void SetBoneScaleByName(FName BoneName, FVector InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace);                       // [0x2faa270] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneRotationByName
	// void SetBoneRotationByName(FName BoneName, FRotator InRotation, TEnumAsByte<EBoneSpaces> BoneSpace);                  // [0x2faa160] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneLocationByName
	// void SetBoneLocationByName(FName BoneName, FVector InLocation, TEnumAsByte<EBoneSpaces> BoneSpace);                   // [0x2faa050] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.ResetBoneTransformByName
	// void ResetBoneTransformByName(FName BoneName);                                                                        // [0x2fa9ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneTransformByName
	// FTransform GetBoneTransformByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                // [0x2fa9c10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneScaleByName
	// FVector GetBoneScaleByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                       // [0x2fa9b40] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneRotationByName
	// FRotator GetBoneRotationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                   // [0x2fa9a70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneLocationByName
	// FVector GetBoneLocationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                    // [0x2fa99a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent
	// void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy);                                  // [0x2fa9920] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.PoseData
/// Size: 0x0070 (0x000000 - 0x000070)
struct FPoseData
{ 
	TArray<FTransform>                                 LocalSpacePose;                                             // 0x0000   (0x0010)  
	SDK_UNDEFINED(80,589) /* TMap<int32_t, int32_t> */ __um(TrackToBufferIndex);                                   // 0x0010   (0x0050)  
	TArray<float>                                      CurveData;                                                  // 0x0060   (0x0010)  
};

/// Struct /Script/Engine.PoseDataContainer
/// Size: 0x0090 (0x000000 - 0x000090)
struct FPoseDataContainer
{ 
	TArray<FSmartName>                                 PoseNames;                                                  // 0x0000   (0x0010)  
	TArray<FName>                                      Tracks;                                                     // 0x0010   (0x0010)  
	SDK_UNDEFINED(80,590) /* TMap<FName, int32_t> */   __um(TrackMap);                                             // 0x0020   (0x0050)  
	TArray<FPoseData>                                  Poses;                                                      // 0x0070   (0x0010)  
	TArray<FAnimCurveBase>                             Curves;                                                     // 0x0080   (0x0010)  
};

/// Class /Script/Engine.PoseAsset
/// Size: 0x00A0 (0x000080 - 0x000120)
class UPoseAsset : public UAnimationAsset
{ 
public:
	FPoseDataContainer                                 PoseContainer;                                              // 0x0080   (0x0090)  
	bool                                               bAdditivePose;                                              // 0x0110   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0111   (0x0003)  MISSED
	int32_t                                            BasePoseIndex;                                              // 0x0114   (0x0004)  
	FName                                              RetargetSource;                                             // 0x0118   (0x0008)  
};

/// Class /Script/Engine.PoseWatch
/// Size: 0x0010 (0x000028 - 0x000038)
class UPoseWatch : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UEdGraphNode*                                Node;                                                       // 0x0028   (0x0008)  
	FColor                                             PoseWatchColour;                                            // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.PostProcessComponent
/// Size: 0x0690 (0x0001F0 - 0x000880)
class UPostProcessComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x01F0   (0x0010)  MISSED
	FPostProcessSettings                               Settings;                                                   // 0x0200   (0x0670)  
	float                                              Priority;                                                   // 0x0870   (0x0004)  
	float                                              BlendRadius;                                                // 0x0874   (0x0004)  
	float                                              BlendWeight;                                                // 0x0878   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x087C:0 (0x0001)  
	bool                                               bUnbound : 1;                                               // 0x087C:1 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x087D   (0x0003)  MISSED


	/// Functions
	// Function /Script/Engine.PostProcessComponent.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                 // [0x2fa97b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PostProcessVolume
/// Size: 0x0688 (0x000258 - 0x0008E0)
class APostProcessVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0258   (0x0008)  MISSED
	FPostProcessSettings                               Settings;                                                   // 0x0260   (0x0670)  
	float                                              Priority;                                                   // 0x08D0   (0x0004)  
	float                                              BlendRadius;                                                // 0x08D4   (0x0004)  
	float                                              BlendWeight;                                                // 0x08D8   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x08DC:0 (0x0001)  
	bool                                               bUnbound : 1;                                               // 0x08DC:1 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x08DD   (0x0003)  MISSED


	/// Functions
	// Function /Script/Engine.PostProcessVolume.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                 // [0x2fa9660] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PrecomputedVisibilityOverrideVolume
/// Size: 0x0030 (0x000258 - 0x000288)
class APrecomputedVisibilityOverrideVolume : public AVolume
{ 
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                      // 0x0258   (0x0010)  
	TArray<class AActor*>                              OverrideInvisibleActors;                                    // 0x0268   (0x0010)  
	TArray<FName>                                      OverrideInvisibleLevels;                                    // 0x0278   (0x0010)  
};

/// Class /Script/Engine.PrecomputedVisibilityVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class APrecomputedVisibilityVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.PreviewCollectionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UPreviewCollectionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.PreviewMeshCollectionEntry
/// Size: 0x0028 (0x000000 - 0x000028)
struct FPreviewMeshCollectionEntry
{ 
	SDK_UNDEFINED(40,591) /* TWeakObjectPtr<USkeletalMesh*> */ __um(SkeletalMesh);                                 // 0x0000   (0x0028)  
};

/// Class /Script/Engine.PreviewMeshCollection
/// Size: 0x0020 (0x000030 - 0x000050)
class UPreviewMeshCollection : public UDataAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0038   (0x0008)  
	TArray<FPreviewMeshCollectionEntry>                SkeletalMeshes;                                             // 0x0040   (0x0010)  
};

/// Struct /Script/Engine.CollectionReference
/// Size: 0x0008 (0x000000 - 0x000008)
struct FCollectionReference
{ 
	FName                                              CollectionName;                                             // 0x0000   (0x0008)  
};

/// Class /Script/Engine.PrimaryAssetLabel
/// Size: 0x0058 (0x000030 - 0x000088)
class UPrimaryAssetLabel : public UPrimaryDataAsset
{ 
public:
	SDK_UNDEFINED(16,592) /* FString */                __um(Desc);                                                 // 0x0030   (0x0010)  
	SDK_UNDEFINED(16,593) /* FString */                __um(LevelRowString);                                       // 0x0040   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0050   (0x000C)  
	bool                                               bLabelAssetsInMyDirectory : 1;                              // 0x005C:0 (0x0001)  
	bool                                               bIsRuntimeLabel : 1;                                        // 0x005C:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x005D   (0x0003)  MISSED
	SDK_UNDEFINED(16,594) /* TArray<TWeakObjectPtr<UObject*>> */ __um(ExplicitAssets);                             // 0x0060   (0x0010)  
	SDK_UNDEFINED(16,595) /* TArray<TWeakObjectPtr<UClass*>> */ __um(ExplicitBlueprints);                          // 0x0070   (0x0010)  
	FCollectionReference                               AssetCollection;                                            // 0x0080   (0x0008)  
};

/// Class /Script/Engine.ProjectileMovementComponent
/// Size: 0x00E0 (0x0000F0 - 0x0001D0)
class UProjectileMovementComponent : public UMovementComponent
{ 
public:
	float                                              InitialSpeed;                                               // 0x00F0   (0x0004)  
	float                                              MaxSpeed;                                                   // 0x00F4   (0x0004)  
	bool                                               bRotationFollowsVelocity : 1;                               // 0x00F8:0 (0x0001)  
	bool                                               bRotationRemainsVertical : 1;                               // 0x00F8:1 (0x0001)  
	bool                                               bShouldBounce : 1;                                          // 0x00F8:2 (0x0001)  
	bool                                               bInitialVelocityInLocalSpace : 1;                           // 0x00F8:3 (0x0001)  
	bool                                               bForceSubStepping : 1;                                      // 0x00F8:4 (0x0001)  
	bool                                               bSimulationEnabled : 1;                                     // 0x00F8:5 (0x0001)  
	bool                                               bSweepCollision : 1;                                        // 0x00F8:6 (0x0001)  
	bool                                               bIsHomingProjectile : 1;                                    // 0x00F8:7 (0x0001)  
	bool                                               bBounceAngleAffectsFriction : 1;                            // 0x00F9:0 (0x0001)  
	bool                                               bIsSliding : 1;                                             // 0x00F9:1 (0x0001)  
	bool                                               bInterpMovement : 1;                                        // 0x00F9:2 (0x0001)  
	bool                                               bInterpRotation : 1;                                        // 0x00F9:3 (0x0001)  
	unsigned char                                      UnknownData00_4[0x2];                                       // 0x00FA   (0x0002)  MISSED
	float                                              PreviousHitTime;                                            // 0x00FC   (0x0004)  
	FVector                                            PreviousHitNormal;                                          // 0x0100   (0x000C)  
	float                                              ProjectileGravityScale;                                     // 0x010C   (0x0004)  
	float                                              Buoyancy;                                                   // 0x0110   (0x0004)  
	float                                              Bounciness;                                                 // 0x0114   (0x0004)  
	float                                              Friction;                                                   // 0x0118   (0x0004)  
	float                                              BounceVelocityStopSimulatingThreshold;                      // 0x011C   (0x0004)  
	float                                              MinFrictionFraction;                                        // 0x0120   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0124   (0x0004)  MISSED
	SDK_UNDEFINED(16,596) /* FMulticastInlineDelegate */ __um(OnProjectileBounce);                                 // 0x0128   (0x0010)  
	SDK_UNDEFINED(16,597) /* FMulticastInlineDelegate */ __um(OnProjectileStop);                                   // 0x0138   (0x0010)  
	float                                              HomingAccelerationMagnitude;                                // 0x0148   (0x0004)  
	SDK_UNDEFINED(8,598) /* TWeakObjectPtr<USceneComponent*> */ __um(HomingTargetComponent);                       // 0x014C   (0x0008)  
	float                                              MaxSimulationTimeStep;                                      // 0x0154   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x0158   (0x0004)  
	int32_t                                            BounceAdditionalIterations;                                 // 0x015C   (0x0004)  
	float                                              InterpLocationTime;                                         // 0x0160   (0x0004)  
	float                                              InterpRotationTime;                                         // 0x0164   (0x0004)  
	float                                              InterpLocationMaxLagDistance;                               // 0x0168   (0x0004)  
	float                                              InterpLocationSnapToTargetDistance;                         // 0x016C   (0x0004)  
	unsigned char                                      UnknownData02_6[0x60];                                      // 0x0170   (0x0060)  MISSED


	/// Functions
	// Function /Script/Engine.ProjectileMovementComponent.StopSimulating
	// void StopSimulating(FHitResult& HitResult);                                                                           // [0x2fb4080] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
	// void SetVelocityInLocalSpace(FVector NewVelocity);                                                                    // [0x2fb3ff0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.SetInterpolatedComponent
	// void SetInterpolatedComponent(class USceneComponent* Component);                                                      // [0x2fb3e60] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.ResetInterpolation
	// void ResetInterpolation();                                                                                            // [0xa2f500] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
	// void OnProjectileStopDelegate__DelegateSignature(FHitResult& ImpactResult);                                           // [0x15dd8c0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
	// void OnProjectileBounceDelegate__DelegateSignature(FHitResult& ImpactResult, FVector& ImpactVelocity);                // [0x15dd8c0] MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults 
	// Function /Script/Engine.ProjectileMovementComponent.MoveInterpolationTarget
	// void MoveInterpolationTarget(FVector& NewLocation, FRotator& NewRotation);                                            // [0x2fb3bf0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.LimitVelocity
	// FVector LimitVelocity(FVector NewVelocity);                                                                           // [0x2fb3b40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
	// bool IsVelocityUnderSimulationThreshold();                                                                            // [0x2fb3ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ProjectileMovementComponent.IsInterpolationComplete
	// bool IsInterpolationComplete();                                                                                       // [0x2fb3ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.ProxyLODMeshSimplificationSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              ProxyLODMeshReductionModuleName;                            // 0x0038   (0x0008)  
};

/// Class /Script/Engine.RadialForceActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ARadialForceActor : public ARigidBodyBase
{ 
public:
	class URadialForceComponent*                       ForceComponent;                                             // 0x0220   (0x0008)  


	/// Functions
	// Function /Script/Engine.RadialForceActor.ToggleForce
	// void ToggleForce();                                                                                                   // [0x6971e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.FireImpulse
	// void FireImpulse();                                                                                                   // [0xe92750] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.EnableForce
	// void EnableForce();                                                                                                   // [0xe3d050] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.DisableForce
	// void DisableForce();                                                                                                  // [0xec6f20] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RadialForceComponent
/// Size: 0x0030 (0x0001F0 - 0x000220)
class URadialForceComponent : public USceneComponent
{ 
public:
	float                                              Radius;                                                     // 0x01F0   (0x0004)  
	ERadialImpulseFalloff                              Falloff;                                                    // 0x01F4   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x01F5   (0x0003)  MISSED
	float                                              ImpulseStrength;                                            // 0x01F8   (0x0004)  
	bool                                               bImpulseVelChange : 1;                                      // 0x01FC:0 (0x0001)  
	bool                                               bIgnoreOwningActor : 1;                                     // 0x01FC:1 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x01FD   (0x0003)  MISSED
	float                                              ForceStrength;                                              // 0x0200   (0x0004)  
	float                                              DestructibleDamage;                                         // 0x0204   (0x0004)  
	TArray<EObjectTypeQuery>                           ObjectTypesToAffect;                                        // 0x0208   (0x0010)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0218   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.RadialForceComponent.RemoveObjectTypeToAffect
	// void RemoveObjectTypeToAffect(EObjectTypeQuery ObjectType);                                                           // [0x2fb3ce0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceComponent.FireImpulse
	// void FireImpulse();                                                                                                   // [0xa288b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceComponent.AddObjectTypeToAffect
	// void AddObjectTypeToAffect(EObjectTypeQuery ObjectType);                                                              // [0xec1a40] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RectLight
/// Size: 0x0008 (0x000230 - 0x000238)
class ARectLight : public ALight
{ 
public:
	class URectLightComponent*                         RectLightComponent;                                         // 0x0230   (0x0008)  
};

/// Class /Script/Engine.RectLightComponent
/// Size: 0x0020 (0x000350 - 0x000370)
class URectLightComponent : public ULocalLightComponent
{ 
public:
	float                                              SourceWidth;                                                // 0x0350   (0x0004)  
	float                                              SourceHeight;                                               // 0x0354   (0x0004)  
	float                                              BarnDoorAngle;                                              // 0x0358   (0x0004)  
	float                                              BarnDoorLength;                                             // 0x035C   (0x0004)  
	class UTexture*                                    SourceTexture;                                              // 0x0360   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0368   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.RectLightComponent.SetSourceWidth
	// void SetSourceWidth(float bNewValue);                                                                                 // [0x2fb3f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetSourceTexture
	// void SetSourceTexture(class UTexture* bNewValue);                                                                     // [0x2fb3ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetSourceHeight
	// void SetSourceHeight(float NewValue);                                                                                 // [0x2faa560] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetBarnDoorLength
	// void SetBarnDoorLength(float NewValue);                                                                               // [0x2fb3de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetBarnDoorAngle
	// void SetBarnDoorAngle(float NewValue);                                                                                // [0x2fb3d60] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RendererSettings
/// Size: 0x00D0 (0x000038 - 0x000108)
class URendererSettings : public UDeveloperSettings
{ 
public:
	bool                                               bMobileDisableVertexFog : 1;                                // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            MaxMobileCascades;                                          // 0x003C   (0x0004)  
	SDK_UNDEFINED(1,599) /* TEnumAsByte<EMobileMSAASampleCount> */ __um(MobileMSAASampleCount);                    // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	bool                                               bMobileUseLegacyShadingModel : 1;                           // 0x0044:0 (0x0001)  
	bool                                               bMobileAllowDitheredLODTransition : 1;                      // 0x0044:1 (0x0001)  
	bool                                               bMobileAllowSoftwareOcclusionCulling : 1;                   // 0x0044:2 (0x0001)  
	bool                                               bMobileVirtualTextures : 1;                                 // 0x0044:3 (0x0001)  
	bool                                               bDiscardUnusedQualityLevels : 1;                            // 0x0044:4 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0045   (0x0003)  MISSED
	SDK_UNDEFINED(1,600) /* TEnumAsByte<EShaderCompressionFormat> */ __um(ShaderCompressionFormat);                // 0x0048   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	bool                                               bOcclusionCulling : 1;                                      // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData04_4[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              MinScreenRadiusForLights;                                   // 0x0050   (0x0004)  
	float                                              MinScreenRadiusForEarlyZPass;                               // 0x0054   (0x0004)  
	float                                              MinScreenRadiusForCSMdepth;                                 // 0x0058   (0x0004)  
	bool                                               bPrecomputedVisibilityWarning : 1;                          // 0x005C:0 (0x0001)  
	bool                                               bTextureStreaming : 1;                                      // 0x005C:1 (0x0001)  
	bool                                               bUseDXT5NormalMaps : 1;                                     // 0x005C:2 (0x0001)  
	bool                                               bVirtualTextures : 1;                                       // 0x005C:3 (0x0001)  
	bool                                               bVirtualTexturedLightmaps : 1;                              // 0x005C:4 (0x0001)  
	unsigned char                                      UnknownData05_4[0x3];                                       // 0x005D   (0x0003)  MISSED
	uint32_t                                           VirtualTextureTileSize;                                     // 0x0060   (0x0004)  
	uint32_t                                           VirtualTextureTileBorderSize;                               // 0x0064   (0x0004)  
	uint32_t                                           VirtualTextureFeedbackFactor;                               // 0x0068   (0x0004)  
	bool                                               bVirtualTextureEnableCompressZlib : 1;                      // 0x006C:0 (0x0001)  
	bool                                               bVirtualTextureEnableCompressCrunch : 1;                    // 0x006C:1 (0x0001)  
	bool                                               bClearCoatEnableSecondNormal : 1;                           // 0x006C:2 (0x0001)  
	bool                                               bAnisotropicBRDF : 1;                                       // 0x006C:3 (0x0001)  
	unsigned char                                      UnknownData06_4[0x3];                                       // 0x006D   (0x0003)  MISSED
	int32_t                                            ReflectionCaptureResolution;                                // 0x0070   (0x0004)  
	bool                                               ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;       // 0x0074:0 (0x0001)  
	bool                                               bForwardShading : 1;                                        // 0x0074:1 (0x0001)  
	bool                                               bVertexFoggingForOpaque : 1;                                // 0x0074:2 (0x0001)  
	bool                                               bAllowStaticLighting : 1;                                   // 0x0074:3 (0x0001)  
	bool                                               bUseNormalMapsForStaticLighting : 1;                        // 0x0074:4 (0x0001)  
	bool                                               bGenerateMeshDistanceFields : 1;                            // 0x0074:5 (0x0001)  
	bool                                               bEightBitMeshDistanceFields : 1;                            // 0x0074:6 (0x0001)  
	bool                                               bGenerateLandscapeGIData : 1;                               // 0x0074:7 (0x0001)  
	bool                                               bCompressMeshDistanceFields : 1;                            // 0x0075:0 (0x0001)  
	unsigned char                                      UnknownData07_4[0x2];                                       // 0x0076   (0x0002)  MISSED
	float                                              TessellationAdaptivePixelsPerTriangle;                      // 0x0078   (0x0004)  
	bool                                               bSeparateTranslucency : 1;                                  // 0x007C:0 (0x0001)  
	unsigned char                                      UnknownData08_4[0x3];                                       // 0x007D   (0x0003)  MISSED
	SDK_UNDEFINED(1,601) /* TEnumAsByte<ETranslucentSortPolicy> */ __um(TranslucentSortPolicy);                    // 0x0080   (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x0081   (0x0003)  MISSED
	FVector                                            TranslucentSortAxis;                                        // 0x0084   (0x000C)  
	SDK_UNDEFINED(1,602) /* TEnumAsByte<ECustomDepthStencil> */ __um(CustomDepthStencil);                          // 0x0090   (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0091   (0x0003)  MISSED
	bool                                               bCustomDepthTaaJitter : 1;                                  // 0x0094:0 (0x0001)  
	unsigned char                                      UnknownData11_4[0x3];                                       // 0x0095   (0x0003)  MISSED
	SDK_UNDEFINED(1,603) /* TEnumAsByte<EAlphaChannelMode> */ __um(bEnableAlphaChannelInPostProcessing);           // 0x0098   (0x0001)  
	unsigned char                                      UnknownData12_5[0x7];                                       // 0x0099   (0x0007)  MISSED
	SDK_UNDEFINED(16,604) /* FString */                __um(NGXAppId);                                             // 0x00A0   (0x0010)  
	bool                                               bDefaultFeatureBloom : 1;                                   // 0x00B0:0 (0x0001)  
	bool                                               bDefaultFeatureAmbientOcclusion : 1;                        // 0x00B0:1 (0x0001)  
	bool                                               bDefaultFeatureAmbientOcclusionStaticFraction : 1;          // 0x00B0:2 (0x0001)  
	bool                                               bDefaultFeatureAutoExposure : 1;                            // 0x00B0:3 (0x0001)  
	unsigned char                                      UnknownData13_4[0x3];                                       // 0x00B1   (0x0003)  MISSED
	SDK_UNDEFINED(1,605) /* TEnumAsByte<EAutoExposureMethodUI> */ __um(DefaultFeatureAutoExposure);                // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x00B5   (0x0003)  MISSED
	float                                              DefaultFeatureAutoExposureBias;                             // 0x00B8   (0x0004)  
	bool                                               bExtendDefaultLuminanceRangeInAutoExposureSettings : 1;     // 0x00BC:0 (0x0001)  
	bool                                               bUsePreExposure : 1;                                        // 0x00BC:1 (0x0001)  
	bool                                               bEnablePreExposureOnlyInTheEditor : 1;                      // 0x00BC:2 (0x0001)  
	bool                                               bDefaultFeatureMotionBlur : 1;                              // 0x00BC:3 (0x0001)  
	bool                                               bDefaultFeatureLensFlare : 1;                               // 0x00BC:4 (0x0001)  
	bool                                               bTemporalUpsampling : 1;                                    // 0x00BC:5 (0x0001)  
	bool                                               bSSGI : 1;                                                  // 0x00BC:6 (0x0001)  
	unsigned char                                      UnknownData15_4[0x3];                                       // 0x00BD   (0x0003)  MISSED
	SDK_UNDEFINED(1,606) /* TEnumAsByte<EAntiAliasingMethod> */ __um(DefaultFeatureAntiAliasing);                  // 0x00C0   (0x0001)  
	ELightUnits                                        DefaultLightUnits;                                          // 0x00C1   (0x0001)  
	SDK_UNDEFINED(1,607) /* TEnumAsByte<EDefaultBackBufferPixelFormat> */ __um(DefaultBackBufferPixelFormat);      // 0x00C2   (0x0001)  
	unsigned char                                      UnknownData16_5[0x1];                                       // 0x00C3   (0x0001)  MISSED
	bool                                               bRenderUnbuiltPreviewShadowsInGame : 1;                     // 0x00C4:0 (0x0001)  
	bool                                               bStencilForLODDither : 1;                                   // 0x00C4:1 (0x0001)  
	unsigned char                                      UnknownData17_4[0x3];                                       // 0x00C5   (0x0003)  MISSED
	SDK_UNDEFINED(1,608) /* TEnumAsByte<EEarlyZPass> */ __um(EarlyZPass);                                          // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData18_5[0x3];                                       // 0x00C9   (0x0003)  MISSED
	bool                                               bEarlyZPassOnlyMaterialMasking : 1;                         // 0x00CC:0 (0x0001)  
	bool                                               bDBuffer : 1;                                               // 0x00CC:1 (0x0001)  
	unsigned char                                      UnknownData19_4[0x3];                                       // 0x00CD   (0x0003)  MISSED
	SDK_UNDEFINED(1,609) /* TEnumAsByte<EClearSceneOptions> */ __um(ClearSceneMethod);                             // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData20_5[0x3];                                       // 0x00D1   (0x0003)  MISSED
	bool                                               bBasePassOutputsVelocity : 1;                               // 0x00D4:0 (0x0001)  
	bool                                               bVertexDeformationOutputsVelocity : 1;                      // 0x00D4:1 (0x0001)  
	bool                                               bSelectiveBasePassOutputs : 1;                              // 0x00D4:2 (0x0001)  
	bool                                               bDefaultParticleCutouts : 1;                                // 0x00D4:3 (0x0001)  
	unsigned char                                      UnknownData21_4[0x3];                                       // 0x00D5   (0x0003)  MISSED
	int32_t                                            GPUSimulationTextureSizeX;                                  // 0x00D8   (0x0004)  
	int32_t                                            GPUSimulationTextureSizeY;                                  // 0x00DC   (0x0004)  
	bool                                               bGlobalClipPlane : 1;                                       // 0x00E0:0 (0x0001)  
	unsigned char                                      UnknownData22_4[0x3];                                       // 0x00E1   (0x0003)  MISSED
	SDK_UNDEFINED(1,610) /* TEnumAsByte<EGBufferFormat> */ __um(GBufferFormat);                                    // 0x00E4   (0x0001)  
	unsigned char                                      UnknownData23_5[0x3];                                       // 0x00E5   (0x0003)  MISSED
	bool                                               bUseGPUMorphTargets : 1;                                    // 0x00E8:0 (0x0001)  
	bool                                               bNvidiaAftermathEnabled : 1;                                // 0x00E8:1 (0x0001)  
	bool                                               bMultiView : 1;                                             // 0x00E8:2 (0x0001)  
	bool                                               bMobilePostProcessing : 1;                                  // 0x00E8:3 (0x0001)  
	bool                                               bMobileMultiView : 1;                                       // 0x00E8:4 (0x0001)  
	bool                                               bMobileUseHWsRGBEncoding : 1;                               // 0x00E8:5 (0x0001)  
	bool                                               bRoundRobinOcclusion : 1;                                   // 0x00E8:6 (0x0001)  
	bool                                               bODSCapture : 1;                                            // 0x00E8:7 (0x0001)  
	bool                                               bMeshStreaming : 1;                                         // 0x00E9:0 (0x0001)  
	unsigned char                                      UnknownData24_4[0x2];                                       // 0x00EA   (0x0002)  MISSED
	float                                              WireframeCullThreshold;                                     // 0x00EC   (0x0004)  
	bool                                               bEnableRayTracing : 1;                                      // 0x00F0:0 (0x0001)  
	bool                                               bEnableRayTracingTextureLOD : 1;                            // 0x00F0:1 (0x0001)  
	bool                                               bEnableHybridTranslucency : 1;                              // 0x00F0:2 (0x0001)  
	bool                                               bEnableTranslucencyDepth : 1;                               // 0x00F0:3 (0x0001)  
	bool                                               bSupportStationarySkylight : 1;                             // 0x00F0:4 (0x0001)  
	bool                                               bSupportLowQualityLightmaps : 1;                            // 0x00F0:5 (0x0001)  
	bool                                               bSupportPointLightWholeSceneShadows : 1;                    // 0x00F0:6 (0x0001)  
	bool                                               bSupportAtmosphericFog : 1;                                 // 0x00F0:7 (0x0001)  
	bool                                               bSupportSkyAtmosphere : 1;                                  // 0x00F1:0 (0x0001)  
	bool                                               bSupportSkyAtmosphereAffectsHeightFog : 1;                  // 0x00F1:1 (0x0001)  
	bool                                               bSupportSkinCacheShaders : 1;                               // 0x00F1:2 (0x0001)  
	unsigned char                                      UnknownData25_4[0x2];                                       // 0x00F2   (0x0002)  MISSED
	ESkinCacheDefaultBehavior                          DefaultSkinCacheBehavior;                                   // 0x00F4   (0x0001)  
	unsigned char                                      UnknownData26_5[0x3];                                       // 0x00F5   (0x0003)  MISSED
	float                                              SkinCacheSceneMemoryLimitInMB;                              // 0x00F8   (0x0004)  
	bool                                               bMobileEnableStaticAndCSMShadowReceivers : 1;               // 0x00FC:0 (0x0001)  
	bool                                               bMobileEnableMovableLightCSMShaderCulling : 1;              // 0x00FC:1 (0x0001)  
	bool                                               bMobileAllowDistanceFieldShadows : 1;                       // 0x00FC:2 (0x0001)  
	bool                                               bMobileAllowMovableDirectionalLights : 1;                   // 0x00FC:3 (0x0001)  
	unsigned char                                      UnknownData27_4[0x3];                                       // 0x00FD   (0x0003)  MISSED
	uint32_t                                           MobileNumDynamicPointLights;                                // 0x0100   (0x0004)  
	bool                                               bMobileDynamicPointLightsUseStaticBranch : 1;               // 0x0104:0 (0x0001)  
	bool                                               bMobileAllowMovableSpotlights : 1;                          // 0x0104:1 (0x0001)  
	bool                                               bSupport16BitBoneIndex : 1;                                 // 0x0104:2 (0x0001)  
	bool                                               bGPUSkinLimit2BoneInfluences : 1;                           // 0x0104:3 (0x0001)  
	bool                                               bSupportDepthOnlyIndexBuffers : 1;                          // 0x0104:4 (0x0001)  
	bool                                               bSupportReversedIndexBuffers : 1;                           // 0x0104:5 (0x0001)  
	bool                                               bSupportMaterialLayers : 1;                                 // 0x0104:6 (0x0001)  
	bool                                               bLPV : 1;                                                   // 0x0104:7 (0x0001)  
	unsigned char                                      UnknownData28_6[0x3];                                       // 0x0105   (0x0003)  MISSED
};

/// Class /Script/Engine.RendererOverrideSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class URendererOverrideSettings : public UDeveloperSettings
{ 
public:
	bool                                               bSupportAllShaderPermutations : 1;                          // 0x0038:0 (0x0001)  
	bool                                               bForceRecomputeTangents : 1;                                // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.ReplicationDriver
/// Size: 0x0000 (0x000028 - 0x000028)
class UReplicationDriver : public UObject
{ 
public:
};

/// Class /Script/Engine.ReplicationConnectionDriver
/// Size: 0x0000 (0x000028 - 0x000028)
class UReplicationConnectionDriver : public UObject
{ 
public:
};

/// Class /Script/Engine.ReporterBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UReporterBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Class /Script/Engine.ReporterGraph
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UReporterGraph : public UReporterBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x0030   (0x0078)  MISSED
};

/// Class /Script/Engine.ReverbEffect
/// Size: 0x0030 (0x000028 - 0x000058)
class UReverbEffect : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	float                                              Density;                                                    // 0x0028   (0x0004)  
	float                                              Diffusion;                                                  // 0x002C   (0x0004)  
	float                                              Gain;                                                       // 0x0030   (0x0004)  
	float                                              GainHF;                                                     // 0x0034   (0x0004)  
	float                                              DecayTime;                                                  // 0x0038   (0x0004)  
	float                                              DecayHFRatio;                                               // 0x003C   (0x0004)  
	float                                              ReflectionsGain;                                            // 0x0040   (0x0004)  
	float                                              ReflectionsDelay;                                           // 0x0044   (0x0004)  
	float                                              LateGain;                                                   // 0x0048   (0x0004)  
	float                                              LateDelay;                                                  // 0x004C   (0x0004)  
	float                                              AirAbsorptionGainHF;                                        // 0x0050   (0x0004)  
	float                                              RoomRolloffFactor;                                          // 0x0054   (0x0004)  
};

/// Struct /Script/Engine.RigTransformConstraint
/// Size: 0x0010 (0x000000 - 0x000010)
struct FRigTransformConstraint
{ 
	SDK_UNDEFINED(1,611) /* TEnumAsByte<EConstraintTransform> */ __um(TranformType);                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              ParentSpace;                                                // 0x0004   (0x0008)  
	float                                              Weight;                                                     // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.TransformBaseConstraint
/// Size: 0x0010 (0x000000 - 0x000010)
struct FTransformBaseConstraint
{ 
	TArray<FRigTransformConstraint>                    TransformConstraints;                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.TransformBase
/// Size: 0x0028 (0x000000 - 0x000028)
struct FTransformBase
{ 
	FName                                              Node;                                                       // 0x0000   (0x0008)  
	FTransformBaseConstraint                           Constraints;                                                // 0x0008   (0x0020)  
};

/// Struct /Script/Engine.Node
/// Size: 0x0060 (0x000000 - 0x000060)
struct FNode
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FName                                              ParentName;                                                 // 0x0008   (0x0008)  
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
	SDK_UNDEFINED(16,612) /* FString */                __um(DisplayName);                                          // 0x0040   (0x0010)  
	bool                                               bAdvanced;                                                  // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_6[0xF];                                       // 0x0051   (0x000F)  MISSED
};

/// Class /Script/Engine.Rig
/// Size: 0x0028 (0x000028 - 0x000050)
class URig : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x30];                                      // 0x0000   (0x0030)  MISSED
	TArray<FTransformBase>                             TransformBases;                                             // 0x0030   (0x0010)  
	TArray<FNode>                                      Nodes;                                                      // 0x0040   (0x0010)  
};

/// Class /Script/Engine.RotatingMovementComponent
/// Size: 0x0020 (0x0000F0 - 0x000110)
class URotatingMovementComponent : public UMovementComponent
{ 
public:
	FRotator                                           RotationRate;                                               // 0x00F0   (0x000C)  
	FVector                                            PivotTranslation;                                           // 0x00FC   (0x000C)  
	bool                                               bRotationInLocalSpace : 1;                                  // 0x0108:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0109   (0x0007)  MISSED
};

/// Class /Script/Engine.RuntimeOptionsBase
/// Size: 0x0010 (0x000028 - 0x000038)
class URuntimeOptionsBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Class /Script/Engine.RuntimeVirtualTexture
/// Size: 0x0078 (0x000028 - 0x0000A0)
class URuntimeVirtualTexture : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	ERuntimeVirtualTextureMaterialType                 MaterialType;                                               // 0x0028   (0x0001)  
	bool                                               bCompressTextures;                                          // 0x0029   (0x0001)  
	bool                                               bEnable;                                                    // 0x002A   (0x0001)  
	bool                                               bClearTextures;                                             // 0x002B   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x002C   (0x0001)  
	bool                                               bPrivateSpace;                                              // 0x002D   (0x0001)  
	bool                                               bEnableScalability;                                         // 0x002E   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x002F   (0x0001)  MISSED
	int32_t                                            Size;                                                       // 0x0030   (0x0004)  
	int32_t                                            TileCount;                                                  // 0x0034   (0x0004)  
	int32_t                                            TileSize;                                                   // 0x0038   (0x0004)  
	int32_t                                            TileBorderSize;                                             // 0x003C   (0x0004)  
	int32_t                                            StreamLowMips;                                              // 0x0040   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0044   (0x0004)  MISSED
	class URuntimeVirtualTextureStreamingProxy*        StreamingTexture;                                           // 0x0048   (0x0008)  
	bool                                               bEnableCompressCrunch;                                      // 0x0050   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	int32_t                                            RemoveLowMips;                                              // 0x0054   (0x0004)  
	unsigned char                                      UnknownData04_6[0x48];                                      // 0x0058   (0x0048)  MISSED


	/// Functions
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileSize
	// int32_t GetTileSize();                                                                                                // [0x2fba050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileCount
	// int32_t GetTileCount();                                                                                               // [0x2fba010] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileBorderSize
	// int32_t GetTileBorderSize();                                                                                          // [0x2fb9fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetSize
	// int32_t GetSize();                                                                                                    // [0x2fb9f60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.RuntimeVirtualTextureComponent
/// Size: 0x0020 (0x0001F0 - 0x000210)
class URuntimeVirtualTextureComponent : public USceneComponent
{ 
public:
	class URuntimeVirtualTexture*                      VirtualTexture;                                             // 0x01F0   (0x0008)  
	bool                                               bUseStreamingLowMipsInEditor;                               // 0x01F8   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x01F9   (0x0007)  MISSED
	class AActor*                                      BoundsSourceActor;                                          // 0x0200   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0208   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.RuntimeVirtualTextureComponent.GetVirtualTextureTransform
	// FTransform GetVirtualTextureTransform();                                                                              // [0x2fba0a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.VirtualTextureBuildSettings
/// Size: 0x000C (0x000000 - 0x00000C)
struct FVirtualTextureBuildSettings
{ 
	int32_t                                            TileSize;                                                   // 0x0000   (0x0004)  
	int32_t                                            TileBorderSize;                                             // 0x0004   (0x0004)  
	bool                                               bEnableCompressCrunch;                                      // 0x0008   (0x0001)  
	bool                                               bEnableCompressZlib;                                        // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Class /Script/Engine.RuntimeVirtualTextureStreamingProxy
/// Size: 0x0018 (0x0000E8 - 0x000100)
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{ 
public:
	FVirtualTextureBuildSettings                       Settings;                                                   // 0x00E8   (0x000C)  
	bool                                               bSinglePhysicalSpace;                                       // 0x00F4   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00F5   (0x0003)  MISSED
	uint32_t                                           BuildHash;                                                  // 0x00F8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00FC   (0x0004)  MISSED
};

/// Class /Script/Engine.RuntimeVirtualTextureVolume
/// Size: 0x0008 (0x000220 - 0x000228)
class ARuntimeVirtualTextureVolume : public AActor
{ 
public:
	class URuntimeVirtualTextureComponent*             VirtualTextureComponent;                                    // 0x0220   (0x0008)  
};

/// Class /Script/Engine.RVOAvoidanceInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class URVOAvoidanceInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.Scene
/// Size: 0x0000 (0x000028 - 0x000028)
class UScene : public UObject
{ 
public:
};

/// Class /Script/Engine.SceneCapture2D
/// Size: 0x0008 (0x000230 - 0x000238)
class ASceneCapture2D : public ASceneCapture
{ 
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                         // 0x0230   (0x0008)  


	/// Functions
	// Function /Script/Engine.SceneCapture2D.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                    // [0x2f99490] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponent2D
/// Size: 0x0720 (0x0002A0 - 0x0009C0)
class USceneCaptureComponent2D : public USceneCaptureComponent
{ 
public:
	ECameraProjectionMode                              ProjectionType;                                             // 0x0298   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0299   (0x0003)  MISSED
	float                                              FOVAngle;                                                   // 0x029C   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x02A0   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x02A4   (0x0004)  MISSED
	class UTextureRenderTarget2D*                      TextureTarget;                                              // 0x02A8   (0x0008)  
	SDK_UNDEFINED(1,613) /* TEnumAsByte<ESceneCaptureCompositeMode> */ __um(CompositeMode);                        // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData02_5[0xF];                                       // 0x02B1   (0x000F)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x02C0   (0x0670)  
	float                                              PostProcessBlendWeight;                                     // 0x0930   (0x0004)  
	bool                                               bOverride_CustomNearClippingPlane : 1;                      // 0x0934:0 (0x0001)  
	unsigned char                                      UnknownData03_4[0x3];                                       // 0x0935   (0x0003)  MISSED
	float                                              CustomNearClippingPlane;                                    // 0x0938   (0x0004)  
	bool                                               bUseCustomProjectionMatrix;                                 // 0x093C   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x093D   (0x0003)  MISSED
	FMatrix                                            CustomProjectionMatrix;                                     // 0x0940   (0x0040)  
	bool                                               bEnableClipPlane;                                           // 0x0980   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0981   (0x0003)  MISSED
	FVector                                            ClipPlaneBase;                                              // 0x0984   (0x000C)  
	FVector                                            ClipPlaneNormal;                                            // 0x0990   (0x000C)  
	bool                                               bCameraCutThisFrame : 1;                                    // 0x099C:0 (0x0001)  
	bool                                               bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1;       // 0x099C:1 (0x0001)  
	unsigned char                                      UnknownData06_4[0x3];                                       // 0x099D   (0x0003)  MISSED
	bool                                               bDisableFlipCopyGLES;                                       // 0x09A0   (0x0001)  
	unsigned char                                      UnknownData07_6[0x1F];                                      // 0x09A1   (0x001F)  MISSED


	/// Functions
	// Function /Script/Engine.SceneCaptureComponent2D.CaptureScene
	// void CaptureScene();                                                                                                  // [0x2fbc400] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                 // [0x2fbc2b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponentCube
/// Size: 0x0030 (0x0002A0 - 0x0002D0)
class USceneCaptureComponentCube : public USceneCaptureComponent
{ 
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                              // 0x0298   (0x0008)  
	bool                                               bCaptureRotation;                                           // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x02A1   (0x0007)  MISSED
	class UTextureRenderTargetCube*                    TextureTargetLeft;                                          // 0x02A8   (0x0008)  
	class UTextureRenderTargetCube*                    TextureTargetRight;                                         // 0x02B0   (0x0008)  
	class UTextureRenderTarget2D*                      TextureTargetODS;                                           // 0x02B8   (0x0008)  
	float                                              IPD;                                                        // 0x02C0   (0x0004)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x02C4   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.SceneCaptureComponentCube.CaptureScene
	// void CaptureScene();                                                                                                  // [0x2fbc400] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureCube
/// Size: 0x0008 (0x000230 - 0x000238)
class ASceneCaptureCube : public ASceneCapture
{ 
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                       // 0x0230   (0x0008)  


	/// Functions
	// Function /Script/Engine.SceneCaptureCube.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                    // [0x2f99490] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.BPVariableMetaDataEntry
/// Size: 0x0018 (0x000000 - 0x000018)
struct FBPVariableMetaDataEntry
{ 
	FName                                              DataKey;                                                    // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,614) /* FString */                __um(DataValue);                                            // 0x0008   (0x0010)  
};

/// Class /Script/Engine.SCS_Node
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class USCS_Node : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UClass*                                      ComponentClass;                                             // 0x0028   (0x0008)  
	class UActorComponent*                             ComponentTemplate;                                          // 0x0030   (0x0008)  
	FBlueprintCookedComponentInstancingData            CookedComponentInstancingData;                              // 0x0038   (0x0048)  
	FName                                              AttachToName;                                               // 0x0080   (0x0008)  
	FName                                              ParentComponentOrVariableName;                              // 0x0088   (0x0008)  
	FName                                              ParentComponentOwnerClassName;                              // 0x0090   (0x0008)  
	bool                                               bIsParentComponentNative;                                   // 0x0098   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0099   (0x0007)  MISSED
	TArray<class USCS_Node*>                           ChildNodes;                                                 // 0x00A0   (0x0010)  
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x00B0   (0x0010)  
	FGuid                                              VariableGuid;                                               // 0x00C0   (0x0010)  
	FName                                              InternalVariableName;                                       // 0x00D0   (0x0008)  
};

/// Class /Script/Engine.Selection
/// Size: 0x0078 (0x000028 - 0x0000A0)
class USelection : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0xA0];                                      // 0x0000   (0x00A0)  MISSED
};

/// Class /Script/Engine.ServerStatReplicator
/// Size: 0x00C8 (0x000220 - 0x0002E8)
class AServerStatReplicator : public AInfo
{ 
public:
	bool                                               bUpdateStatNet;                                             // 0x0220   (0x0001)  
	bool                                               bOverwriteClientStats;                                      // 0x0221   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0222   (0x0002)  MISSED
	uint32_t                                           Channels;                                                   // 0x0224   (0x0004)  
	uint32_t                                           InRate;                                                     // 0x0228   (0x0004)  
	uint32_t                                           OutRate;                                                    // 0x022C   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0230   (0x0004)  MISSED
	uint32_t                                           MaxPacketOverhead;                                          // 0x0234   (0x0004)  
	uint32_t                                           InRateClientMax;                                            // 0x0238   (0x0004)  
	uint32_t                                           InRateClientMin;                                            // 0x023C   (0x0004)  
	uint32_t                                           InRateClientAvg;                                            // 0x0240   (0x0004)  
	uint32_t                                           InPacketsClientMax;                                         // 0x0244   (0x0004)  
	uint32_t                                           InPacketsClientMin;                                         // 0x0248   (0x0004)  
	uint32_t                                           InPacketsClientAvg;                                         // 0x024C   (0x0004)  
	uint32_t                                           OutRateClientMax;                                           // 0x0250   (0x0004)  
	uint32_t                                           OutRateClientMin;                                           // 0x0254   (0x0004)  
	uint32_t                                           OutRateClientAvg;                                           // 0x0258   (0x0004)  
	uint32_t                                           OutPacketsClientMax;                                        // 0x025C   (0x0004)  
	uint32_t                                           OutPacketsClientMin;                                        // 0x0260   (0x0004)  
	uint32_t                                           OutPacketsClientAvg;                                        // 0x0264   (0x0004)  
	uint32_t                                           NetNumClients;                                              // 0x0268   (0x0004)  
	uint32_t                                           InPackets;                                                  // 0x026C   (0x0004)  
	uint32_t                                           OutPackets;                                                 // 0x0270   (0x0004)  
	uint32_t                                           InBunches;                                                  // 0x0274   (0x0004)  
	uint32_t                                           OutBunches;                                                 // 0x0278   (0x0004)  
	uint32_t                                           OutLoss;                                                    // 0x027C   (0x0004)  
	uint32_t                                           InLoss;                                                     // 0x0280   (0x0004)  
	uint32_t                                           VoiceBytesSent;                                             // 0x0284   (0x0004)  
	uint32_t                                           VoiceBytesRecv;                                             // 0x0288   (0x0004)  
	uint32_t                                           VoicePacketsSent;                                           // 0x028C   (0x0004)  
	uint32_t                                           VoicePacketsRecv;                                           // 0x0290   (0x0004)  
	uint32_t                                           PercentInVoice;                                             // 0x0294   (0x0004)  
	uint32_t                                           PercentOutVoice;                                            // 0x0298   (0x0004)  
	uint32_t                                           NumActorChannels;                                           // 0x029C   (0x0004)  
	uint32_t                                           NumConsideredActors;                                        // 0x02A0   (0x0004)  
	uint32_t                                           PrioritizedActors;                                          // 0x02A4   (0x0004)  
	uint32_t                                           NumRelevantActors;                                          // 0x02A8   (0x0004)  
	uint32_t                                           NumRelevantDeletedActors;                                   // 0x02AC   (0x0004)  
	uint32_t                                           NumReplicatedActorAttempts;                                 // 0x02B0   (0x0004)  
	uint32_t                                           NumReplicatedActors;                                        // 0x02B4   (0x0004)  
	uint32_t                                           NumActors;                                                  // 0x02B8   (0x0004)  
	uint32_t                                           NumNetActors;                                               // 0x02BC   (0x0004)  
	uint32_t                                           NumDormantActors;                                           // 0x02C0   (0x0004)  
	uint32_t                                           NumInitiallyDormantActors;                                  // 0x02C4   (0x0004)  
	uint32_t                                           NumNetGUIDsAckd;                                            // 0x02C8   (0x0004)  
	uint32_t                                           NumNetGUIDsPending;                                         // 0x02CC   (0x0004)  
	uint32_t                                           NumNetGUIDsUnAckd;                                          // 0x02D0   (0x0004)  
	uint32_t                                           ObjPathBytes;                                               // 0x02D4   (0x0004)  
	uint32_t                                           NetGUIDOutRate;                                             // 0x02D8   (0x0004)  
	uint32_t                                           NetGUIDInRate;                                              // 0x02DC   (0x0004)  
	uint32_t                                           NetSaturated;                                               // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02E4   (0x0004)  MISSED
};

/// Class /Script/Engine.ShadowMapTexture2D
/// Size: 0x0008 (0x0000E8 - 0x0000F0)
class UShadowMapTexture2D : public UTexture2D
{ 
public:
	SDK_UNDEFINED(1,615) /* TEnumAsByte<EShadowMapFlags> */ __um(ShadowmapFlags);                                  // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00E9   (0x0007)  MISSED
};

/// Class /Script/Engine.SimpleConstructionScript
/// Size: 0x0078 (0x000028 - 0x0000A0)
class USimpleConstructionScript : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<class USCS_Node*>                           RootNodes;                                                  // 0x0028   (0x0010)  
	TArray<class USCS_Node*>                           AllNodes;                                                   // 0x0038   (0x0010)  
	class USCS_Node*                                   DefaultSceneRootNode;                                       // 0x0048   (0x0008)  
	unsigned char                                      UnknownData01_6[0x50];                                      // 0x0050   (0x0050)  MISSED
};

/// Class /Script/Engine.SkeletalMeshActor
/// Size: 0x0088 (0x000220 - 0x0002A8)
class ASkeletalMeshActor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0220   (0x0008)  MISSED
	bool                                               bShouldDoAnimNotifies : 1;                                  // 0x0228:0 (0x0001)  
	bool                                               bWakeOnLevelStart : 1;                                      // 0x0228:1 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0229   (0x0007)  MISSED
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x0230   (0x0008)  
	class USkeletalMesh*                               ReplicatedMesh;                                             // 0x0238   (0x0008)  
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                        // 0x0240   (0x0008)  
	class UMaterialInterface*                          ReplicatedMaterial0;                                        // 0x0248   (0x0008)  
	class UMaterialInterface*                          ReplicatedMaterial1;                                        // 0x0250   (0x0008)  
	unsigned char                                      UnknownData02_6[0x50];                                      // 0x0258   (0x0050)  MISSED


	/// Functions
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
	// void OnRep_ReplicatedPhysAsset();                                                                                     // [0xe3d050] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
	// void OnRep_ReplicatedMesh();                                                                                          // [0xe92750] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
	// void OnRep_ReplicatedMaterial1();                                                                                     // [0x6971e0] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
	// void OnRep_ReplicatedMaterial0();                                                                                     // [0xec6f20] Native|Public        
};

/// Class /Script/Engine.SkeletalMeshEditorData
/// Size: 0x0000 (0x000028 - 0x000028)
class USkeletalMeshEditorData : public UObject
{ 
public:
};

/// Struct /Script/Engine.BoneFilter
/// Size: 0x000C (0x000000 - 0x00000C)
struct FBoneFilter
{ 
	bool                                               bExcludeSelf;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              BoneName;                                                   // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.SkeletalMeshLODGroupSettings
/// Size: 0x0080 (0x000000 - 0x000080)
struct FSkeletalMeshLODGroupSettings
{ 
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              LODHysteresis;                                              // 0x0004   (0x0004)  
	EBoneFilterActionOption                            BoneFilterActionOption;                                     // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<FBoneFilter>                                BoneList;                                                   // 0x0010   (0x0010)  
	TArray<FName>                                      BonesToPrioritize;                                          // 0x0020   (0x0010)  
	float                                              WeightOfPrioritization;                                     // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0034   (0x0004)  MISSED
	class UAnimSequence*                               BakePose;                                                   // 0x0038   (0x0008)  
	FSkeletalMeshOptimizationSettings                  ReductionSettings;                                          // 0x0040   (0x003C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Class /Script/Engine.SkeletalMeshLODSettings
/// Size: 0x0020 (0x000030 - 0x000050)
class USkeletalMeshLODSettings : public UDataAsset
{ 
public:
	FPerPlatformInt                                    MinLOD;                                                     // 0x0030   (0x0004)  
	FPerPlatformBool                                   DisableBelowMinLodStripping;                                // 0x0034   (0x0001)  
	FPerPlatformBool                                   bSupportLODStreaming;                                       // 0x0035   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0036   (0x0002)  MISSED
	FPerPlatformInt                                    MaxNumStreamedLODs;                                         // 0x0038   (0x0004)  
	FPerPlatformInt                                    MaxNumOptionalLODs;                                         // 0x003C   (0x0004)  
	TArray<FSkeletalMeshLODGroupSettings>              LODGroups;                                                  // 0x0040   (0x0010)  
};

/// Class /Script/Engine.SkeletalMeshSimplificationSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              SkeletalMeshReductionModuleName;                            // 0x0038   (0x0008)  
};

/// Class /Script/Engine.SkeletalMeshSocket
/// Size: 0x0038 (0x000028 - 0x000060)
class USkeletalMeshSocket : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FName                                              SocketName;                                                 // 0x0028   (0x0008)  
	FName                                              BoneName;                                                   // 0x0030   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0038   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0044   (0x000C)  
	FVector                                            RelativeScale;                                              // 0x0050   (0x000C)  
	bool                                               bForceAlwaysAnimated;                                       // 0x005C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x005D   (0x0003)  MISSED


	/// Functions
	// Function /Script/Engine.SkeletalMeshSocket.InitializeSocketFromLocation
	// void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, FVector WorldLocation, FVector WorldNormal); // [0x2fcc040] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshSocket.GetSocketLocation
	// FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);                                                    // [0x2fcbdc0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.TentDistribution
/// Size: 0x000C (0x000000 - 0x00000C)
struct FTentDistribution
{ 
	float                                              TipAltitude;                                                // 0x0000   (0x0004)  
	float                                              TipValue;                                                   // 0x0004   (0x0004)  
	float                                              Width;                                                      // 0x0008   (0x0004)  
};

/// Class /Script/Engine.SkyAtmosphereComponent
/// Size: 0x00D0 (0x0001F0 - 0x0002C0)
class USkyAtmosphereComponent : public USceneComponent
{ 
public:
	ESkyAtmosphereTransformMode                        TransformMode;                                              // 0x01F0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x01F1   (0x0003)  MISSED
	float                                              BottomRadius;                                               // 0x01F4   (0x0004)  
	FColor                                             GroundAlbedo;                                               // 0x01F8   (0x0004)  
	float                                              AtmosphereHeight;                                           // 0x01FC   (0x0004)  
	float                                              MultiScatteringFactor;                                      // 0x0200   (0x0004)  
	float                                              RayleighScatteringScale;                                    // 0x0204   (0x0004)  
	FLinearColor                                       RayleighScattering;                                         // 0x0208   (0x0010)  
	float                                              RayleighExponentialDistribution;                            // 0x0218   (0x0004)  
	float                                              MieScatteringScale;                                         // 0x021C   (0x0004)  
	FLinearColor                                       MieScattering;                                              // 0x0220   (0x0010)  
	float                                              MieAbsorptionScale;                                         // 0x0230   (0x0004)  
	FLinearColor                                       MieAbsorption;                                              // 0x0234   (0x0010)  
	float                                              MieAnisotropy;                                              // 0x0244   (0x0004)  
	float                                              MieExponentialDistribution;                                 // 0x0248   (0x0004)  
	float                                              OtherAbsorptionScale;                                       // 0x024C   (0x0004)  
	FLinearColor                                       OtherAbsorption;                                            // 0x0250   (0x0010)  
	FTentDistribution                                  OtherTentDistribution;                                      // 0x0260   (0x000C)  
	FLinearColor                                       SkyLuminanceFactor;                                         // 0x026C   (0x0010)  
	float                                              AerialPespectiveViewDistanceScale;                          // 0x027C   (0x0004)  
	float                                              HeightFogContribution;                                      // 0x0280   (0x0004)  
	float                                              TransmittanceMinLightElevationAngle;                        // 0x0284   (0x0004)  
	unsigned char                                      UnknownData01_5[0x24];                                      // 0x0288   (0x0024)  MISSED
	FGuid                                              bStaticLightingBuiltGUID;                                   // 0x02AC   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02BC   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
	// void SetSkyLuminanceFactor(FLinearColor NewValue);                                                                    // [0x2fd08a0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
	// void SetRayleighScatteringScale(float NewValue);                                                                      // [0x2fd0820] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighScattering
	// void SetRayleighScattering(FLinearColor NewValue);                                                                    // [0x2fd07a0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
	// void SetRayleighExponentialDistribution(float NewValue);                                                              // [0x2fd0720] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
	// void SetOtherAbsorptionScale(float NewValue);                                                                         // [0x2fd06a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetOtherAbsorption
	// void SetOtherAbsorption(FLinearColor NewValue);                                                                       // [0x2fd0620] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieScatteringScale
	// void SetMieScatteringScale(float NewValue);                                                                           // [0x2fd0390] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieScattering
	// void SetMieScattering(FLinearColor NewValue);                                                                         // [0x2fd0310] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
	// void SetMieExponentialDistribution(float NewValue);                                                                   // [0x2f63cc0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAnisotropy
	// void SetMieAnisotropy(float NewValue);                                                                                // [0x2f63c40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
	// void SetMieAbsorptionScale(float NewValue);                                                                           // [0x2fd0290] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAbsorption
	// void SetMieAbsorption(FLinearColor NewValue);                                                                         // [0x2fd0210] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetHeightFogContribution
	// void SetHeightFogContribution(float NewValue);                                                                        // [0x2fcff80] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
	// void SetAerialPespectiveViewDistanceScale(float NewValue);                                                            // [0x2fcfd70] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
	// void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, FVector& LightDirection);                         // [0x2fcfc80] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.SkyAtmosphere
/// Size: 0x0008 (0x000220 - 0x000228)
class ASkyAtmosphere : public AInfo
{ 
public:
	class USkyAtmosphereComponent*                     SkyAtmosphereComponent;                                     // 0x0220   (0x0008)  
};

/// Class /Script/Engine.SkyLightComponent
/// Size: 0x01D0 (0x000220 - 0x0003F0)
class USkyLightComponent : public ULightComponentBase
{ 
public:
	SDK_UNDEFINED(1,616) /* TEnumAsByte<ESkyLightSourceType> */ __um(SourceType);                                  // 0x0220   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0221   (0x0007)  MISSED
	class UTextureCube*                                Cubemap;                                                    // 0x0228   (0x0008)  
	float                                              SourceCubemapAngle;                                         // 0x0230   (0x0004)  
	int32_t                                            CubemapResolution;                                          // 0x0234   (0x0004)  
	float                                              SkyDistanceThreshold;                                       // 0x0238   (0x0004)  
	bool                                               bCaptureEmissiveOnly;                                       // 0x023C   (0x0001)  
	bool                                               bLowerHemisphereIsBlack;                                    // 0x023D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x023E   (0x0002)  MISSED
	FLinearColor                                       LowerHemisphereColor;                                       // 0x0240   (0x0010)  
	float                                              OcclusionMaxDistance;                                       // 0x0250   (0x0004)  
	float                                              Contrast;                                                   // 0x0254   (0x0004)  
	float                                              OcclusionExponent;                                          // 0x0258   (0x0004)  
	float                                              MinOcclusion;                                               // 0x025C   (0x0004)  
	FColor                                             OcclusionTint;                                              // 0x0260   (0x0004)  
	SDK_UNDEFINED(1,617) /* TEnumAsByte<EOcclusionCombineMode> */ __um(OcclusionCombineMode);                      // 0x0264   (0x0001)  
	unsigned char                                      UnknownData02_5[0xB3];                                      // 0x0265   (0x00B3)  MISSED
	class UTextureCube*                                BlendDestinationCubemap;                                    // 0x0318   (0x0008)  
	unsigned char                                      UnknownData03_6[0xD0];                                      // 0x0320   (0x00D0)  MISSED


	/// Functions
	// Function /Script/Engine.SkyLightComponent.SetVolumetricScatteringIntensity
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                            // [0x2fd0920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionTint
	// void SetOcclusionTint(FColor& InTint);                                                                                // [0x2fd0590] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionExponent
	// void SetOcclusionExponent(float InOcclusionExponent);                                                                 // [0x2fd0510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionContrast
	// void SetOcclusionContrast(float InOcclusionContrast);                                                                 // [0x2fd0490] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetMinOcclusion
	// void SetMinOcclusion(float InMinOcclusion);                                                                           // [0x2fd0410] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetLowerHemisphereColor
	// void SetLowerHemisphereColor(FLinearColor& InLowerHemisphereColor);                                                   // [0x2fd0180] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor);                                                                       // [0x2fd0100] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                // [0x2fd0080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetIndirectLightingIntensity
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                // [0x2fd0000] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetCubemapBlend
	// void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction); // [0x2fcfe70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetCubemap
	// void SetCubemap(class UTextureCube* NewCubemap);                                                                      // [0x2fcfdf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.RecaptureSky
	// void RecaptureSky();                                                                                                  // [0x2fcfd50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SlateBrushAsset
/// Size: 0x0088 (0x000028 - 0x0000B0)
class USlateBrushAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FSlateBrush                                        Brush;                                                      // 0x0028   (0x0088)  
};

/// Class /Script/Engine.SlateTextureAtlasInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class USlateTextureAtlasInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.SmokeTestCommandlet
/// Size: 0x0000 (0x000080 - 0x000080)
class USmokeTestCommandlet : public UCommandlet
{ 
public:
};

/// Class /Script/Engine.SoundAttenuation
/// Size: 0x03A0 (0x000028 - 0x0003C8)
class USoundAttenuation : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FSoundAttenuationSettings                          Attenuation;                                                // 0x0028   (0x03A0)  
};

/// Struct /Script/Engine.SoundClassProperties
/// Size: 0x0058 (0x000000 - 0x000058)
struct FSoundClassProperties
{ 
	float                                              Volume;                                                     // 0x0000   (0x0004)  
	float                                              Pitch;                                                      // 0x0004   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x0008   (0x0004)  
	float                                              AttenuationDistanceScale;                                   // 0x000C   (0x0004)  
	float                                              StereoBleed;                                                // 0x0010   (0x0004)  
	float                                              LFEBleed;                                                   // 0x0014   (0x0004)  
	float                                              VoiceCenterChannelVolume;                                   // 0x0018   (0x0004)  
	float                                              RadioFilterVolume;                                          // 0x001C   (0x0004)  
	float                                              RadioFilterVolumeThreshold;                                 // 0x0020   (0x0004)  
	bool                                               bApplyEffects : 1;                                          // 0x0024:0 (0x0001)  
	bool                                               bAlwaysPlay : 1;                                            // 0x0024:1 (0x0001)  
	bool                                               bIsUISound : 1;                                             // 0x0024:2 (0x0001)  
	bool                                               bIsMusic : 1;                                               // 0x0024:3 (0x0001)  
	bool                                               bCenterChannelOnly : 1;                                     // 0x0024:4 (0x0001)  
	bool                                               bApplyAmbientVolumes : 1;                                   // 0x0024:5 (0x0001)  
	bool                                               bReverb : 1;                                                // 0x0024:6 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0025   (0x0003)  MISSED
	float                                              Default2DReverbSendAmount;                                  // 0x0028   (0x0004)  
	SDK_UNDEFINED(1,618) /* TEnumAsByte<EAudioOutputTarget> */ __um(OutputTarget);                                 // 0x002C   (0x0001)  
	ESoundWaveLoadingBehavior                          LoadingBehavior;                                            // 0x002D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x002E   (0x0002)  MISSED
	class USoundSubmix*                                DefaultSubmix;                                              // 0x0030   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0038   (0x0020)  MISSED
};

/// Struct /Script/Engine.PassiveSoundMixModifier
/// Size: 0x0010 (0x000000 - 0x000010)
struct FPassiveSoundMixModifier
{ 
	class USoundMix*                                   SoundMix;                                                   // 0x0000   (0x0008)  
	float                                              MinVolumeThreshold;                                         // 0x0008   (0x0004)  
	float                                              MaxVolumeThreshold;                                         // 0x000C   (0x0004)  
};

/// Class /Script/Engine.SoundClass
/// Size: 0x0090 (0x000028 - 0x0000B8)
class USoundClass : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FSoundClassProperties                              Properties;                                                 // 0x0028   (0x0058)  
	TArray<class USoundClass*>                         ChildClasses;                                               // 0x0080   (0x0010)  
	TArray<FPassiveSoundMixModifier>                   PassiveSoundMixModifiers;                                   // 0x0090   (0x0010)  
	FSoundModulation                                   Modulation;                                                 // 0x00A0   (0x0010)  
	class USoundClass*                                 ParentClass;                                                // 0x00B0   (0x0008)  
};

/// Class /Script/Engine.SoundConcurrency
/// Size: 0x0020 (0x000028 - 0x000048)
class USoundConcurrency : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FSoundConcurrencySettings                          Concurrency;                                                // 0x0028   (0x0020)  
};

/// Class /Script/Engine.SoundCue
/// Size: 0x03D8 (0x000160 - 0x000538)
class USoundCue : public USoundBase
{ 
public:
	bool                                               bPrimeOnLoad : 1;                                           // 0x0160:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0161   (0x0007)  MISSED
	class USoundNode*                                  FirstNode;                                                  // 0x0168   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0170   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x0174   (0x0004)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0178   (0x03A0)  
	float                                              SubtitlePriority;                                           // 0x0518   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x051C   (0x0004)  MISSED
	bool                                               bOverrideAttenuation : 1;                                   // 0x0520:0 (0x0001)  
	bool                                               bExcludeFromRandomNodeBranchCulling : 1;                    // 0x0520:1 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x0521   (0x0003)  MISSED
	int32_t                                            CookedQualityIndex;                                         // 0x0524   (0x0004)  
	bool                                               bHasPlayWhenSilent : 1;                                     // 0x0528:0 (0x0001)  
	unsigned char                                      UnknownData03_6[0xF];                                       // 0x0529   (0x000F)  MISSED
};

/// Struct /Script/Engine.SourceEffectChainEntry
/// Size: 0x0010 (0x000000 - 0x000010)
struct FSourceEffectChainEntry
{ 
	class USoundEffectSourcePreset*                    Preset;                                                     // 0x0000   (0x0008)  
	bool                                               bBypass : 1;                                                // 0x0008:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundEffectSourcePresetChain
/// Size: 0x0018 (0x000028 - 0x000040)
class USoundEffectSourcePresetChain : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FSourceEffectChainEntry>                    Chain;                                                      // 0x0028   (0x0010)  
	bool                                               bPlayEffectChainTails : 1;                                  // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.SoundGroup
/// Size: 0x0020 (0x000000 - 0x000020)
struct FSoundGroup
{ 
	SDK_UNDEFINED(1,619) /* TEnumAsByte<ESoundGroup> */ __um(SoundGroup);                                          // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	SDK_UNDEFINED(16,620) /* FString */                __um(DisplayName);                                          // 0x0008   (0x0010)  
	bool                                               bAlwaysDecompressOnLoad : 1;                                // 0x0018:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              DecompressedDuration;                                       // 0x001C   (0x0004)  
};

/// Class /Script/Engine.SoundGroups
/// Size: 0x0060 (0x000028 - 0x000088)
class USoundGroups : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FSoundGroup>                                SoundGroupProfiles;                                         // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_6[0x50];                                      // 0x0038   (0x0050)  MISSED
};

/// Struct /Script/Engine.AudioEffectParameters
/// Size: 0x0008 (0x000000 - 0x000008)
struct FAudioEffectParameters
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.AudioEQEffect
/// Size: 0x0038 (0x000008 - 0x000040)
struct FAudioEQEffect : FAudioEffectParameters
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0008   (0x0008)  MISSED
	float                                              FrequencyCenter0;                                           // 0x0010   (0x0004)  
	float                                              Gain0;                                                      // 0x0014   (0x0004)  
	float                                              Bandwidth0;                                                 // 0x0018   (0x0004)  
	float                                              FrequencyCenter1;                                           // 0x001C   (0x0004)  
	float                                              Gain1;                                                      // 0x0020   (0x0004)  
	float                                              Bandwidth1;                                                 // 0x0024   (0x0004)  
	float                                              FrequencyCenter2;                                           // 0x0028   (0x0004)  
	float                                              Gain2;                                                      // 0x002C   (0x0004)  
	float                                              Bandwidth2;                                                 // 0x0030   (0x0004)  
	float                                              FrequencyCenter3;                                           // 0x0034   (0x0004)  
	float                                              Gain3;                                                      // 0x0038   (0x0004)  
	float                                              Bandwidth3;                                                 // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.SoundClassAdjuster
/// Size: 0x0020 (0x000000 - 0x000020)
struct FSoundClassAdjuster
{ 
	class USoundClass*                                 SoundClassObject;                                           // 0x0000   (0x0008)  
	float                                              VolumeAdjuster;                                             // 0x0008   (0x0004)  
	float                                              PitchAdjuster;                                              // 0x000C   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x0010   (0x0004)  
	bool                                               bApplyToChildren : 1;                                       // 0x0014:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0015   (0x0003)  MISSED
	float                                              VoiceCenterChannelVolumeAdjuster;                           // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundMix
/// Size: 0x0068 (0x000028 - 0x000090)
class USoundMix : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bApplyEQ : 1;                                               // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              EQPriority;                                                 // 0x002C   (0x0004)  
	FAudioEQEffect                                     EQSettings;                                                 // 0x0030   (0x0040)  
	TArray<FSoundClassAdjuster>                        SoundClassEffects;                                          // 0x0070   (0x0010)  
	float                                              InitialDelay;                                               // 0x0080   (0x0004)  
	float                                              FadeInTime;                                                 // 0x0084   (0x0004)  
	float                                              Duration;                                                   // 0x0088   (0x0004)  
	float                                              FadeOutTime;                                                // 0x008C   (0x0004)  
};

/// Class /Script/Engine.SoundNode
/// Size: 0x0020 (0x000028 - 0x000048)
class USoundNode : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<class USoundNode*>                          ChildNodes;                                                 // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0038   (0x0010)  MISSED
};

/// Class /Script/Engine.SoundNodeAssetReferencer
/// Size: 0x0000 (0x000048 - 0x000048)
class USoundNodeAssetReferencer : public USoundNode
{ 
public:
};

/// Class /Script/Engine.SoundNodeAttenuation
/// Size: 0x03B0 (0x000048 - 0x0003F8)
class USoundNodeAttenuation : public USoundNode
{ 
public:
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0048   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0050   (0x03A0)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x03F0:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x03F1   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundNodeBranch
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeBranch : public USoundNode
{ 
public:
	FName                                              BoolParameterName;                                          // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundNodeConcatenator
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeConcatenator : public USoundNode
{ 
public:
	TArray<float>                                      InputVolume;                                                // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeDelay
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeDelay : public USoundNode
{ 
public:
	float                                              DelayMin;                                                   // 0x0048   (0x0004)  
	float                                              DelayMax;                                                   // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.DialogueWaveParameter
/// Size: 0x0020 (0x000000 - 0x000020)
struct FDialogueWaveParameter
{ 
	class UDialogueWave*                               DialogueWave;                                               // 0x0000   (0x0008)  
	FDialogueContext                                   Context;                                                    // 0x0008   (0x0018)  
};

/// Class /Script/Engine.SoundNodeDialoguePlayer
/// Size: 0x0028 (0x000048 - 0x000070)
class USoundNodeDialoguePlayer : public USoundNode
{ 
public:
	FDialogueWaveParameter                             DialogueWaveParameter;                                      // 0x0048   (0x0020)  
	bool                                               bLooping : 1;                                               // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Struct /Script/Engine.DistanceDatum
/// Size: 0x0014 (0x000000 - 0x000014)
struct FDistanceDatum
{ 
	float                                              FadeInDistanceStart;                                        // 0x0000   (0x0004)  
	float                                              FadeInDistanceEnd;                                          // 0x0004   (0x0004)  
	float                                              FadeOutDistanceStart;                                       // 0x0008   (0x0004)  
	float                                              FadeOutDistanceEnd;                                         // 0x000C   (0x0004)  
	float                                              Volume;                                                     // 0x0010   (0x0004)  
};

/// Class /Script/Engine.SoundNodeDistanceCrossFade
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeDistanceCrossFade : public USoundNode
{ 
public:
	TArray<FDistanceDatum>                             CrossFadeInput;                                             // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeDoppler
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeDoppler : public USoundNode
{ 
public:
	float                                              DopplerIntensity;                                           // 0x0048   (0x0004)  
	bool                                               bUseSmoothing;                                              // 0x004C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              SmoothingInterpSpeed;                                       // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeEnveloper
/// Size: 0x0148 (0x000048 - 0x000190)
class USoundNodeEnveloper : public USoundNode
{ 
public:
	float                                              LoopStart;                                                  // 0x0048   (0x0004)  
	float                                              LoopEnd;                                                    // 0x004C   (0x0004)  
	float                                              DurationAfterLoop;                                          // 0x0050   (0x0004)  
	int32_t                                            LoopCount;                                                  // 0x0054   (0x0004)  
	bool                                               bLoopIndefinitely : 1;                                      // 0x0058:0 (0x0001)  
	bool                                               bLoop : 1;                                                  // 0x0058:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0059   (0x0007)  MISSED
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                          // 0x0060   (0x0008)  
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                           // 0x0068   (0x0008)  
	FRuntimeFloatCurve                                 VolumeCurve;                                                // 0x0070   (0x0088)  
	FRuntimeFloatCurve                                 PitchCurve;                                                 // 0x00F8   (0x0088)  
	float                                              PitchMin;                                                   // 0x0180   (0x0004)  
	float                                              PitchMax;                                                   // 0x0184   (0x0004)  
	float                                              VolumeMin;                                                  // 0x0188   (0x0004)  
	float                                              VolumeMax;                                                  // 0x018C   (0x0004)  
};

/// Class /Script/Engine.SoundNodeGroupControl
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeGroupControl : public USoundNode
{ 
public:
	TArray<int32_t>                                    GroupSizes;                                                 // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeLooping
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeLooping : public USoundNode
{ 
public:
	int32_t                                            LoopCount;                                                  // 0x0048   (0x0004)  
	bool                                               bLoopIndefinitely : 1;                                      // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.SoundNodeMature
/// Size: 0x0000 (0x000048 - 0x000048)
class USoundNodeMature : public USoundNode
{ 
public:
};

/// Class /Script/Engine.SoundNodeMixer
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeMixer : public USoundNode
{ 
public:
	TArray<float>                                      InputVolume;                                                // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeModulator
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeModulator : public USoundNode
{ 
public:
	float                                              PitchMin;                                                   // 0x0048   (0x0004)  
	float                                              PitchMax;                                                   // 0x004C   (0x0004)  
	float                                              VolumeMin;                                                  // 0x0050   (0x0004)  
	float                                              VolumeMax;                                                  // 0x0054   (0x0004)  
};

/// Struct /Script/Engine.ModulatorContinuousParams
/// Size: 0x0020 (0x000000 - 0x000020)
struct FModulatorContinuousParams
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	float                                              Default;                                                    // 0x0008   (0x0004)  
	float                                              MinInput;                                                   // 0x000C   (0x0004)  
	float                                              MaxInput;                                                   // 0x0010   (0x0004)  
	float                                              MinOutput;                                                  // 0x0014   (0x0004)  
	float                                              MaxOutput;                                                  // 0x0018   (0x0004)  
	SDK_UNDEFINED(1,621) /* TEnumAsByte<ModulationParamMode> */ __um(ParamMode);                                   // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Class /Script/Engine.SoundNodeModulatorContinuous
/// Size: 0x0040 (0x000048 - 0x000088)
class USoundNodeModulatorContinuous : public USoundNode
{ 
public:
	FModulatorContinuousParams                         PitchModulationParams;                                      // 0x0048   (0x0020)  
	FModulatorContinuousParams                         VolumeModulationParams;                                     // 0x0068   (0x0020)  
};

/// Class /Script/Engine.SoundNodeOscillator
/// Size: 0x0028 (0x000048 - 0x000070)
class USoundNodeOscillator : public USoundNode
{ 
public:
	bool                                               bModulateVolume : 1;                                        // 0x0048:0 (0x0001)  
	bool                                               bModulatePitch : 1;                                         // 0x0048:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              AmplitudeMin;                                               // 0x004C   (0x0004)  
	float                                              AmplitudeMax;                                               // 0x0050   (0x0004)  
	float                                              FrequencyMin;                                               // 0x0054   (0x0004)  
	float                                              FrequencyMax;                                               // 0x0058   (0x0004)  
	float                                              OffsetMin;                                                  // 0x005C   (0x0004)  
	float                                              OffsetMax;                                                  // 0x0060   (0x0004)  
	float                                              CenterMin;                                                  // 0x0064   (0x0004)  
	float                                              CenterMax;                                                  // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeParamCrossFade
/// Size: 0x0008 (0x000058 - 0x000060)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{ 
public:
	FName                                              ParamName;                                                  // 0x0058   (0x0008)  
};

/// Class /Script/Engine.SoundNodeQualityLevel
/// Size: 0x0000 (0x000048 - 0x000048)
class USoundNodeQualityLevel : public USoundNode
{ 
public:
};

/// Class /Script/Engine.SoundNodeRandom
/// Size: 0x0030 (0x000048 - 0x000078)
class USoundNodeRandom : public USoundNode
{ 
public:
	TArray<float>                                      Weights;                                                    // 0x0048   (0x0010)  
	TArray<bool>                                       HasBeenUsed;                                                // 0x0058   (0x0010)  
	int32_t                                            NumRandomUsed;                                              // 0x0068   (0x0004)  
	int32_t                                            PreselectAtLevelLoad;                                       // 0x006C   (0x0004)  
	bool                                               bShouldExcludeFromBranchCulling : 1;                        // 0x0070:0 (0x0001)  
	bool                                               bSoundCueExcludedFromBranchCulling : 1;                     // 0x0070:1 (0x0001)  
	bool                                               bRandomizeWithoutReplacement : 1;                           // 0x0070:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundNodeSoundClass
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeSoundClass : public USoundNode
{ 
public:
	class USoundClass*                                 SoundClassOverride;                                         // 0x0048   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.SoundNodeSwitch
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeSwitch : public USoundNode
{ 
public:
	FName                                              IntParameterName;                                           // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundNodeWaveParam
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeWaveParam : public USoundNode
{ 
public:
	FName                                              WaveParameterName;                                          // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundNodeWavePlayer
/// Size: 0x0038 (0x000048 - 0x000080)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{ 
public:
	SDK_UNDEFINED(40,622) /* TWeakObjectPtr<USoundWave*> */ __um(SoundWaveAssetPtr);                               // 0x0048   (0x0028)  
	class USoundWave*                                  SoundWave;                                                  // 0x0070   (0x0008)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x0078:0 (0x0001)  MISSED
	bool                                               bLooping : 1;                                               // 0x0078:1 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundSourceBus
/// Size: 0x0018 (0x000308 - 0x000320)
class USoundSourceBus : public USoundWave
{ 
public:
	ESourceBusChannels                                 SourceBusChannels;                                          // 0x0308   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0309   (0x0003)  MISSED
	float                                              SourceBusDuration;                                          // 0x030C   (0x0004)  
	bool                                               bAutoDeactivateWhenSilent : 1;                              // 0x0310:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0xF];                                       // 0x0311   (0x000F)  MISSED
};

/// Class /Script/Engine.SoundSubmixBase
/// Size: 0x0010 (0x000028 - 0x000038)
class USoundSubmixBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<class USoundSubmixBase*>                    ChildSubmixes;                                              // 0x0028   (0x0010)  
};

/// Class /Script/Engine.SoundSubmixWithParentBase
/// Size: 0x0008 (0x000038 - 0x000040)
class USoundSubmixWithParentBase : public USoundSubmixBase
{ 
public:
	class USoundSubmixBase*                            ParentSubmix;                                               // 0x0038   (0x0008)  
};

/// Class /Script/Engine.SoundSubmix
/// Size: 0x0048 (0x000040 - 0x000088)
class USoundSubmix : public USoundSubmixWithParentBase
{ 
public:
	bool                                               bMuteWhenBackgrounded : 1;                                  // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x0041   (0x0007)  MISSED
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                          // 0x0048   (0x0010)  
	class USoundfieldEncodingSettingsBase*             AmbisonicsPluginSettings;                                   // 0x0058   (0x0008)  
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x0060   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x0064   (0x0004)  
	float                                              OutputVolume;                                               // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x006C   (0x0004)  MISSED
	SDK_UNDEFINED(16,623) /* FMulticastInlineDelegate */ __um(OnSubmixRecordedFileDone);                           // 0x0070   (0x0010)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0080   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.SoundSubmix.StopRecordingOutput
	// void StopRecordingOutput(class UObject* WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, class USoundWave* ExistingSoundWaveToOverwrite); // [0x2fdd690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StopEnvelopeFollowing
	// void StopEnvelopeFollowing(class UObject* WorldContextObject);                                                        // [0x2fdd610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartRecordingOutput
	// void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration);                                 // [0x2fdd540] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartEnvelopeFollowing
	// void StartEnvelopeFollowing(class UObject* WorldContextObject);                                                       // [0x2fdd4c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.SetSubmixOutputVolume
	// void SetSubmixOutputVolume(class UObject* WorldContextObject, float InOutputVolume);                                  // [0x2fdce90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.AddEnvelopeFollowerDelegate
	// void AddEnvelopeFollowerDelegate(class UObject* WorldContextObject, FDelegateProperty& OnSubmixEnvelopeBP);           // [0x2fd80d0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.SoundfieldSubmix
/// Size: 0x0028 (0x000040 - 0x000068)
class USoundfieldSubmix : public USoundSubmixWithParentBase
{ 
public:
	FName                                              SoundfieldEncodingFormat;                                   // 0x0040   (0x0008)  
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                           // 0x0048   (0x0008)  
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                      // 0x0050   (0x0010)  
	class UClass*                                      EncodingSettingsClass;                                      // 0x0060   (0x0008)  
};

/// Class /Script/Engine.EndpointSubmix
/// Size: 0x0018 (0x000038 - 0x000050)
class UEndpointSubmix : public USoundSubmixBase
{ 
public:
	FName                                              EndpointType;                                               // 0x0038   (0x0008)  
	class UClass*                                      EndpointSettingsClass;                                      // 0x0040   (0x0008)  
	class UAudioEndpointSettingsBase*                  EndpointSettings;                                           // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundfieldEndpointSubmix
/// Size: 0x0038 (0x000038 - 0x000070)
class USoundfieldEndpointSubmix : public USoundSubmixBase
{ 
public:
	FName                                              SoundfieldEndpointType;                                     // 0x0038   (0x0008)  
	class UClass*                                      EndpointSettingsClass;                                      // 0x0040   (0x0008)  
	class USoundfieldEndpointSettingsBase*             EndpointSettings;                                           // 0x0048   (0x0008)  
	class UClass*                                      EncodingSettingsClass;                                      // 0x0050   (0x0008)  
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                           // 0x0058   (0x0008)  
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                      // 0x0060   (0x0010)  
};

/// Class /Script/Engine.SpectatorPawn
/// Size: 0x0000 (0x0002A8 - 0x0002A8)
class ASpectatorPawn : public ADefaultPawn
{ 
public:
};

/// Class /Script/Engine.SpectatorPawnMovement
/// Size: 0x0008 (0x000150 - 0x000158)
class USpectatorPawnMovement : public UFloatingPawnMovement
{ 
public:
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0150:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0151   (0x0007)  MISSED
};

/// Class /Script/Engine.SphereReflectionCapture
/// Size: 0x0008 (0x000228 - 0x000230)
class ASphereReflectionCapture : public AReflectionCapture
{ 
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                          // 0x0228   (0x0008)  
};

/// Class /Script/Engine.SphereReflectionCaptureComponent
/// Size: 0x0010 (0x000270 - 0x000280)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              InfluenceRadius;                                            // 0x0268   (0x0004)  
	float                                              CaptureDistanceScale;                                       // 0x026C   (0x0004)  
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                     // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0278   (0x0008)  MISSED
};

/// Class /Script/Engine.SplineMetadata
/// Size: 0x0000 (0x000028 - 0x000028)
class USplineMetadata : public UObject
{ 
public:
};

/// Class /Script/Engine.SplineMeshActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ASplineMeshActor : public AActor
{ 
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                        // 0x0220   (0x0008)  
};

/// Struct /Script/Engine.SplineMeshParams
/// Size: 0x0058 (0x000000 - 0x000058)
struct FSplineMeshParams
{ 
	FVector                                            StartPos;                                                   // 0x0000   (0x000C)  
	FVector                                            StartTangent;                                               // 0x000C   (0x000C)  
	FVector2D                                          StartScale;                                                 // 0x0018   (0x0008)  
	float                                              StartRoll;                                                  // 0x0020   (0x0004)  
	FVector2D                                          StartOffset;                                                // 0x0024   (0x0008)  
	FVector                                            EndPos;                                                     // 0x002C   (0x000C)  
	FVector2D                                          EndScale;                                                   // 0x0038   (0x0008)  
	FVector                                            EndTangent;                                                 // 0x0040   (0x000C)  
	float                                              EndRoll;                                                    // 0x004C   (0x0004)  
	FVector2D                                          EndOffset;                                                  // 0x0050   (0x0008)  
};

/// Class /Script/Engine.SplineMeshComponent
/// Size: 0x0090 (0x0004A0 - 0x000530)
class USplineMeshComponent : public UStaticMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0498   (0x0008)  MISSED
	FSplineMeshParams                                  SplineParams;                                               // 0x04A0   (0x0058)  
	FVector                                            SplineUpDir;                                                // 0x04F8   (0x000C)  
	float                                              SplineBoundaryMin;                                          // 0x0504   (0x0004)  
	FGuid                                              CachedMeshBodySetupGuid;                                    // 0x0508   (0x0010)  
	class UBodySetup*                                  BodySetup;                                                  // 0x0518   (0x0008)  
	float                                              SplineBoundaryMax;                                          // 0x0520   (0x0004)  
	bool                                               bAllowSplineEditingPerInstance : 1;                         // 0x0524:0 (0x0001)  
	bool                                               bSmoothInterpRollScale : 1;                                 // 0x0524:1 (0x0001)  
	bool                                               bMeshDirty : 1;                                             // 0x0524:2 (0x0001)  
	SDK_UNDEFINED(1,624) /* TEnumAsByte<ESplineMeshAxis> */ __um(ForwardAxis);                                     // 0x0525   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0526   (0x0002)  MISSED
	float                                              VirtualTextureMainPassMaxDrawDistance;                      // 0x0528   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x052C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.SplineMeshComponent.UpdateMesh
	// void UpdateMesh();                                                                                                    // [0x2fe1180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartTangent
	// void SetStartTangent(FVector StartTangent, bool bUpdateMesh);                                                         // [0x2fe10a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartScale
	// void SetStartScale(FVector2D StartScale, bool bUpdateMesh);                                                           // [0x2fe0fe0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartRoll
	// void SetStartRoll(float StartRoll, bool bUpdateMesh);                                                                 // [0x2fe0f10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartPosition
	// void SetStartPosition(FVector StartPos, bool bUpdateMesh);                                                            // [0x2fe0e30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartOffset
	// void SetStartOffset(FVector2D StartOffset, bool bUpdateMesh);                                                         // [0x2fe0d70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartAndEnd
	// void SetStartAndEnd(FVector StartPos, FVector StartTangent, FVector EndPos, FVector EndTangent, bool bUpdateMesh);    // [0x2fe0bb0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetSplineUpDir
	// void SetSplineUpDir(FVector& InSplineUpDir, bool bUpdateMesh);                                                        // [0x2fe0ad0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetForwardAxis
	// void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);                                    // [0x2fe0800] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndTangent
	// void SetEndTangent(FVector EndTangent, bool bUpdateMesh);                                                             // [0x2fe0720] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndScale
	// void SetEndScale(FVector2D EndScale, bool bUpdateMesh);                                                               // [0x2fe0660] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndRoll
	// void SetEndRoll(float EndRoll, bool bUpdateMesh);                                                                     // [0x2fe0590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndPosition
	// void SetEndPosition(FVector EndPos, bool bUpdateMesh);                                                                // [0x2fe04b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndOffset
	// void SetEndOffset(FVector2D EndOffset, bool bUpdateMesh);                                                             // [0x2fe03f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMin
	// void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);                                                           // [0x2fe0320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMax
	// void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);                                                           // [0x2fe0250] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.GetStartTangent
	// FVector GetStartTangent();                                                                                            // [0x2fe0150] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartScale
	// FVector2D GetStartScale();                                                                                            // [0x2fe0110] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartRoll
	// float GetStartRoll();                                                                                                 // [0x2fe00e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartPosition
	// FVector GetStartPosition();                                                                                           // [0x2fe00a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartOffset
	// FVector2D GetStartOffset();                                                                                           // [0x2fe0060] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetSplineUpDir
	// FVector GetSplineUpDir();                                                                                             // [0x2fe0020] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetForwardAxis
	// TEnumAsByte<ESplineMeshAxis> GetForwardAxis();                                                                        // [0x2fdfc10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndTangent
	// FVector GetEndTangent();                                                                                              // [0x2fdfbd0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndScale
	// FVector2D GetEndScale();                                                                                              // [0x2fdfb90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndRoll
	// float GetEndRoll();                                                                                                   // [0x2fdfb60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndPosition
	// FVector GetEndPosition();                                                                                             // [0x2fdfb20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndOffset
	// FVector2D GetEndOffset();                                                                                             // [0x2fdfae0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMin
	// float GetBoundaryMin();                                                                                               // [0x2fdfa10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMax
	// float GetBoundaryMax();                                                                                               // [0x2fdf9e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SpotLightComponent
/// Size: 0x0010 (0x000370 - 0x000380)
class USpotLightComponent : public UPointLightComponent
{ 
public:
	float                                              InnerConeAngle;                                             // 0x0368   (0x0004)  
	float                                              OuterConeAngle;                                             // 0x036C   (0x0004)  
	float                                              LightShaftConeAngle;                                        // 0x0370   (0x0004)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0374   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.SpotLightComponent.SetOuterConeAngle
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                      // [0x2fe0a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SpotLightComponent.SetInnerConeAngle
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                      // [0x2fe0950] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.StaticMaterial
/// Size: 0x0030 (0x000000 - 0x000030)
struct FStaticMaterial
{ 
	class UMaterialInterface*                          MaterialInterface;                                          // 0x0000   (0x0008)  
	FName                                              MaterialSlotName;                                           // 0x0008   (0x0008)  
	FName                                              ImportedMaterialSlotName;                                   // 0x0010   (0x0008)  
	FMeshUVChannelInfo                                 UVChannelData;                                              // 0x0018   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.StaticMesh
/// Size: 0x00F8 (0x000040 - 0x000138)
class UStaticMesh : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0040   (0x0020)  MISSED
	FPerPlatformInt                                    MinLOD;                                                     // 0x0060   (0x0004)  
	float                                              LpvBiasMultiplier;                                          // 0x0064   (0x0004)  
	TArray<FStaticMaterial>                            StaticMaterials;                                            // 0x0068   (0x0010)  
	float                                              LightmapUVDensity;                                          // 0x0078   (0x0004)  
	int32_t                                            LightMapResolution;                                         // 0x007C   (0x0004)  
	int32_t                                            LightMapCoordinateIndex;                                    // 0x0080   (0x0004)  
	float                                              DistanceFieldSelfShadowBias;                                // 0x0084   (0x0004)  
	class UBodySetup*                                  BodySetup;                                                  // 0x0088   (0x0008)  
	int32_t                                            LODForCollision;                                            // 0x0090   (0x0004)  
	bool                                               bGenerateMeshDistanceField : 1;                             // 0x0094:0 (0x0001)  
	bool                                               bStripComplexCollisionForConsole : 1;                       // 0x0094:1 (0x0001)  
	bool                                               bHasNavigationData : 1;                                     // 0x0094:2 (0x0001)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x0094:3 (0x0001)  
	bool                                               bSupportPhysicalMaterialMasks : 1;                          // 0x0094:4 (0x0001)  
	bool                                               bIsBuiltAtRuntime : 1;                                      // 0x0094:5 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0094:6 (0x0001)  MISSED
	bool                                               bAllowCPUAccess : 1;                                        // 0x0094:7 (0x0001)  
	bool                                               bSupportGpuUniformlyDistributedSampling : 1;                // 0x0095:0 (0x0001)  
	unsigned char                                      UnknownData02_4[0x22];                                      // 0x0096   (0x0022)  MISSED
	TArray<class UStaticMeshSocket*>                   Sockets;                                                    // 0x00B8   (0x0010)  
	unsigned char                                      UnknownData03_5[0x10];                                      // 0x00C8   (0x0010)  MISSED
	FVector                                            PositiveBoundsExtension;                                    // 0x00D8   (0x000C)  
	FVector                                            NegativeBoundsExtension;                                    // 0x00E4   (0x000C)  
	FBoxSphereBounds                                   ExtendedBounds;                                             // 0x00F0   (0x001C)  
	int32_t                                            ElementToIgnoreForTexFactor;                                // 0x010C   (0x0004)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0110   (0x0010)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x0120   (0x0008)  MISSED
	class UObject*                                     EditableMesh;                                               // 0x0128   (0x0008)  
	class UNavCollisionBase*                           NavCollision;                                               // 0x0130   (0x0008)  


	/// Functions
	// Function /Script/Engine.StaticMesh.RemoveSocket
	// void RemoveSocket(class UStaticMeshSocket* Socket);                                                                   // [0x2fe01d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.GetNumSections
	// int32_t GetNumSections(int32_t InLOD);                                                                                // [0x2fdff90] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetNumLODs
	// int32_t GetNumLODs();                                                                                                 // [0x2fdff60] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForPlatforms
	// void GetMinimumLODForPlatforms(TMap<FName, int32_t>& PlatformMinimumLODs);                                            // [0x2fdfde0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForPlatform
	// int32_t GetMinimumLODForPlatform(FName& PlatformName);                                                                // [0x2fdfd60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMaterialIndex
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                     // [0x2fdfcd0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMaterial
	// class UMaterialInterface* GetMaterial(int32_t MaterialIndex);                                                         // [0x2fdfc40] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetBounds
	// FBoxSphereBounds GetBounds();                                                                                         // [0x2fdfa90] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetBoundingBox
	// FBox GetBoundingBox();                                                                                                // [0x2fdfa40] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.FindSocket
	// class UStaticMeshSocket* FindSocket(FName InSocketName);                                                              // [0x2fdf950] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.CreateStaticMeshDescription
	// class UStaticMeshDescription* CreateStaticMeshDescription(class UObject* Outer);                                      // [0x2fdf8d0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.BuildFromStaticMeshDescriptions
	// void BuildFromStaticMeshDescriptions(TArray<UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision); // [0x2fdf7d0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.AddSocket
	// void AddSocket(class UStaticMeshSocket* Socket);                                                                      // [0x2fdf750] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.AddMaterial
	// FName AddMaterial(class UMaterialInterface* Material);                                                                // [0x2fdf6c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StaticMeshSocket
/// Size: 0x0040 (0x000028 - 0x000068)
class UStaticMeshSocket : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FName                                              SocketName;                                                 // 0x0028   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0030   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x003C   (0x000C)  
	FVector                                            RelativeScale;                                              // 0x0048   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0054   (0x0004)  MISSED
	SDK_UNDEFINED(16,625) /* FString */                __um(Tag);                                                  // 0x0058   (0x0010)  
};

/// Struct /Script/Engine.EquirectProps
/// Size: 0x0048 (0x000000 - 0x000048)
struct FEquirectProps
{ 
	FBox2D                                             LeftUVRect;                                                 // 0x0000   (0x0014)  
	FBox2D                                             RightUVRect;                                                // 0x0014   (0x0014)  
	FVector2D                                          LeftScale;                                                  // 0x0028   (0x0008)  
	FVector2D                                          RightScale;                                                 // 0x0030   (0x0008)  
	FVector2D                                          LeftBias;                                                   // 0x0038   (0x0008)  
	FVector2D                                          RightBias;                                                  // 0x0040   (0x0008)  
};

/// Class /Script/Engine.StereoLayerComponent
/// Size: 0x00F0 (0x0001F0 - 0x0002E0)
class UStereoLayerComponent : public USceneComponent
{ 
public:
	bool                                               bLiveTexture : 1;                                           // 0x01F0:0 (0x0001)  
	bool                                               bSupportsDepth : 1;                                         // 0x01F0:1 (0x0001)  
	bool                                               bNoAlphaChannel : 1;                                        // 0x01F0:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x7];                                       // 0x01F1   (0x0007)  MISSED
	class UTexture*                                    Texture;                                                    // 0x01F8   (0x0008)  
	class UTexture*                                    LeftTexture;                                                // 0x0200   (0x0008)  
	bool                                               bQuadPreserveTextureRatio : 1;                              // 0x0208:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x0209   (0x0003)  MISSED
	FVector2D                                          QuadSize;                                                   // 0x020C   (0x0008)  
	FBox2D                                             UVRect;                                                     // 0x0214   (0x0014)  
	float                                              CylinderRadius;                                             // 0x0228   (0x0004)  
	float                                              CylinderOverlayArc;                                         // 0x022C   (0x0004)  
	int32_t                                            CylinderHeight;                                             // 0x0230   (0x0004)  
	FEquirectProps                                     EquirectProps;                                              // 0x0234   (0x0048)  
	SDK_UNDEFINED(1,626) /* TEnumAsByte<EStereoLayerType> */ __um(StereoLayerType);                                // 0x027C   (0x0001)  
	SDK_UNDEFINED(1,627) /* TEnumAsByte<EStereoLayerShape> */ __um(StereoLayerShape);                              // 0x027D   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x027E   (0x0002)  MISSED
	class UStereoLayerShape*                           Shape;                                                      // 0x0280   (0x0008)  
	int32_t                                            Priority;                                                   // 0x0288   (0x0004)  
	unsigned char                                      UnknownData03_6[0x54];                                      // 0x028C   (0x0054)  MISSED


	/// Functions
	// Function /Script/Engine.StereoLayerComponent.SetUVRect
	// void SetUVRect(FBox2D InUVRect);                                                                                      // [0x2fe4f30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetTexture
	// void SetTexture(class UTexture* InTexture);                                                                           // [0x2fe4eb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetQuadSize
	// void SetQuadSize(FVector2D InQuadSize);                                                                               // [0x2fe4b80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetPriority
	// void SetPriority(int32_t InPriority);                                                                                 // [0x2fe4b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetLeftTexture
	// void SetLeftTexture(class UTexture* InTexture);                                                                       // [0x2fe4980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetEquirectProps
	// void SetEquirectProps(FEquirectProps InScaleBiases);                                                                  // [0x2fe4680] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.MarkTextureForUpdate
	// void MarkTextureForUpdate();                                                                                          // [0x2fe4560] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.GetUVRect
	// FBox2D GetUVRect();                                                                                                   // [0x2fe4530] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetTexture
	// class UTexture* GetTexture();                                                                                         // [0x2fe4510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetQuadSize
	// FVector2D GetQuadSize();                                                                                              // [0x2fe44e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetPriority
	// int32_t GetPriority();                                                                                                // [0x2fe44c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetLeftTexture
	// class UTexture* GetLeftTexture();                                                                                     // [0x2fe43c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.StereoLayerShape
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerShape : public UObject
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeQuad
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerShapeQuad : public UStereoLayerShape
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeCylinder
/// Size: 0x0010 (0x000028 - 0x000038)
class UStereoLayerShapeCylinder : public UStereoLayerShape
{ 
public:
	float                                              Radius;                                                     // 0x0028   (0x0004)  
	float                                              OverlayArc;                                                 // 0x002C   (0x0004)  
	int32_t                                            Height;                                                     // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.StereoLayerShapeCylinder.SetRadius
	// void SetRadius(float InRadius);                                                                                       // [0x2fe4c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerShapeCylinder.SetOverlayArc
	// void SetOverlayArc(float InOverlayArc);                                                                               // [0x2fe4a80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerShapeCylinder.SetHeight
	// void SetHeight(int32_t InHeight);                                                                                     // [0x2fe4900] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StereoLayerShapeCubemap
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerShapeCubemap : public UStereoLayerShape
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeEquirect
/// Size: 0x0048 (0x000028 - 0x000070)
class UStereoLayerShapeEquirect : public UStereoLayerShape
{ 
public:
	FBox2D                                             LeftUVRect;                                                 // 0x0028   (0x0014)  
	FBox2D                                             RightUVRect;                                                // 0x003C   (0x0014)  
	FVector2D                                          LeftScale;                                                  // 0x0050   (0x0008)  
	FVector2D                                          RightScale;                                                 // 0x0058   (0x0008)  
	FVector2D                                          LeftBias;                                                   // 0x0060   (0x0008)  
	FVector2D                                          RightBias;                                                  // 0x0068   (0x0008)  


	/// Functions
	// Function /Script/Engine.StereoLayerShapeEquirect.SetEquirectProps
	// void SetEquirectProps(FEquirectProps InScaleBiases);                                                                  // [0x2fe4780] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StereoLayerFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.StereoLayerFunctionLibrary.ShowSplashScreen
	// void ShowSplashScreen();                                                                                              // [0x213b600] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.SetSplashScreen
	// void SetSplashScreen(class UTexture* Texture, FVector2D Scale, FVector Offset, bool bShowLoadingMovie, bool bShowOnSet); // [0x2fe4d10] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.HideSplashScreen
	// void HideSplashScreen();                                                                                              // [0x213a710] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen
	// void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);                                                           // [0x2fe4340] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.StringTable
/// Size: 0x0018 (0x000028 - 0x000040)
class UStringTable : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0000   (0x0040)  MISSED
};

/// Struct /Script/Engine.SubsurfaceProfileStruct
/// Size: 0x008C (0x000000 - 0x00008C)
struct FSubsurfaceProfileStruct
{ 
	FLinearColor                                       SurfaceAlbedo;                                              // 0x0000   (0x0010)  
	FLinearColor                                       MeanFreePathColor;                                          // 0x0010   (0x0010)  
	float                                              MeanFreePathDistance;                                       // 0x0020   (0x0004)  
	float                                              WorldUnitScale;                                             // 0x0024   (0x0004)  
	bool                                               bEnableBurley;                                              // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              ScatterRadius;                                              // 0x002C   (0x0004)  
	FLinearColor                                       SubsurfaceColor;                                            // 0x0030   (0x0010)  
	FLinearColor                                       FalloffColor;                                               // 0x0040   (0x0010)  
	FLinearColor                                       BoundaryColorBleed;                                         // 0x0050   (0x0010)  
	float                                              ExtinctionScale;                                            // 0x0060   (0x0004)  
	float                                              NormalScale;                                                // 0x0064   (0x0004)  
	float                                              ScatteringDistribution;                                     // 0x0068   (0x0004)  
	float                                              IOR;                                                        // 0x006C   (0x0004)  
	float                                              Roughness0;                                                 // 0x0070   (0x0004)  
	float                                              Roughness1;                                                 // 0x0074   (0x0004)  
	float                                              LobeMix;                                                    // 0x0078   (0x0004)  
	FLinearColor                                       TransmissionTintColor;                                      // 0x007C   (0x0010)  
};

/// Class /Script/Engine.SubsurfaceProfile
/// Size: 0x0090 (0x000028 - 0x0000B8)
class USubsurfaceProfile : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FSubsurfaceProfileStruct                           Settings;                                                   // 0x0028   (0x008C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/Engine.SubsystemBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetWorldSubsystem
	// class UWorldSubsystem* GetWorldSubsystem(class UObject* ContextObject, class UClass* Class);                          // [0x2fe77a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController
	// class ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(class APlayerController* PlayerController, class UClass* Class); // [0x2fe75a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem
	// class ULocalPlayerSubsystem* GetLocalPlayerSubsystem(class UObject* ContextObject, class UClass* Class);              // [0x2fe7660] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem
	// class UGameInstanceSubsystem* GetGameInstanceSubsystem(class UObject* ContextObject, class UClass* Class);            // [0x2fe74e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetEngineSubsystem
	// class UEngineSubsystem* GetEngineSubsystem(class UClass* Class);                                                      // [0x2fe7460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.SubUVAnimation
/// Size: 0x0040 (0x000028 - 0x000068)
class USubUVAnimation : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	class UTexture2D*                                  SubUVTexture;                                               // 0x0028   (0x0008)  
	int32_t                                            SubImages_Horizontal;                                       // 0x0030   (0x0004)  
	int32_t                                            SubImages_Vertical;                                         // 0x0034   (0x0004)  
	SDK_UNDEFINED(1,628) /* TEnumAsByte<ESubUVBoundingVertexCount> */ __um(BoundingMode);                          // 0x0038   (0x0001)  
	SDK_UNDEFINED(1,629) /* TEnumAsByte<EOpacitySourceMode> */ __um(OpacitySourceMode);                            // 0x0039   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x003A   (0x0002)  MISSED
	float                                              AlphaThreshold;                                             // 0x003C   (0x0004)  
	unsigned char                                      UnknownData02_6[0x28];                                      // 0x0040   (0x0028)  MISSED
};

/// Class /Script/Engine.TimecodeProvider
/// Size: 0x0008 (0x000028 - 0x000030)
class UTimecodeProvider : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	float                                              FrameDelay;                                                 // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.TimecodeProvider.GetTimecode
	// FTimecode GetTimecode();                                                                                              // [0x2feada0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetSynchronizationState
	// ETimecodeProviderSynchronizationState GetSynchronizationState();                                                      // [0x2fead70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetQualifiedFrameTime
	// FQualifiedFrameTime GetQualifiedFrameTime();                                                                          // [0x2fead30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetFrameRate
	// FFrameRate GetFrameRate();                                                                                            // [0x2feac60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetDelayedTimecode
	// FTimecode GetDelayedTimecode();                                                                                       // [0x2feac20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
	// FQualifiedFrameTime GetDelayedQualifiedFrameTime();                                                                   // [0x2feabe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SystemTimeTimecodeProvider
/// Size: 0x0010 (0x000030 - 0x000040)
class USystemTimeTimecodeProvider : public UTimecodeProvider
{ 
public:
	FFrameRate                                         FrameRate;                                                  // 0x0030   (0x0008)  
	bool                                               bGenerateFullFrame;                                         // 0x0038   (0x0001)  
	bool                                               bUseHighPerformanceClock;                                   // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x003A   (0x0006)  MISSED
};

/// Class /Script/Engine.TargetPoint
/// Size: 0x0000 (0x000220 - 0x000220)
class ATargetPoint : public AActor
{ 
public:
};

/// Class /Script/Engine.TextPropertyTestObject
/// Size: 0x0048 (0x000028 - 0x000070)
class UTextPropertyTestObject : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	SDK_UNDEFINED(24,630) /* FText */                  __um(DefaultedText);                                        // 0x0028   (0x0018)  
	SDK_UNDEFINED(24,631) /* FText */                  __um(UndefaultedText);                                      // 0x0040   (0x0018)  
	SDK_UNDEFINED(24,632) /* FText */                  __um(TransientText);                                        // 0x0058   (0x0018)  
};

/// Class /Script/Engine.TextRenderComponent
/// Size: 0x0050 (0x000410 - 0x000460)
class UTextRenderComponent : public UPrimitiveComponent
{ 
public:
	SDK_UNDEFINED(24,633) /* FText */                  __um(Text);                                                 // 0x0408   (0x0018)  
	class UMaterialInterface*                          TextMaterial;                                               // 0x0420   (0x0008)  
	class UFont*                                       Font;                                                       // 0x0428   (0x0008)  
	SDK_UNDEFINED(1,634) /* TEnumAsByte<EHorizTextAligment> */ __um(HorizontalAlignment);                          // 0x0430   (0x0001)  
	SDK_UNDEFINED(1,635) /* TEnumAsByte<EVerticalTextAligment> */ __um(VerticalAlignment);                         // 0x0431   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0432   (0x0002)  MISSED
	FColor                                             TextRenderColor;                                            // 0x0434   (0x0004)  
	float                                              XScale;                                                     // 0x0438   (0x0004)  
	float                                              YScale;                                                     // 0x043C   (0x0004)  
	float                                              WorldSize;                                                  // 0x0440   (0x0004)  
	float                                              InvDefaultSize;                                             // 0x0444   (0x0004)  
	float                                              HorizSpacingAdjust;                                         // 0x0448   (0x0004)  
	float                                              VertSpacingAdjust;                                          // 0x044C   (0x0004)  
	bool                                               bAlwaysRenderAsText : 1;                                    // 0x0450:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0xF];                                       // 0x0451   (0x000F)  MISSED


	/// Functions
	// Function /Script/Engine.TextRenderComponent.SetYScale
	// void SetYScale(float value);                                                                                          // [0xb0ff30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetXScale
	// void SetXScale(float value);                                                                                          // [0x2fe7dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetWorldSize
	// void SetWorldSize(float value);                                                                                       // [0x2fe7d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetVertSpacingAdjust
	// void SetVertSpacingAdjust(float value);                                                                               // [0x2fe7c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> value);                                                  // [0x2fe7cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetTextRenderColor
	// void SetTextRenderColor(FColor value);                                                                                // [0x2fe7bd0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetTextMaterial
	// void SetTextMaterial(class UMaterialInterface* Material);                                                             // [0x2fe7b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetText
	// void SetText(FString value);                                                                                          // [0x2fe7ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetHorizSpacingAdjust
	// void SetHorizSpacingAdjust(float value);                                                                              // [0x2fe79b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> value);                                                   // [0x2fe7a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetFont
	// void SetFont(class UFont* value);                                                                                     // [0x2fe7930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.K2_SetText
	// void K2_SetText(FText& value);                                                                                        // [0x2fe7860] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.GetTextWorldSize
	// FVector GetTextWorldSize();                                                                                           // [0x2fe7760] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TextRenderComponent.GetTextLocalSize
	// FVector GetTextLocalSize();                                                                                           // [0x2fe7720] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Texture2DArray
/// Size: 0x0058 (0x0000B8 - 0x000110)
class UTexture2DArray : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x00B8   (0x0058)  MISSED
};

/// Class /Script/Engine.Texture2DDynamic
/// Size: 0x0018 (0x0000B8 - 0x0000D0)
class UTexture2DDynamic : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	SDK_UNDEFINED(1,636) /* TEnumAsByte<EPixelFormat> */ __um(Format);                                             // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData01_6[0xF];                                       // 0x00C1   (0x000F)  MISSED
};

/// Class /Script/Engine.TextureLightProfile
/// Size: 0x0008 (0x0000E8 - 0x0000F0)
class UTextureLightProfile : public UTexture2D
{ 
public:
	float                                              Brightness;                                                 // 0x00E8   (0x0004)  
	float                                              TextureMultiplier;                                          // 0x00EC   (0x0004)  
};

/// Class /Script/Engine.TextureMipDataProviderFactory
/// Size: 0x0000 (0x000028 - 0x000028)
class UTextureMipDataProviderFactory : public UAssetUserData
{ 
public:
};

/// Class /Script/Engine.TextureRenderTargetCube
/// Size: 0x0018 (0x0000C0 - 0x0000D8)
class UTextureRenderTargetCube : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x00C0   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x00C4   (0x0010)  
	SDK_UNDEFINED(1,637) /* TEnumAsByte<EPixelFormat> */ __um(OverrideFormat);                                     // 0x00D4   (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x00D5:0 (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x00D5:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x00D6   (0x0002)  MISSED
};

/// Class /Script/Engine.ThumbnailInfo
/// Size: 0x0000 (0x000028 - 0x000028)
class UThumbnailInfo : public UObject
{ 
public:
};

/// Struct /Script/Engine.TimelineEventEntry
/// Size: 0x0014 (0x000000 - 0x000014)
struct FTimelineEventEntry
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	SDK_UNDEFINED(16,638) /* FDelegateProperty */      __um(EventFunc);                                            // 0x0004   (0x0010)  
};

/// Struct /Script/Engine.TimelineVectorTrack
/// Size: 0x0040 (0x000000 - 0x000040)
struct FTimelineVectorTrack
{ 
	class UCurveVector*                                VectorCurve;                                                // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,639) /* FDelegateProperty */      __um(InterpFunc);                                           // 0x0008   (0x0010)  
	FName                                              TrackName;                                                  // 0x0018   (0x0008)  
	FName                                              VectorPropertyName;                                         // 0x0020   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.TimelineFloatTrack
/// Size: 0x0040 (0x000000 - 0x000040)
struct FTimelineFloatTrack
{ 
	class UCurveFloat*                                 FloatCurve;                                                 // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,640) /* FDelegateProperty */      __um(InterpFunc);                                           // 0x0008   (0x0010)  
	FName                                              TrackName;                                                  // 0x0018   (0x0008)  
	FName                                              FloatPropertyName;                                          // 0x0020   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.TimelineLinearColorTrack
/// Size: 0x0040 (0x000000 - 0x000040)
struct FTimelineLinearColorTrack
{ 
	class UCurveLinearColor*                           LinearColorCurve;                                           // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,641) /* FDelegateProperty */      __um(InterpFunc);                                           // 0x0008   (0x0010)  
	FName                                              TrackName;                                                  // 0x0018   (0x0008)  
	FName                                              LinearColorPropertyName;                                    // 0x0020   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.Timeline
/// Size: 0x0098 (0x000000 - 0x000098)
struct FTimeline
{ 
	SDK_UNDEFINED(1,642) /* TEnumAsByte<ETimelineLengthMode> */ __um(LengthMode);                                  // 0x0000   (0x0001)  
	bool                                               bLooping : 1;                                               // 0x0001:0 (0x0001)  
	bool                                               bReversePlayback : 1;                                       // 0x0001:1 (0x0001)  
	bool                                               bPlaying : 1;                                               // 0x0001:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              Length;                                                     // 0x0004   (0x0004)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              Position;                                                   // 0x000C   (0x0004)  
	TArray<FTimelineEventEntry>                        Events;                                                     // 0x0010   (0x0010)  
	TArray<FTimelineVectorTrack>                       InterpVectors;                                              // 0x0020   (0x0010)  
	TArray<FTimelineFloatTrack>                        InterpFloats;                                               // 0x0030   (0x0010)  
	TArray<FTimelineLinearColorTrack>                  InterpLinearColors;                                         // 0x0040   (0x0010)  
	SDK_UNDEFINED(16,643) /* FDelegateProperty */      __um(TimelinePostUpdateFunc);                               // 0x0050   (0x0010)  
	SDK_UNDEFINED(16,644) /* FDelegateProperty */      __um(TimelineFinishedFunc);                                 // 0x0060   (0x0010)  
	SDK_UNDEFINED(8,645) /* TWeakObjectPtr<UObject*> */ __um(PropertySetObject);                                   // 0x0070   (0x0008)  
	FName                                              DirectionPropertyName;                                      // 0x0078   (0x0008)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0080   (0x0018)  MISSED
};

/// Class /Script/Engine.TimelineComponent
/// Size: 0x00A0 (0x0000B0 - 0x000150)
class UTimelineComponent : public UActorComponent
{ 
public:
	FTimeline                                          TheTimeline;                                                // 0x00B0   (0x0098)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0148:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0149   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.TimelineComponent.Stop
	// void Stop();                                                                                                          // [0x2feb5b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetVectorCurve
	// void SetVectorCurve(class UCurveVector* NewVectorCurve, FName VectorTrackName);                                       // [0x2feb4f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineLengthMode
	// void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode);                                           // [0x2feb470] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineLength
	// void SetTimelineLength(float NewLength);                                                                              // [0x2feb3f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetPlayRate
	// void SetPlayRate(float NewRate);                                                                                      // [0x2feb260] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetPlaybackPosition
	// void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);                                      // [0x2feb2e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetNewTime
	// void SetNewTime(float NewTime);                                                                                       // [0x2feb1e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetLooping
	// void SetLooping(bool bNewLooping);                                                                                    // [0x2feb150] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetLinearColorCurve
	// void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);                   // [0x2feb090] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetIgnoreTimeDilation
	// void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);                                                              // [0x2feb000] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetFloatCurve
	// void SetFloatCurve(class UCurveFloat* NewFloatCurve, FName FloatTrackName);                                           // [0x2feaf40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.ReverseFromEnd
	// void ReverseFromEnd();                                                                                                // [0x2feaf20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.Reverse
	// void Reverse();                                                                                                       // [0x2feaf00] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.PlayFromStart
	// void PlayFromStart();                                                                                                 // [0x2feaee0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.Play
	// void Play();                                                                                                          // [0x2feaec0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.OnRep_Timeline
	// void OnRep_Timeline();                                                                                                // [0x2feaea0] Final|Native|Public  
	// Function /Script/Engine.TimelineComponent.IsReversing
	// bool IsReversing();                                                                                                   // [0x2feae70] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.IsPlaying
	// bool IsPlaying();                                                                                                     // [0x2feae40] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.IsLooping
	// bool IsLooping();                                                                                                     // [0x2feae10] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetTimelineLength
	// float GetTimelineLength();                                                                                            // [0x2feade0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetPlayRate
	// float GetPlayRate();                                                                                                  // [0x2feacd0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetPlaybackPosition
	// float GetPlaybackPosition();                                                                                          // [0x2fead00] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetIgnoreTimeDilation
	// bool GetIgnoreTimeDilation();                                                                                         // [0x2feaca0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.TTTrackBase
/// Size: 0x0018 (0x000000 - 0x000018)
struct FTTTrackBase
{ 
	FName                                              TrackName;                                                  // 0x0008   (0x0008)  
	bool                                               bIsExternalCurve;                                           // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/Engine.TTEventTrack
/// Size: 0x0010 (0x000018 - 0x000028)
struct FTTEventTrack : FTTTrackBase
{ 
	FName                                              FunctionName;                                               // 0x0018   (0x0008)  
	class UCurveFloat*                                 CurveKeys;                                                  // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.TTPropertyTrack
/// Size: 0x0008 (0x000018 - 0x000020)
struct FTTPropertyTrack : FTTTrackBase
{ 
	FName                                              PropertyName;                                               // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.TTFloatTrack
/// Size: 0x0008 (0x000020 - 0x000028)
struct FTTFloatTrack : FTTPropertyTrack
{ 
	class UCurveFloat*                                 CurveFloat;                                                 // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.TTVectorTrack
/// Size: 0x0008 (0x000020 - 0x000028)
struct FTTVectorTrack : FTTPropertyTrack
{ 
	class UCurveVector*                                CurveVector;                                                // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.TTLinearColorTrack
/// Size: 0x0008 (0x000020 - 0x000028)
struct FTTLinearColorTrack : FTTPropertyTrack
{ 
	class UCurveLinearColor*                           CurveLinearColor;                                           // 0x0020   (0x0008)  
};

/// Class /Script/Engine.TimelineTemplate
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UTimelineTemplate : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	float                                              TimelineLength;                                             // 0x0028   (0x0004)  
	SDK_UNDEFINED(1,646) /* TEnumAsByte<ETimelineLengthMode> */ __um(LengthMode);                                  // 0x002C   (0x0001)  
	bool                                               bAutoPlay : 1;                                              // 0x002D:0 (0x0001)  
	bool                                               bLoop : 1;                                                  // 0x002D:1 (0x0001)  
	bool                                               bReplicated : 1;                                            // 0x002D:2 (0x0001)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x002D:3 (0x0001)  
	unsigned char                                      UnknownData01_4[0x2];                                       // 0x002E   (0x0002)  MISSED
	TArray<FTTEventTrack>                              EventTracks;                                                // 0x0030   (0x0010)  
	TArray<FTTFloatTrack>                              FloatTracks;                                                // 0x0040   (0x0010)  
	TArray<FTTVectorTrack>                             VectorTracks;                                               // 0x0050   (0x0010)  
	TArray<FTTLinearColorTrack>                        LinearColorTracks;                                          // 0x0060   (0x0010)  
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x0070   (0x0010)  
	FGuid                                              TimelineGuid;                                               // 0x0080   (0x0010)  
	FName                                              VariableName;                                               // 0x0090   (0x0008)  
	FName                                              DirectionPropertyName;                                      // 0x0098   (0x0008)  
	FName                                              UpdateFunctionName;                                         // 0x00A0   (0x0008)  
	FName                                              FinishedFunctionName;                                       // 0x00A8   (0x0008)  
};

/// Class /Script/Engine.TireType
/// Size: 0x0008 (0x000030 - 0x000038)
class UTireType : public UDataAsset
{ 
public:
	float                                              FrictionScale;                                              // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/Engine.TouchInputControl
/// Size: 0x0068 (0x000000 - 0x000068)
struct FTouchInputControl
{ 
	class UTexture2D*                                  Image1;                                                     // 0x0000   (0x0008)  
	class UTexture2D*                                  Image2;                                                     // 0x0008   (0x0008)  
	FVector2D                                          Center;                                                     // 0x0010   (0x0008)  
	FVector2D                                          VisualSize;                                                 // 0x0018   (0x0008)  
	FVector2D                                          ThumbSize;                                                  // 0x0020   (0x0008)  
	FVector2D                                          InteractionSize;                                            // 0x0028   (0x0008)  
	FVector2D                                          InputScale;                                                 // 0x0030   (0x0008)  
	FKey                                               MainInputKey;                                               // 0x0038   (0x0018)  
	FKey                                               AltInputKey;                                                // 0x0050   (0x0018)  
};

/// Class /Script/Engine.TouchInterface
/// Size: 0x0030 (0x000028 - 0x000058)
class UTouchInterface : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FTouchInputControl>                         Controls;                                                   // 0x0028   (0x0010)  
	float                                              ActiveOpacity;                                              // 0x0038   (0x0004)  
	float                                              InactiveOpacity;                                            // 0x003C   (0x0004)  
	float                                              TimeUntilDeactive;                                          // 0x0040   (0x0004)  
	float                                              TimeUntilReset;                                             // 0x0044   (0x0004)  
	float                                              ActivationDelay;                                            // 0x0048   (0x0004)  
	bool                                               bPreventRecenter;                                           // 0x004C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              StartupDelay;                                               // 0x0050   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.TriggerCapsule
/// Size: 0x0000 (0x000228 - 0x000228)
class ATriggerCapsule : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.TriggerVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class ATriggerVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.TwitterIntegrationBase
/// Size: 0x0000 (0x000038 - 0x000038)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{ 
public:


	/// Functions
	// Function /Script/Engine.TwitterIntegrationBase.TwitterRequest
	// bool TwitterRequest(FString URL, TArray<FString>& ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int32_t AccountIndex); // [0x2fefa00] Native|Public|HasOutParms 
	// Function /Script/Engine.TwitterIntegrationBase.ShowTweetUI
	// bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);                                               // [0x2fef8b0] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.Init
	// void Init();                                                                                                          // [0xe45730] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.GetNumAccounts
	// int32_t GetNumAccounts();                                                                                             // [0x2feeb00] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.GetAccountName
	// FString GetAccountName(int32_t AccountIndex);                                                                         // [0x2feea20] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.CanShowTweetUI
	// bool CanShowTweetUI();                                                                                                // [0x21170c0] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.AuthorizeAccounts
	// bool AuthorizeAccounts();                                                                                             // [0x2fee8e0] Native|Public        
};

/// Class /Script/Engine.UserDefinedEnum
/// Size: 0x0050 (0x000060 - 0x0000B0)
class UUserDefinedEnum : public UEnum
{ 
public:
	SDK_UNDEFINED(80,647) /* TMap<FName, FText> */     __um(DisplayNameMap);                                       // 0x0060   (0x0050)  
};

/// Class /Script/Engine.UserDefinedStruct
/// Size: 0x0048 (0x0000C0 - 0x000108)
class UUserDefinedStruct : public UScriptStruct
{ 
public:
	SDK_UNDEFINED(1,648) /* TEnumAsByte<EUserDefinedStructureStatus> */ __um(Status);                              // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00C1   (0x0003)  MISSED
	FGuid                                              Guid;                                                       // 0x00C4   (0x0010)  
	unsigned char                                      UnknownData01_6[0x34];                                      // 0x00D4   (0x0034)  MISSED
};

/// Class /Script/Engine.UserInterfaceSettings
/// Size: 0x0230 (0x000038 - 0x000268)
class UUserInterfaceSettings : public UDeveloperSettings
{ 
public:
	ERenderFocusRule                                   RenderFocusRule;                                            // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	SDK_UNDEFINED(80,649) /* TMap<TEnumAsByte<EMouseCursor>, FHardwareCursorReference> */ __um(HardwareCursors);   // 0x0040   (0x0050)  
	SDK_UNDEFINED(80,650) /* TMap<TEnumAsByte<EMouseCursor>, FSoftClassPath> */ __um(SoftwareCursors);             // 0x0090   (0x0050)  
	FSoftClassPath                                     DefaultCursor;                                              // 0x00E0   (0x0018)  
	FSoftClassPath                                     TextEditBeamCursor;                                         // 0x00F8   (0x0018)  
	FSoftClassPath                                     CrosshairsCursor;                                           // 0x0110   (0x0018)  
	FSoftClassPath                                     HandCursor;                                                 // 0x0128   (0x0018)  
	FSoftClassPath                                     GrabHandCursor;                                             // 0x0140   (0x0018)  
	FSoftClassPath                                     GrabHandClosedCursor;                                       // 0x0158   (0x0018)  
	FSoftClassPath                                     SlashedCircleCursor;                                        // 0x0170   (0x0018)  
	float                                              ApplicationScale;                                           // 0x0188   (0x0004)  
	EUIScalingRule                                     UIScaleRule;                                                // 0x018C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x018D   (0x0003)  MISSED
	FSoftClassPath                                     CustomScalingRuleClass;                                     // 0x0190   (0x0018)  
	FRuntimeFloatCurve                                 UIScaleCurve;                                               // 0x01A8   (0x0088)  
	bool                                               bAllowHighDPIInGameMode;                                    // 0x0230   (0x0001)  
	bool                                               bLoadWidgetsOnDedicatedServer;                              // 0x0231   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x0232   (0x0006)  MISSED
	TArray<class UObject*>                             CursorClasses;                                              // 0x0238   (0x0010)  
	class UClass*                                      CustomScalingRuleClassInstance;                             // 0x0248   (0x0008)  
	class UDPICustomScalingRule*                       CustomScalingRule;                                          // 0x0250   (0x0008)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0258   (0x0010)  MISSED
};

/// Class /Script/Engine.VectorField
/// Size: 0x0020 (0x000028 - 0x000048)
class UVectorField : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	FBox                                               Bounds;                                                     // 0x0028   (0x001C)  
	float                                              Intensity;                                                  // 0x0044   (0x0004)  
};

/// Class /Script/Engine.VectorFieldAnimated
/// Size: 0x0040 (0x000048 - 0x000088)
class UVectorFieldAnimated : public UVectorField
{ 
public:
	class UTexture2D*                                  Texture;                                                    // 0x0048   (0x0008)  
	SDK_UNDEFINED(1,651) /* TEnumAsByte<EVectorFieldConstructionOp> */ __um(ConstructionOp);                       // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	int32_t                                            VolumeSizeX;                                                // 0x0054   (0x0004)  
	int32_t                                            VolumeSizeY;                                                // 0x0058   (0x0004)  
	int32_t                                            VolumeSizeZ;                                                // 0x005C   (0x0004)  
	int32_t                                            SubImagesX;                                                 // 0x0060   (0x0004)  
	int32_t                                            SubImagesY;                                                 // 0x0064   (0x0004)  
	int32_t                                            FrameCount;                                                 // 0x0068   (0x0004)  
	float                                              FramesPerSecond;                                            // 0x006C   (0x0004)  
	bool                                               bLoop : 1;                                                  // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0071   (0x0007)  MISSED
	class UVectorFieldStatic*                          NoiseField;                                                 // 0x0078   (0x0008)  
	float                                              NoiseScale;                                                 // 0x0080   (0x0004)  
	float                                              NoiseMax;                                                   // 0x0084   (0x0004)  
};

/// Class /Script/Engine.VectorFieldComponent
/// Size: 0x0020 (0x000410 - 0x000430)
class UVectorFieldComponent : public UPrimitiveComponent
{ 
public:
	class UVectorField*                                VectorField;                                                // 0x0408   (0x0008)  
	float                                              Intensity;                                                  // 0x0410   (0x0004)  
	float                                              Tightness;                                                  // 0x0414   (0x0004)  
	bool                                               bPreviewVectorField : 1;                                    // 0x0418:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x17];                                      // 0x0419   (0x0017)  MISSED


	/// Functions
	// Function /Script/Engine.VectorFieldComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                // [0x2fef4c0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VectorFieldStatic
/// Size: 0x0048 (0x000048 - 0x000090)
class UVectorFieldStatic : public UVectorField
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0048   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x004C   (0x0004)  
	int32_t                                            SizeZ;                                                      // 0x0050   (0x0004)  
	bool                                               bAllowCPUAccess;                                            // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2B];                                      // 0x0055   (0x002B)  MISSED
	TArray<FVector4>                                   CPUData;                                                    // 0x0080   (0x0010)  
};

/// Class /Script/Engine.VectorFieldVolume
/// Size: 0x0008 (0x000220 - 0x000228)
class AVectorFieldVolume : public AActor
{ 
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                       // 0x0220   (0x0008)  
};

/// Class /Script/Engine.VirtualTexture
/// Size: 0x0000 (0x000028 - 0x000028)
class UVirtualTexture : public UObject
{ 
public:
};

/// Class /Script/Engine.LightMapVirtualTexture
/// Size: 0x0000 (0x000028 - 0x000028)
class ULightMapVirtualTexture : public UVirtualTexture
{ 
public:
};

/// Class /Script/Engine.LightMapVirtualTexture2D
/// Size: 0x0010 (0x0000E8 - 0x0000F8)
class ULightMapVirtualTexture2D : public UTexture2D
{ 
public:
	TArray<int8_t>                                     TypeToLayer;                                                // 0x00E8   (0x0010)  
};

/// Struct /Script/Engine.VirtualTextureSpacePoolConfig
/// Size: 0x0020 (0x000000 - 0x000020)
struct FVirtualTextureSpacePoolConfig
{ 
	int32_t                                            MinTileSize;                                                // 0x0000   (0x0004)  
	int32_t                                            MaxTileSize;                                                // 0x0004   (0x0004)  
	SDK_UNDEFINED(16,652) /* TArray<TEnumAsByte<EPixelFormat>> */ __um(Formats);                                   // 0x0008   (0x0010)  
	int32_t                                            SizeInMegabyte;                                             // 0x0018   (0x0004)  
	bool                                               bAllowSizeScale;                                            // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Class /Script/Engine.VirtualTexturePoolConfig
/// Size: 0x0018 (0x000028 - 0x000040)
class UVirtualTexturePoolConfig : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	int32_t                                            DefaultSizeInMegabyte;                                      // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	TArray<FVirtualTextureSpacePoolConfig>             Pools;                                                      // 0x0030   (0x0010)  
};

/// Class /Script/Engine.VisualLoggerAutomationTests
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerAutomationTests : public UObject
{ 
public:
};

/// Class /Script/Engine.VisualLoggerDebugSnapshotInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerDebugSnapshotInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.VisualLoggerKismetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.VisualLoggerKismetLibrary.RedirectVislog
	// void RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner);                                     // [0xe5c020] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogText
	// void LogText(class UObject* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);              // [0x2fef2b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogSegment
	// void LogSegment(class UObject* WorldContextObject, FVector SegmentStart, FVector SegmentEnd, FString Text, FLinearColor ObjectColor, float Thickness, FName CategoryName, bool bAddToMessageLog); // [0x2fef000] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogLocation
	// void LogLocation(class UObject* WorldContextObject, FVector Location, FString Text, FLinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog); // [0x2feed90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogBox
	// void LogBox(class UObject* WorldContextObject, FBox BoxShape, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog); // [0x2feeb60] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.EnableRecording
	// void EnableRecording(bool bEnabled);                                                                                  // [0x782050] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.VoiceChannel
/// Size: 0x0010 (0x000070 - 0x000080)
class UVoiceChannel : public UChannel
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0070   (0x0010)  MISSED
};

/// Struct /Script/Engine.VoiceSettings
/// Size: 0x0018 (0x000000 - 0x000018)
struct FVoiceSettings
{ 
	class USceneComponent*                             ComponentToAttachTo;                                        // 0x0000   (0x0008)  
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0008   (0x0008)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0010   (0x0008)  
};

/// Class /Script/Engine.VOIPTalker
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UVOIPTalker : public UActorComponent
{ 
public:
	FVoiceSettings                                     Settings;                                                   // 0x00B0   (0x0018)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x00C8   (0x0020)  MISSED


	/// Functions
	// Function /Script/Engine.VOIPTalker.RegisterWithPlayerState
	// void RegisterWithPlayerState(class APlayerState* OwningState);                                                        // [0x2fef440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.GetVoiceLevel
	// float GetVoiceLevel();                                                                                                // [0x2feeb30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.CreateTalkerForPlayer
	// class UVOIPTalker* CreateTalkerForPlayer(class APlayerState* OwningState);                                            // [0x2fee9a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingEnd
	// void BPOnTalkingEnd();                                                                                                // [0x718ba0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingBegin
	// void BPOnTalkingBegin(class UAudioComponent* AudioComponent);                                                         // [0x2fee910] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/Engine.VOIPStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UVOIPStatics : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.VOIPStatics.SetMicThreshold
	// void SetMicThreshold(float InThreshold);                                                                              // [0x2fef5c0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.VolumeTexture
/// Size: 0x0058 (0x0000B8 - 0x000110)
class UVolumeTexture : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x00B8   (0x0058)  MISSED
};

/// Class /Script/Engine.VolumetricLightmapDensityVolume
/// Size: 0x0008 (0x000258 - 0x000260)
class AVolumetricLightmapDensityVolume : public AVolume
{ 
public:
	FInt32Interval                                     AllowedMipLevelRange;                                       // 0x0258   (0x0008)  
};

/// Class /Script/Engine.WindDirectionalSource
/// Size: 0x0008 (0x000220 - 0x000228)
class AWindDirectionalSource : public AInfo
{ 
public:
	class UWindDirectionalSourceComponent*             Component;                                                  // 0x0220   (0x0008)  
};

/// Class /Script/Engine.WindDirectionalSourceComponent
/// Size: 0x0020 (0x0001F0 - 0x000210)
class UWindDirectionalSourceComponent : public USceneComponent
{ 
public:
	float                                              Strength;                                                   // 0x01F0   (0x0004)  
	float                                              Speed;                                                      // 0x01F4   (0x0004)  
	float                                              MinGustAmount;                                              // 0x01F8   (0x0004)  
	float                                              MaxGustAmount;                                              // 0x01FC   (0x0004)  
	float                                              Radius;                                                     // 0x0200   (0x0004)  
	bool                                               bPointWind : 1;                                             // 0x0204:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0xB];                                       // 0x0205   (0x000B)  MISSED


	/// Functions
	// Function /Script/Engine.WindDirectionalSourceComponent.SetWindType
	// void SetWindType(EWindSourceType InNewType);                                                                          // [0x2fef830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetStrength
	// void SetStrength(float InNewStrength);                                                                                // [0x2fef7b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetSpeed
	// void SetSpeed(float InNewSpeed);                                                                                      // [0x2fef730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetRadius
	// void SetRadius(float InNewRadius);                                                                                    // [0x2fef6b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
	// void SetMinimumGustAmount(float InNewMinGust);                                                                        // [0x2fef630] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
	// void SetMaximumGustAmount(float InNewMaxGust);                                                                        // [0x2fef540] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.WorldComposition
/// Size: 0x0040 (0x000028 - 0x000068)
class UWorldComposition : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x48];                                      // 0x0000   (0x0048)  MISSED
	TArray<class ULevelStreaming*>                     TilesStreaming;                                             // 0x0048   (0x0010)  
	double                                             TilesStreamingTimeThreshold;                                // 0x0058   (0x0008)  
	bool                                               bLoadAllTilesDuringCinematic;                               // 0x0060   (0x0001)  
	bool                                               bRebaseOriginIn3DSpace;                                     // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0062   (0x0002)  MISSED
	float                                              RebaseOriginDistance;                                       // 0x0064   (0x0004)  
};

/// Struct /Script/Engine.MaterialProxySettings
/// Size: 0x0088 (0x000000 - 0x000088)
struct FMaterialProxySettings
{ 
	FIntPoint                                          textureSize;                                                // 0x0000   (0x0008)  
	float                                              GutterSpace;                                                // 0x0008   (0x0004)  
	float                                              MetallicConstant;                                           // 0x000C   (0x0004)  
	float                                              RoughnessConstant;                                          // 0x0010   (0x0004)  
	float                                              AnisotropyConstant;                                         // 0x0014   (0x0004)  
	float                                              SpecularConstant;                                           // 0x0018   (0x0004)  
	float                                              OpacityConstant;                                            // 0x001C   (0x0004)  
	float                                              OpacityMaskConstant;                                        // 0x0020   (0x0004)  
	float                                              AmbientOcclusionConstant;                                   // 0x0024   (0x0004)  
	SDK_UNDEFINED(1,653) /* TEnumAsByte<ETextureSizingType> */ __um(TextureSizingType);                            // 0x0028   (0x0001)  
	SDK_UNDEFINED(1,654) /* TEnumAsByte<EMaterialMergeType> */ __um(MaterialMergeType);                            // 0x0029   (0x0001)  
	SDK_UNDEFINED(1,655) /* TEnumAsByte<EBlendMode> */ __um(BlendMode);                                            // 0x002A   (0x0001)  
	bool                                               bAllowTwoSidedMaterial : 1;                                 // 0x002B:0 (0x0001)  
	bool                                               bNormalMap : 1;                                             // 0x002B:1 (0x0001)  
	bool                                               bTangentMap : 1;                                            // 0x002B:2 (0x0001)  
	bool                                               bMetallicMap : 1;                                           // 0x002B:3 (0x0001)  
	bool                                               bRoughnessMap : 1;                                          // 0x002B:4 (0x0001)  
	bool                                               bAnisotropyMap : 1;                                         // 0x002B:5 (0x0001)  
	bool                                               bSpecularMap : 1;                                           // 0x002B:6 (0x0001)  
	bool                                               bEmissiveMap : 1;                                           // 0x002B:7 (0x0001)  
	bool                                               bOpacityMap : 1;                                            // 0x002C:0 (0x0001)  
	bool                                               bOpacityMaskMap : 1;                                        // 0x002C:1 (0x0001)  
	bool                                               bAmbientOcclusionMap : 1;                                   // 0x002C:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x002D   (0x0003)  MISSED
	FIntPoint                                          DiffuseTextureSize;                                         // 0x0030   (0x0008)  
	FIntPoint                                          NormalTextureSize;                                          // 0x0038   (0x0008)  
	FIntPoint                                          TangentTextureSize;                                         // 0x0040   (0x0008)  
	FIntPoint                                          MetallicTextureSize;                                        // 0x0048   (0x0008)  
	FIntPoint                                          RoughnessTextureSize;                                       // 0x0050   (0x0008)  
	FIntPoint                                          AnisotropyTextureSize;                                      // 0x0058   (0x0008)  
	FIntPoint                                          SpecularTextureSize;                                        // 0x0060   (0x0008)  
	FIntPoint                                          EmissiveTextureSize;                                        // 0x0068   (0x0008)  
	FIntPoint                                          OpacityTextureSize;                                         // 0x0070   (0x0008)  
	FIntPoint                                          OpacityMaskTextureSize;                                     // 0x0078   (0x0008)  
	FIntPoint                                          AmbientOcclusionTextureSize;                                // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.MeshProxySettings
/// Size: 0x00A8 (0x000000 - 0x0000A8)
struct FMeshProxySettings
{ 
	int32_t                                            ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              VoxelSize;                                                  // 0x0004   (0x0004)  
	FMaterialProxySettings                             MaterialSettings;                                           // 0x0008   (0x0088)  
	float                                              MergeDistance;                                              // 0x0090   (0x0004)  
	FColor                                             UnresolvedGeometryColor;                                    // 0x0094   (0x0004)  
	float                                              MaxRayCastDist;                                             // 0x0098   (0x0004)  
	float                                              HardAngleThreshold;                                         // 0x009C   (0x0004)  
	int32_t                                            LightMapResolution;                                         // 0x00A0   (0x0004)  
	SDK_UNDEFINED(1,656) /* TEnumAsByte<EProxyNormalComputationMethod> */ __um(NormalCalculationMethod);           // 0x00A4   (0x0001)  
	SDK_UNDEFINED(1,657) /* TEnumAsByte<ELandscapeCullingPrecision> */ __um(LandscapeCullingPrecision);            // 0x00A5   (0x0001)  
	bool                                               bCalculateCorrectLODModel : 1;                              // 0x00A6:0 (0x0001)  
	bool                                               bOverrideVoxelSize : 1;                                     // 0x00A6:1 (0x0001)  
	bool                                               bOverrideTransferDistance : 1;                              // 0x00A6:2 (0x0001)  
	bool                                               bUseHardAngleThreshold : 1;                                 // 0x00A6:3 (0x0001)  
	bool                                               bComputeLightMapResolution : 1;                             // 0x00A6:4 (0x0001)  
	bool                                               bRecalculateNormals : 1;                                    // 0x00A6:5 (0x0001)  
	bool                                               bUseLandscapeCulling : 1;                                   // 0x00A6:6 (0x0001)  
	bool                                               bAllowAdjacency : 1;                                        // 0x00A6:7 (0x0001)  
	bool                                               bAllowDistanceField : 1;                                    // 0x00A7:0 (0x0001)  
	bool                                               bReuseMeshLightmapUVs : 1;                                  // 0x00A7:1 (0x0001)  
	bool                                               bCreateCollision : 1;                                       // 0x00A7:2 (0x0001)  
	bool                                               bAllowVertexColors : 1;                                     // 0x00A7:3 (0x0001)  
	bool                                               bGenerateLightmapUVs : 1;                                   // 0x00A7:4 (0x0001)  
};

/// Struct /Script/Engine.MeshMergingSettings
/// Size: 0x00A0 (0x000000 - 0x0000A0)
struct FMeshMergingSettings
{ 
	int32_t                                            TargetLightMapResolution;                                   // 0x0000   (0x0004)  
	EUVOutput                                          OutputUVs;                                                  // 0x0004   (0x0008)  
	FMaterialProxySettings                             MaterialSettings;                                           // 0x000C   (0x0088)  
	int32_t                                            GutterSize;                                                 // 0x0094   (0x0004)  
	int32_t                                            SpecificLOD;                                                // 0x0098   (0x0004)  
	EMeshLODSelectionType                              LODSelectionType;                                           // 0x009C   (0x0001)  
	bool                                               bGenerateLightMapUV : 1;                                    // 0x009D:0 (0x0001)  
	bool                                               bComputedLightMapResolution : 1;                            // 0x009D:1 (0x0001)  
	bool                                               bPivotPointAtZero : 1;                                      // 0x009D:2 (0x0001)  
	bool                                               bMergePhysicsData : 1;                                      // 0x009D:3 (0x0001)  
	bool                                               bMergeMaterials : 1;                                        // 0x009D:4 (0x0001)  
	bool                                               bCreateMergedMaterial : 1;                                  // 0x009D:5 (0x0001)  
	bool                                               bBakeVertexDataToMesh : 1;                                  // 0x009D:6 (0x0001)  
	bool                                               bUseVertexDataForBakingMaterial : 1;                        // 0x009D:7 (0x0001)  
	bool                                               bUseTextureBinning : 1;                                     // 0x009E:0 (0x0001)  
	bool                                               bReuseMeshLightmapUVs : 1;                                  // 0x009E:1 (0x0001)  
	bool                                               bMergeEquivalentMaterials : 1;                              // 0x009E:2 (0x0001)  
	bool                                               bUseLandscapeCulling : 1;                                   // 0x009E:3 (0x0001)  
	bool                                               bIncludeImposters : 1;                                      // 0x009E:4 (0x0001)  
	bool                                               bAllowDistanceField : 1;                                    // 0x009E:5 (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x009F   (0x0001)  MISSED
};

/// Struct /Script/Engine.HierarchicalSimplification
/// Size: 0x0160 (0x000000 - 0x000160)
struct FHierarchicalSimplification
{ 
	float                                              TransitionScreenSize;                                       // 0x0000   (0x0004)  
	float                                              OverrideDrawDistance;                                       // 0x0004   (0x0004)  
	bool                                               bUseOverrideDrawDistance : 1;                               // 0x0008:0 (0x0001)  
	bool                                               bAllowSpecificExclusion : 1;                                // 0x0008:1 (0x0001)  
	bool                                               bSimplifyMesh : 1;                                          // 0x0008:2 (0x0001)  
	bool                                               bOnlyGenerateClustersForVolumes : 1;                        // 0x0008:3 (0x0001)  
	bool                                               bReusePreviousLevelClusters : 1;                            // 0x0008:4 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0009   (0x0003)  MISSED
	FMeshProxySettings                                 ProxySetting;                                               // 0x000C   (0x00A8)  
	FMeshMergingSettings                               MergeSetting;                                               // 0x00B4   (0x00A0)  
	float                                              DesiredBoundRadius;                                         // 0x0154   (0x0004)  
	float                                              DesiredFillingPercentage;                                   // 0x0158   (0x0004)  
	int32_t                                            MinNumberOfActorsToBuild;                                   // 0x015C   (0x0004)  
};

/// Class /Script/Engine.HierarchicalLODSetup
/// Size: 0x0038 (0x000028 - 0x000060)
class UHierarchicalLODSetup : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0000   (0x0028)  MISSED
	TArray<FHierarchicalSimplification>                HierarchicalLODSetup;                                       // 0x0028   (0x0010)  
	SDK_UNDEFINED(40,658) /* TWeakObjectPtr<UMaterialInterface*> */ __um(OverrideBaseMaterial);                    // 0x0038   (0x0028)  
};

/// Struct /Script/Engine.NetViewer
/// Size: 0x0030 (0x000000 - 0x000030)
struct FNetViewer
{ 
	class UNetConnection*                              Connection;                                                 // 0x0000   (0x0008)  
	class AActor*                                      InViewer;                                                   // 0x0008   (0x0008)  
	class AActor*                                      ViewTarget;                                                 // 0x0010   (0x0008)  
	FVector                                            ViewLocation;                                               // 0x0018   (0x000C)  
	FVector                                            ViewDir;                                                    // 0x0024   (0x000C)  
};

/// Class /Script/Engine.WorldSettings
/// Size: 0x0180 (0x000220 - 0x0003A0)
class AWorldSettings : public AInfo
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0220   (0x0008)  MISSED
	int32_t                                            VisibilityCellSize;                                         // 0x0228   (0x0004)  
	SDK_UNDEFINED(1,659) /* TEnumAsByte<EVisibilityAggressiveness> */ __um(VisibilityAggressiveness);              // 0x022C   (0x0001)  
	bool                                               bPrecomputeVisibility : 1;                                  // 0x022D:0 (0x0001)  
	bool                                               bPlaceCellsOnlyAlongCameraTracks : 1;                       // 0x022D:1 (0x0001)  
	bool                                               bEnableWorldBoundsChecks : 1;                               // 0x022D:2 (0x0001)  
	bool                                               bEnableNavigationSystem : 1;                                // 0x022D:3 (0x0001)  
	bool                                               bEnableAISystem : 1;                                        // 0x022D:4 (0x0001)  
	bool                                               bEnableWorldComposition : 1;                                // 0x022D:5 (0x0001)  
	bool                                               bUseClientSideLevelStreamingVolumes : 1;                    // 0x022D:6 (0x0001)  
	bool                                               bEnableWorldOriginRebasing : 1;                             // 0x022D:7 (0x0001)  
	bool                                               bWorldGravitySet : 1;                                       // 0x022E:0 (0x0001)  
	bool                                               bGlobalGravitySet : 1;                                      // 0x022E:1 (0x0001)  
	bool                                               bMinimizeBSPSections : 1;                                   // 0x022E:2 (0x0001)  
	bool                                               bForceNoPrecomputedLighting : 1;                            // 0x022E:3 (0x0001)  
	bool                                               bHighPriorityLoading : 1;                                   // 0x022E:4 (0x0001)  
	bool                                               bHighPriorityLoadingLocal : 1;                              // 0x022E:5 (0x0001)  
	bool                                               bOverrideDefaultBroadphaseSettings : 1;                     // 0x022E:6 (0x0001)  
	unsigned char                                      UnknownData01_4[0x1];                                       // 0x022F   (0x0001)  MISSED
	class UNavigationSystemConfig*                     NavigationSystemConfig;                                     // 0x0230   (0x0008)  
	class UNavigationSystemConfig*                     NavigationSystemConfigOverride;                             // 0x0238   (0x0008)  
	float                                              WorldToMeters;                                              // 0x0240   (0x0004)  
	float                                              KillZ;                                                      // 0x0244   (0x0004)  
	class UClass*                                      KillZDamageType;                                            // 0x0248   (0x0008)  
	float                                              WorldGravityZ;                                              // 0x0250   (0x0004)  
	float                                              GlobalGravityZ;                                             // 0x0254   (0x0004)  
	class UClass*                                      DefaultPhysicsVolumeClass;                                  // 0x0258   (0x0008)  
	class UClass*                                      PhysicsCollisionHandlerClass;                               // 0x0260   (0x0008)  
	class UClass*                                      DefaultGameMode;                                            // 0x0268   (0x0008)  
	class UClass*                                      GameNetworkManagerClass;                                    // 0x0270   (0x0008)  
	int32_t                                            PackedLightAndShadowMapTextureSize;                         // 0x0278   (0x0004)  
	FVector                                            DefaultColorScale;                                          // 0x027C   (0x000C)  
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                   // 0x0288   (0x0004)  
	float                                              GlobalDistanceFieldViewDistance;                            // 0x028C   (0x0004)  
	float                                              DynamicIndirectShadowsSelfShadowingIntensity;               // 0x0290   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0294   (0x0004)  MISSED
	FReverbSettings                                    DefaultReverbSettings;                                      // 0x0298   (0x0020)  
	FInteriorSettings                                  DefaultAmbientZoneSettings;                                 // 0x02B8   (0x0024)  
	float                                              MonoCullingDistance;                                        // 0x02DC   (0x0004)  
	class USoundMix*                                   DefaultBaseSoundMix;                                        // 0x02E0   (0x0008)  
	float                                              TimeDilation;                                               // 0x02E8   (0x0004)  
	float                                              MatineeTimeDilation;                                        // 0x02EC   (0x0004)  
	float                                              DemoPlayTimeDilation;                                       // 0x02F0   (0x0004)  
	float                                              MinGlobalTimeDilation;                                      // 0x02F4   (0x0004)  
	float                                              MaxGlobalTimeDilation;                                      // 0x02F8   (0x0004)  
	float                                              MinUndilatedFrameTime;                                      // 0x02FC   (0x0004)  
	float                                              MaxUndilatedFrameTime;                                      // 0x0300   (0x0004)  
	FBroadphaseSettings                                BroadphaseSettings;                                         // 0x0304   (0x0040)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x0344   (0x0004)  MISSED
	class APlayerState*                                Pauser;                                                     // 0x0348   (0x0008)  
	TArray<FNetViewer>                                 ReplicationViewers;                                         // 0x0350   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0360   (0x0010)  
	class APlayerState*                                PauserPlayerState;                                          // 0x0370   (0x0008)  
	int32_t                                            MaxNumberOfBookmarks;                                       // 0x0378   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x037C   (0x0004)  MISSED
	class UClass*                                      DefaultBookmarkClass;                                       // 0x0380   (0x0008)  
	TArray<class UBookmarkBase*>                       BookmarkArray;                                              // 0x0388   (0x0010)  
	class UClass*                                      LastBookmarkClass;                                          // 0x0398   (0x0008)  


	/// Functions
	// Function /Script/Engine.WorldSettings.OnRep_WorldGravityZ
	// void OnRep_WorldGravityZ();                                                                                           // [0xe92750] Native|Public        
};

/// Struct /Script/Engine.VectorDistribution
/// Size: 0x0020 (0x000000 - 0x000020)
struct FVectorDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.Vector4Distribution
/// Size: 0x0020 (0x000000 - 0x000020)
struct FVector4Distribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.FloatRK4SpringInterpolator
/// Size: 0x0008 (0x000000 - 0x000008)
struct FFloatRK4SpringInterpolator
{ 
	float                                              StiffnessConstant;                                          // 0x0000   (0x0004)  
	float                                              DampeningRatio;                                             // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.VectorRK4SpringInterpolator
/// Size: 0x0008 (0x000000 - 0x000008)
struct FVectorRK4SpringInterpolator
{ 
	float                                              StiffnessConstant;                                          // 0x0000   (0x0004)  
	float                                              DampeningRatio;                                             // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.FormatArgumentData
/// Size: 0x0040 (0x000000 - 0x000040)
struct FFormatArgumentData
{ 
	SDK_UNDEFINED(16,660) /* FString */                __um(ArgumentName);                                         // 0x0000   (0x0010)  
	SDK_UNDEFINED(1,661) /* TEnumAsByte<EFormatArgumentType> */ __um(ArgumentValueType);                           // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0011   (0x0007)  MISSED
	SDK_UNDEFINED(24,662) /* FText */                  __um(ArgumentValue);                                        // 0x0018   (0x0018)  
	int32_t                                            ArgumentValueInt;                                           // 0x0030   (0x0004)  
	float                                              ArgumentValueFloat;                                         // 0x0034   (0x0004)  
	ETextGender                                        ArgumentValueGender;                                        // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.ExpressionOutput
/// Size: 0x0008 (0x000000 - 0x000008)
struct FExpressionOutput
{ 
	FName                                              OutputName;                                                 // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.Vector2MaterialInput
/// Size: 0x0000 (0x00000C - 0x00000C)
struct FVector2MaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.BranchingPointNotifyPayload
/// Size: 0x0020 (0x000000 - 0x000020)
struct FBranchingPointNotifyPayload
{ 
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.PlatformInterfaceData
/// Size: 0x0030 (0x000000 - 0x000030)
struct FPlatformInterfaceData
{ 
	FName                                              DataName;                                                   // 0x0000   (0x0008)  
	SDK_UNDEFINED(1,663) /* TEnumAsByte<EPlatformInterfaceDataType> */ __um(Type);                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            IntValue;                                                   // 0x000C   (0x0004)  
	float                                              FloatValue;                                                 // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	SDK_UNDEFINED(16,664) /* FString */                __um(StringValue);                                          // 0x0018   (0x0010)  
	class UObject*                                     ObjectValue;                                                // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.PlatformInterfaceDelegateResult
/// Size: 0x0038 (0x000000 - 0x000038)
struct FPlatformInterfaceDelegateResult
{ 
	bool                                               bSuccessful;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FPlatformInterfaceData                             Data;                                                       // 0x0008   (0x0030)  
};

/// Struct /Script/Engine.DebugFloatHistory
/// Size: 0x0020 (0x000000 - 0x000020)
struct FDebugFloatHistory
{ 
	TArray<float>                                      Samples;                                                    // 0x0000   (0x0010)  
	float                                              MaxSamples;                                                 // 0x0010   (0x0004)  
	float                                              MinValue;                                                   // 0x0014   (0x0004)  
	float                                              MaxValue;                                                   // 0x0018   (0x0004)  
	bool                                               bAutoAdjustMinMax;                                          // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.LatentActionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FLatentActionInfo
{ 
	int32_t                                            Linkage;                                                    // 0x0000   (0x0004)  
	int32_t                                            UUID;                                                       // 0x0004   (0x0004)  
	FName                                              ExecutionFunction;                                          // 0x0008   (0x0008)  
	class UObject*                                     CallbackTarget;                                             // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.TimerHandle
/// Size: 0x0008 (0x000000 - 0x000008)
struct FTimerHandle
{ 
	uint64_t                                           Handle;                                                     // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.CollisionProfileName
/// Size: 0x0008 (0x000000 - 0x000008)
struct FCollisionProfileName
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.GenericStruct
/// Size: 0x0004 (0x000000 - 0x000004)
struct FGenericStruct
{ 
	int32_t                                            Data;                                                       // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.UserActivity
/// Size: 0x0018 (0x000000 - 0x000018)
struct FUserActivity
{ 
	SDK_UNDEFINED(16,665) /* FString */                __um(ActionName);                                           // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.FastArraySerializerItem
/// Size: 0x000C (0x000000 - 0x00000C)
struct FFastArraySerializerItem
{ 
	int32_t                                            ReplicationID;                                              // 0x0000   (0x0004)  
	int32_t                                            ReplicationKey;                                             // 0x0004   (0x0004)  
	int32_t                                            MostRecentArrayReplicationKey;                              // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.CurveTableRowHandle
/// Size: 0x0010 (0x000000 - 0x000010)
struct FCurveTableRowHandle
{ 
	class UCurveTable*                                 CurveTable;                                                 // 0x0000   (0x0008)  
	FName                                              RowName;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.FastArraySerializer
/// Size: 0x0108 (0x000000 - 0x000108)
struct FFastArraySerializer
{ 
	int32_t                                            ArrayReplicationKey;                                        // 0x0054   (0x0004)  
	unsigned char                                      UnknownData00_5[0xA8];                                      // 0x0058   (0x00A8)  MISSED
	EFastArraySerializerDeltaFlags                     DeltaFlags;                                                 // 0x0100   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0101   (0x0007)  MISSED
};

/// Struct /Script/Engine.TableRowBase
/// Size: 0x0008 (0x000000 - 0x000008)
struct FTableRowBase
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimNode_Base
/// Size: 0x0010 (0x000000 - 0x000010)
struct FAnimNode_Base
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.AnimNode_CustomProperty
/// Size: 0x0048 (0x000010 - 0x000058)
struct FAnimNode_CustomProperty : FAnimNode_Base
{ 
	TArray<FName>                                      SourcePropertyNames;                                        // 0x0010   (0x0010)  
	TArray<FName>                                      DestPropertyNames;                                          // 0x0020   (0x0010)  
	class UObject*                                     TargetInstance;                                             // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0038   (0x0020)  MISSED
};

/// Struct /Script/Engine.PoseLinkBase
/// Size: 0x0010 (0x000000 - 0x000010)
struct FPoseLinkBase
{ 
	int32_t                                            LinkID;                                                     // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0004   (0x000C)  MISSED
};

/// Struct /Script/Engine.PoseLink
/// Size: 0x0000 (0x000010 - 0x000010)
struct FPoseLink : FPoseLinkBase
{ 
};

/// Struct /Script/Engine.InputRange
/// Size: 0x0008 (0x000000 - 0x000008)
struct FInputRange
{ 
	float                                              Min;                                                        // 0x0000   (0x0004)  
	float                                              Max;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.InputScaleBiasClamp
/// Size: 0x0030 (0x000000 - 0x000030)
struct FInputScaleBiasClamp
{ 
	bool                                               bMapRange;                                                  // 0x0000   (0x0001)  
	bool                                               bClampResult;                                               // 0x0001   (0x0001)  
	bool                                               bInterpResult;                                              // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0003   (0x0001)  MISSED
	FInputRange                                        InRange;                                                    // 0x0004   (0x0008)  
	FInputRange                                        OutRange;                                                   // 0x000C   (0x0008)  
	float                                              Scale;                                                      // 0x0014   (0x0004)  
	float                                              Bias;                                                       // 0x0018   (0x0004)  
	float                                              ClampMin;                                                   // 0x001C   (0x0004)  
	float                                              ClampMax;                                                   // 0x0020   (0x0004)  
	float                                              InterpSpeedIncreasing;                                      // 0x0024   (0x0004)  
	float                                              InterpSpeedDecreasing;                                      // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.InputAlphaBoolBlend
/// Size: 0x0048 (0x000000 - 0x000048)
struct FInputAlphaBoolBlend
{ 
	float                                              BlendInTime;                                                // 0x0000   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0004   (0x0004)  
	EAlphaBlendOption                                  BlendOption;                                                // 0x0008   (0x0001)  
	bool                                               bInitialized;                                               // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x000A   (0x0006)  MISSED
	class UCurveFloat*                                 CustomCurve;                                                // 0x0010   (0x0008)  
	FAlphaBlend                                        AlphaBlend;                                                 // 0x0018   (0x0030)  
};

/// Struct /Script/Engine.InputScaleBias
/// Size: 0x0008 (0x000000 - 0x000008)
struct FInputScaleBias
{ 
	float                                              Scale;                                                      // 0x0000   (0x0004)  
	float                                              Bias;                                                       // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.ActorComponentDuplicatedObjectData
/// Size: 0x0010 (0x000000 - 0x000010)
struct FActorComponentDuplicatedObjectData
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.ActorComponentInstanceData
/// Size: 0x0058 (0x000000 - 0x000058)
struct FActorComponentInstanceData
{ 
	class UObject*                                     SourceComponentTemplate;                                    // 0x0008   (0x0008)  
	EComponentCreationMethod                           SourceComponentCreationMethod;                              // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            SourceComponentTypeSerializedIndex;                         // 0x0014   (0x0004)  
	TArray<char>                                       SavedProperties;                                            // 0x0018   (0x0010)  
	TArray<FActorComponentDuplicatedObjectData>        DuplicatedObjects;                                          // 0x0028   (0x0010)  
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0038   (0x0010)  
	TArray<FName>                                      ReferencedNames;                                            // 0x0048   (0x0010)  
};

/// Struct /Script/Engine.AnimInstanceProxy
/// Size: 0x06E0 (0x000000 - 0x0006E0)
struct FAnimInstanceProxy
{ 
	unsigned char                                      UnknownData00_2[0x6E0];                                     // 0x0000   (0x06E0)  MISSED
};

/// Struct /Script/Engine.KeyHandleLookupTable
/// Size: 0x0060 (0x000000 - 0x000060)
struct FKeyHandleLookupTable
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.ComponentSpacePoseLink
/// Size: 0x0000 (0x000010 - 0x000010)
struct FComponentSpacePoseLink : FPoseLinkBase
{ 
};

/// Struct /Script/Engine.ViewTargetTransitionParams
/// Size: 0x0010 (0x000000 - 0x000010)
struct FViewTargetTransitionParams
{ 
	float                                              BlendTime;                                                  // 0x0000   (0x0004)  
	EViewTargetBlendFunction                           BlendFunction;                                              // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	float                                              BlendExp;                                                   // 0x0008   (0x0004)  
	bool                                               bLockOutgoing : 1;                                          // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.RuntimeCurveLinearColor
/// Size: 0x0208 (0x000000 - 0x000208)
struct FRuntimeCurveLinearColor
{ 
	FRichCurve                                         ColorCurves;                                                // 0x0000   (0x0200)  
	class UCurveLinearColor*                           ExternalCurve;                                              // 0x0200   (0x0008)  
};

/// Struct /Script/Engine.RootMotionSourceStatus
/// Size: 0x0001 (0x000000 - 0x000001)
struct FRootMotionSourceStatus
{ 
	char                                               Flags;                                                      // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.RootMotionFinishVelocitySettings
/// Size: 0x0014 (0x000000 - 0x000014)
struct FRootMotionFinishVelocitySettings
{ 
	ERootMotionFinishVelocityMode                      Mode;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            SetVelocity;                                                // 0x0004   (0x000C)  
	float                                              ClampVelocity;                                              // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.RootMotionSource
/// Size: 0x00A0 (0x000000 - 0x0000A0)
#pragma pack(push, 0x1)
struct alignas(0x10) FRootMotionSource
{ 
	uint16_t                                           Priority;                                                   // 0x0010   (0x0002)  
	uint16_t                                           LocalID;                                                    // 0x0012   (0x0002)  
	ERootMotionAccumulateMode                          AccumulateMode;                                             // 0x0014   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              InstanceName;                                               // 0x0018   (0x0008)  
	float                                              StartTime;                                                  // 0x0020   (0x0004)  
	float                                              CurrentTime;                                                // 0x0024   (0x0004)  
	float                                              PreviousTime;                                               // 0x0028   (0x0004)  
	float                                              Duration;                                                   // 0x002C   (0x0004)  
	FRootMotionSourceStatus                            Status;                                                     // 0x0030   (0x0001)  
	FRootMotionSourceSettings                          Settings;                                                   // 0x0031   (0x0001)  
	bool                                               bInLocalSpace;                                              // 0x0032   (0x0001)  
	unsigned char                                      UnknownData01_5[0xD];                                       // 0x0033   (0x000D)  MISSED
	FRootMotionMovementParams                          RootMotionParams;                                           // 0x0040   (0x0040)  
	FRootMotionFinishVelocitySettings                  FinishVelocityParams;                                       // 0x0080   (0x0014)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0094   (0x0004)  MISSED
};
#pragma pack(pop)

/// Struct /Script/Engine.AnimNode_AssetPlayerBase
/// Size: 0x0020 (0x000010 - 0x000030)
struct FAnimNode_AssetPlayerBase : FAnimNode_Base
{ 
	int32_t                                            GroupIndex;                                                 // 0x0010   (0x0004)  
	SDK_UNDEFINED(1,666) /* TEnumAsByte<EAnimGroupRole> */ __um(GroupRole);                                        // 0x0014   (0x0001)  
	bool                                               bIgnoreForRelevancyTest;                                    // 0x0015   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0016   (0x0002)  MISSED
	float                                              BlendWeight;                                                // 0x0018   (0x0004)  
	float                                              InternalTimeAccumulator;                                    // 0x001C   (0x0004)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0020   (0x0010)  MISSED
};

/// Struct /Script/Engine.PerBoneBlendWeight
/// Size: 0x0008 (0x000000 - 0x000008)
struct FPerBoneBlendWeight
{ 
	int32_t                                            SourceIndex;                                                // 0x0000   (0x0004)  
	float                                              BlendWeight;                                                // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.PoseSnapshot
/// Size: 0x0038 (0x000000 - 0x000038)
struct FPoseSnapshot
{ 
	TArray<FTransform>                                 LocalTransforms;                                            // 0x0000   (0x0010)  
	TArray<FName>                                      BoneNames;                                                  // 0x0010   (0x0010)  
	FName                                              SkeletalMeshName;                                           // 0x0020   (0x0008)  
	FName                                              SnapshotName;                                               // 0x0028   (0x0008)  
	bool                                               bIsValid;                                                   // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimNode_Root
/// Size: 0x0020 (0x000010 - 0x000030)
struct FAnimNode_Root : FAnimNode_Base
{ 
	FPoseLink                                          Result;                                                     // 0x0010   (0x0010)  
	FName                                              Name;                                                       // 0x0020   (0x0008)  
	FName                                              Group;                                                      // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.AnimCurveParam
/// Size: 0x000C (0x000000 - 0x00000C)
struct FAnimCurveParam
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0008   (0x0004)  MISSED
};

/// Struct /Script/Engine.SceneComponentInstanceData
/// Size: 0x0050 (0x000058 - 0x0000A8)
struct FSceneComponentInstanceData : FActorComponentInstanceData
{ 
	SDK_UNDEFINED(80,667) /* TMap<USceneComponent*, FTransform> */ __um(AttachedInstanceComponents);               // 0x0058   (0x0050)  
};

/// Struct /Script/Engine.AnimationGroupReference
/// Size: 0x000C (0x000000 - 0x00000C)
struct FAnimationGroupReference
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	SDK_UNDEFINED(1,668) /* TEnumAsByte<EAnimGroupRole> */ __um(GroupRole);                                        // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.AnimGroupInstance
/// Size: 0x0070 (0x000000 - 0x000070)
struct FAnimGroupInstance
{ 
	unsigned char                                      UnknownData00_2[0x70];                                      // 0x0000   (0x0070)  MISSED
};

/// Struct /Script/Engine.AnimTickRecord
/// Size: 0x0048 (0x000000 - 0x000048)
struct FAnimTickRecord
{ 
	class UAnimationAsset*                             SourceAsset;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x40];                                      // 0x0008   (0x0040)  MISSED
};

/// Struct /Script/Engine.MarkerSyncAnimPosition
/// Size: 0x0014 (0x000000 - 0x000014)
struct FMarkerSyncAnimPosition
{ 
	FName                                              PreviousMarkerName;                                         // 0x0000   (0x0008)  
	FName                                              NextMarkerName;                                             // 0x0008   (0x0008)  
	float                                              PositionBetweenMarkers;                                     // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.BlendFilter
/// Size: 0x0078 (0x000000 - 0x000078)
struct FBlendFilter
{ 
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x0000   (0x0078)  MISSED
};

/// Struct /Script/Engine.BlendSampleData
/// Size: 0x0040 (0x000000 - 0x000040)
struct FBlendSampleData
{ 
	int32_t                                            SampleDataIndex;                                            // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UAnimSequence*                               Animation;                                                  // 0x0008   (0x0008)  
	float                                              TotalWeight;                                                // 0x0010   (0x0004)  
	float                                              Time;                                                       // 0x0014   (0x0004)  
	float                                              PreviousTime;                                               // 0x0018   (0x0004)  
	float                                              SamplePlayRate;                                             // 0x001C   (0x0004)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0020   (0x0020)  MISSED
};

/// Struct /Script/Engine.AnimationRecordingSettings
/// Size: 0x0010 (0x000000 - 0x000010)
struct FAnimationRecordingSettings
{ 
	bool                                               bRecordInWorldSpace;                                        // 0x0000   (0x0001)  
	bool                                               bRemoveRootAnimation;                                       // 0x0001   (0x0001)  
	bool                                               bAutoSaveAsset;                                             // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              SampleRate;                                                 // 0x0004   (0x0004)  
	float                                              Length;                                                     // 0x0008   (0x0004)  
	SDK_UNDEFINED(1,669) /* TEnumAsByte<ERichCurveInterpMode> */ __um(InterpMode);                                 // 0x000C   (0x0001)  
	SDK_UNDEFINED(1,670) /* TEnumAsByte<ERichCurveTangentMode> */ __um(TangentMode);                               // 0x000D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x000E   (0x0002)  MISSED
};

/// Struct /Script/Engine.ComponentSpacePose
/// Size: 0x0020 (0x000000 - 0x000020)
struct FComponentSpacePose
{ 
	TArray<FTransform>                                 Transforms;                                                 // 0x0000   (0x0010)  
	TArray<FName>                                      Names;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.LocalSpacePose
/// Size: 0x0020 (0x000000 - 0x000020)
struct FLocalSpacePose
{ 
	TArray<FTransform>                                 Transforms;                                                 // 0x0000   (0x0010)  
	TArray<FName>                                      Names;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.NamedTransform
/// Size: 0x0040 (0x000000 - 0x000040)
struct FNamedTransform
{ 
	FTransform                                         value;                                                      // 0x0000   (0x0030)  
	FName                                              Name;                                                       // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0038   (0x0008)  MISSED
};

/// Struct /Script/Engine.NamedColor
/// Size: 0x000C (0x000000 - 0x00000C)
struct FNamedColor
{ 
	FColor                                             value;                                                      // 0x0000   (0x0004)  
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.NamedVector
/// Size: 0x0014 (0x000000 - 0x000014)
struct FNamedVector
{ 
	FVector                                            value;                                                      // 0x0000   (0x000C)  
	FName                                              Name;                                                       // 0x000C   (0x0008)  
};

/// Struct /Script/Engine.NamedFloat
/// Size: 0x000C (0x000000 - 0x00000C)
struct FNamedFloat
{ 
	float                                              value;                                                      // 0x0000   (0x0004)  
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.AnimParentNodeAssetOverride
/// Size: 0x0018 (0x000000 - 0x000018)
struct FAnimParentNodeAssetOverride
{ 
	class UAnimationAsset*                             NewAsset;                                                   // 0x0000   (0x0008)  
	FGuid                                              ParentNodeGuid;                                             // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AnimBlueprintDebugData
/// Size: 0x0001 (0x000000 - 0x000001)
struct FAnimBlueprintDebugData
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AnimationFrameSnapshot
/// Size: 0x0001 (0x000000 - 0x000001)
struct FAnimationFrameSnapshot
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.StateMachineDebugData
/// Size: 0x00B0 (0x000000 - 0x0000B0)
struct FStateMachineDebugData
{ 
	unsigned char                                      UnknownData00_2[0xB0];                                      // 0x0000   (0x00B0)  MISSED
};

/// Struct /Script/Engine.StateMachineStateDebugData
/// Size: 0x0010 (0x000000 - 0x000010)
struct FStateMachineStateDebugData
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.AnimGraphBlendOptions
/// Size: 0x0008 (0x000000 - 0x000008)
struct FAnimGraphBlendOptions
{ 
	float                                              BlendInTime;                                                // 0x0000   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.GraphAssetPlayerInformation
/// Size: 0x0010 (0x000000 - 0x000010)
struct FGraphAssetPlayerInformation
{ 
	TArray<int32_t>                                    PlayerNodeIndices;                                          // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CachedPoseIndices
/// Size: 0x0010 (0x000000 - 0x000010)
struct FCachedPoseIndices
{ 
	TArray<int32_t>                                    OrderedSavedPoseNodeIndices;                                // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.RootMotionExtractionStep
/// Size: 0x0010 (0x000000 - 0x000010)
struct FRootMotionExtractionStep
{ 
	class UAnimSequence*                               AnimSequence;                                               // 0x0000   (0x0008)  
	float                                              StartPosition;                                              // 0x0008   (0x0004)  
	float                                              EndPosition;                                                // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.AnimationErrorStats
/// Size: 0x0010 (0x000000 - 0x000010)
struct FAnimationErrorStats
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.VectorCurve
/// Size: 0x0180 (0x000018 - 0x000198)
struct FVectorCurve : FAnimCurveBase
{ 
	FRichCurve                                         FloatCurves;                                                // 0x0018   (0x0180)  
};

/// Struct /Script/Engine.TransformCurve
/// Size: 0x04C8 (0x000018 - 0x0004E0)
struct FTransformCurve : FAnimCurveBase
{ 
	FVectorCurve                                       TranslationCurve;                                           // 0x0018   (0x0198)  
	FVectorCurve                                       RotationCurve;                                              // 0x01B0   (0x0198)  
	FVectorCurve                                       ScaleCurve;                                                 // 0x0348   (0x0198)  
};

/// Struct /Script/Engine.SlotEvaluationPose
/// Size: 0x0040 (0x000000 - 0x000040)
struct FSlotEvaluationPose
{ 
	SDK_UNDEFINED(1,671) /* TEnumAsByte<EAdditiveAnimationType> */ __um(AdditiveType);                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Weight;                                                     // 0x0004   (0x0004)  
	unsigned char                                      UnknownData01_6[0x38];                                      // 0x0008   (0x0038)  MISSED
};

/// Struct /Script/Engine.A2Pose
/// Size: 0x0010 (0x000000 - 0x000010)
struct FA2Pose
{ 
	TArray<FTransform>                                 Bones;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.A2CSPose
/// Size: 0x0018 (0x000010 - 0x000028)
struct FA2CSPose : FA2Pose
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0010   (0x0008)  MISSED
	TArray<char>                                       ComponentSpaceFlags;                                        // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.QueuedDrawDebugItem
/// Size: 0x0068 (0x000000 - 0x000068)
struct FQueuedDrawDebugItem
{ 
	SDK_UNDEFINED(1,672) /* TEnumAsByte<EDrawDebugItemType> */ __um(ItemType);                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            StartLoc;                                                   // 0x0004   (0x000C)  
	FVector                                            EndLoc;                                                     // 0x0010   (0x000C)  
	FVector                                            Center;                                                     // 0x001C   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0028   (0x000C)  
	float                                              Radius;                                                     // 0x0034   (0x0004)  
	float                                              Size;                                                       // 0x0038   (0x0004)  
	int32_t                                            Segments;                                                   // 0x003C   (0x0004)  
	FColor                                             Color;                                                      // 0x0040   (0x0004)  
	bool                                               bPersistentLines;                                           // 0x0044   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              LifeTime;                                                   // 0x0048   (0x0004)  
	float                                              Thickness;                                                  // 0x004C   (0x0004)  
	SDK_UNDEFINED(16,673) /* FString */                __um(Message);                                              // 0x0050   (0x0010)  
	FVector2D                                          TextScale;                                                  // 0x0060   (0x0008)  
};

/// Struct /Script/Engine.AnimMontageInstance
/// Size: 0x01B0 (0x000000 - 0x0001B0)
struct FAnimMontageInstance
{ 
	class UAnimMontage*                                Montage;                                                    // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0008   (0x0020)  MISSED
	bool                                               bPlaying;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              DefaultBlendTimeMultiplier;                                 // 0x002C   (0x0004)  
	unsigned char                                      UnknownData02_5[0xB8];                                      // 0x0030   (0x00B8)  MISSED
	TArray<int32_t>                                    NextSections;                                               // 0x00E8   (0x0010)  
	TArray<int32_t>                                    PrevSections;                                               // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData03_5[0x10];                                      // 0x0108   (0x0010)  MISSED
	TArray<FAnimNotifyEvent>                           ActiveStateBranchingPoints;                                 // 0x0118   (0x0010)  
	float                                              Position;                                                   // 0x0128   (0x0004)  
	float                                              PlayRate;                                                   // 0x012C   (0x0004)  
	FAlphaBlend                                        Blend;                                                      // 0x0130   (0x0030)  
	unsigned char                                      UnknownData04_5[0x28];                                      // 0x0160   (0x0028)  MISSED
	int32_t                                            DisableRootMotionCount;                                     // 0x0188   (0x0004)  
	unsigned char                                      UnknownData05_6[0x24];                                      // 0x018C   (0x0024)  MISSED
};

/// Struct /Script/Engine.AnimNode_ApplyMeshSpaceAdditive
/// Size: 0x00C0 (0x000010 - 0x0000D0)
struct FAnimNode_ApplyMeshSpaceAdditive : FAnimNode_Base
{ 
	FPoseLink                                          Base;                                                       // 0x0010   (0x0010)  
	FPoseLink                                          Additive;                                                   // 0x0020   (0x0010)  
	EAnimAlphaInputType                                AlphaInputType;                                             // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              Alpha;                                                      // 0x0034   (0x0004)  
	bool                                               bAlphaBoolEnabled : 1;                                      // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x7];                                       // 0x0039   (0x0007)  MISSED
	FInputAlphaBoolBlend                               AlphaBoolBlend;                                             // 0x0040   (0x0048)  
	FName                                              AlphaCurveName;                                             // 0x0088   (0x0008)  
	FInputScaleBias                                    AlphaScaleBias;                                             // 0x0090   (0x0008)  
	FInputScaleBiasClamp                               AlphaScaleBiasClamp;                                        // 0x0098   (0x0030)  
	int32_t                                            LODThreshold;                                               // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimNode_Inertialization
/// Size: 0x0060 (0x000010 - 0x000070)
struct FAnimNode_Inertialization : FAnimNode_Base
{ 
	FPoseLink                                          Source;                                                     // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_6[0x50];                                      // 0x0020   (0x0050)  MISSED
};

/// Struct /Script/Engine.InertializationPoseDiff
/// Size: 0x0028 (0x000000 - 0x000028)
struct FInertializationPoseDiff
{ 
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/Engine.InertializationCurveDiff
/// Size: 0x0008 (0x000000 - 0x000008)
struct FInertializationCurveDiff
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.InertializationBoneDiff
/// Size: 0x003C (0x000000 - 0x00003C)
struct FInertializationBoneDiff
{ 
	unsigned char                                      UnknownData00_2[0x3C];                                      // 0x0000   (0x003C)  MISSED
};

/// Struct /Script/Engine.InertializationPose
/// Size: 0x0090 (0x000000 - 0x000090)
struct FInertializationPose
{ 
	unsigned char                                      UnknownData00_2[0x90];                                      // 0x0000   (0x0090)  MISSED
};

/// Struct /Script/Engine.AnimNode_LinkedAnimGraph
/// Size: 0x0048 (0x000058 - 0x0000A0)
struct FAnimNode_LinkedAnimGraph : FAnimNode_CustomProperty
{ 
	TArray<FPoseLink>                                  InputPoses;                                                 // 0x0058   (0x0010)  
	TArray<FName>                                      InputPoseNames;                                             // 0x0068   (0x0010)  
	class UClass*                                      InstanceClass;                                              // 0x0078   (0x0008)  
	FName                                              Tag;                                                        // 0x0080   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0088   (0x0010)  MISSED
	bool                                               bReceiveNotifiesFromLinkedInstances : 1;                    // 0x0098:0 (0x0001)  
	bool                                               bPropagateNotifiesToLinkedInstances : 1;                    // 0x0098:1 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0099   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimNode_LinkedAnimLayer
/// Size: 0x0010 (0x0000A0 - 0x0000B0)
struct FAnimNode_LinkedAnimLayer : FAnimNode_LinkedAnimGraph
{ 
	class UClass*                                      Interface;                                                  // 0x00A0   (0x0008)  
	FName                                              Layer;                                                      // 0x00A8   (0x0008)  
};

/// Struct /Script/Engine.AnimNode_LinkedInputPose
/// Size: 0x0068 (0x000010 - 0x000078)
struct FAnimNode_LinkedInputPose : FAnimNode_Base
{ 
	FName                                              Name;                                                       // 0x0010   (0x0008)  
	FName                                              Graph;                                                      // 0x0018   (0x0008)  
	FPoseLink                                          InputPose;                                                  // 0x0020   (0x0010)  
	unsigned char                                      UnknownData00_6[0x48];                                      // 0x0030   (0x0048)  MISSED
};

/// Struct /Script/Engine.AnimNode_SaveCachedPose
/// Size: 0x00A8 (0x000010 - 0x0000B8)
struct FAnimNode_SaveCachedPose : FAnimNode_Base
{ 
	FPoseLink                                          Pose;                                                       // 0x0010   (0x0010)  
	FName                                              CachePoseName;                                              // 0x0020   (0x0008)  
	unsigned char                                      UnknownData00_6[0x90];                                      // 0x0028   (0x0090)  MISSED
};

/// Struct /Script/Engine.AnimNode_SequencePlayer
/// Size: 0x0048 (0x000030 - 0x000078)
struct FAnimNode_SequencePlayer : FAnimNode_AssetPlayerBase
{ 
	class UAnimSequenceBase*                           Sequence;                                                   // 0x0030   (0x0008)  
	float                                              PlayRateBasis;                                              // 0x0038   (0x0004)  
	float                                              PlayRate;                                                   // 0x003C   (0x0004)  
	FInputScaleBiasClamp                               PlayRateScaleBiasClamp;                                     // 0x0040   (0x0030)  
	float                                              StartPosition;                                              // 0x0070   (0x0004)  
	bool                                               bLoopAnimation;                                             // 0x0074   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0075   (0x0003)  MISSED
};

/// Struct /Script/Engine.AnimNode_StateMachine
/// Size: 0x00A0 (0x000010 - 0x0000B0)
struct FAnimNode_StateMachine : FAnimNode_Base
{ 
	int32_t                                            StateMachineIndexInClass;                                   // 0x0010   (0x0004)  
	int32_t                                            MaxTransitionsPerFrame;                                     // 0x0014   (0x0004)  
	bool                                               bSkipFirstUpdateTransition;                                 // 0x0018   (0x0001)  
	bool                                               bReinitializeOnBecomingRelevant;                            // 0x0019   (0x0001)  
	unsigned char                                      UnknownData00_6[0x96];                                      // 0x001A   (0x0096)  MISSED
};

/// Struct /Script/Engine.AnimationPotentialTransition
/// Size: 0x0030 (0x000000 - 0x000030)
struct FAnimationPotentialTransition
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Engine.AnimationActiveTransitionEntry
/// Size: 0x00C8 (0x000000 - 0x0000C8)
struct FAnimationActiveTransitionEntry
{ 
	class UBlendProfile*                               BlendProfile;                                               // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimNode_TransitionPoseEvaluator
/// Size: 0x0048 (0x000010 - 0x000058)
struct FAnimNode_TransitionPoseEvaluator : FAnimNode_Base
{ 
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0010   (0x0038)  MISSED
	int32_t                                            FramesToCachePose;                                          // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x004C   (0x0004)  MISSED
	SDK_UNDEFINED(1,674) /* TEnumAsByte<EEvaluatorDataSource> */ __um(DataSource);                                 // 0x0050   (0x0001)  
	SDK_UNDEFINED(1,675) /* TEnumAsByte<EEvaluatorMode> */ __um(EvaluatorMode);                                    // 0x0051   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x0052   (0x0006)  MISSED
};

/// Struct /Script/Engine.AnimNode_TransitionResult
/// Size: 0x0018 (0x000010 - 0x000028)
struct FAnimNode_TransitionResult : FAnimNode_Base
{ 
	bool                                               bCanEnterTransition;                                        // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x17];                                      // 0x0011   (0x0017)  MISSED
};

/// Struct /Script/Engine.AnimNode_UseCachedPose
/// Size: 0x0018 (0x000010 - 0x000028)
struct FAnimNode_UseCachedPose : FAnimNode_Base
{ 
	FPoseLink                                          LinkToCachingNode;                                          // 0x0010   (0x0010)  
	FName                                              CachePoseName;                                              // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.AnimNode_ConvertLocalToComponentSpace
/// Size: 0x0010 (0x000010 - 0x000020)
struct FAnimNode_ConvertLocalToComponentSpace : FAnimNode_Base
{ 
	FPoseLink                                          LocalPose;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimNode_ConvertComponentToLocalSpace
/// Size: 0x0010 (0x000010 - 0x000020)
struct FAnimNode_ConvertComponentToLocalSpace : FAnimNode_Base
{ 
	FComponentSpacePoseLink                            ComponentPose;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimNotifyArray
/// Size: 0x0010 (0x000000 - 0x000010)
struct FAnimNotifyArray
{ 
	TArray<FAnimNotifyEventReference>                  Notifies;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CompressedTrack
/// Size: 0x0038 (0x000000 - 0x000038)
struct FCompressedTrack
{ 
	TArray<char>                                       ByteStream;                                                 // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
	float                                              Mins;                                                       // 0x0020   (0x000C)  
	float                                              Ranges;                                                     // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.CurveTrack
/// Size: 0x0018 (0x000000 - 0x000018)
struct FCurveTrack
{ 
	FName                                              CurveName;                                                  // 0x0000   (0x0008)  
	TArray<float>                                      CurveWeights;                                               // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.ScaleTrack
/// Size: 0x0020 (0x000000 - 0x000020)
struct FScaleTrack
{ 
	TArray<FVector>                                    ScaleKeys;                                                  // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.RotationTrack
/// Size: 0x0020 (0x000000 - 0x000020)
struct FRotationTrack
{ 
	TArray<FQuat>                                      RotKeys;                                                    // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.TranslationTrack
/// Size: 0x0020 (0x000000 - 0x000020)
struct FTranslationTrack
{ 
	TArray<FVector>                                    PosKeys;                                                    // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.RawAnimSequenceTrack
/// Size: 0x0030 (0x000000 - 0x000030)
struct FRawAnimSequenceTrack
{ 
	TArray<FVector>                                    PosKeys;                                                    // 0x0000   (0x0010)  
	TArray<FQuat>                                      RotKeys;                                                    // 0x0010   (0x0010)  
	TArray<FVector>                                    ScaleKeys;                                                  // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.AnimSequenceTrackContainer
/// Size: 0x0020 (0x000000 - 0x000020)
struct FAnimSequenceTrackContainer
{ 
	TArray<FRawAnimSequenceTrack>                      AnimationTracks;                                            // 0x0000   (0x0010)  
	TArray<FName>                                      TrackNames;                                                 // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimSingleNodeInstanceProxy
/// Size: 0x0150 (0x0006E0 - 0x000830)
struct FAnimSingleNodeInstanceProxy : FAnimInstanceProxy
{ 
	unsigned char                                      UnknownData00_1[0x150];                                     // 0x06E0   (0x0150)  MISSED
};

/// Struct /Script/Engine.AnimNode_SingleNode
/// Size: 0x0020 (0x000010 - 0x000030)
struct FAnimNode_SingleNode : FAnimNode_Base
{ 
	FPoseLink                                          SourcePose;                                                 // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0020   (0x0010)  MISSED
};

/// Struct /Script/Engine.AnimationTransitionRule
/// Size: 0x0010 (0x000000 - 0x000010)
struct FAnimationTransitionRule
{ 
	FName                                              RuleToExecute;                                              // 0x0000   (0x0008)  
	bool                                               TransitionReturnVal;                                        // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            TransitionIndex;                                            // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.AnimationState
/// Size: 0x0020 (0x000008 - 0x000028)
struct FAnimationState : FAnimationStateBase
{ 
	TArray<FAnimationTransitionRule>                   Transitions;                                                // 0x0008   (0x0010)  
	int32_t                                            StateRootNodeIndex;                                         // 0x0018   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x001C   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0020   (0x0004)  
	int32_t                                            FullyBlendedNotify;                                         // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.AnimNotifyTrack
/// Size: 0x0038 (0x000000 - 0x000038)
struct FAnimNotifyTrack
{ 
	FName                                              TrackName;                                                  // 0x0000   (0x0008)  
	FLinearColor                                       TrackColor;                                                 // 0x0008   (0x0010)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0018   (0x0020)  MISSED
};

/// Struct /Script/Engine.PerBoneBlendWeights
/// Size: 0x0010 (0x000000 - 0x000010)
struct FPerBoneBlendWeights
{ 
	TArray<FPerBoneBlendWeight>                        BoneBlendWeights;                                           // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.AssetImportInfo
/// Size: 0x0001 (0x000000 - 0x000001)
struct FAssetImportInfo
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AtmospherePrecomputeInstanceData
/// Size: 0x0090 (0x0000A8 - 0x000138)
struct FAtmospherePrecomputeInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_1[0x90];                                      // 0x00A8   (0x0090)  MISSED
};

/// Struct /Script/Engine.AudioReverbEffect
/// Size: 0x0040 (0x000008 - 0x000048)
struct FAudioReverbEffect : FAudioEffectParameters
{ 
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0008   (0x0040)  MISSED
};

/// Struct /Script/Engine.NavAvoidanceData
/// Size: 0x003C (0x000000 - 0x00003C)
struct FNavAvoidanceData
{ 
	unsigned char                                      UnknownData00_2[0x3C];                                      // 0x0000   (0x003C)  MISSED
};

/// Struct /Script/Engine.GridBlendSample
/// Size: 0x001C (0x000000 - 0x00001C)
struct FGridBlendSample
{ 
	FEditorElement                                     GridElement;                                                // 0x0000   (0x0018)  
	float                                              BlendWeight;                                                // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.BPEditorBookmarkNode
/// Size: 0x0038 (0x000000 - 0x000038)
struct FBPEditorBookmarkNode
{ 
	FGuid                                              NodeGuid;                                                   // 0x0000   (0x0010)  
	FGuid                                              ParentGuid;                                                 // 0x0010   (0x0010)  
	SDK_UNDEFINED(24,676) /* FText */                  __um(DisplayName);                                          // 0x0020   (0x0018)  
};

/// Struct /Script/Engine.EditedDocumentInfo
/// Size: 0x0030 (0x000000 - 0x000030)
struct FEditedDocumentInfo
{ 
	FSoftObjectPath                                    EditedObjectPath;                                           // 0x0000   (0x0018)  
	FVector2D                                          SavedViewOffset;                                            // 0x0018   (0x0008)  
	float                                              SavedZoomAmount;                                            // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0024   (0x0004)  MISSED
	class UObject*                                     EditedObject;                                               // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.BPInterfaceDescription
/// Size: 0x0018 (0x000000 - 0x000018)
struct FBPInterfaceDescription
{ 
	class UClass*                                      Interface;                                                  // 0x0000   (0x0008)  
	TArray<class UEdGraph*>                            Graphs;                                                     // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BPVariableDescription
/// Size: 0x00D0 (0x000000 - 0x0000D0)
struct FBPVariableDescription
{ 
	FName                                              VarName;                                                    // 0x0000   (0x0008)  
	FGuid                                              VarGuid;                                                    // 0x0008   (0x0010)  
	FEdGraphPinType                                    VarType;                                                    // 0x0018   (0x0058)  
	SDK_UNDEFINED(16,677) /* FString */                __um(FriendlyName);                                         // 0x0070   (0x0010)  
	SDK_UNDEFINED(24,678) /* FText */                  __um(Category);                                             // 0x0080   (0x0018)  
	uint64_t                                           PropertyFlags;                                              // 0x0098   (0x0008)  
	FName                                              RepNotifyFunc;                                              // 0x00A0   (0x0008)  
	SDK_UNDEFINED(1,679) /* TEnumAsByte<ELifetimeCondition> */ __um(ReplicationCondition);                         // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00A9   (0x0007)  MISSED
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x00B0   (0x0010)  
	SDK_UNDEFINED(16,680) /* FString */                __um(DefaultValue);                                         // 0x00C0   (0x0010)  
};

/// Struct /Script/Engine.BlueprintMacroCosmeticInfo
/// Size: 0x0001 (0x000000 - 0x000001)
struct FBlueprintMacroCosmeticInfo
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CompilerNativizationOptions
/// Size: 0x0080 (0x000000 - 0x000080)
struct FCompilerNativizationOptions
{ 
	FName                                              PlatformName;                                               // 0x0000   (0x0008)  
	bool                                               ServerOnlyPlatform;                                         // 0x0008   (0x0001)  
	bool                                               ClientOnlyPlatform;                                         // 0x0009   (0x0001)  
	bool                                               bExcludeMonolithicHeaders;                                  // 0x000A   (0x0001)  
	unsigned char                                      UnknownData00_5[0x5];                                       // 0x000B   (0x0005)  MISSED
	TArray<FName>                                      ExcludedModules;                                            // 0x0010   (0x0010)  
	SDK_UNDEFINED(80,681) /* TSet<FSoftObjectPath> */  __um(ExcludedAssets);                                       // 0x0020   (0x0050)  
	SDK_UNDEFINED(16,682) /* TArray<FString> */        __um(ExcludedFolderPaths);                                  // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.EventGraphFastCallPair
/// Size: 0x0010 (0x000000 - 0x000010)
struct FEventGraphFastCallPair
{ 
	class UFunction*                                   FunctionToPatch;                                            // 0x0000   (0x0008)  
	int32_t                                            EventGraphCallOffset;                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/Engine.BlueprintDebugData
/// Size: 0x0001 (0x000000 - 0x000001)
struct FBlueprintDebugData
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.PointerToUberGraphFrame
/// Size: 0x0008 (0x000000 - 0x000008)
struct FPointerToUberGraphFrame
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.DebuggingInfoForSingleFunction
/// Size: 0x0190 (0x000000 - 0x000190)
struct FDebuggingInfoForSingleFunction
{ 
	unsigned char                                      UnknownData00_2[0x190];                                     // 0x0000   (0x0190)  MISSED
};

/// Struct /Script/Engine.NodeToCodeAssociation
/// Size: 0x0014 (0x000000 - 0x000014)
struct FNodeToCodeAssociation
{ 
	unsigned char                                      UnknownData00_2[0x14];                                      // 0x0000   (0x0014)  MISSED
};

/// Struct /Script/Engine.AnimCurveType
/// Size: 0x0002 (0x000000 - 0x000002)
struct FAnimCurveType
{ 
	unsigned char                                      UnknownData00_2[0x2];                                       // 0x0000   (0x0002)  MISSED
};

/// Struct /Script/Engine.BookmarkBaseJumpToSettings
/// Size: 0x0001 (0x000000 - 0x000001)
struct FBookmarkBaseJumpToSettings
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.BookmarkJumpToSettings
/// Size: 0x0000 (0x000001 - 0x000001)
struct FBookmarkJumpToSettings : FBookmarkBaseJumpToSettings
{ 
};

/// Struct /Script/Engine.Bookmark2DJumpToSettings
/// Size: 0x0001 (0x000000 - 0x000001)
struct FBookmark2DJumpToSettings
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CachedAnimTransitionData
/// Size: 0x0024 (0x000000 - 0x000024)
struct FCachedAnimTransitionData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              FromStateName;                                              // 0x0008   (0x0008)  
	FName                                              ToStateName;                                                // 0x0010   (0x0008)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0018   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimRelevancyData
/// Size: 0x001C (0x000000 - 0x00001C)
struct FCachedAnimRelevancyData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              StateName;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0010   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimAssetPlayerData
/// Size: 0x0018 (0x000000 - 0x000018)
struct FCachedAnimAssetPlayerData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              StateName;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.CachedAnimStateData
/// Size: 0x001C (0x000000 - 0x00001C)
struct FCachedAnimStateData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              StateName;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0010   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimStateArray
/// Size: 0x0018 (0x000000 - 0x000018)
struct FCachedAnimStateArray
{ 
	TArray<FCachedAnimStateData>                       States;                                                     // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.PooledCameraShakes
/// Size: 0x0010 (0x000000 - 0x000010)
struct FPooledCameraShakes
{ 
	TArray<class UCameraShake*>                        PooledShakes;                                               // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.DummySpacerCameraTypes
/// Size: 0x0001 (0x000000 - 0x000001)
struct FDummySpacerCameraTypes
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CanvasIcon
/// Size: 0x0018 (0x000000 - 0x000018)
struct FCanvasIcon
{ 
	class UTexture*                                    Texture;                                                    // 0x0000   (0x0008)  
	float                                              U;                                                          // 0x0008   (0x0004)  
	float                                              V;                                                          // 0x000C   (0x0004)  
	float                                              UL;                                                         // 0x0010   (0x0004)  
	float                                              VL;                                                         // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.WrappedStringElement
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWrappedStringElement
{ 
	SDK_UNDEFINED(16,683) /* FString */                __um(value);                                                // 0x0000   (0x0010)  
	FVector2D                                          LineExtent;                                                 // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.TextSizingParameters
/// Size: 0x0028 (0x000000 - 0x000028)
struct FTextSizingParameters
{ 
	float                                              DrawX;                                                      // 0x0000   (0x0004)  
	float                                              DrawY;                                                      // 0x0004   (0x0004)  
	float                                              DrawXL;                                                     // 0x0008   (0x0004)  
	float                                              DrawYL;                                                     // 0x000C   (0x0004)  
	FVector2D                                          Scaling;                                                    // 0x0010   (0x0008)  
	class UFont*                                       DrawFont;                                                   // 0x0018   (0x0008)  
	FVector2D                                          SpacingAdjust;                                              // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.ChildActorAttachedActorInfo
/// Size: 0x0040 (0x000000 - 0x000040)
struct FChildActorAttachedActorInfo
{ 
	SDK_UNDEFINED(8,684) /* TWeakObjectPtr<AActor*> */ __um(Actor);                                                // 0x0000   (0x0008)  
	FName                                              SocketName;                                                 // 0x0008   (0x0008)  
	FTransform                                         RelativeTransform;                                          // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.ChildActorComponentInstanceData
/// Size: 0x0030 (0x0000A8 - 0x0000D8)
struct FChildActorComponentInstanceData : FSceneComponentInstanceData
{ 
	class UClass*                                      ChildActorClass;                                            // 0x00A8   (0x0008)  
	FName                                              ChildActorName;                                             // 0x00B0   (0x0008)  
	TArray<FChildActorAttachedActorInfo>               AttachedActors;                                             // 0x00B8   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x00C8   (0x0010)  MISSED
};

/// Struct /Script/Engine.AutoCompleteNode
/// Size: 0x0028 (0x000000 - 0x000028)
struct FAutoCompleteNode
{ 
	int32_t                                            IndexChar;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<int32_t>                                    AutoCompleteListIndices;                                    // 0x0008   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0018   (0x0010)  MISSED
};

/// Struct /Script/Engine.NamedCurveValue
/// Size: 0x000C (0x000000 - 0x00000C)
struct FNamedCurveValue
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	float                                              value;                                                      // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.DataTableCategoryHandle
/// Size: 0x0018 (0x000000 - 0x000018)
struct FDataTableCategoryHandle
{ 
	class UDataTable*                                  DataTable;                                                  // 0x0000   (0x0008)  
	FName                                              ColumnName;                                                 // 0x0008   (0x0008)  
	FName                                              RowContents;                                                // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.DataTableRowHandle
/// Size: 0x0010 (0x000000 - 0x000010)
struct FDataTableRowHandle
{ 
	class UDataTable*                                  DataTable;                                                  // 0x0000   (0x0008)  
	FName                                              RowName;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RollbackNetStartupActorInfo
/// Size: 0x00B0 (0x000000 - 0x0000B0)
struct FRollbackNetStartupActorInfo
{ 
	class UObject*                                     Archetype;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x0010   (0x0028)  MISSED
	class ULevel*                                      Level;                                                      // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_5[0x60];                                      // 0x0040   (0x0060)  MISSED
	TArray<class UObject*>                             ObjReferences;                                              // 0x00A0   (0x0010)  
};

/// Struct /Script/Engine.LevelNameAndTime
/// Size: 0x0018 (0x000000 - 0x000018)
struct FLevelNameAndTime
{ 
	SDK_UNDEFINED(16,685) /* FString */                __um(LevelName);                                            // 0x0000   (0x0010)  
	uint32_t                                           LevelChangeTimeInMS;                                        // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.GraphReference
/// Size: 0x0020 (0x000000 - 0x000020)
struct FGraphReference
{ 
	class UEdGraph*                                    MacroGraph;                                                 // 0x0000   (0x0008)  
	class UBlueprint*                                  GraphBlueprint;                                             // 0x0008   (0x0008)  
	FGuid                                              GraphGuid;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.EdGraphPinReference
/// Size: 0x0018 (0x000000 - 0x000018)
struct FEdGraphPinReference
{ 
	SDK_UNDEFINED(8,686) /* TWeakObjectPtr<UEdGraphNode*> */ __um(OwningNode);                                     // 0x0000   (0x0008)  
	FGuid                                              PinId;                                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.EdGraphSchemaAction
/// Size: 0x0100 (0x000000 - 0x000100)
struct FEdGraphSchemaAction
{ 
	SDK_UNDEFINED(24,687) /* FText */                  __um(MenuDescription);                                      // 0x0008   (0x0018)  
	SDK_UNDEFINED(24,688) /* FText */                  __um(TooltipDescription);                                   // 0x0020   (0x0018)  
	SDK_UNDEFINED(24,689) /* FText */                  __um(Category);                                             // 0x0038   (0x0018)  
	SDK_UNDEFINED(24,690) /* FText */                  __um(Keywords);                                             // 0x0050   (0x0018)  
	int32_t                                            Grouping;                                                   // 0x0068   (0x0004)  
	int32_t                                            SectionID;                                                  // 0x006C   (0x0004)  
	SDK_UNDEFINED(16,691) /* TArray<FString> */        __um(MenuDescriptionArray);                                 // 0x0070   (0x0010)  
	SDK_UNDEFINED(16,692) /* TArray<FString> */        __um(FullSearchTitlesArray);                                // 0x0080   (0x0010)  
	SDK_UNDEFINED(16,693) /* TArray<FString> */        __um(FullSearchKeywordsArray);                              // 0x0090   (0x0010)  
	SDK_UNDEFINED(16,694) /* TArray<FString> */        __um(FullSearchCategoryArray);                              // 0x00A0   (0x0010)  
	SDK_UNDEFINED(16,695) /* TArray<FString> */        __um(LocalizedMenuDescriptionArray);                        // 0x00B0   (0x0010)  
	SDK_UNDEFINED(16,696) /* TArray<FString> */        __um(LocalizedFullSearchTitlesArray);                       // 0x00C0   (0x0010)  
	SDK_UNDEFINED(16,697) /* TArray<FString> */        __um(LocalizedFullSearchKeywordsArray);                     // 0x00D0   (0x0010)  
	SDK_UNDEFINED(16,698) /* TArray<FString> */        __um(LocalizedFullSearchCategoryArray);                     // 0x00E0   (0x0010)  
	SDK_UNDEFINED(16,699) /* FString */                __um(SearchText);                                           // 0x00F0   (0x0010)  
};

/// Struct /Script/Engine.EdGraphSchemaAction_NewNode
/// Size: 0x0008 (0x000100 - 0x000108)
struct FEdGraphSchemaAction_NewNode : FEdGraphSchemaAction
{ 
	class UEdGraphNode*                                NodeTemplate;                                               // 0x0100   (0x0008)  
};

/// Struct /Script/Engine.ScreenMessageString
/// Size: 0x0030 (0x000000 - 0x000030)
struct FScreenMessageString
{ 
	uint64_t                                           Key;                                                        // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,700) /* FString */                __um(ScreenMessage);                                        // 0x0008   (0x0010)  
	FColor                                             DisplayColor;                                               // 0x0018   (0x0004)  
	float                                              TimeToDisplay;                                              // 0x001C   (0x0004)  
	float                                              CurrentTimeDisplayed;                                       // 0x0020   (0x0004)  
	FVector2D                                          TextScale;                                                  // 0x0024   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.URL
/// Size: 0x0068 (0x000000 - 0x000068)
struct FURL
{ 
	SDK_UNDEFINED(16,701) /* FString */                __um(Protocol);                                             // 0x0000   (0x0010)  
	SDK_UNDEFINED(16,702) /* FString */                __um(Host);                                                 // 0x0010   (0x0010)  
	int32_t                                            Port;                                                       // 0x0020   (0x0004)  
	int32_t                                            Valid;                                                      // 0x0024   (0x0004)  
	SDK_UNDEFINED(16,703) /* FString */                __um(Map);                                                  // 0x0028   (0x0010)  
	SDK_UNDEFINED(16,704) /* FString */                __um(RedirectURL);                                          // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,705) /* TArray<FString> */        __um(Op);                                                   // 0x0048   (0x0010)  
	SDK_UNDEFINED(16,706) /* FString */                __um(Portal);                                               // 0x0058   (0x0010)  
};

/// Struct /Script/Engine.FullyLoadedPackagesInfo
/// Size: 0x0038 (0x000000 - 0x000038)
struct FFullyLoadedPackagesInfo
{ 
	SDK_UNDEFINED(1,707) /* TEnumAsByte<EFullyLoadPackageType> */ __um(FullyLoadType);                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	SDK_UNDEFINED(16,708) /* FString */                __um(Tag);                                                  // 0x0008   (0x0010)  
	TArray<FName>                                      PackagesToLoad;                                             // 0x0018   (0x0010)  
	TArray<class UObject*>                             LoadedObjects;                                              // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.LevelStreamingStatus
/// Size: 0x0010 (0x000000 - 0x000010)
struct FLevelStreamingStatus
{ 
	FName                                              PackageName;                                                // 0x0000   (0x0008)  
	bool                                               bShouldBeLoaded : 1;                                        // 0x0008:0 (0x0001)  
	bool                                               bShouldBeVisible : 1;                                       // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0009   (0x0003)  MISSED
	uint32_t                                           LODIndex;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.NamedNetDriver
/// Size: 0x0010 (0x000000 - 0x000010)
struct FNamedNetDriver
{ 
	class UNetDriver*                                  NetDriver;                                                  // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.WorldContext
/// Size: 0x0280 (0x000000 - 0x000280)
struct FWorldContext
{ 
	FURL                                               LastURL;                                                    // 0x00D0   (0x0068)  
	FURL                                               LastRemoteURL;                                              // 0x0138   (0x0068)  
	class UPendingNetGame*                             PendingNetGame;                                             // 0x01A0   (0x0008)  
	TArray<FFullyLoadedPackagesInfo>                   PackagesToFullyLoad;                                        // 0x01A8   (0x0010)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x01B8   (0x0010)  MISSED
	TArray<class ULevel*>                              LoadedLevelsForPendingMapChange;                            // 0x01C8   (0x0010)  
	unsigned char                                      UnknownData01_5[0x18];                                      // 0x01D8   (0x0018)  MISSED
	TArray<class UObjectReferencer*>                   ObjectReferencers;                                          // 0x01F0   (0x0010)  
	TArray<FLevelStreamingStatus>                      PendingLevelStreamingStatusUpdates;                         // 0x0200   (0x0010)  
	class UGameViewportClient*                         GameViewport;                                               // 0x0210   (0x0008)  
	class UGameInstance*                               OwningGameInstance;                                         // 0x0218   (0x0008)  
	TArray<FNamedNetDriver>                            ActiveNetDrivers;                                           // 0x0220   (0x0010)  
	unsigned char                                      UnknownData02_6[0x50];                                      // 0x0230   (0x0050)  MISSED
};

/// Struct /Script/Engine.ExposureSettings
/// Size: 0x0008 (0x000000 - 0x000008)
struct FExposureSettings
{ 
	float                                              FixedEV100;                                                 // 0x0000   (0x0004)  
	bool                                               bFixed;                                                     // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.TickPrerequisite
/// Size: 0x0010 (0x000000 - 0x000010)
struct FTickPrerequisite
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.CanvasUVTri
/// Size: 0x0060 (0x000000 - 0x000060)
struct FCanvasUVTri
{ 
	FVector2D                                          V0_Pos;                                                     // 0x0000   (0x0008)  
	FVector2D                                          V0_UV;                                                      // 0x0008   (0x0008)  
	FLinearColor                                       V0_Color;                                                   // 0x0010   (0x0010)  
	FVector2D                                          V1_Pos;                                                     // 0x0020   (0x0008)  
	FVector2D                                          V1_UV;                                                      // 0x0028   (0x0008)  
	FLinearColor                                       V1_Color;                                                   // 0x0030   (0x0010)  
	FVector2D                                          V2_Pos;                                                     // 0x0040   (0x0008)  
	FVector2D                                          V2_UV;                                                      // 0x0048   (0x0008)  
	FLinearColor                                       V2_Color;                                                   // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.DepthFieldGlowInfo
/// Size: 0x0024 (0x000000 - 0x000024)
struct FDepthFieldGlowInfo
{ 
	bool                                               bEnableGlow : 1;                                            // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0001   (0x0003)  MISSED
	FLinearColor                                       GlowColor;                                                  // 0x0004   (0x0010)  
	FVector2D                                          GlowOuterRadius;                                            // 0x0014   (0x0008)  
	FVector2D                                          GlowInnerRadius;                                            // 0x001C   (0x0008)  
};

/// Struct /Script/Engine.FontRenderInfo
/// Size: 0x0028 (0x000000 - 0x000028)
struct FFontRenderInfo
{ 
	bool                                               bClipText : 1;                                              // 0x0000:0 (0x0001)  
	bool                                               bEnableShadow : 1;                                          // 0x0000:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0001   (0x0003)  MISSED
	FDepthFieldGlowInfo                                GlowInfo;                                                   // 0x0004   (0x0024)  
};

/// Struct /Script/Engine.ComponentReference
/// Size: 0x0028 (0x000000 - 0x000028)
struct FComponentReference
{ 
	class AActor*                                      OtherActor;                                                 // 0x0000   (0x0008)  
	FName                                              ComponentProperty;                                          // 0x0008   (0x0008)  
	SDK_UNDEFINED(16,709) /* FString */                __um(PathToComponent);                                      // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0020   (0x0008)  MISSED
};

/// Struct /Script/Engine.DamageEvent
/// Size: 0x0010 (0x000000 - 0x000010)
struct FDamageEvent
{ 
	class UClass*                                      DamageTypeClass;                                            // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RadialDamageParams
/// Size: 0x0014 (0x000000 - 0x000014)
struct FRadialDamageParams
{ 
	float                                              BaseDamage;                                                 // 0x0000   (0x0004)  
	float                                              MinimumDamage;                                              // 0x0004   (0x0004)  
	float                                              InnerRadius;                                                // 0x0008   (0x0004)  
	float                                              OuterRadius;                                                // 0x000C   (0x0004)  
	float                                              DamageFalloff;                                              // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.RadialDamageEvent
/// Size: 0x0030 (0x000010 - 0x000040)
struct FRadialDamageEvent : FDamageEvent
{ 
	FRadialDamageParams                                Params;                                                     // 0x0010   (0x0014)  
	FVector                                            Origin;                                                     // 0x0024   (0x000C)  
	TArray<FHitResult>                                 ComponentHits;                                              // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.PointDamageEvent
/// Size: 0x0098 (0x000010 - 0x0000A8)
struct FPointDamageEvent : FDamageEvent
{ 
	float                                              Damage;                                                     // 0x0010   (0x0004)  
	FVector_NetQuantizeNormal                          ShotDirection;                                              // 0x0014   (0x000C)  
	FHitResult                                         HitInfo;                                                    // 0x0020   (0x0088)  
};

/// Struct /Script/Engine.MeshBuildSettings
/// Size: 0x0030 (0x000000 - 0x000030)
struct FMeshBuildSettings
{ 
	bool                                               bUseMikkTSpace : 1;                                         // 0x0000:0 (0x0001)  
	bool                                               bRecomputeNormals : 1;                                      // 0x0000:1 (0x0001)  
	bool                                               bRecomputeTangents : 1;                                     // 0x0000:2 (0x0001)  
	bool                                               bComputeWeightedNormals : 1;                                // 0x0000:3 (0x0001)  
	bool                                               bRemoveDegenerates : 1;                                     // 0x0000:4 (0x0001)  
	bool                                               bBuildAdjacencyBuffer : 1;                                  // 0x0000:5 (0x0001)  
	bool                                               bBuildReversedIndexBuffer : 1;                              // 0x0000:6 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x0000:7 (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x0001:0 (0x0001)  
	bool                                               bGenerateLightmapUVs : 1;                                   // 0x0001:1 (0x0001)  
	bool                                               bGenerateDistanceFieldAsIfTwoSided : 1;                     // 0x0001:2 (0x0001)  
	bool                                               bSupportFaceRemap : 1;                                      // 0x0001:3 (0x0001)  
	unsigned char                                      UnknownData00_4[0x2];                                       // 0x0002   (0x0002)  MISSED
	int32_t                                            MinLightmapResolution;                                      // 0x0004   (0x0004)  
	int32_t                                            SrcLightmapIndex;                                           // 0x0008   (0x0004)  
	int32_t                                            DstLightmapIndex;                                           // 0x000C   (0x0004)  
	float                                              BuildScale;                                                 // 0x0010   (0x0004)  
	FVector                                            BuildScale3D;                                               // 0x0014   (0x000C)  
	float                                              DistanceFieldResolutionScale;                               // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0024   (0x0004)  MISSED
	class UStaticMesh*                                 DistanceFieldReplacementMesh;                               // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.POV
/// Size: 0x001C (0x000000 - 0x00001C)
struct FPOV
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	float                                              FOV;                                                        // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.AnimUpdateRateParameters
/// Size: 0x0088 (0x000000 - 0x000088)
struct FAnimUpdateRateParameters
{ 
	EUpdateRateShiftBucket                             ShiftBucket;                                                // 0x0001   (0x0001)  
	bool                                               bInterpolateSkippedFrames : 1;                              // 0x0002:0 (0x0001)  
	bool                                               bShouldUseLodMap : 1;                                       // 0x0002:1 (0x0001)  
	bool                                               bShouldUseMinLod : 1;                                       // 0x0002:2 (0x0001)  
	bool                                               bSkipUpdate : 1;                                            // 0x0002:3 (0x0001)  
	bool                                               bSkipEvaluation : 1;                                        // 0x0002:4 (0x0001)  
	unsigned char                                      UnknownData00_4[0x1];                                       // 0x0003   (0x0001)  MISSED
	int32_t                                            UpdateRate;                                                 // 0x0004   (0x0004)  
	int32_t                                            EvaluationRate;                                             // 0x0008   (0x0004)  
	float                                              TickedPoseOffestTime;                                       // 0x000C   (0x0004)  
	float                                              AdditionalTime;                                             // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	int32_t                                            BaseNonRenderedUpdateRate;                                  // 0x0018   (0x0004)  
	int32_t                                            MaxEvalRateForInterpolation;                                // 0x001C   (0x0004)  
	TArray<float>                                      BaseVisibleDistanceFactorThesholds;                         // 0x0020   (0x0010)  
	SDK_UNDEFINED(80,710) /* TMap<int32_t, int32_t> */ __um(LODToFrameSkipMap);                                    // 0x0030   (0x0050)  
	int32_t                                            SkippedUpdateFrames;                                        // 0x0080   (0x0004)  
	int32_t                                            SkippedEvalFrames;                                          // 0x0084   (0x0004)  
};

/// Struct /Script/Engine.AnimSlotDesc
/// Size: 0x000C (0x000000 - 0x00000C)
struct FAnimSlotDesc
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x0008)  
	int32_t                                            NumChannels;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.AnimSlotInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FAnimSlotInfo
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x0008)  
	TArray<float>                                      ChannelWeights;                                             // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.MTDResult
/// Size: 0x0010 (0x000000 - 0x000010)
struct FMTDResult
{ 
	FVector                                            Direction;                                                  // 0x0000   (0x000C)  
	float                                              Distance;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.OverlapResult
/// Size: 0x0018 (0x000000 - 0x000018)
struct FOverlapResult
{ 
	SDK_UNDEFINED(8,711) /* TWeakObjectPtr<AActor*> */ __um(Actor);                                                // 0x0000   (0x0008)  
	SDK_UNDEFINED(8,712) /* TWeakObjectPtr<UPrimitiveComponent*> */ __um(Component);                               // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0010   (0x0004)  MISSED
	bool                                               bBlockingHit : 1;                                           // 0x0014:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Struct /Script/Engine.SwarmDebugOptions
/// Size: 0x0004 (0x000000 - 0x000004)
struct FSwarmDebugOptions
{ 
	bool                                               bDistributionEnabled : 1;                                   // 0x0000:0 (0x0001)  
	bool                                               bForceContentExport : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bInitialized : 1;                                           // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/Engine.LightmassDebugOptions
/// Size: 0x0010 (0x000000 - 0x000010)
struct FLightmassDebugOptions
{ 
	bool                                               bDebugMode : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bStatsEnabled : 1;                                          // 0x0000:1 (0x0001)  
	bool                                               bGatherBSPSurfacesAcrossComponents : 1;                     // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              CoplanarTolerance;                                          // 0x0004   (0x0004)  
	bool                                               bUseImmediateImport : 1;                                    // 0x0008:0 (0x0001)  
	bool                                               bImmediateProcessMappings : 1;                              // 0x0008:1 (0x0001)  
	bool                                               bSortMappings : 1;                                          // 0x0008:2 (0x0001)  
	bool                                               bDumpBinaryFiles : 1;                                       // 0x0008:3 (0x0001)  
	bool                                               bDebugMaterials : 1;                                        // 0x0008:4 (0x0001)  
	bool                                               bPadMappings : 1;                                           // 0x0008:5 (0x0001)  
	bool                                               bDebugPaddings : 1;                                         // 0x0008:6 (0x0001)  
	bool                                               bOnlyCalcDebugTexelMappings : 1;                            // 0x0008:7 (0x0001)  
	bool                                               bUseRandomColors : 1;                                       // 0x0009:0 (0x0001)  
	bool                                               bColorBordersGreen : 1;                                     // 0x0009:1 (0x0001)  
	bool                                               bColorByExecutionTime : 1;                                  // 0x0009:2 (0x0001)  
	unsigned char                                      UnknownData01_4[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              ExecutionTimeDivisor;                                       // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.BasedPosition
/// Size: 0x0038 (0x000000 - 0x000038)
struct FBasedPosition
{ 
	class AActor*                                      Base;                                                       // 0x0000   (0x0008)  
	FVector                                            Position;                                                   // 0x0008   (0x000C)  
	FVector                                            CachedBaseLocation;                                         // 0x0014   (0x000C)  
	FRotator                                           CachedBaseRotation;                                         // 0x0020   (0x000C)  
	FVector                                            CachedTransPosition;                                        // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.FractureEffect
/// Size: 0x0010 (0x000000 - 0x000010)
struct FFractureEffect
{ 
	class UParticleSystem*                             ParticleSystem;                                             // 0x0000   (0x0008)  
	class USoundBase*                                  Sound;                                                      // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RigidBodyContactInfo
/// Size: 0x0030 (0x000000 - 0x000030)
struct FRigidBodyContactInfo
{ 
	FVector                                            ContactPosition;                                            // 0x0000   (0x000C)  
	FVector                                            ContactNormal;                                              // 0x000C   (0x000C)  
	float                                              ContactPenetration;                                         // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.CollisionImpactData
/// Size: 0x0028 (0x000000 - 0x000028)
struct FCollisionImpactData
{ 
	TArray<FRigidBodyContactInfo>                      ContactInfos;                                               // 0x0000   (0x0010)  
	FVector                                            TotalNormalImpulse;                                         // 0x0010   (0x000C)  
	FVector                                            TotalFrictionImpulse;                                       // 0x001C   (0x000C)  
};

/// Struct /Script/Engine.RigidBodyState
/// Size: 0x0040 (0x000000 - 0x000040)
struct FRigidBodyState
{ 
	FVector_NetQuantize100                             Position;                                                   // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	FQuat                                              Quaternion;                                                 // 0x0010   (0x0010)  
	FVector_NetQuantize100                             LinVel;                                                     // 0x0020   (0x000C)  
	FVector_NetQuantize100                             AngVel;                                                     // 0x002C   (0x000C)  
	char                                               Flags;                                                      // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.ForceFeedbackParameters
/// Size: 0x000C (0x000000 - 0x00000C)
struct FForceFeedbackParameters
{ 
	FName                                              Tag;                                                        // 0x0000   (0x0008)  
	bool                                               bLooping;                                                   // 0x0008   (0x0001)  
	bool                                               bIgnoreTimeDilation;                                        // 0x0009   (0x0001)  
	bool                                               bPlayWhilePaused;                                           // 0x000A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x000B   (0x0001)  MISSED
};

/// Struct /Script/Engine.PredictProjectilePathPointData
/// Size: 0x001C (0x000000 - 0x00001C)
struct FPredictProjectilePathPointData
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FVector                                            Velocity;                                                   // 0x000C   (0x000C)  
	float                                              Time;                                                       // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.PredictProjectilePathResult
/// Size: 0x00B8 (0x000000 - 0x0000B8)
struct FPredictProjectilePathResult
{ 
	TArray<FPredictProjectilePathPointData>            PathData;                                                   // 0x0000   (0x0010)  
	FPredictProjectilePathPointData                    LastTraceDestination;                                       // 0x0010   (0x001C)  
	FHitResult                                         HitResult;                                                  // 0x002C   (0x0088)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Struct /Script/Engine.PredictProjectilePathParams
/// Size: 0x0060 (0x000000 - 0x000060)
struct FPredictProjectilePathParams
{ 
	FVector                                            StartLocation;                                              // 0x0000   (0x000C)  
	FVector                                            LaunchVelocity;                                             // 0x000C   (0x000C)  
	bool                                               bTraceWithCollision;                                        // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              ProjectileRadius;                                           // 0x001C   (0x0004)  
	float                                              MaxSimTime;                                                 // 0x0020   (0x0004)  
	bool                                               bTraceWithChannel;                                          // 0x0024   (0x0001)  
	SDK_UNDEFINED(1,713) /* TEnumAsByte<ECollisionChannel> */ __um(TraceChannel);                                  // 0x0025   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0026   (0x0002)  MISSED
	TArray<EObjectTypeQuery>                           ObjectTypes;                                                // 0x0028   (0x0010)  
	TArray<class AActor*>                              ActorsToIgnore;                                             // 0x0038   (0x0010)  
	float                                              SimFrequency;                                               // 0x0048   (0x0004)  
	float                                              OverrideGravityZ;                                           // 0x004C   (0x0004)  
	SDK_UNDEFINED(1,714) /* TEnumAsByte<EDrawDebugTrace> */ __um(DrawDebugType);                                   // 0x0050   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              DrawDebugTime;                                              // 0x0054   (0x0004)  
	bool                                               bTraceComplex;                                              // 0x0058   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Struct /Script/Engine.ActiveHapticFeedbackEffect
/// Size: 0x0018 (0x000000 - 0x000018)
struct FActiveHapticFeedbackEffect
{ 
	class UHapticFeedbackEffect_Base*                  HapticEffect;                                               // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0008   (0x0010)  MISSED
};

/// Struct /Script/Engine.ClusterNode
/// Size: 0x0040 (0x000000 - 0x000040)
struct FClusterNode
{ 
	FVector                                            BoundMin;                                                   // 0x0000   (0x000C)  
	int32_t                                            FirstChild;                                                 // 0x000C   (0x0004)  
	FVector                                            BoundMax;                                                   // 0x0010   (0x000C)  
	int32_t                                            LastChild;                                                  // 0x001C   (0x0004)  
	int32_t                                            FirstInstance;                                              // 0x0020   (0x0004)  
	int32_t                                            LastInstance;                                               // 0x0024   (0x0004)  
	FVector                                            MinInstanceScale;                                           // 0x0028   (0x000C)  
	FVector                                            MaxInstanceScale;                                           // 0x0034   (0x000C)  
};

/// Struct /Script/Engine.ClusterNode_DEPRECATED
/// Size: 0x0028 (0x000000 - 0x000028)
struct FClusterNode_DEPRECATED
{ 
	FVector                                            BoundMin;                                                   // 0x0000   (0x000C)  
	int32_t                                            FirstChild;                                                 // 0x000C   (0x0004)  
	FVector                                            BoundMax;                                                   // 0x0010   (0x000C)  
	int32_t                                            LastChild;                                                  // 0x001C   (0x0004)  
	int32_t                                            FirstInstance;                                              // 0x0020   (0x0004)  
	int32_t                                            LastInstance;                                               // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.ImportanceTexture
/// Size: 0x0050 (0x000000 - 0x000050)
struct FImportanceTexture
{ 
	FIntPoint                                          Size;                                                       // 0x0000   (0x0008)  
	int32_t                                            NumMips;                                                    // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<float>                                      MarginalCDF;                                                // 0x0010   (0x0010)  
	TArray<float>                                      ConditionalCDF;                                             // 0x0020   (0x0010)  
	TArray<FColor>                                     TextureData;                                                // 0x0030   (0x0010)  
	SDK_UNDEFINED(8,715) /* TWeakObjectPtr<UTexture2D*> */ __um(Texture);                                          // 0x0040   (0x0008)  
	SDK_UNDEFINED(1,716) /* TEnumAsByte<EImportanceWeight> */ __um(Weighting);                                     // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Struct /Script/Engine.InstancedStaticMeshLightMapInstanceData
/// Size: 0x0040 (0x000000 - 0x000040)
struct FInstancedStaticMeshLightMapInstanceData
{ 
	FTransform                                         Transform;                                                  // 0x0000   (0x0030)  
	TArray<FGuid>                                      MapBuildDataIds;                                            // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.InstancedStaticMeshComponentInstanceData
/// Size: 0x0098 (0x0000A8 - 0x000140)
struct FInstancedStaticMeshComponentInstanceData : FSceneComponentInstanceData
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x00A8   (0x0008)  
	FInstancedStaticMeshLightMapInstanceData           CachedStaticLighting;                                       // 0x00B0   (0x0040)  
	TArray<FInstancedStaticMeshInstanceData>           PerInstanceSMData;                                          // 0x00F0   (0x0010)  
	TArray<float>                                      PerInstanceSMCustomData;                                    // 0x0100   (0x0010)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0110   (0x0020)  MISSED
	int32_t                                            InstancingRandomSeed;                                       // 0x0130   (0x0004)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0134   (0x000C)  MISSED
};

/// Struct /Script/Engine.IntegralKey
/// Size: 0x0008 (0x000000 - 0x000008)
struct FIntegralKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	int32_t                                            value;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.IntegralCurve
/// Size: 0x0018 (0x000068 - 0x000080)
struct FIntegralCurve : FIndexedCurve
{ 
	TArray<FIntegralKey>                               Keys;                                                       // 0x0068   (0x0010)  
	int32_t                                            DefaultValue;                                               // 0x0078   (0x0004)  
	bool                                               bUseDefaultValueBeforeFirstKey;                             // 0x007C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x007D   (0x0003)  MISSED
};

/// Struct /Script/Engine.InterpEdSelKey
/// Size: 0x0018 (0x000000 - 0x000018)
struct FInterpEdSelKey
{ 
	class UInterpGroup*                                Group;                                                      // 0x0000   (0x0008)  
	class UInterpTrack*                                Track;                                                      // 0x0008   (0x0008)  
	int32_t                                            KeyIndex;                                                   // 0x0010   (0x0004)  
	float                                              UnsnappedPosition;                                          // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.CameraPreviewInfo
/// Size: 0x0030 (0x000000 - 0x000030)
struct FCameraPreviewInfo
{ 
	class UClass*                                      PawnClass;                                                  // 0x0000   (0x0008)  
	class UAnimSequence*                               AnimSeq;                                                    // 0x0008   (0x0008)  
	FVector                                            Location;                                                   // 0x0010   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x001C   (0x000C)  
	class APawn*                                       PawnInst;                                                   // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.SubTrackGroup
/// Size: 0x0028 (0x000000 - 0x000028)
struct FSubTrackGroup
{ 
	SDK_UNDEFINED(16,717) /* FString */                __um(GroupName);                                            // 0x0000   (0x0010)  
	TArray<int32_t>                                    TrackIndices;                                               // 0x0010   (0x0010)  
	bool                                               bIsCollapsed : 1;                                           // 0x0020:0 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x0020:1 (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/Engine.SupportedSubTrackInfo
/// Size: 0x0020 (0x000000 - 0x000020)
struct FSupportedSubTrackInfo
{ 
	class UClass*                                      SupportedClass;                                             // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,718) /* FString */                __um(SubTrackName);                                         // 0x0008   (0x0010)  
	int32_t                                            GroupIndex;                                                 // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.VectorSpringState
/// Size: 0x0018 (0x000000 - 0x000018)
struct FVectorSpringState
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.FloatSpringState
/// Size: 0x0008 (0x000000 - 0x000008)
struct FFloatSpringState
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.DrawToRenderTargetContext
/// Size: 0x0010 (0x000000 - 0x000010)
struct FDrawToRenderTargetContext
{ 
	class UTextureRenderTarget2D*                      RenderTarget;                                               // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.LatentActionManager
/// Size: 0x0060 (0x000000 - 0x000060)
struct FLatentActionManager
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.LevelSimplificationDetails
/// Size: 0x012C (0x000000 - 0x00012C)
struct FLevelSimplificationDetails
{ 
	bool                                               bCreatePackagePerAsset;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              DetailsPercentage;                                          // 0x0004   (0x0004)  
	FMaterialProxySettings                             StaticMeshMaterialSettings;                                 // 0x0008   (0x0088)  
	bool                                               bOverrideLandscapeExportLOD;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0091   (0x0003)  MISSED
	int32_t                                            LandscapeExportLOD;                                         // 0x0094   (0x0004)  
	FMaterialProxySettings                             LandscapeMaterialSettings;                                  // 0x0098   (0x0088)  
	bool                                               bBakeFoliageToLandscape;                                    // 0x0120   (0x0001)  
	bool                                               bBakeGrassToLandscape;                                      // 0x0121   (0x0001)  
	bool                                               bGenerateMeshNormalMap;                                     // 0x0122   (0x0001)  
	bool                                               bGenerateMeshMetallicMap;                                   // 0x0123   (0x0001)  
	bool                                               bGenerateMeshRoughnessMap;                                  // 0x0124   (0x0001)  
	bool                                               bGenerateMeshSpecularMap;                                   // 0x0125   (0x0001)  
	bool                                               bGenerateLandscapeNormalMap;                                // 0x0126   (0x0001)  
	bool                                               bGenerateLandscapeMetallicMap;                              // 0x0127   (0x0001)  
	bool                                               bGenerateLandscapeRoughnessMap;                             // 0x0128   (0x0001)  
	bool                                               bGenerateLandscapeSpecularMap;                              // 0x0129   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x012A   (0x0002)  MISSED
};

/// Struct /Script/Engine.StreamableTextureInstance
/// Size: 0x0028 (0x000000 - 0x000028)
struct FStreamableTextureInstance
{ 
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/Engine.DynamicTextureInstance
/// Size: 0x0010 (0x000028 - 0x000038)
struct FDynamicTextureInstance : FStreamableTextureInstance
{ 
	class UTexture2D*                                  Texture;                                                    // 0x0028   (0x0008)  
	bool                                               bAttached;                                                  // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              OriginalRadius;                                             // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.PrecomputedLightInstanceData
/// Size: 0x0058 (0x0000A8 - 0x000100)
struct FPrecomputedLightInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00A8   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x00B0   (0x0030)  
	FGuid                                              LightGuid;                                                  // 0x00E0   (0x0010)  
	int32_t                                            PreviewShadowMapChannel;                                    // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x00F4   (0x000C)  MISSED
};

/// Struct /Script/Engine.BatchedPoint
/// Size: 0x0028 (0x000000 - 0x000028)
struct FBatchedPoint
{ 
	FVector                                            Position;                                                   // 0x0000   (0x000C)  
	FLinearColor                                       Color;                                                      // 0x000C   (0x0010)  
	float                                              PointSize;                                                  // 0x001C   (0x0004)  
	float                                              RemainingLifeTime;                                          // 0x0020   (0x0004)  
	char                                               DepthPriority;                                              // 0x0024   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0025   (0x0003)  MISSED
};

/// Struct /Script/Engine.BatchedLine
/// Size: 0x0034 (0x000000 - 0x000034)
struct FBatchedLine
{ 
	FVector                                            Start;                                                      // 0x0000   (0x000C)  
	FVector                                            End;                                                        // 0x000C   (0x000C)  
	FLinearColor                                       Color;                                                      // 0x0018   (0x0010)  
	float                                              Thickness;                                                  // 0x0028   (0x0004)  
	float                                              RemainingLifeTime;                                          // 0x002C   (0x0004)  
	char                                               DepthPriority;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
};

/// Struct /Script/Engine.ClientReceiveData
/// Size: 0x0040 (0x000000 - 0x000040)
struct FClientReceiveData
{ 
	class APlayerController*                           LocalPC;                                                    // 0x0000   (0x0008)  
	FName                                              MessageType;                                                // 0x0008   (0x0008)  
	int32_t                                            MessageIndex;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	SDK_UNDEFINED(16,719) /* FString */                __um(MessageString);                                        // 0x0018   (0x0010)  
	class APlayerState*                                RelatedPlayerState;                                         // 0x0028   (0x0008)  
	class APlayerState*                                RelatedPlayerState0;                                        // 0x0030   (0x0008)  
	class UObject*                                     OptionalObject;                                             // 0x0038   (0x0008)  
};

/// Struct /Script/Engine.ParameterGroupData
/// Size: 0x0018 (0x000000 - 0x000018)
struct FParameterGroupData
{ 
	SDK_UNDEFINED(16,720) /* FString */                __um(GroupName);                                            // 0x0000   (0x0010)  
	int32_t                                            GroupSortPriority;                                          // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.ParameterChannelNames
/// Size: 0x0060 (0x000000 - 0x000060)
struct FParameterChannelNames
{ 
	SDK_UNDEFINED(24,721) /* FText */                  __um(R);                                                    // 0x0000   (0x0018)  
	SDK_UNDEFINED(24,722) /* FText */                  __um(G);                                                    // 0x0018   (0x0018)  
	SDK_UNDEFINED(24,723) /* FText */                  __um(B);                                                    // 0x0030   (0x0018)  
	SDK_UNDEFINED(24,724) /* FText */                  __um(A);                                                    // 0x0048   (0x0018)  
};

/// Struct /Script/Engine.FunctionExpressionOutput
/// Size: 0x0020 (0x000000 - 0x000020)
struct FFunctionExpressionOutput
{ 
	class UMaterialExpressionFunctionOutput*           ExpressionOutput;                                           // 0x0000   (0x0008)  
	FGuid                                              ExpressionOutputId;                                         // 0x0008   (0x0010)  
	FExpressionOutput                                  Output;                                                     // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.FunctionExpressionInput
/// Size: 0x0030 (0x000000 - 0x000030)
struct FFunctionExpressionInput
{ 
	class UMaterialExpressionFunctionInput*            ExpressionInput;                                            // 0x0000   (0x0008)  
	FGuid                                              ExpressionInputId;                                          // 0x0008   (0x0010)  
	FExpressionInput                                   Input;                                                      // 0x0018   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0024   (0x000C)  MISSED
};

/// Struct /Script/Engine.ScalarParameterAtlasInstanceData
/// Size: 0x0058 (0x000000 - 0x000058)
struct FScalarParameterAtlasInstanceData
{ 
	bool                                               bIsUsedAsAtlasPosition;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	SDK_UNDEFINED(40,725) /* TWeakObjectPtr<UCurveLinearColor*> */ __um(Curve);                                    // 0x0008   (0x0028)  
	SDK_UNDEFINED(40,726) /* TWeakObjectPtr<UCurveLinearColorAtlas*> */ __um(Atlas);                               // 0x0030   (0x0028)  
};

/// Struct /Script/Engine.MemberReference
/// Size: 0x0038 (0x000000 - 0x000038)
struct FMemberReference
{ 
	class UObject*                                     MemberParent;                                               // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,727) /* FString */                __um(MemberScope);                                          // 0x0008   (0x0010)  
	FName                                              MemberName;                                                 // 0x0018   (0x0008)  
	FGuid                                              MemberGuid;                                                 // 0x0020   (0x0010)  
	bool                                               bSelfContext;                                               // 0x0030   (0x0001)  
	bool                                               bWasDeprecated;                                             // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Struct /Script/Engine.MeshInstancingSettings
/// Size: 0x0018 (0x000000 - 0x000018)
struct FMeshInstancingSettings
{ 
	class UClass*                                      ActorClassToUse;                                            // 0x0000   (0x0008)  
	int32_t                                            InstanceReplacementThreshold;                               // 0x0008   (0x0004)  
	EMeshInstancingReplacementMethod                   MeshReplacementMethod;                                      // 0x000C   (0x0001)  
	bool                                               bSkipMeshesWithVertexColors;                                // 0x000D   (0x0001)  
	bool                                               bUseHLODVolumes;                                            // 0x000E   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x000F   (0x0001)  MISSED
	class UClass*                                      ISMComponentToUse;                                          // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MeshReductionSettings
/// Size: 0x0024 (0x000000 - 0x000024)
struct FMeshReductionSettings
{ 
	float                                              PercentTriangles;                                           // 0x0000   (0x0004)  
	float                                              PercentVertices;                                            // 0x0004   (0x0004)  
	float                                              MaxDeviation;                                               // 0x0008   (0x0004)  
	float                                              PixelError;                                                 // 0x000C   (0x0004)  
	float                                              WeldingThreshold;                                           // 0x0010   (0x0004)  
	float                                              HardAngleThreshold;                                         // 0x0014   (0x0004)  
	int32_t                                            BaseLODModel;                                               // 0x0018   (0x0004)  
	SDK_UNDEFINED(1,728) /* TEnumAsByte<EMeshFeatureImportance> */ __um(SilhouetteImportance);                     // 0x001C   (0x0001)  
	SDK_UNDEFINED(1,729) /* TEnumAsByte<EMeshFeatureImportance> */ __um(TextureImportance);                        // 0x001D   (0x0001)  
	SDK_UNDEFINED(1,730) /* TEnumAsByte<EMeshFeatureImportance> */ __um(ShadingImportance);                        // 0x001E   (0x0001)  
	bool                                               bRecalculateNormals : 1;                                    // 0x001F:0 (0x0001)  
	bool                                               bGenerateUniqueLightmapUVs : 1;                             // 0x001F:1 (0x0001)  
	bool                                               bKeepSymmetry : 1;                                          // 0x001F:2 (0x0001)  
	bool                                               bVisibilityAided : 1;                                       // 0x001F:3 (0x0001)  
	bool                                               bCullOccluded : 1;                                          // 0x001F:4 (0x0001)  
	EStaticMeshReductionTerimationCriterion            TerminationCriterion;                                       // 0x0020   (0x0001)  
	SDK_UNDEFINED(1,731) /* TEnumAsByte<EMeshFeatureImportance> */ __um(VisibilityAggressiveness);                 // 0x0021   (0x0001)  
	SDK_UNDEFINED(1,732) /* TEnumAsByte<EMeshFeatureImportance> */ __um(VertexColorImportance);                    // 0x0022   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0023   (0x0001)  MISSED
};

/// Struct /Script/Engine.NameCurveKey
/// Size: 0x000C (0x000000 - 0x00000C)
struct FNameCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	FName                                              value;                                                      // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.NameCurve
/// Size: 0x0010 (0x000068 - 0x000078)
struct FNameCurve : FIndexedCurve
{ 
	TArray<FNameCurveKey>                              Keys;                                                       // 0x0068   (0x0010)  
};

/// Struct /Script/Engine.NavDataConfig
/// Size: 0x0048 (0x000030 - 0x000078)
struct FNavDataConfig : FNavAgentProperties
{ 
	FName                                              Name;                                                       // 0x0030   (0x0008)  
	FColor                                             Color;                                                      // 0x0038   (0x0004)  
	FVector                                            DefaultQueryExtent;                                         // 0x003C   (0x000C)  
	class UClass*                                      NavigationDataClass;                                        // 0x0048   (0x0008)  
	SDK_UNDEFINED(40,733) /* TWeakObjectPtr<UClass*> */ __um(NavDataClass);                                        // 0x0050   (0x0028)  
};

/// Struct /Script/Engine.PacketSimulationSettings
/// Size: 0x0034 (0x000000 - 0x000034)
struct FPacketSimulationSettings
{ 
	int32_t                                            PktLoss;                                                    // 0x0000   (0x0004)  
	int32_t                                            PktLossMaxSize;                                             // 0x0004   (0x0004)  
	int32_t                                            PktLossMinSize;                                             // 0x0008   (0x0004)  
	int32_t                                            PktOrder;                                                   // 0x000C   (0x0004)  
	int32_t                                            PktDup;                                                     // 0x0010   (0x0004)  
	int32_t                                            PktLag;                                                     // 0x0014   (0x0004)  
	int32_t                                            PktLagVariance;                                             // 0x0018   (0x0004)  
	int32_t                                            PktLagMin;                                                  // 0x001C   (0x0004)  
	int32_t                                            PktLagMax;                                                  // 0x0020   (0x0004)  
	int32_t                                            PktIncomingLagMin;                                          // 0x0024   (0x0004)  
	int32_t                                            PktIncomingLagMax;                                          // 0x0028   (0x0004)  
	int32_t                                            PktIncomingLoss;                                            // 0x002C   (0x0004)  
	int32_t                                            PktJitter;                                                  // 0x0030   (0x0004)  
};

/// Struct /Script/Engine.NodeItem
/// Size: 0x0040 (0x000000 - 0x000040)
struct FNodeItem
{ 
	FName                                              ParentName;                                                 // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.ParticleCurvePair
/// Size: 0x0018 (0x000000 - 0x000018)
struct FParticleCurvePair
{ 
	SDK_UNDEFINED(16,734) /* FString */                __um(CurveName);                                            // 0x0000   (0x0010)  
	class UObject*                                     CurveObject;                                                // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.BeamTargetData
/// Size: 0x000C (0x000000 - 0x00000C)
struct FBeamTargetData
{ 
	FName                                              TargetName;                                                 // 0x0000   (0x0008)  
	float                                              TargetPercentage;                                           // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.ParticleSystemWorldManagerTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
struct FParticleSystemWorldManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.ParticleSystemReplayFrame
/// Size: 0x0010 (0x000000 - 0x000010)
struct FParticleSystemReplayFrame
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.ParticleEmitterReplayFrame
/// Size: 0x0010 (0x000000 - 0x000010)
struct FParticleEmitterReplayFrame
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.FreezablePerPlatformInt
/// Size: 0x0004 (0x000000 - 0x000004)
struct FFreezablePerPlatformInt
{ 
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x0000   (0x0004)  MISSED
};

/// Struct /Script/Engine.UpdateLevelVisibilityLevelInfo
/// Size: 0x0014 (0x000000 - 0x000014)
struct FUpdateLevelVisibilityLevelInfo
{ 
	FName                                              PackageName;                                                // 0x0000   (0x0008)  
	FName                                              Filename;                                                   // 0x0008   (0x0008)  
	bool                                               bIsVisible : 1;                                             // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.UpdateLevelStreamingLevelStatus
/// Size: 0x0010 (0x000000 - 0x000010)
struct FUpdateLevelStreamingLevelStatus
{ 
	FName                                              PackageName;                                                // 0x0000   (0x0008)  
	int32_t                                            LODIndex;                                                   // 0x0008   (0x0004)  
	bool                                               bNewShouldBeLoaded : 1;                                     // 0x000C:0 (0x0001)  
	bool                                               bNewShouldBeVisible : 1;                                    // 0x000C:1 (0x0001)  
	bool                                               bNewShouldBlockOnLoad : 1;                                  // 0x000C:2 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.PlayerMuteList
/// Size: 0x0038 (0x000000 - 0x000038)
struct FPlayerMuteList
{ 
	bool                                               bHasVoiceHandshakeCompleted;                                // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            VoiceChannelIdx;                                            // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.PreviewAttachedObjectPair
/// Size: 0x0038 (0x000000 - 0x000038)
struct FPreviewAttachedObjectPair
{ 
	SDK_UNDEFINED(40,735) /* TWeakObjectPtr<UObject*> */ __um(AttachedObject);                                     // 0x0000   (0x0028)  
	class UObject*                                     Object;                                                     // 0x0028   (0x0008)  
	FName                                              AttachedTo;                                                 // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.PreviewAssetAttachContainer
/// Size: 0x0010 (0x000000 - 0x000010)
struct FPreviewAssetAttachContainer
{ 
	TArray<FPreviewAttachedObjectPair>                 AttachedObjects;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PrimitiveComponentInstanceData
/// Size: 0x0048 (0x0000A8 - 0x0000F0)
struct FPrimitiveComponentInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00A8   (0x0008)  MISSED
	FTransform                                         ComponentTransform;                                         // 0x00B0   (0x0030)  
	int32_t                                            VisibilityId;                                               // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x00E4   (0x0004)  MISSED
	class UPrimitiveComponent*                         LODParent;                                                  // 0x00E8   (0x0008)  
};

/// Struct /Script/Engine.SpriteCategoryInfo
/// Size: 0x0038 (0x000000 - 0x000038)
struct FSpriteCategoryInfo
{ 
	FName                                              Category;                                                   // 0x0000   (0x0008)  
	SDK_UNDEFINED(24,736) /* FText */                  __um(DisplayName);                                          // 0x0008   (0x0018)  
	SDK_UNDEFINED(24,737) /* FText */                  __um(Description);                                          // 0x0020   (0x0018)  
};

/// Struct /Script/Engine.CompressedRichCurve
/// Size: 0x0018 (0x000000 - 0x000018)
struct FCompressedRichCurve
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.RootMotionSource_JumpForce
/// Size: 0x0030 (0x0000A0 - 0x0000D0)
struct FRootMotionSource_JumpForce : FRootMotionSource
{ 
	FRotator                                           Rotation;                                                   // 0x0098   (0x000C)  
	float                                              Distance;                                                   // 0x00A4   (0x0004)  
	float                                              Height;                                                     // 0x00A8   (0x0004)  
	bool                                               bDisableTimeout;                                            // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00AD   (0x0003)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00B0   (0x0008)  
	class UCurveFloat*                                 TimeMappingCurve;                                           // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x00C0   (0x0010)  MISSED
};

/// Struct /Script/Engine.RootMotionSource_MoveToDynamicForce
/// Size: 0x0030 (0x0000A0 - 0x0000D0)
struct FRootMotionSource_MoveToDynamicForce : FRootMotionSource
{ 
	FVector                                            StartLocation;                                              // 0x0098   (0x000C)  
	FVector                                            InitialTargetLocation;                                      // 0x00A4   (0x000C)  
	FVector                                            TargetLocation;                                             // 0x00B0   (0x000C)  
	bool                                               bRestrictSpeedToExpected;                                   // 0x00BC   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00BD   (0x0003)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00C0   (0x0008)  
	class UCurveFloat*                                 TimeMappingCurve;                                           // 0x00C8   (0x0008)  
};

/// Struct /Script/Engine.RootMotionSource_MoveToForce
/// Size: 0x0020 (0x0000A0 - 0x0000C0)
struct FRootMotionSource_MoveToForce : FRootMotionSource
{ 
	FVector                                            StartLocation;                                              // 0x0098   (0x000C)  
	FVector                                            TargetLocation;                                             // 0x00A4   (0x000C)  
	bool                                               bRestrictSpeedToExpected;                                   // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00B1   (0x0007)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00B8   (0x0008)  
};

/// Struct /Script/Engine.RootMotionSource_RadialForce
/// Size: 0x0040 (0x0000A0 - 0x0000E0)
struct FRootMotionSource_RadialForce : FRootMotionSource
{ 
	FVector                                            Location;                                                   // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x00A4   (0x0004)  MISSED
	class AActor*                                      LocationActor;                                              // 0x00A8   (0x0008)  
	float                                              Radius;                                                     // 0x00B0   (0x0004)  
	float                                              Strength;                                                   // 0x00B4   (0x0004)  
	bool                                               bIsPush;                                                    // 0x00B8   (0x0001)  
	bool                                               bNoZForce;                                                  // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x00BA   (0x0006)  MISSED
	class UCurveFloat*                                 StrengthDistanceFalloff;                                    // 0x00C0   (0x0008)  
	class UCurveFloat*                                 StrengthOverTime;                                           // 0x00C8   (0x0008)  
	bool                                               bUseFixedWorldDirection;                                    // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00D1   (0x0003)  MISSED
	FRotator                                           FixedWorldDirection;                                        // 0x00D4   (0x000C)  
};

/// Struct /Script/Engine.RootMotionSource_ConstantForce
/// Size: 0x0010 (0x0000A0 - 0x0000B0)
struct FRootMotionSource_ConstantForce : FRootMotionSource
{ 
	FVector                                            Force;                                                      // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x00A4   (0x0004)  MISSED
	class UCurveFloat*                                 StrengthOverTime;                                           // 0x00A8   (0x0008)  
};

/// Struct /Script/Engine.CameraExposureSettings
/// Size: 0x0040 (0x000000 - 0x000040)
struct FCameraExposureSettings
{ 
	SDK_UNDEFINED(1,738) /* TEnumAsByte<EAutoExposureMethod> */ __um(Method);                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              LowPercent;                                                 // 0x0004   (0x0004)  
	float                                              HighPercent;                                                // 0x0008   (0x0004)  
	float                                              MinBrightness;                                              // 0x000C   (0x0004)  
	float                                              MaxBrightness;                                              // 0x0010   (0x0004)  
	float                                              SpeedUp;                                                    // 0x0014   (0x0004)  
	float                                              SpeedDown;                                                  // 0x0018   (0x0004)  
	float                                              Bias;                                                       // 0x001C   (0x0004)  
	class UCurveFloat*                                 BiasCurve;                                                  // 0x0020   (0x0008)  
	class UTexture*                                    MeterMask;                                                  // 0x0028   (0x0008)  
	float                                              HistogramLogMin;                                            // 0x0030   (0x0004)  
	float                                              HistogramLogMax;                                            // 0x0034   (0x0004)  
	float                                              CalibrationConstant;                                        // 0x0038   (0x0004)  
	bool                                               ApplyPhysicalCameraExposure : 1;                            // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Struct /Script/Engine.GaussianSumBloomSettings
/// Size: 0x0084 (0x000000 - 0x000084)
struct FGaussianSumBloomSettings
{ 
	float                                              Intensity;                                                  // 0x0000   (0x0004)  
	float                                              Threshold;                                                  // 0x0004   (0x0004)  
	float                                              SizeScale;                                                  // 0x0008   (0x0004)  
	float                                              Filter1Size;                                                // 0x000C   (0x0004)  
	float                                              Filter2Size;                                                // 0x0010   (0x0004)  
	float                                              Filter3Size;                                                // 0x0014   (0x0004)  
	float                                              Filter4Size;                                                // 0x0018   (0x0004)  
	float                                              Filter5Size;                                                // 0x001C   (0x0004)  
	float                                              Filter6Size;                                                // 0x0020   (0x0004)  
	FLinearColor                                       Filter1Tint;                                                // 0x0024   (0x0010)  
	FLinearColor                                       Filter2Tint;                                                // 0x0034   (0x0010)  
	FLinearColor                                       Filter3Tint;                                                // 0x0044   (0x0010)  
	FLinearColor                                       Filter4Tint;                                                // 0x0054   (0x0010)  
	FLinearColor                                       Filter5Tint;                                                // 0x0064   (0x0010)  
	FLinearColor                                       Filter6Tint;                                                // 0x0074   (0x0010)  
};

/// Struct /Script/Engine.ConvolutionBloomSettings
/// Size: 0x0028 (0x000000 - 0x000028)
struct FConvolutionBloomSettings
{ 
	class UTexture2D*                                  Texture;                                                    // 0x0000   (0x0008)  
	float                                              Size;                                                       // 0x0008   (0x0004)  
	FVector2D                                          CenterUV;                                                   // 0x000C   (0x0008)  
	float                                              PreFilterMin;                                               // 0x0014   (0x0004)  
	float                                              PreFilterMax;                                               // 0x0018   (0x0004)  
	float                                              PreFilterMult;                                              // 0x001C   (0x0004)  
	float                                              BufferScale;                                                // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.LensBloomSettings
/// Size: 0x00B8 (0x000000 - 0x0000B8)
struct FLensBloomSettings
{ 
	FGaussianSumBloomSettings                          GaussianSum;                                                // 0x0000   (0x0084)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0084   (0x0004)  MISSED
	FConvolutionBloomSettings                          Convolution;                                                // 0x0088   (0x0028)  
	SDK_UNDEFINED(1,739) /* TEnumAsByte<EBloomMethod> */ __um(Method);                                             // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Struct /Script/Engine.LensImperfectionSettings
/// Size: 0x0020 (0x000000 - 0x000020)
struct FLensImperfectionSettings
{ 
	class UTexture*                                    DirtMask;                                                   // 0x0000   (0x0008)  
	float                                              DirtMaskIntensity;                                          // 0x0008   (0x0004)  
	FLinearColor                                       DirtMaskTint;                                               // 0x000C   (0x0010)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.LensSettings
/// Size: 0x00E0 (0x000000 - 0x0000E0)
struct FLensSettings
{ 
	FLensBloomSettings                                 Bloom;                                                      // 0x0000   (0x00B8)  
	FLensImperfectionSettings                          Imperfections;                                              // 0x00B8   (0x0020)  
	float                                              ChromaticAberration;                                        // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Struct /Script/Engine.FilmStockSettings
/// Size: 0x0014 (0x000000 - 0x000014)
struct FFilmStockSettings
{ 
	float                                              Slope;                                                      // 0x0000   (0x0004)  
	float                                              Toe;                                                        // 0x0004   (0x0004)  
	float                                              Shoulder;                                                   // 0x0008   (0x0004)  
	float                                              BlackClip;                                                  // 0x000C   (0x0004)  
	float                                              WhiteClip;                                                  // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.ColorGradePerRangeSettings
/// Size: 0x0050 (0x000000 - 0x000050)
struct FColorGradePerRangeSettings
{ 
	FVector4                                           Saturation;                                                 // 0x0000   (0x0010)  
	FVector4                                           Contrast;                                                   // 0x0010   (0x0010)  
	FVector4                                           Gamma;                                                      // 0x0020   (0x0010)  
	FVector4                                           Gain;                                                       // 0x0030   (0x0010)  
	FVector4                                           Offset;                                                     // 0x0040   (0x0010)  
};

/// Struct /Script/Engine.ColorGradingSettings
/// Size: 0x0150 (0x000000 - 0x000150)
struct FColorGradingSettings
{ 
	FColorGradePerRangeSettings                        Global;                                                     // 0x0000   (0x0050)  
	FColorGradePerRangeSettings                        Shadows;                                                    // 0x0050   (0x0050)  
	FColorGradePerRangeSettings                        Midtones;                                                   // 0x00A0   (0x0050)  
	FColorGradePerRangeSettings                        Highlights;                                                 // 0x00F0   (0x0050)  
	float                                              ShadowsMax;                                                 // 0x0140   (0x0004)  
	float                                              HighlightsMin;                                              // 0x0144   (0x0004)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0148   (0x0008)  MISSED
};

/// Struct /Script/Engine.SimpleCurveKey
/// Size: 0x0008 (0x000000 - 0x000008)
struct FSimpleCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              value;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SimpleCurve
/// Size: 0x0018 (0x000070 - 0x000088)
struct FSimpleCurve : FRealCurve
{ 
	SDK_UNDEFINED(1,740) /* TEnumAsByte<ERichCurveInterpMode> */ __um(InterpMode);                                 // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0071   (0x0007)  MISSED
	TArray<FSimpleCurveKey>                            Keys;                                                       // 0x0078   (0x0010)  
};

/// Struct /Script/Engine.ClothPhysicsProperties_Legacy
/// Size: 0x0050 (0x000000 - 0x000050)
struct FClothPhysicsProperties_Legacy
{ 
	float                                              VerticalResistance;                                         // 0x0000   (0x0004)  
	float                                              HorizontalResistance;                                       // 0x0004   (0x0004)  
	float                                              BendResistance;                                             // 0x0008   (0x0004)  
	float                                              ShearResistance;                                            // 0x000C   (0x0004)  
	float                                              Friction;                                                   // 0x0010   (0x0004)  
	float                                              Damping;                                                    // 0x0014   (0x0004)  
	float                                              TetherStiffness;                                            // 0x0018   (0x0004)  
	float                                              TetherLimit;                                                // 0x001C   (0x0004)  
	float                                              Drag;                                                       // 0x0020   (0x0004)  
	float                                              StiffnessFrequency;                                         // 0x0024   (0x0004)  
	float                                              GravityScale;                                               // 0x0028   (0x0004)  
	float                                              MassScale;                                                  // 0x002C   (0x0004)  
	float                                              InertiaBlend;                                               // 0x0030   (0x0004)  
	float                                              SelfCollisionThickness;                                     // 0x0034   (0x0004)  
	float                                              SelfCollisionSquashScale;                                   // 0x0038   (0x0004)  
	float                                              SelfCollisionStiffness;                                     // 0x003C   (0x0004)  
	float                                              SolverFrequency;                                            // 0x0040   (0x0004)  
	float                                              FiberCompression;                                           // 0x0044   (0x0004)  
	float                                              FiberExpansion;                                             // 0x0048   (0x0004)  
	float                                              FiberResistance;                                            // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.ClothingAssetData_Legacy
/// Size: 0x0078 (0x000000 - 0x000078)
struct FClothingAssetData_Legacy
{ 
	FName                                              AssetName;                                                  // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,741) /* FString */                __um(ApexFileName);                                         // 0x0008   (0x0010)  
	bool                                               bClothPropertiesChanged;                                    // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0019   (0x0003)  MISSED
	FClothPhysicsProperties_Legacy                     PhysicsProperties;                                          // 0x001C   (0x0050)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x006C   (0x000C)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshClothBuildParams
/// Size: 0x0058 (0x000000 - 0x000058)
struct FSkeletalMeshClothBuildParams
{ 
	SDK_UNDEFINED(8,742) /* TWeakObjectPtr<UClothingAssetBase*> */ __um(TargetAsset);                              // 0x0000   (0x0008)  
	int32_t                                            TargetLod;                                                  // 0x0008   (0x0004)  
	bool                                               bRemapParameters;                                           // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	SDK_UNDEFINED(16,743) /* FString */                __um(AssetName);                                            // 0x0010   (0x0010)  
	int32_t                                            LODIndex;                                                   // 0x0020   (0x0004)  
	int32_t                                            SourceSection;                                              // 0x0024   (0x0004)  
	bool                                               bRemoveFromMesh;                                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	SDK_UNDEFINED(40,744) /* TWeakObjectPtr<UPhysicsAsset*> */ __um(PhysicsAsset);                                 // 0x0030   (0x0028)  
};

/// Struct /Script/Engine.BoneMirrorExport
/// Size: 0x0014 (0x000000 - 0x000014)
struct FBoneMirrorExport
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	FName                                              SourceBoneName;                                             // 0x0008   (0x0008)  
	SDK_UNDEFINED(1,745) /* TEnumAsByte<EAxis> */      __um(BoneFlipAxis);                                         // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshComponentClothTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
struct FSkeletalMeshComponentClothTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshComponentEndPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
struct FSkeletalMeshComponentEndPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.NameMapping
/// Size: 0x0010 (0x000000 - 0x000010)
struct FNameMapping
{ 
	FName                                              NodeName;                                                   // 0x0000   (0x0008)  
	FName                                              BoneName;                                                   // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RigConfiguration
/// Size: 0x0018 (0x000000 - 0x000018)
struct FRigConfiguration
{ 
	class URig*                                        Rig;                                                        // 0x0000   (0x0008)  
	TArray<FNameMapping>                               BoneMappingTable;                                           // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BoneReductionSetting
/// Size: 0x0010 (0x000000 - 0x000010)
struct FBoneReductionSetting
{ 
	TArray<FName>                                      BonesToRemove;                                              // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ReferencePose
/// Size: 0x0018 (0x000000 - 0x000018)
struct FReferencePose
{ 
	FName                                              PoseName;                                                   // 0x0000   (0x0008)  
	TArray<FTransform>                                 ReferencePose;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.SkeletonToMeshLinkup
/// Size: 0x0020 (0x000000 - 0x000020)
struct FSkeletonToMeshLinkup
{ 
	TArray<int32_t>                                    SkeletonToMeshTable;                                        // 0x0000   (0x0010)  
	TArray<int32_t>                                    MeshToSkeletonTable;                                        // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.SkelMeshSkinWeightInfo
/// Size: 0x003C (0x000000 - 0x00003C)
struct FSkelMeshSkinWeightInfo
{ 
	int32_t                                            Bones;                                                      // 0x0000   (0x0030)  
	char                                               Weights;                                                    // 0x0030   (0x000C)  
};

/// Struct /Script/Engine.PrecomputedSkyLightInstanceData
/// Size: 0x00B8 (0x0000A8 - 0x000160)
struct FPrecomputedSkyLightInstanceData : FSceneComponentInstanceData
{ 
	FGuid                                              LightGuid;                                                  // 0x00A8   (0x0010)  
	float                                              AverageBrightness;                                          // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData00_6[0xA4];                                      // 0x00BC   (0x00A4)  MISSED
};

/// Struct /Script/Engine.SmartNameMapping
/// Size: 0x0070 (0x000000 - 0x000070)
struct FSmartNameMapping
{ 
	unsigned char                                      UnknownData00_2[0x70];                                      // 0x0000   (0x0070)  MISSED
};

/// Struct /Script/Engine.CurveMetaData
/// Size: 0x0020 (0x000000 - 0x000020)
struct FCurveMetaData
{ 
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.SoundClassEditorData
/// Size: 0x0008 (0x000000 - 0x000008)
struct FSoundClassEditorData
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.SoundNodeEditorData
/// Size: 0x0008 (0x000000 - 0x000008)
struct FSoundNodeEditorData
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.SoundWaveEnvelopeDataPerSound
/// Size: 0x0010 (0x000000 - 0x000010)
struct FSoundWaveEnvelopeDataPerSound
{ 
	float                                              Envelope;                                                   // 0x0000   (0x0004)  
	float                                              PlaybackTime;                                               // 0x0004   (0x0004)  
	class USoundWave*                                  SoundWave;                                                  // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.SoundWaveSpectralData
/// Size: 0x000C (0x000000 - 0x00000C)
struct FSoundWaveSpectralData
{ 
	float                                              FrequencyHz;                                                // 0x0000   (0x0004)  
	float                                              Magnitude;                                                  // 0x0004   (0x0004)  
	float                                              NormalizedMagnitude;                                        // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveSpectralDataPerSound
/// Size: 0x0020 (0x000000 - 0x000020)
struct FSoundWaveSpectralDataPerSound
{ 
	TArray<FSoundWaveSpectralData>                     SpectralData;                                               // 0x0000   (0x0010)  
	float                                              PlaybackTime;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	class USoundWave*                                  SoundWave;                                                  // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.StreamedAudioPlatformData
/// Size: 0x0020 (0x000000 - 0x000020)
struct FStreamedAudioPlatformData
{ 
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.SplineInstanceData
/// Size: 0x00D8 (0x0000A8 - 0x000180)
struct FSplineInstanceData : FSceneComponentInstanceData
{ 
	bool                                               bSplineHasBeenEdited;                                       // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00A9   (0x0007)  MISSED
	FSplineCurves                                      SplineCurves;                                               // 0x00B0   (0x0068)  
	FSplineCurves                                      SplineCurvesPreUCS;                                         // 0x0118   (0x0068)  
};

/// Struct /Script/Engine.SplinePoint
/// Size: 0x0044 (0x000000 - 0x000044)
struct FSplinePoint
{ 
	float                                              InputKey;                                                   // 0x0000   (0x0004)  
	FVector                                            Position;                                                   // 0x0004   (0x000C)  
	FVector                                            ArriveTangent;                                              // 0x0010   (0x000C)  
	FVector                                            LeaveTangent;                                               // 0x001C   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0028   (0x000C)  
	FVector                                            Scale;                                                      // 0x0034   (0x000C)  
	SDK_UNDEFINED(1,746) /* TEnumAsByte<ESplinePointType> */ __um(Type);                                           // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
};

/// Struct /Script/Engine.SplineMeshInstanceData
/// Size: 0x0030 (0x0000A8 - 0x0000D8)
struct FSplineMeshInstanceData : FSceneComponentInstanceData
{ 
	FVector                                            StartPos;                                                   // 0x00A8   (0x000C)  
	FVector                                            EndPos;                                                     // 0x00B4   (0x000C)  
	FVector                                            StartTangent;                                               // 0x00C0   (0x000C)  
	FVector                                            EndTangent;                                                 // 0x00CC   (0x000C)  
};

/// Struct /Script/Engine.MaterialRemapIndex
/// Size: 0x0018 (0x000000 - 0x000018)
struct FMaterialRemapIndex
{ 
	uint32_t                                           ImportVersionKey;                                           // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<int32_t>                                    MaterialRemap;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AssetEditorOrbitCameraPosition
/// Size: 0x0028 (0x000000 - 0x000028)
struct FAssetEditorOrbitCameraPosition
{ 
	bool                                               bIsSet;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            CamOrbitPoint;                                              // 0x0004   (0x000C)  
	FVector                                            CamOrbitZoom;                                               // 0x0010   (0x000C)  
	FRotator                                           CamOrbitRotation;                                           // 0x001C   (0x000C)  
};

/// Struct /Script/Engine.MeshSectionInfoMap
/// Size: 0x0050 (0x000000 - 0x000050)
struct FMeshSectionInfoMap
{ 
	SDK_UNDEFINED(80,747) /* TMap<uint32_t, FMeshSectionInfo> */ __um(Map);                                        // 0x0000   (0x0050)  
};

/// Struct /Script/Engine.MeshSectionInfo
/// Size: 0x0008 (0x000000 - 0x000008)
struct FMeshSectionInfo
{ 
	int32_t                                            MaterialIndex;                                              // 0x0000   (0x0004)  
	bool                                               bEnableCollision;                                           // 0x0004   (0x0001)  
	bool                                               bCastShadow;                                                // 0x0005   (0x0001)  
	bool                                               bForceOpaque;                                               // 0x0006   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0007   (0x0001)  MISSED
};

/// Struct /Script/Engine.StaticMeshSourceModel
/// Size: 0x0070 (0x000000 - 0x000070)
struct FStaticMeshSourceModel
{ 
	FMeshBuildSettings                                 BuildSettings;                                              // 0x0000   (0x0030)  
	FMeshReductionSettings                             ReductionSettings;                                          // 0x0030   (0x0024)  
	float                                              LODDistance;                                                // 0x0054   (0x0004)  
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	SDK_UNDEFINED(16,748) /* FString */                __um(SourceImportFilename);                                 // 0x0060   (0x0010)  
};

/// Struct /Script/Engine.StaticMeshOptimizationSettings
/// Size: 0x001C (0x000000 - 0x00001C)
struct FStaticMeshOptimizationSettings
{ 
	SDK_UNDEFINED(1,749) /* TEnumAsByte<EOptimizationType> */ __um(ReductionMethod);                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              NumOfTrianglesPercentage;                                   // 0x0004   (0x0004)  
	float                                              MaxDeviationPercentage;                                     // 0x0008   (0x0004)  
	float                                              WeldingThreshold;                                           // 0x000C   (0x0004)  
	bool                                               bRecalcNormals;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              NormalsThreshold;                                           // 0x0014   (0x0004)  
	char                                               SilhouetteImportance;                                       // 0x0018   (0x0001)  
	char                                               TextureImportance;                                          // 0x0019   (0x0001)  
	char                                               ShadingImportance;                                          // 0x001A   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/Engine.PaintedVertex
/// Size: 0x0020 (0x000000 - 0x000020)
struct FPaintedVertex
{ 
	FVector                                            Position;                                                   // 0x0000   (0x000C)  
	FColor                                             Color;                                                      // 0x000C   (0x0004)  
	FVector4                                           Normal;                                                     // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.StaticMeshVertexColorLODData
/// Size: 0x0028 (0x000000 - 0x000028)
struct FStaticMeshVertexColorLODData
{ 
	TArray<FPaintedVertex>                             PaintedVertices;                                            // 0x0000   (0x0010)  
	TArray<FColor>                                     VertexBufferColors;                                         // 0x0010   (0x0010)  
	uint32_t                                           LODIndex;                                                   // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.StaticMeshComponentInstanceData
/// Size: 0x0040 (0x0000F0 - 0x000130)
struct FStaticMeshComponentInstanceData : FPrimitiveComponentInstanceData
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x00F0   (0x0008)  
	TArray<FStaticMeshVertexColorLODData>              VertexColorLODs;                                            // 0x00F8   (0x0010)  
	TArray<FGuid>                                      CachedStaticLighting;                                       // 0x0108   (0x0010)  
	TArray<FStreamingTextureBuildInfo>                 StreamingTextureData;                                       // 0x0118   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0128   (0x0008)  MISSED
};

/// Struct /Script/Engine.StringCurveKey
/// Size: 0x0018 (0x000000 - 0x000018)
struct FStringCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	SDK_UNDEFINED(16,750) /* FString */                __um(value);                                                // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.StringCurve
/// Size: 0x0020 (0x000068 - 0x000088)
struct FStringCurve : FIndexedCurve
{ 
	SDK_UNDEFINED(16,751) /* FString */                __um(DefaultValue);                                         // 0x0068   (0x0010)  
	TArray<FStringCurveKey>                            Keys;                                                       // 0x0078   (0x0010)  
};

/// Struct /Script/Engine.TextureFormatSettings
/// Size: 0x0002 (0x000000 - 0x000002)
struct FTextureFormatSettings
{ 
	SDK_UNDEFINED(1,752) /* TEnumAsByte<TextureCompressionSettings> */ __um(CompressionSettings);                  // 0x0000   (0x0001)  
	bool                                               CompressionNoAlpha : 1;                                     // 0x0001:0 (0x0001)  
	bool                                               CompressionNone : 1;                                        // 0x0001:1 (0x0001)  
	bool                                               CompressionYCoCg : 1;                                       // 0x0001:2 (0x0001)  
	bool                                               SRGB : 1;                                                   // 0x0001:3 (0x0001)  
};

/// Struct /Script/Engine.TexturePlatformData
/// Size: 0x0030 (0x000000 - 0x000030)
struct FTexturePlatformData
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Engine.TextureSource
/// Size: 0x0030 (0x000000 - 0x000030)
struct FTextureSource
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Engine.TextureSourceBlock
/// Size: 0x0018 (0x000000 - 0x000018)
struct FTextureSourceBlock
{ 
	int32_t                                            BlockX;                                                     // 0x0000   (0x0004)  
	int32_t                                            BlockY;                                                     // 0x0004   (0x0004)  
	int32_t                                            SizeX;                                                      // 0x0008   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x000C   (0x0004)  
	int32_t                                            NumSlices;                                                  // 0x0010   (0x0004)  
	int32_t                                            NumMips;                                                    // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.StreamingRenderAssetPrimitiveInfo
/// Size: 0x0030 (0x000000 - 0x000030)
struct FStreamingRenderAssetPrimitiveInfo
{ 
	class UStreamableRenderAsset*                      RenderAsset;                                                // 0x0000   (0x0008)  
	FBoxSphereBounds                                   Bounds;                                                     // 0x0008   (0x001C)  
	float                                              TexelFactor;                                                // 0x0024   (0x0004)  
	uint32_t                                           PackedRelativeBox;                                          // 0x0028   (0x0004)  
	bool                                               bAllowInvalidTexelFactorWhenUnregistered : 1;               // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x002D   (0x0003)  MISSED
};

/// Struct /Script/Engine.TimeStretchCurveInstance
/// Size: 0x0030 (0x000000 - 0x000030)
struct FTimeStretchCurveInstance
{ 
	bool                                               bHasValidData;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2F];                                      // 0x0001   (0x002F)  MISSED
};

/// Struct /Script/Engine.HardwareCursorReference
/// Size: 0x0010 (0x000000 - 0x000010)
struct FHardwareCursorReference
{ 
	FName                                              CursorPath;                                                 // 0x0000   (0x0008)  
	FVector2D                                          HotSpot;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.EndPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
struct FEndPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.StartPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
struct FStartPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.LevelViewportInfo
/// Size: 0x0020 (0x000000 - 0x000020)
struct FLevelViewportInfo
{ 
	FVector                                            CamPosition;                                                // 0x0000   (0x000C)  
	FRotator                                           CamRotation;                                                // 0x000C   (0x000C)  
	float                                              CamOrthoZoom;                                               // 0x0018   (0x0004)  
	bool                                               CamUpdated;                                                 // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.PSCPoolElem
/// Size: 0x0010 (0x000000 - 0x000010)
struct FPSCPoolElem
{ 
	class UParticleSystemComponent*                    PSC;                                                        // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.PSCPool
/// Size: 0x0038 (0x000000 - 0x000038)
struct FPSCPool
{ 
	TArray<FPSCPoolElem>                               FreeElements;                                               // 0x0000   (0x0010)  
	TArray<class UParticleSystemComponent*>            InUseComponents_Auto;                                       // 0x0010   (0x0010)  
	TArray<class UParticleSystemComponent*>            InUseComponents_Manual;                                     // 0x0020   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Struct /Script/Engine.LightmassWorldInfoSettings
/// Size: 0x004C (0x000000 - 0x00004C)
struct FLightmassWorldInfoSettings
{ 
	float                                              StaticLightingLevelScale;                                   // 0x0000   (0x0004)  
	int32_t                                            NumIndirectLightingBounces;                                 // 0x0004   (0x0004)  
	int32_t                                            NumSkyLightingBounces;                                      // 0x0008   (0x0004)  
	float                                              IndirectLightingQuality;                                    // 0x000C   (0x0004)  
	float                                              IndirectLightingSmoothness;                                 // 0x0010   (0x0004)  
	FColor                                             EnvironmentColor;                                           // 0x0014   (0x0004)  
	float                                              EnvironmentIntensity;                                       // 0x0018   (0x0004)  
	float                                              EmissiveBoost;                                              // 0x001C   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0020   (0x0004)  
	SDK_UNDEFINED(1,753) /* TEnumAsByte<EVolumeLightingMethod> */ __um(VolumeLightingMethod);                      // 0x0024   (0x0001)  
	bool                                               bUseAmbientOcclusion : 1;                                   // 0x0025:0 (0x0001)  
	bool                                               bGenerateAmbientOcclusionMaterialMask : 1;                  // 0x0025:1 (0x0001)  
	bool                                               bVisualizeMaterialDiffuse : 1;                              // 0x0025:2 (0x0001)  
	bool                                               bVisualizeAmbientOcclusion : 1;                             // 0x0025:3 (0x0001)  
	bool                                               bCompressLightmaps : 1;                                     // 0x0025:4 (0x0001)  
	unsigned char                                      UnknownData00_4[0x2];                                       // 0x0026   (0x0002)  MISSED
	float                                              VolumetricLightmapDetailCellSize;                           // 0x0028   (0x0004)  
	float                                              VolumetricLightmapMaximumBrickMemoryMb;                     // 0x002C   (0x0004)  
	float                                              VolumetricLightmapSphericalHarmonicSmoothing;               // 0x0030   (0x0004)  
	float                                              VolumeLightSamplePlacementScale;                            // 0x0034   (0x0004)  
	float                                              DirectIlluminationOcclusionFraction;                        // 0x0038   (0x0004)  
	float                                              IndirectIlluminationOcclusionFraction;                      // 0x003C   (0x0004)  
	float                                              OcclusionExponent;                                          // 0x0040   (0x0004)  
	float                                              FullyOccludedSamplesFraction;                               // 0x0044   (0x0004)  
	float                                              MaxOcclusionDistance;                                       // 0x0048   (0x0004)  
};

